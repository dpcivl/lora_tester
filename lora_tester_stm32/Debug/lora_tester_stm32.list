
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a024  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000207c  0801a1f4  0801a1f4  0001b1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c270  0801c270  0001e208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c270  0801c270  0001d270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c278  0801c278  0001e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c278  0801c278  0001d278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c27c  0801c27c  0001d27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  0801c280  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c8  0801c348  0001e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000168  0801c3e8  0001e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009e1c  20000208  0801c488  0001e208  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000a024  0801c488  0001f024  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004640e  00000000  00000000  0001e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009c8c  00000000  00000000  00064646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003958  00000000  00000000  0006e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c84  00000000  00000000  00071c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000394c5  00000000  00000000  000748b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000505f8  00000000  00000000  000add79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d4b9  00000000  00000000  000fe371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022b82a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f7e8  00000000  00000000  0022b870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0023b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a1dc 	.word	0x0801a1dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0801a1dc 	.word	0x0801a1dc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 f918 	bl	8004860 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f019 f9d2 	bl	80199e8 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f019 f926 	bl	80198c0 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 f8e8 	bl	8004860 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 f9b9 	bl	8004a08 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 f8da 	bl	8004860 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 f8d2 	bl	8004860 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 f8cd 	bl	8004860 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0801a1f4 	.word	0x0801a1f4
 80006d4:	0801a210 	.word	0x0801a210
 80006d8:	0801a218 	.word	0x0801a218
 80006dc:	0801a230 	.word	0x0801a230
 80006e0:	0801a260 	.word	0x0801a260
 80006e4:	0801a298 	.word	0x0801a298

080006e8 <get_state_name>:
#include <stddef.h>
#include <stdio.h>
#include <string.h>

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0801a2c8 	.word	0x0801a2c8
 800076c:	0801a2d0 	.word	0x0801a2d0
 8000770:	0801a2dc 	.word	0x0801a2dc
 8000774:	0801a2e4 	.word	0x0801a2e4
 8000778:	0801a2f0 	.word	0x0801a2f0
 800077c:	0801a300 	.word	0x0801a300
 8000780:	0801a310 	.word	0x0801a310
 8000784:	0801a324 	.word	0x0801a324
 8000788:	0801a338 	.word	0x0801a338
 800078c:	0801a344 	.word	0x0801a344
 8000790:	0801a34c 	.word	0x0801a34c
 8000794:	0801a354 	.word	0x0801a354

08000798 <LoraStarter_Process>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b0bf      	sub	sp, #252	@ 0xfc
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	f000 8283 	beq.w	8000cb0 <LoraStarter_Process+0x518>

    LoraState old_state = ctx->state;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	f200 825b 	bhi.w	8000c72 <LoraStarter_Process+0x4da>
 80007bc:	a201      	add	r2, pc, #4	@ (adr r2, 80007c4 <LoraStarter_Process+0x2c>)
 80007be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c2:	bf00      	nop
 80007c4:	080007e9 	.word	0x080007e9
 80007c8:	08000837 	.word	0x08000837
 80007cc:	0800088d 	.word	0x0800088d
 80007d0:	08000947 	.word	0x08000947
 80007d4:	0800095d 	.word	0x0800095d
 80007d8:	080009ab 	.word	0x080009ab
 80007dc:	08000a69 	.word	0x08000a69
 80007e0:	08000b99 	.word	0x08000b99
 80007e4:	08000bff 	.word	0x08000bff
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d102      	bne.n	8000808 <LoraStarter_Process+0x70>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <LoraStarter_Process+0x7e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4aaa      	ldr	r2, [pc, #680]	@ (8000abc <LoraStarter_Process+0x324>)
 8000814:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082c:	49a4      	ldr	r1, [pc, #656]	@ (8000ac0 <LoraStarter_Process+0x328>)
 800082e:	2001      	movs	r0, #1
 8000830:	f004 f816 	bl	8004860 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000834:	e224      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	da20      	bge.n	8000884 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	1c59      	adds	r1, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68d8      	ldr	r0, [r3, #12]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4603      	mov	r3, r0
 800085e:	460a      	mov	r2, r1
 8000860:	4998      	ldr	r1, [pc, #608]	@ (8000ac4 <LoraStarter_Process+0x32c>)
 8000862:	2000      	movs	r0, #0
 8000864:	f003 fffc 	bl	8004860 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fec8 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2202      	movs	r2, #2
 8000880:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000882:	e1fd      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2203      	movs	r2, #3
 8000888:	701a      	strb	r2, [r3, #0]
            break;
 800088a:	e1f9      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 81f1 	beq.w	8000c76 <LoraStarter_Process+0x4de>
                if (is_response_ok(uart_rx)) {
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f000 fa91 	bl	8000dbc <is_response_ok>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d010      	beq.n	80008c2 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	461a      	mov	r2, r3
 80008a8:	4987      	ldr	r1, [pc, #540]	@ (8000ac8 <LoraStarter_Process+0x330>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f003 ffd8 	bl	8004860 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 80008c0:	e1d9      	b.n	8000c76 <LoraStarter_Process+0x4de>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 80008c2:	4982      	ldr	r1, [pc, #520]	@ (8000acc <LoraStarter_Process+0x334>)
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f019 f8aa 	bl	8019a1e <strstr>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d107      	bne.n	80008e0 <LoraStarter_Process+0x148>
 80008d0:	497f      	ldr	r1, [pc, #508]	@ (8000ad0 <LoraStarter_Process+0x338>)
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f019 f8a3 	bl	8019a1e <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 81cb 	beq.w	8000c76 <LoraStarter_Process+0x4de>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	497a      	ldr	r1, [pc, #488]	@ (8000ad4 <LoraStarter_Process+0x33c>)
 80008ea:	2002      	movs	r0, #2
 80008ec:	f003 ffb8 	bl	8004860 <LOGGER_SendFormatted>
                    ctx->error_count++;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	dc0d      	bgt.n	800091e <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	3301      	adds	r3, #1
 800090e:	4972      	ldr	r1, [pc, #456]	@ (8000ad8 <LoraStarter_Process+0x340>)
 8000910:	2001      	movs	r0, #1
 8000912:	f003 ffa5 	bl	8004860 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
            break;
 800091c:	e1ab      	b.n	8000c76 <LoraStarter_Process+0x4de>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	461a      	mov	r2, r3
 8000926:	496d      	ldr	r1, [pc, #436]	@ (8000adc <LoraStarter_Process+0x344>)
 8000928:	2002      	movs	r0, #2
 800092a:	f003 ff99 	bl	8004860 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
            break;
 8000944:	e197      	b.n	8000c76 <LoraStarter_Process+0x4de>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 8000946:	4966      	ldr	r1, [pc, #408]	@ (8000ae0 <LoraStarter_Process+0x348>)
 8000948:	2001      	movs	r0, #1
 800094a:	f003 ff89 	bl	8004860 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 800094e:	4865      	ldr	r0, [pc, #404]	@ (8000ae4 <LoraStarter_Process+0x34c>)
 8000950:	f7ff fe5c 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2204      	movs	r2, #4
 8000958:	701a      	strb	r2, [r3, #0]
            break;
 800095a:	e191      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 818b 	beq.w	8000c7a <LoraStarter_Process+0x4e2>
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f000 fa91 	bl	8000e8c <is_join_response_ok>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 8184 	beq.w	8000c7a <LoraStarter_Process+0x4e2>
                LORA_LOG_JOIN_SUCCESS();
 8000972:	495d      	ldr	r1, [pc, #372]	@ (8000ae8 <LoraStarter_Process+0x350>)
 8000974:	2001      	movs	r0, #1
 8000976:	f003 ff73 	bl	8004860 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2205      	movs	r2, #5
 800097e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	461a      	mov	r2, r3
 80009a0:	4952      	ldr	r1, [pc, #328]	@ (8000aec <LoraStarter_Process+0x354>)
 80009a2:	2001      	movs	r0, #1
 80009a4:	f003 ff5c 	bl	8004860 <LOGGER_SendFormatted>
            }
            break;
 80009a8:	e167      	b.n	8000c7a <LoraStarter_Process+0x4e2>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <LoraStarter_Process+0x220>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	e000      	b.n	80009ba <LoraStarter_Process+0x222>
 80009b8:	4b40      	ldr	r3, [pc, #256]	@ (8000abc <LoraStarter_Process+0x324>)
 80009ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 80009be:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80009c2:	f7ff fc2f 	bl	8000224 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80009d2:	e014      	b.n	80009fe <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 80009d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	f107 020c 	add.w	r2, r7, #12
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009e4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4940      	ldr	r1, [pc, #256]	@ (8000af0 <LoraStarter_Process+0x358>)
 80009f0:	f018 ff9c 	bl	801992c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 80009f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009f8:	3301      	adds	r3, #1
 80009fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80009fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a06:	429a      	cmp	r2, r3
 8000a08:	da03      	bge.n	8000a12 <LoraStarter_Process+0x27a>
 8000a0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a0e:	2b1e      	cmp	r3, #30
 8000a10:	dde0      	ble.n	80009d4 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	33f0      	adds	r3, #240	@ 0xf0
 8000a1a:	443b      	add	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000a2a:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <LoraStarter_Process+0x35c>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	f018 ff47 	bl	80198c0 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a36:	4930      	ldr	r1, [pc, #192]	@ (8000af8 <LoraStarter_Process+0x360>)
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f003 ff11 	bl	8004860 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000a3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fde2 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4927      	ldr	r1, [pc, #156]	@ (8000afc <LoraStarter_Process+0x364>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f003 fefd 	bl	8004860 <LOGGER_SendFormatted>
            }
            break;
 8000a66:	e10b      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 8107 	beq.w	8000c7e <LoraStarter_Process+0x4e6>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000a70:	6838      	ldr	r0, [r7, #0]
 8000a72:	f000 fa8f 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000a7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d03f      	beq.n	8000b04 <LoraStarter_Process+0x36c>
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	f300 8080 	bgt.w	8000b8a <LoraStarter_Process+0x3f2>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <LoraStarter_Process+0x2fc>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d04c      	beq.n	8000b2c <LoraStarter_Process+0x394>
 8000a92:	e07a      	b.n	8000b8a <LoraStarter_Process+0x3f2>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000a94:	491a      	ldr	r1, [pc, #104]	@ (8000b00 <LoraStarter_Process+0x368>)
 8000a96:	2001      	movs	r0, #1
 8000a98:	f003 fee2 	bl	8004860 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000ab0:	f003 fe6c 	bl	800478c <TIME_GetCurrentMs>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]
                        break;
 8000aba:	e06c      	b.n	8000b96 <LoraStarter_Process+0x3fe>
 8000abc:	0801a378 	.word	0x0801a378
 8000ac0:	0801a380 	.word	0x0801a380
 8000ac4:	0801a3b8 	.word	0x0801a3b8
 8000ac8:	0801a3dc 	.word	0x0801a3dc
 8000acc:	0801a34c 	.word	0x0801a34c
 8000ad0:	0801a3fc 	.word	0x0801a3fc
 8000ad4:	0801a414 	.word	0x0801a414
 8000ad8:	0801a434 	.word	0x0801a434
 8000adc:	0801a460 	.word	0x0801a460
 8000ae0:	0801a49c 	.word	0x0801a49c
 8000ae4:	0801a4b8 	.word	0x0801a4b8
 8000ae8:	0801a4c4 	.word	0x0801a4c4
 8000aec:	0801a4dc 	.word	0x0801a4dc
 8000af0:	0801a50c 	.word	0x0801a50c
 8000af4:	0801a514 	.word	0x0801a514
 8000af8:	0801a524 	.word	0x0801a524
 8000afc:	0801a53c 	.word	0x0801a53c
 8000b00:	0801a554 	.word	0x0801a554
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b04:	496c      	ldr	r1, [pc, #432]	@ (8000cb8 <LoraStarter_Process+0x520>)
 8000b06:	2002      	movs	r0, #2
 8000b08:	f003 feaa 	bl	8004860 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2207      	movs	r2, #7
 8000b10:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b20:	f003 fe34 	bl	800478c <TIME_GetCurrentMs>
 8000b24:	4602      	mov	r2, r0
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	611a      	str	r2, [r3, #16]
                        break;
 8000b2a:	e034      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000b2c:	4a63      	ldr	r2, [pc, #396]	@ (8000cbc <LoraStarter_Process+0x524>)
 8000b2e:	4964      	ldr	r1, [pc, #400]	@ (8000cc0 <LoraStarter_Process+0x528>)
 8000b30:	2002      	movs	r0, #2
 8000b32:	f003 fe95 	bl	8004860 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	461a      	mov	r2, r3
 8000b46:	495f      	ldr	r1, [pc, #380]	@ (8000cc4 <LoraStarter_Process+0x52c>)
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f003 fe89 	bl	8004860 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <LoraStarter_Process+0x3ca>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a1a      	ldr	r2, [r3, #32]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	da0b      	bge.n	8000b7a <LoraStarter_Process+0x3e2>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a1a      	ldr	r2, [r3, #32]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b6a:	4957      	ldr	r1, [pc, #348]	@ (8000cc8 <LoraStarter_Process+0x530>)
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f003 fe77 	bl	8004860 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2208      	movs	r2, #8
 8000b76:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000b78:	e00d      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000b7a:	4954      	ldr	r1, [pc, #336]	@ (8000ccc <LoraStarter_Process+0x534>)
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f003 fe6f 	bl	8004860 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	220a      	movs	r2, #10
 8000b86:	701a      	strb	r2, [r3, #0]
                        break;
 8000b88:	e005      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4950      	ldr	r1, [pc, #320]	@ (8000cd0 <LoraStarter_Process+0x538>)
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f003 fe66 	bl	8004860 <LOGGER_SendFormatted>
                        break;
 8000b94:	bf00      	nop
                }
            }
            break;
 8000b96:	e072      	b.n	8000c7e <LoraStarter_Process+0x4e6>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000b98:	f003 fdf8 	bl	800478c <TIME_GetCurrentMs>
 8000b9c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <LoraStarter_Process+0x416>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	e001      	b.n	8000bb2 <LoraStarter_Process+0x41a>
 8000bae:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d809      	bhi.n	8000bdc <LoraStarter_Process+0x444>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000bc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bcc:	4941      	ldr	r1, [pc, #260]	@ (8000cd4 <LoraStarter_Process+0x53c>)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f003 fe46 	bl	8004860 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2205      	movs	r2, #5
 8000bd8:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000bda:	e051      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bea:	4413      	add	r3, r2
 8000bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000bf0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000bf4:	4938      	ldr	r1, [pc, #224]	@ (8000cd8 <LoraStarter_Process+0x540>)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f003 fe32 	bl	8004860 <LOGGER_SendFormatted>
            break;
 8000bfc:	e040      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000bfe:	f003 fdc5 	bl	800478c <TIME_GetCurrentMs>
 8000c02:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10b      	bne.n	8000c26 <LoraStarter_Process+0x48e>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c0e:	4933      	ldr	r1, [pc, #204]	@ (8000cdc <LoraStarter_Process+0x544>)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f003 fe25 	bl	8004860 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2203      	movs	r2, #3
 8000c22:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000c24:	e02c      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c2e:	1ad2      	subs	r2, r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d30e      	bcc.n	8000c56 <LoraStarter_Process+0x4be>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4928      	ldr	r1, [pc, #160]	@ (8000ce0 <LoraStarter_Process+0x548>)
 8000c40:	2000      	movs	r0, #0
 8000c42:	f003 fe0d 	bl	8004860 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2203      	movs	r2, #3
 8000c52:	701a      	strb	r2, [r3, #0]
            break;
 8000c54:	e014      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000c62:	1acb      	subs	r3, r1, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	491e      	ldr	r1, [pc, #120]	@ (8000ce4 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f003 fdf8 	bl	8004860 <LOGGER_SendFormatted>
            break;
 8000c70:	e006      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000c72:	bf00      	nop
 8000c74:	e004      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c76:	bf00      	nop
 8000c78:	e002      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c7a:	bf00      	nop
 8000c7c:	e000      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c7e:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d012      	beq.n	8000cb2 <LoraStarter_Process+0x51a>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000c8c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fd29 	bl	80006e8 <get_state_name>
 8000c96:	4604      	mov	r4, r0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd23 	bl	80006e8 <get_state_name>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	4910      	ldr	r1, [pc, #64]	@ (8000ce8 <LoraStarter_Process+0x550>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f003 fdd9 	bl	8004860 <LOGGER_SendFormatted>
 8000cae:	e000      	b.n	8000cb2 <LoraStarter_Process+0x51a>
    if (ctx == NULL) return;
 8000cb0:	bf00      	nop
    }
}
 8000cb2:	37f4      	adds	r7, #244	@ 0xf4
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	0801a56c 	.word	0x0801a56c
 8000cbc:	0801a580 	.word	0x0801a580
 8000cc0:	0801a590 	.word	0x0801a590
 8000cc4:	0801a5a8 	.word	0x0801a5a8
 8000cc8:	0801a5c0 	.word	0x0801a5c0
 8000ccc:	0801a5dc 	.word	0x0801a5dc
 8000cd0:	0801a600 	.word	0x0801a600
 8000cd4:	0801a61c 	.word	0x0801a61c
 8000cd8:	0801a658 	.word	0x0801a658
 8000cdc:	0801a68c 	.word	0x0801a68c
 8000ce0:	0801a6a4 	.word	0x0801a6a4
 8000ce4:	0801a6cc 	.word	0x0801a6cc
 8000ce8:	0801a700 	.word	0x0801a700

08000cec <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000cf6:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <Network_SendBinary+0x8c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f083 0301 	eor.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000d04:	f06f 0301 	mvn.w	r3, #1
 8000d08:	e032      	b.n	8000d70 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <Network_SendBinary+0x2a>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000d16:	f06f 0303 	mvn.w	r3, #3
 8000d1a:	e029      	b.n	8000d70 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <Network_SendBinary+0x90>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <Network_SendBinary+0x3e>
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d002      	beq.n	8000d2e <Network_SendBinary+0x42>
 8000d28:	e020      	b.n	8000d6c <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e020      	b.n	8000d70 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f985 	bl	8001040 <SDStorage_WriteLog>
 8000d36:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <Network_SendBinary+0x6a>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dc10      	bgt.n	8000d66 <Network_SendBinary+0x7a>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f113 0f05 	cmn.w	r3, #5
 8000d4a:	d009      	beq.n	8000d60 <Network_SendBinary+0x74>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f113 0f02 	cmn.w	r3, #2
 8000d52:	d002      	beq.n	8000d5a <Network_SendBinary+0x6e>
 8000d54:	e007      	b.n	8000d66 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e00a      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000d5a:	f06f 0301 	mvn.w	r3, #1
 8000d5e:	e007      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000d60:	f06f 0303 	mvn.w	r3, #3
 8000d64:	e004      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e001      	b.n	8000d70 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000224 	.word	0x20000224
 8000d7c:	20000225 	.word	0x20000225

08000d80 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <Network_IsConnected+0x34>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10f      	bne.n	8000dac <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <Network_IsConnected+0x38>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <Network_IsConnected+0x22>
 8000d94:	f000 f9c0 	bl	8001118 <SDStorage_IsReady>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <Network_IsConnected+0x22>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <Network_IsConnected+0x24>
 8000da2:	2300      	movs	r3, #0
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	e001      	b.n	8000db0 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <Network_IsConnected+0x38>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000225 	.word	0x20000225
 8000db8:	20000224 	.word	0x20000224

08000dbc <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d105      	bne.n	8000dd6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000dca:	4925      	ldr	r1, [pc, #148]	@ (8000e60 <is_response_ok+0xa4>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f003 fd47 	bl	8004860 <LOGGER_SendFormatted>
        return false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e03f      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4922      	ldr	r1, [pc, #136]	@ (8000e64 <is_response_ok+0xa8>)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f003 fd40 	bl	8004860 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000de0:	4921      	ldr	r1, [pc, #132]	@ (8000e68 <is_response_ok+0xac>)
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fa14 	bl	8000210 <strcmp>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d105      	bne.n	8000dfa <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000dee:	491f      	ldr	r1, [pc, #124]	@ (8000e6c <is_response_ok+0xb0>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f003 fd35 	bl	8004860 <LOGGER_SendFormatted>
        return true;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e02d      	b.n	8000e56 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000dfa:	491d      	ldr	r1, [pc, #116]	@ (8000e70 <is_response_ok+0xb4>)
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fa07 	bl	8000210 <strcmp>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d105      	bne.n	8000e14 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000e08:	491a      	ldr	r1, [pc, #104]	@ (8000e74 <is_response_ok+0xb8>)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f003 fd28 	bl	8004860 <LOGGER_SendFormatted>
        return true;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e020      	b.n	8000e56 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000e14:	4918      	ldr	r1, [pc, #96]	@ (8000e78 <is_response_ok+0xbc>)
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff f9fa 	bl	8000210 <strcmp>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000e22:	4916      	ldr	r1, [pc, #88]	@ (8000e7c <is_response_ok+0xc0>)
 8000e24:	2000      	movs	r0, #0
 8000e26:	f003 fd1b 	bl	8004860 <LOGGER_SendFormatted>
        return true;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e013      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000e2e:	4914      	ldr	r1, [pc, #80]	@ (8000e80 <is_response_ok+0xc4>)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f018 fdf4 	bl	8019a1e <strstr>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4911      	ldr	r1, [pc, #68]	@ (8000e84 <is_response_ok+0xc8>)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f003 fd0d 	bl	8004860 <LOGGER_SendFormatted>
        return true;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e005      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	490e      	ldr	r1, [pc, #56]	@ (8000e88 <is_response_ok+0xcc>)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f003 fd06 	bl	8004860 <LOGGER_SendFormatted>
    return false;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	0801a720 	.word	0x0801a720
 8000e64:	0801a750 	.word	0x0801a750
 8000e68:	0801a780 	.word	0x0801a780
 8000e6c:	0801a784 	.word	0x0801a784
 8000e70:	0801a7ac 	.word	0x0801a7ac
 8000e74:	0801a7b4 	.word	0x0801a7b4
 8000e78:	0801a7e8 	.word	0x0801a7e8
 8000e7c:	0801a7ec 	.word	0x0801a7ec
 8000e80:	0801a820 	.word	0x0801a820
 8000e84:	0801a828 	.word	0x0801a828
 8000e88:	0801a85c 	.word	0x0801a85c

08000e8c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e98:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e9c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000e9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ea2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000eac:	4934      	ldr	r1, [pc, #208]	@ (8000f80 <is_join_response_ok+0xf4>)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f003 fcd6 	bl	8004860 <LOGGER_SendFormatted>
        return false;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e05e      	b.n	8000f76 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000eb8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ebc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4930      	ldr	r1, [pc, #192]	@ (8000f84 <is_join_response_ok+0xf8>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f003 fccb 	bl	8004860 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000eca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ece:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ed2:	f107 0008 	add.w	r0, r7, #8
 8000ed6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	f018 fd8c 	bl	80199f8 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000ee0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ee4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ef6:	e013      	b.n	8000f20 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000ef8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b0d      	cmp	r3, #13
 8000f00:	d004      	beq.n	8000f0c <is_join_response_ok+0x80>
 8000f02:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b0a      	cmp	r3, #10
 8000f0a:	d104      	bne.n	8000f16 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000f0c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
            break;
 8000f14:	e009      	b.n	8000f2a <is_join_response_ok+0x9e>
        }
        pos++;
 8000f16:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f20:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e6      	bne.n	8000ef8 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4916      	ldr	r1, [pc, #88]	@ (8000f88 <is_join_response_ok+0xfc>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f96d 	bl	8000210 <strcmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000f44:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <is_join_response_ok+0xd4>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 8000f4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f50:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <is_join_response_ok+0x100>)
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f003 fc81 	bl	8004860 <LOGGER_SendFormatted>
 8000f5e:	e008      	b.n	8000f72 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000f60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f64:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4909      	ldr	r1, [pc, #36]	@ (8000f90 <is_join_response_ok+0x104>)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f003 fc77 	bl	8004860 <LOGGER_SendFormatted>
    }
    
    return result;
 8000f72:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0801a888 	.word	0x0801a888
 8000f84:	0801a8c0 	.word	0x0801a8c0
 8000f88:	0801a8f0 	.word	0x0801a8f0
 8000f8c:	0801a8fc 	.word	0x0801a8fc
 8000f90:	0801a92c 	.word	0x0801a92c

08000f94 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d105      	bne.n	8000fae <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8000fa2:	491e      	ldr	r1, [pc, #120]	@ (800101c <ResponseHandler_ParseSendResponse+0x88>)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f003 fc5b 	bl	8004860 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e031      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	491b      	ldr	r1, [pc, #108]	@ (8001020 <ResponseHandler_ParseSendResponse+0x8c>)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f003 fc54 	bl	8004860 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8000fb8:	491a      	ldr	r1, [pc, #104]	@ (8001024 <ResponseHandler_ParseSendResponse+0x90>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f018 fd2f 	bl	8019a1e <strstr>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8000fc6:	4918      	ldr	r1, [pc, #96]	@ (8001028 <ResponseHandler_ParseSendResponse+0x94>)
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f003 fc49 	bl	8004860 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e01f      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8000fd2:	4916      	ldr	r1, [pc, #88]	@ (800102c <ResponseHandler_ParseSendResponse+0x98>)
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f018 fd22 	bl	8019a1e <strstr>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8000fe0:	4913      	ldr	r1, [pc, #76]	@ (8001030 <ResponseHandler_ParseSendResponse+0x9c>)
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f003 fc3c 	bl	8004860 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e012      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8000fec:	4911      	ldr	r1, [pc, #68]	@ (8001034 <ResponseHandler_ParseSendResponse+0xa0>)
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff f90e 	bl	8000210 <strcmp>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8000ffa:	490f      	ldr	r1, [pc, #60]	@ (8001038 <ResponseHandler_ParseSendResponse+0xa4>)
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f003 fc2f 	bl	8004860 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001002:	2302      	movs	r3, #2
 8001004:	e005      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <ResponseHandler_ParseSendResponse+0xa8>)
 800100a:	2000      	movs	r0, #0
 800100c:	f003 fc28 	bl	8004860 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8001010:	2303      	movs	r3, #3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0801a958 	.word	0x0801a958
 8001020:	0801a98c 	.word	0x0801a98c
 8001024:	0801a9bc 	.word	0x0801a9bc
 8001028:	0801a9d4 	.word	0x0801a9d4
 800102c:	0801aa04 	.word	0x0801aa04
 8001030:	0801aa20 	.word	0x0801aa20
 8001034:	0801aa54 	.word	0x0801aa54
 8001038:	0801aa5c 	.word	0x0801aa5c
 800103c:	0801aa88 	.word	0x0801aa88

08001040 <SDStorage_WriteLog>:
    
    return SDSTORAGE_OK;
}

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <SDStorage_WriteLog+0xc4>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	f083 0301 	eor.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 8001058:	f06f 0301 	mvn.w	r3, #1
 800105c:	e04e      	b.n	80010fc <SDStorage_WriteLog+0xbc>
    }
    
    if (data == NULL || size == 0) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <SDStorage_WriteLog+0x2a>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 800106a:	f06f 0304 	mvn.w	r3, #4
 800106e:	e045      	b.n	80010fc <SDStorage_WriteLog+0xbc>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <SDStorage_WriteLog+0xc8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 8001078:	4b24      	ldr	r3, [pc, #144]	@ (800110c <SDStorage_WriteLog+0xcc>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 8001080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001084:	d907      	bls.n	8001096 <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 8001086:	f000 f853 	bl	8001130 <SDStorage_CreateNewLogFile>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 8001090:	f06f 0302 	mvn.w	r3, #2
 8001094:	e032      	b.n	80010fc <SDStorage_WriteLog+0xbc>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs를 사용한 파일 쓰기
    if (!g_file_open) {
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <SDStorage_WriteLog+0xd0>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f083 0301 	eor.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00d      	beq.n	80010c0 <SDStorage_WriteLog+0x80>
        if (f_open(&g_log_file, g_current_log_file, FA_WRITE | FA_OPEN_APPEND) != FR_OK) {
 80010a4:	2232      	movs	r2, #50	@ 0x32
 80010a6:	4918      	ldr	r1, [pc, #96]	@ (8001108 <SDStorage_WriteLog+0xc8>)
 80010a8:	481a      	ldr	r0, [pc, #104]	@ (8001114 <SDStorage_WriteLog+0xd4>)
 80010aa:	f014 fcac 	bl	8015a06 <f_open>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <SDStorage_WriteLog+0x7a>
            return SDSTORAGE_FILE_ERROR;
 80010b4:	f06f 0302 	mvn.w	r3, #2
 80010b8:	e020      	b.n	80010fc <SDStorage_WriteLog+0xbc>
        }
        g_file_open = true;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <SDStorage_WriteLog+0xd0>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
    }
    
    UINT bytes_written;
    if (f_write(&g_log_file, data, size, &bytes_written) != FR_OK) {
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4812      	ldr	r0, [pc, #72]	@ (8001114 <SDStorage_WriteLog+0xd4>)
 80010ca:	f014 fe5d 	bl	8015d88 <f_write>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <SDStorage_WriteLog+0x9a>
        return SDSTORAGE_FILE_ERROR;
 80010d4:	f06f 0302 	mvn.w	r3, #2
 80010d8:	e010      	b.n	80010fc <SDStorage_WriteLog+0xbc>
    }
    
    if (bytes_written != size) {
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d002      	beq.n	80010e8 <SDStorage_WriteLog+0xa8>
        return SDSTORAGE_DISK_FULL;
 80010e2:	f06f 0303 	mvn.w	r3, #3
 80010e6:	e009      	b.n	80010fc <SDStorage_WriteLog+0xbc>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    f_sync(&g_log_file);
 80010e8:	480a      	ldr	r0, [pc, #40]	@ (8001114 <SDStorage_WriteLog+0xd4>)
 80010ea:	f014 fff1 	bl	80160d0 <f_sync>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <SDStorage_WriteLog+0xcc>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <SDStorage_WriteLog+0xcc>)
 80010f8:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000226 	.word	0x20000226
 8001108:	20000228 	.word	0x20000228
 800110c:	20000328 	.word	0x20000328
 8001110:	2000055c 	.word	0x2000055c
 8001114:	2000032c 	.word	0x2000032c

08001118 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
    return g_sd_ready;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <SDStorage_IsReady+0x14>)
 800111e:	781b      	ldrb	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000226 	.word	0x20000226

08001130 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <SDStorage_CreateNewLogFile+0x70>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <SDStorage_CreateNewLogFile+0x18>
        return SDSTORAGE_NOT_READY;
 8001142:	f06f 0301 	mvn.w	r3, #1
 8001146:	e029      	b.n	800119c <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <SDStorage_CreateNewLogFile+0x74>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <SDStorage_CreateNewLogFile+0x2c>
        f_close(&g_log_file);
 8001150:	4815      	ldr	r0, [pc, #84]	@ (80011a8 <SDStorage_CreateNewLogFile+0x78>)
 8001152:	f015 f846 	bl	80161e2 <f_close>
        g_file_open = false;
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <SDStorage_CreateNewLogFile+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	4812      	ldr	r0, [pc, #72]	@ (80011ac <SDStorage_CreateNewLogFile+0x7c>)
 8001162:	f000 f827 	bl	80011b4 <_generate_log_filename>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <SDStorage_CreateNewLogFile+0x42>
        return SDSTORAGE_ERROR;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	e014      	b.n	800119c <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 파일 생성 확인
#ifdef STM32F746xx
    if (f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE) != FR_OK) {
 8001172:	2206      	movs	r2, #6
 8001174:	490d      	ldr	r1, [pc, #52]	@ (80011ac <SDStorage_CreateNewLogFile+0x7c>)
 8001176:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <SDStorage_CreateNewLogFile+0x78>)
 8001178:	f014 fc45 	bl	8015a06 <f_open>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <SDStorage_CreateNewLogFile+0x58>
        return SDSTORAGE_FILE_ERROR;
 8001182:	f06f 0302 	mvn.w	r3, #2
 8001186:	e009      	b.n	800119c <SDStorage_CreateNewLogFile+0x6c>
    }
    f_close(&g_log_file);
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <SDStorage_CreateNewLogFile+0x78>)
 800118a:	f015 f82a 	bl	80161e2 <f_close>
    g_file_open = false;
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <SDStorage_CreateNewLogFile+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    // 실제 파일 생성 없이 성공으로 처리
#endif
    
    g_current_log_size = 0;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SDStorage_CreateNewLogFile+0x80>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000226 	.word	0x20000226
 80011a4:	2000055c 	.word	0x2000055c
 80011a8:	2000032c 	.word	0x2000032c
 80011ac:	20000228 	.word	0x20000228
 80011b0:	20000328 	.word	0x20000328

080011b4 <_generate_log_filename>:
#endif
    return SDSTORAGE_OK;
}

static int _generate_log_filename(char* filename, size_t max_len)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	b095      	sub	sp, #84	@ 0x54
 80011b8:	af08      	add	r7, sp, #32
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    uint32_t timestamp = _get_current_timestamp();
 80011be:	f000 f86f 	bl	80012a0 <_get_current_timestamp>
 80011c2:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 80011c4:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 80011c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80011d0:	2301      	movs	r3, #1
 80011d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4826      	ldr	r0, [pc, #152]	@ (800128c <_generate_log_filename+0xd8>)
 80011f2:	f00a f991 	bl	800b518 <HAL_RTC_GetTime>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d11c      	bne.n	8001236 <_generate_log_filename+0x82>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4821      	ldr	r0, [pc, #132]	@ (800128c <_generate_log_filename+0xd8>)
 8001206:	f00a fa69 	bl	800b6dc <HAL_RTC_GetDate>
 800120a:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 800120c:	2b00      	cmp	r3, #0
 800120e:	d112      	bne.n	8001236 <_generate_log_filename+0x82>
        year = 2000 + sDate.Year;
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001216:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 8001218:	7a7b      	ldrb	r3, [r7, #9]
 800121a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 800121e:	7abb      	ldrb	r3, [r7, #10]
 8001220:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 8001224:	7b3b      	ldrb	r3, [r7, #12]
 8001226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 800122a:	7b7b      	ldrb	r3, [r7, #13]
 800122c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    hour = 10;
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    int result = snprintf(filename, max_len, 
 8001236:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001238:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800123c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001240:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8001244:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 8001248:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 800124c:	4e10      	ldr	r6, [pc, #64]	@ (8001290 <_generate_log_filename+0xdc>)
 800124e:	9607      	str	r6, [sp, #28]
 8001250:	9506      	str	r5, [sp, #24]
 8001252:	9405      	str	r4, [sp, #20]
 8001254:	9004      	str	r0, [sp, #16]
 8001256:	9103      	str	r1, [sp, #12]
 8001258:	9202      	str	r2, [sp, #8]
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <_generate_log_filename+0xe0>)
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <_generate_log_filename+0xe4>)
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <_generate_log_filename+0xe8>)
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f018 fb2a 	bl	80198c0 <sniprintf>
 800126c:	6238      	str	r0, [r7, #32]
                         SDSTORAGE_LOG_DIR,
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db03      	blt.n	800127c <_generate_log_filename+0xc8>
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d802      	bhi.n	8001282 <_generate_log_filename+0xce>
        return SDSTORAGE_ERROR;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	e000      	b.n	8001284 <_generate_log_filename+0xd0>
    }
    
    return SDSTORAGE_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3734      	adds	r7, #52	@ 0x34
 8001288:	46bd      	mov	sp, r7
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128c:	20000b38 	.word	0x20000b38
 8001290:	0801ab58 	.word	0x0801ab58
 8001294:	0801ab60 	.word	0x0801ab60
 8001298:	0801ab28 	.word	0x0801ab28
 800129c:	0801ab34 	.word	0x0801ab34

080012a0 <_get_current_timestamp>:

static uint32_t _get_current_timestamp(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    return HAL_GetTick();
 80012a4:	f003 ff0a 	bl	80050bc <HAL_GetTick>
 80012a8:	4603      	mov	r3, r0
#else
    return (uint32_t)time(NULL);
#endif
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}

080012ae <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a07      	ldr	r2, [pc, #28]	@ (800130c <vApplicationGetIdleTaskMemory+0x2c>)
 80012f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <vApplicationGetIdleTaskMemory+0x30>)
 80012f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2280      	movs	r2, #128	@ 0x80
 80012fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000560 	.word	0x20000560
 8001310:	200005b8 	.word	0x200005b8

08001314 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART DMA 콜백 함수들
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_UART_RxCpltCallback+0x38>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10e      	bne.n	8001344 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_UART_RxCpltCallback+0x3c>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_UART_RxCpltCallback+0x40>)
 800132e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001332:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_UART_RxCpltCallback+0x40>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4906      	ldr	r1, [pc, #24]	@ (8001358 <HAL_UART_RxCpltCallback+0x44>)
 800133e:	2001      	movs	r0, #1
 8001340:	f003 fa8e 	bl	8004860 <LOGGER_SendFormatted>
  }
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40011400 	.word	0x40011400
 8001350:	20001510 	.word	0x20001510
 8001354:	20001512 	.word	0x20001512
 8001358:	0801ab6c 	.word	0x0801ab6c

0800135c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <HAL_UART_RxHalfCpltCallback+0x24>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d103      	bne.n	8001376 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 800136e:	4905      	ldr	r1, [pc, #20]	@ (8001384 <HAL_UART_RxHalfCpltCallback+0x28>)
 8001370:	2002      	movs	r0, #2
 8001372:	f003 fa75 	bl	8004860 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40011400 	.word	0x40011400
 8001384:	0801aba4 	.word	0x0801aba4

08001388 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a3c      	ldr	r2, [pc, #240]	@ (8001488 <HAL_UART_ErrorCallback+0x100>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d171      	bne.n	800147e <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 800139a:	4b3c      	ldr	r3, [pc, #240]	@ (800148c <HAL_UART_ErrorCallback+0x104>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 80013a0:	493b      	ldr	r1, [pc, #236]	@ (8001490 <HAL_UART_ErrorCallback+0x108>)
 80013a2:	2002      	movs	r0, #2
 80013a4:	f003 fa5c 	bl	8004860 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d107      	bne.n	80013c6 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2208      	movs	r2, #8
 80013bc:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 80013be:	4935      	ldr	r1, [pc, #212]	@ (8001494 <HAL_UART_ErrorCallback+0x10c>)
 80013c0:	2002      	movs	r0, #2
 80013c2:	f003 fa4d 	bl	8004860 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d107      	bne.n	80013e4 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2204      	movs	r2, #4
 80013da:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 80013dc:	492e      	ldr	r1, [pc, #184]	@ (8001498 <HAL_UART_ErrorCallback+0x110>)
 80013de:	2002      	movs	r0, #2
 80013e0:	f003 fa3e 	bl	8004860 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d107      	bne.n	8001402 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2202      	movs	r2, #2
 80013f8:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 80013fa:	4928      	ldr	r1, [pc, #160]	@ (800149c <HAL_UART_ErrorCallback+0x114>)
 80013fc:	2002      	movs	r0, #2
 80013fe:	f003 fa2f 	bl	8004860 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8001418:	4921      	ldr	r1, [pc, #132]	@ (80014a0 <HAL_UART_ErrorCallback+0x118>)
 800141a:	2002      	movs	r0, #2
 800141c:	f003 fa20 	bl	8004860 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f00d f860 	bl	800e4e6 <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2220      	movs	r2, #32
 800142a:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2220      	movs	r2, #32
 8001430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8001446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144a:	2100      	movs	r1, #0
 800144c:	4815      	ldr	r0, [pc, #84]	@ (80014a4 <HAL_UART_ErrorCallback+0x11c>)
 800144e:	f018 facb 	bl	80199e8 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001456:	4913      	ldr	r1, [pc, #76]	@ (80014a4 <HAL_UART_ErrorCallback+0x11c>)
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f00d f800 	bl	800e45e <HAL_UART_Receive_DMA>
 800145e:	4603      	mov	r3, r0
 8001460:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8001468:	490f      	ldr	r1, [pc, #60]	@ (80014a8 <HAL_UART_ErrorCallback+0x120>)
 800146a:	2001      	movs	r0, #1
 800146c:	f003 f9f8 	bl	8004860 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8001470:	e005      	b.n	800147e <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	461a      	mov	r2, r3
 8001476:	490d      	ldr	r1, [pc, #52]	@ (80014ac <HAL_UART_ErrorCallback+0x124>)
 8001478:	2003      	movs	r0, #3
 800147a:	f003 f9f1 	bl	8004860 <LOGGER_SendFormatted>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40011400 	.word	0x40011400
 800148c:	20001511 	.word	0x20001511
 8001490:	0801abf0 	.word	0x0801abf0
 8001494:	0801ac1c 	.word	0x0801ac1c
 8001498:	0801ac38 	.word	0x0801ac38
 800149c:	0801ac54 	.word	0x0801ac54
 80014a0:	0801ac70 	.word	0x0801ac70
 80014a4:	200010a8 	.word	0x200010a8
 80014a8:	0801ac8c 	.word	0x0801ac8c
 80014ac:	0801acc0 	.word	0x0801acc0

080014b0 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a3e      	ldr	r2, [pc, #248]	@ (80015b8 <USER_UART_IDLECallback+0x108>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d175      	bne.n	80015ae <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d103      	bne.n	80014dc <USER_UART_IDLECallback+0x2c>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d103      	bne.n	80014f2 <USER_UART_IDLECallback+0x42>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d103      	bne.n	8001508 <USER_UART_IDLECallback+0x58>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d103      	bne.n	800151e <USER_UART_IDLECallback+0x6e>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 8001532:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d033      	beq.n	80015a6 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <USER_UART_IDLECallback+0x110>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	491b      	ldr	r1, [pc, #108]	@ (80015c4 <USER_UART_IDLECallback+0x114>)
 8001556:	2002      	movs	r0, #2
 8001558:	f003 f982 	bl	8004860 <LOGGER_SendFormatted>
 800155c:	e007      	b.n	800156e <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	4918      	ldr	r1, [pc, #96]	@ (80015c8 <USER_UART_IDLECallback+0x118>)
 8001568:	2001      	movs	r0, #1
 800156a:	f003 f979 	bl	8004860 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d912      	bls.n	800159e <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <USER_UART_IDLECallback+0x11c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <USER_UART_IDLECallback+0x11c>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	4618      	mov	r0, r3
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <USER_UART_IDLECallback+0x11c>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <USER_UART_IDLECallback+0x11c>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	9200      	str	r2, [sp, #0]
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	490e      	ldr	r1, [pc, #56]	@ (80015d0 <USER_UART_IDLECallback+0x120>)
 8001598:	2000      	movs	r0, #0
 800159a:	f003 f961 	bl	8004860 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f00c ffa1 	bl	800e4e6 <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 80015a4:	e003      	b.n	80015ae <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 80015a6:	490b      	ldr	r1, [pc, #44]	@ (80015d4 <USER_UART_IDLECallback+0x124>)
 80015a8:	2000      	movs	r0, #0
 80015aa:	f003 f959 	bl	8004860 <LOGGER_SendFormatted>
}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40011400 	.word	0x40011400
 80015bc:	20001512 	.word	0x20001512
 80015c0:	20001510 	.word	0x20001510
 80015c4:	0801acf8 	.word	0x0801acf8
 80015c8:	0801ad38 	.word	0x0801ad38
 80015cc:	200010a8 	.word	0x200010a8
 80015d0:	0801ad60 	.word	0x0801ad60
 80015d4:	0801ad8c 	.word	0x0801ad8c

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b09a      	sub	sp, #104	@ 0x68
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 80015de:	4bb7      	ldr	r3, [pc, #732]	@ (80018bc <main+0x2e4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4ab5      	ldr	r2, [pc, #724]	@ (80018bc <main+0x2e4>)
 80015e6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f003 fd47 	bl	800507a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f9aa 	bl	8001944 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015f0:	f000 fa1a 	bl	8001a28 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f4:	f001 f9d8 	bl	80029a8 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 80015f8:	f001 fea4 	bl	8003344 <MX_DMA_Init>
//  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
  MX_ADC3_Init();
 80015fc:	f000 fa46 	bl	8001a8c <MX_ADC3_Init>
  MX_CRC_Init();
 8001600:	f000 fa96 	bl	8001b30 <MX_CRC_Init>
  MX_DCMI_Init();
 8001604:	f000 fab6 	bl	8001b74 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001608:	f000 fae8 	bl	8001bdc <MX_DMA2D_Init>
  MX_ETH_Init();
 800160c:	f000 fb18 	bl	8001c40 <MX_ETH_Init>
  MX_FMC_Init();
 8001610:	f001 f97a 	bl	8002908 <MX_FMC_Init>
  MX_I2C1_Init();
 8001614:	f000 fb62 	bl	8001cdc <MX_I2C1_Init>
  MX_I2C3_Init();
 8001618:	f000 fba0 	bl	8001d5c <MX_I2C3_Init>
  MX_LTDC_Init();
 800161c:	f000 fbde 	bl	8001ddc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001620:	f000 fc5e 	bl	8001ee0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001624:	f000 fc88 	bl	8001f38 <MX_RTC_Init>
  MX_SAI2_Init();
 8001628:	f000 fd2a 	bl	8002080 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800162c:	f000 fdd0 	bl	80021d0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001630:	f000 fdf0 	bl	8002214 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001634:	f000 fe1e 	bl	8002274 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001638:	f000 fe5a 	bl	80022f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800163c:	f000 ff04 	bl	8002448 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001640:	f000 ff78 	bl	8002534 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001644:	f000 ffee 	bl	8002624 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001648:	f001 f864 	bl	8002714 <MX_TIM8_Init>
  MX_TIM12_Init();
 800164c:	f001 f8b6 	bl	80027bc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001650:	f001 f8fa 	bl	8002848 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001654:	f001 f928 	bl	80028a8 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001658:	4b99      	ldr	r3, [pc, #612]	@ (80018c0 <main+0x2e8>)
 800165a:	4a9a      	ldr	r2, [pc, #616]	@ (80018c4 <main+0x2ec>)
 800165c:	675a      	str	r2, [r3, #116]	@ 0x74
 800165e:	4b99      	ldr	r3, [pc, #612]	@ (80018c4 <main+0x2ec>)
 8001660:	4a97      	ldr	r2, [pc, #604]	@ (80018c0 <main+0x2e8>)
 8001662:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001664:	4b96      	ldr	r3, [pc, #600]	@ (80018c0 <main+0x2e8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b95      	ldr	r3, [pc, #596]	@ (80018c0 <main+0x2e8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0210 	orr.w	r2, r2, #16
 8001672:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001674:	f010 f85c 	bl	8011730 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001678:	2100      	movs	r1, #0
 800167a:	4893      	ldr	r0, [pc, #588]	@ (80018c8 <main+0x2f0>)
 800167c:	f003 f894 	bl	80047a8 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001680:	4b8e      	ldr	r3, [pc, #568]	@ (80018bc <main+0x2e4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4991      	ldr	r1, [pc, #580]	@ (80018cc <main+0x2f4>)
 8001688:	2001      	movs	r0, #1
 800168a:	f003 f8e9 	bl	8004860 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 800168e:	4b90      	ldr	r3, [pc, #576]	@ (80018d0 <main+0x2f8>)
 8001690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <main+0xca>
 800169a:	498e      	ldr	r1, [pc, #568]	@ (80018d4 <main+0x2fc>)
 800169c:	2002      	movs	r0, #2
 800169e:	f003 f8df 	bl	8004860 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 80016a2:	4b8b      	ldr	r3, [pc, #556]	@ (80018d0 <main+0x2f8>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <main+0xde>
 80016ae:	498a      	ldr	r1, [pc, #552]	@ (80018d8 <main+0x300>)
 80016b0:	2002      	movs	r0, #2
 80016b2:	f003 f8d5 	bl	8004860 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 80016b6:	4b86      	ldr	r3, [pc, #536]	@ (80018d0 <main+0x2f8>)
 80016b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <main+0xf2>
 80016c2:	4986      	ldr	r1, [pc, #536]	@ (80018dc <main+0x304>)
 80016c4:	2002      	movs	r0, #2
 80016c6:	f003 f8cb 	bl	8004860 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 80016ca:	4b81      	ldr	r3, [pc, #516]	@ (80018d0 <main+0x2f8>)
 80016cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <main+0x106>
 80016d6:	4982      	ldr	r1, [pc, #520]	@ (80018e0 <main+0x308>)
 80016d8:	2002      	movs	r0, #2
 80016da:	f003 f8c1 	bl	8004860 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80016de:	4b7c      	ldr	r3, [pc, #496]	@ (80018d0 <main+0x2f8>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <main+0x11a>
 80016ea:	497e      	ldr	r1, [pc, #504]	@ (80018e4 <main+0x30c>)
 80016ec:	2002      	movs	r0, #2
 80016ee:	f003 f8b7 	bl	8004860 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 80016f2:	4b77      	ldr	r3, [pc, #476]	@ (80018d0 <main+0x2f8>)
 80016f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <main+0x12e>
 80016fe:	497a      	ldr	r1, [pc, #488]	@ (80018e8 <main+0x310>)
 8001700:	2002      	movs	r0, #2
 8001702:	f003 f8ad 	bl	8004860 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001706:	4b72      	ldr	r3, [pc, #456]	@ (80018d0 <main+0x2f8>)
 8001708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800170a:	2b00      	cmp	r3, #0
 800170c:	da03      	bge.n	8001716 <main+0x13e>
 800170e:	4977      	ldr	r1, [pc, #476]	@ (80018ec <main+0x314>)
 8001710:	2002      	movs	r0, #2
 8001712:	f003 f8a5 	bl	8004860 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001716:	4b6e      	ldr	r3, [pc, #440]	@ (80018d0 <main+0x2f8>)
 8001718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800171a:	4a6d      	ldr	r2, [pc, #436]	@ (80018d0 <main+0x2f8>)
 800171c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001720:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // SD카드 완전 초기화
  static uint32_t init_count = 0;
  init_count++;
 8001722:	4b73      	ldr	r3, [pc, #460]	@ (80018f0 <main+0x318>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a71      	ldr	r2, [pc, #452]	@ (80018f0 <main+0x318>)
 800172a:	6013      	str	r3, [r2, #0]
  LOG_INFO("=== SD Card Complete Initialization (Call #%lu) ===", init_count);
 800172c:	4b70      	ldr	r3, [pc, #448]	@ (80018f0 <main+0x318>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4970      	ldr	r1, [pc, #448]	@ (80018f4 <main+0x31c>)
 8001734:	2001      	movs	r0, #1
 8001736:	f003 f893 	bl	8004860 <LOGGER_SendFormatted>
  
  // 1. SDMMC 하드웨어 강제 재초기화
  LOG_INFO("Initial SDMMC1 State: %d", hsd1.State);
 800173a:	4b6f      	ldr	r3, [pc, #444]	@ (80018f8 <main+0x320>)
 800173c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	496d      	ldr	r1, [pc, #436]	@ (80018fc <main+0x324>)
 8001746:	2001      	movs	r0, #1
 8001748:	f003 f88a 	bl	8004860 <LOGGER_SendFormatted>
  
  // SDMMC 재초기화 시도
  HAL_StatusTypeDef init_result = HAL_SD_Init(&hsd1);
 800174c:	486a      	ldr	r0, [pc, #424]	@ (80018f8 <main+0x320>)
 800174e:	f00a fc1b 	bl	800bf88 <HAL_SD_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  LOG_INFO("HAL_SD_Init result: %d", init_result);
 8001758:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800175c:	461a      	mov	r2, r3
 800175e:	4968      	ldr	r1, [pc, #416]	@ (8001900 <main+0x328>)
 8001760:	2001      	movs	r0, #1
 8001762:	f003 f87d 	bl	8004860 <LOGGER_SendFormatted>
  LOG_INFO("After init SDMMC1 State: %d", hsd1.State);
 8001766:	4b64      	ldr	r3, [pc, #400]	@ (80018f8 <main+0x320>)
 8001768:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	4964      	ldr	r1, [pc, #400]	@ (8001904 <main+0x32c>)
 8001772:	2001      	movs	r0, #1
 8001774:	f003 f874 	bl	8004860 <LOGGER_SendFormatted>
  
  if (init_result == HAL_OK) {
 8001778:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800177c:	2b00      	cmp	r3, #0
 800177e:	d161      	bne.n	8001844 <main+0x26c>
      // 2. SD카드 정보 확인
      HAL_SD_CardInfoTypeDef cardInfo;
      HAL_StatusTypeDef info_result = HAL_SD_GetCardInfo(&hsd1, &cardInfo);
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	485c      	ldr	r0, [pc, #368]	@ (80018f8 <main+0x320>)
 8001786:	f00b f825 	bl	800c7d4 <HAL_SD_GetCardInfo>
 800178a:	4603      	mov	r3, r0
 800178c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
      LOG_INFO("HAL_SD_GetCardInfo: %d", info_result);
 8001790:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001794:	461a      	mov	r2, r3
 8001796:	495c      	ldr	r1, [pc, #368]	@ (8001908 <main+0x330>)
 8001798:	2001      	movs	r0, #1
 800179a:	f003 f861 	bl	8004860 <LOGGER_SendFormatted>
      
      if (info_result == HAL_OK) {
 800179e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <main+0x1e2>
          LOG_INFO("Card Size: %lu MB", (cardInfo.LogBlockNbr * cardInfo.LogBlockSize) / (1024*1024));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	0d1b      	lsrs	r3, r3, #20
 80017b0:	461a      	mov	r2, r3
 80017b2:	4956      	ldr	r1, [pc, #344]	@ (800190c <main+0x334>)
 80017b4:	2001      	movs	r0, #1
 80017b6:	f003 f853 	bl	8004860 <LOGGER_SendFormatted>
      }
      
      // 3. SD카드 상태 확인
      HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 80017ba:	484f      	ldr	r0, [pc, #316]	@ (80018f8 <main+0x320>)
 80017bc:	f00b f836 	bl	800c82c <HAL_SD_GetCardState>
 80017c0:	6638      	str	r0, [r7, #96]	@ 0x60
      LOG_INFO("HAL_SD_GetCardState: %d (4=TRANSFER)", cardState);
 80017c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017c4:	4952      	ldr	r1, [pc, #328]	@ (8001910 <main+0x338>)
 80017c6:	2001      	movs	r0, #1
 80017c8:	f003 f84a 	bl	8004860 <LOGGER_SendFormatted>
      
      // 4. 디스크 초기화 시도
      DSTATUS disk_stat = disk_initialize(0);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f012 fbaf 	bl	8013f30 <disk_initialize>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      LOG_INFO("disk_initialize result: %d", disk_stat);
 80017d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017dc:	461a      	mov	r2, r3
 80017de:	494d      	ldr	r1, [pc, #308]	@ (8001914 <main+0x33c>)
 80017e0:	2001      	movs	r0, #1
 80017e2:	f003 f83d 	bl	8004860 <LOGGER_SendFormatted>
      
      // 5. 에러 코드별 분석
      if (disk_stat & STA_NOINIT) LOG_ERROR("- STA_NOINIT: Drive not initialized");
 80017e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <main+0x222>
 80017f2:	4949      	ldr	r1, [pc, #292]	@ (8001918 <main+0x340>)
 80017f4:	2003      	movs	r0, #3
 80017f6:	f003 f833 	bl	8004860 <LOGGER_SendFormatted>
      if (disk_stat & STA_NODISK) LOG_ERROR("- STA_NODISK: No medium in the drive");  
 80017fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <main+0x236>
 8001806:	4945      	ldr	r1, [pc, #276]	@ (800191c <main+0x344>)
 8001808:	2003      	movs	r0, #3
 800180a:	f003 f829 	bl	8004860 <LOGGER_SendFormatted>
      if (disk_stat & STA_PROTECT) LOG_ERROR("- STA_PROTECT: Write protected");
 800180e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <main+0x24a>
 800181a:	4941      	ldr	r1, [pc, #260]	@ (8001920 <main+0x348>)
 800181c:	2003      	movs	r0, #3
 800181e:	f003 f81f 	bl	8004860 <LOGGER_SendFormatted>
      
      if (disk_stat == 0) {  // DSTATUS 0 = 초기화 성공
 8001822:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001826:	2b00      	cmp	r3, #0
 8001828:	d104      	bne.n	8001834 <main+0x25c>
          LOG_INFO("✅ SD Card fully initialized - proceeding with file test");
 800182a:	493e      	ldr	r1, [pc, #248]	@ (8001924 <main+0x34c>)
 800182c:	2001      	movs	r0, #1
 800182e:	f003 f817 	bl	8004860 <LOGGER_SendFormatted>
 8001832:	e00b      	b.n	800184c <main+0x274>
      } else {
          LOG_ERROR("❌ disk_initialize failed with status: 0x%02X", disk_stat);
 8001834:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001838:	461a      	mov	r2, r3
 800183a:	493b      	ldr	r1, [pc, #236]	@ (8001928 <main+0x350>)
 800183c:	2003      	movs	r0, #3
 800183e:	f003 f80f 	bl	8004860 <LOGGER_SendFormatted>
 8001842:	e003      	b.n	800184c <main+0x274>
      }
  } else {
      LOG_ERROR("❌ SDMMC hardware initialization failed");
 8001844:	4939      	ldr	r1, [pc, #228]	@ (800192c <main+0x354>)
 8001846:	2003      	movs	r0, #3
 8001848:	f003 f80a 	bl	8004860 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("=== SD Card diagnosis complete ===");
 800184c:	4938      	ldr	r1, [pc, #224]	@ (8001930 <main+0x358>)
 800184e:	2001      	movs	r0, #1
 8001850:	f003 f806 	bl	8004860 <LOGGER_SendFormatted>
  
  // UART6 DMA 초기화 (UART 초기화 후)
  MX_USART6_DMA_Init();
 8001854:	f001 fd9c 	bl	8003390 <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001858:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <main+0x2e8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <main+0x2e8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0210 	orr.w	r2, r2, #16
 8001866:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001868:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <main+0x35c>)
 800186a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800186e:	461d      	mov	r5, r3
 8001870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001878:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800187c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f014 fd98 	bl	80163b8 <osThreadCreate>
 8001888:	4603      	mov	r3, r0
 800188a:	4a2b      	ldr	r2, [pc, #172]	@ (8001938 <main+0x360>)
 800188c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 800188e:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <main+0x364>)
 8001890:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001894:	461d      	mov	r5, r3
 8001896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800189e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80018a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f014 fd85 	bl	80163b8 <osThreadCreate>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <main+0x368>)
 80018b2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80018b4:	f014 fd69 	bl	801638a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <main+0x2e0>
 80018bc:	20001514 	.word	0x20001514
 80018c0:	20000fe4 	.word	0x20000fe4
 80018c4:	200014b0 	.word	0x200014b0
 80018c8:	0801adac 	.word	0x0801adac
 80018cc:	0801adb4 	.word	0x0801adb4
 80018d0:	40023800 	.word	0x40023800
 80018d4:	0801add8 	.word	0x0801add8
 80018d8:	0801adf0 	.word	0x0801adf0
 80018dc:	0801ae08 	.word	0x0801ae08
 80018e0:	0801ae20 	.word	0x0801ae20
 80018e4:	0801ae30 	.word	0x0801ae30
 80018e8:	0801ae48 	.word	0x0801ae48
 80018ec:	0801ae68 	.word	0x0801ae68
 80018f0:	20001518 	.word	0x20001518
 80018f4:	0801ae80 	.word	0x0801ae80
 80018f8:	20000c60 	.word	0x20000c60
 80018fc:	0801aeb4 	.word	0x0801aeb4
 8001900:	0801aed0 	.word	0x0801aed0
 8001904:	0801aee8 	.word	0x0801aee8
 8001908:	0801af04 	.word	0x0801af04
 800190c:	0801af1c 	.word	0x0801af1c
 8001910:	0801af30 	.word	0x0801af30
 8001914:	0801af58 	.word	0x0801af58
 8001918:	0801af74 	.word	0x0801af74
 800191c:	0801af98 	.word	0x0801af98
 8001920:	0801afc0 	.word	0x0801afc0
 8001924:	0801afe0 	.word	0x0801afe0
 8001928:	0801b01c 	.word	0x0801b01c
 800192c:	0801b04c 	.word	0x0801b04c
 8001930:	0801b078 	.word	0x0801b078
 8001934:	0801b0a8 	.word	0x0801b0a8
 8001938:	200010a0 	.word	0x200010a0
 800193c:	0801b0d0 	.word	0x0801b0d0
 8001940:	200010a4 	.word	0x200010a4

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b094      	sub	sp, #80	@ 0x50
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2230      	movs	r2, #48	@ 0x30
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f018 f848 	bl	80199e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001968:	f008 f9ac 	bl	8009cc4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <SystemClock_Config+0xdc>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a2b      	ldr	r2, [pc, #172]	@ (8001a20 <SystemClock_Config+0xdc>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
 8001978:	4b29      	ldr	r3, [pc, #164]	@ (8001a20 <SystemClock_Config+0xdc>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001984:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <SystemClock_Config+0xe0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a26      	ldr	r2, [pc, #152]	@ (8001a24 <SystemClock_Config+0xe0>)
 800198a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <SystemClock_Config+0xe0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800199c:	2309      	movs	r3, #9
 800199e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019a6:	2301      	movs	r3, #1
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019aa:	2302      	movs	r3, #2
 80019ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019b4:	2319      	movs	r3, #25
 80019b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80019b8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80019bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019be:	2302      	movs	r3, #2
 80019c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80019c2:	2309      	movs	r3, #9
 80019c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	4618      	mov	r0, r3
 80019cc:	f008 fa9c 	bl	8009f08 <HAL_RCC_OscConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019d6:	f001 fcaf 	bl	8003338 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019da:	f008 f983 	bl	8009ce4 <HAL_PWREx_EnableOverDrive>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80019e4:	f001 fca8 	bl	8003338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e8:	230f      	movs	r3, #15
 80019ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ec:	2302      	movs	r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2106      	movs	r1, #6
 8001a06:	4618      	mov	r0, r3
 8001a08:	f008 fd22 	bl	800a450 <HAL_RCC_ClockConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001a12:	f001 fc91 	bl	8003338 <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	@ 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a2      	sub	sp, #136	@ 0x88
 8001a2c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2284      	movs	r2, #132	@ 0x84
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f017 ffd7 	bl	80199e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <PeriphCommonClock_Config+0x60>)
 8001a3c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a3e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a42:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a44:	2305      	movs	r3, #5
 8001a46:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001a5e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001a62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f008 ff06 	bl	800a880 <HAL_RCCEx_PeriphCLKConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001a7a:	f001 fc5d 	bl	8003338 <Error_Handler>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3788      	adds	r7, #136	@ 0x88
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	00b00008 	.word	0x00b00008

08001a8c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	463b      	mov	r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001aa0:	4a21      	ldr	r2, [pc, #132]	@ (8001b28 <MX_ADC3_Init+0x9c>)
 8001aa2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001aa6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aaa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001ace:	4a17      	ldr	r2, [pc, #92]	@ (8001b2c <MX_ADC3_Init+0xa0>)
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001aee:	f003 fb15 	bl	800511c <HAL_ADC_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001af8:	f001 fc1e 	bl	8003338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001afc:	2304      	movs	r3, #4
 8001afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_ADC3_Init+0x98>)
 8001b0e:	f003 fb49 	bl	80051a4 <HAL_ADC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001b18:	f001 fc0e 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200007f0 	.word	0x200007f0
 8001b28:	40012200 	.word	0x40012200
 8001b2c:	0f000001 	.word	0x0f000001

08001b30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <MX_CRC_Init+0x3c>)
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <MX_CRC_Init+0x40>)
 8001b38:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <MX_CRC_Init+0x3c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <MX_CRC_Init+0x3c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <MX_CRC_Init+0x3c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <MX_CRC_Init+0x3c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <MX_CRC_Init+0x3c>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <MX_CRC_Init+0x3c>)
 8001b5a:	f003 fe59 	bl	8005810 <HAL_CRC_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001b64:	f001 fbe8 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000838 	.word	0x20000838
 8001b70:	40023000 	.word	0x40023000

08001b74 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001b7a:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <MX_DCMI_Init+0x64>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_DCMI_Init+0x60>)
 8001bc2:	f003 ff17 	bl	80059f4 <HAL_DCMI_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001bcc:	f001 fbb4 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000085c 	.word	0x2000085c
 8001bd8:	50050000 	.word	0x50050000

08001bdc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001be0:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001be2:	4a16      	ldr	r2, [pc, #88]	@ (8001c3c <MX_DMA2D_Init+0x60>)
 8001be4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c10:	4809      	ldr	r0, [pc, #36]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001c12:	f004 fbdd 	bl	80063d0 <HAL_DMA2D_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001c1c:	f001 fb8c 	bl	8003338 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c20:	2101      	movs	r1, #1
 8001c22:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <MX_DMA2D_Init+0x5c>)
 8001c24:	f004 fd2e 	bl	8006684 <HAL_DMA2D_ConfigLayer>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c2e:	f001 fb83 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200008ac 	.word	0x200008ac
 8001c3c:	4002b000 	.word	0x4002b000

08001c40 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001c44:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <MX_ETH_Init+0x84>)
 8001c46:	4a20      	ldr	r2, [pc, #128]	@ (8001cc8 <MX_ETH_Init+0x88>)
 8001c48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <MX_ETH_Init+0x8c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <MX_ETH_Init+0x8c>)
 8001c52:	2280      	movs	r2, #128	@ 0x80
 8001c54:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <MX_ETH_Init+0x8c>)
 8001c58:	22e1      	movs	r2, #225	@ 0xe1
 8001c5a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <MX_ETH_Init+0x8c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <MX_ETH_Init+0x8c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_ETH_Init+0x8c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <MX_ETH_Init+0x84>)
 8001c70:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <MX_ETH_Init+0x8c>)
 8001c72:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <MX_ETH_Init+0x84>)
 8001c76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c7a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_ETH_Init+0x84>)
 8001c7e:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <MX_ETH_Init+0x90>)
 8001c80:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_ETH_Init+0x84>)
 8001c84:	4a13      	ldr	r2, [pc, #76]	@ (8001cd4 <MX_ETH_Init+0x94>)
 8001c86:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_ETH_Init+0x84>)
 8001c8a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001c8e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <MX_ETH_Init+0x84>)
 8001c92:	f004 fd89 	bl	80067a8 <HAL_ETH_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001c9c:	f001 fb4c 	bl	8003338 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ca0:	2238      	movs	r2, #56	@ 0x38
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <MX_ETH_Init+0x98>)
 8001ca6:	f017 fe9f 	bl	80199e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <MX_ETH_Init+0x98>)
 8001cac:	2221      	movs	r2, #33	@ 0x21
 8001cae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <MX_ETH_Init+0x98>)
 8001cb2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001cb6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <MX_ETH_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200008ec 	.word	0x200008ec
 8001cc8:	40028000 	.word	0x40028000
 8001ccc:	2000151c 	.word	0x2000151c
 8001cd0:	20000168 	.word	0x20000168
 8001cd4:	200000c8 	.word	0x200000c8
 8001cd8:	200007b8 	.word	0x200007b8

08001cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <MX_I2C1_Init+0x78>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <MX_I2C1_Init+0x7c>)
 8001cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d16:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d18:	f007 fb8e 	bl	8009438 <HAL_I2C_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d22:	f001 fb09 	bl	8003338 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d2a:	f007 fc21 	bl	8009570 <HAL_I2CEx_ConfigAnalogFilter>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d34:	f001 fb00 	bl	8003338 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <MX_I2C1_Init+0x74>)
 8001d3c:	f007 fc63 	bl	8009606 <HAL_I2CEx_ConfigDigitalFilter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d46:	f001 faf7 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000099c 	.word	0x2000099c
 8001d54:	40005400 	.word	0x40005400
 8001d58:	00c0eaff 	.word	0x00c0eaff

08001d5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d62:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd4 <MX_I2C3_Init+0x78>)
 8001d64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d68:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <MX_I2C3_Init+0x7c>)
 8001d6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d96:	480e      	ldr	r0, [pc, #56]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001d98:	f007 fb4e 	bl	8009438 <HAL_I2C_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001da2:	f001 fac9 	bl	8003338 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001da6:	2100      	movs	r1, #0
 8001da8:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001daa:	f007 fbe1 	bl	8009570 <HAL_I2CEx_ConfigAnalogFilter>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001db4:	f001 fac0 	bl	8003338 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001db8:	2100      	movs	r1, #0
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_I2C3_Init+0x74>)
 8001dbc:	f007 fc23 	bl	8009606 <HAL_I2CEx_ConfigDigitalFilter>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001dc6:	f001 fab7 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200009f0 	.word	0x200009f0
 8001dd4:	40005c00 	.word	0x40005c00
 8001dd8:	00c0eaff 	.word	0x00c0eaff

08001ddc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	@ 0x38
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2234      	movs	r2, #52	@ 0x34
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f017 fdfd 	bl	80199e8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001df0:	4a3a      	ldr	r2, [pc, #232]	@ (8001edc <MX_LTDC_Init+0x100>)
 8001df2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001df4:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001dfa:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e00:	4b35      	ldr	r3, [pc, #212]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e06:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e0e:	2228      	movs	r2, #40	@ 0x28
 8001e10:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e14:	2209      	movs	r2, #9
 8001e16:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001e18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e1a:	2235      	movs	r2, #53	@ 0x35
 8001e1c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e20:	220b      	movs	r2, #11
 8001e22:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001e24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e26:	f240 2215 	movw	r2, #533	@ 0x215
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e2e:	f240 121b 	movw	r2, #283	@ 0x11b
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001e34:	4b28      	ldr	r3, [pc, #160]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e36:	f240 2235 	movw	r2, #565	@ 0x235
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001e3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e3e:	f240 121d 	movw	r2, #285	@ 0x11d
 8001e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001e44:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001e4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001e54:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001e5c:	481e      	ldr	r0, [pc, #120]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001e5e:	f007 fc1e 	bl	800969e <HAL_LTDC_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001e68:	f001 fa66 	bl	8003338 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001e70:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001e74:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001e7a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001e7e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001e80:	2302      	movs	r3, #2
 8001e82:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001e84:	23ff      	movs	r3, #255	@ 0xff
 8001e86:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e8c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e90:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e92:	2307      	movs	r3, #7
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001e96:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001e9c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001ea2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <MX_LTDC_Init+0xfc>)
 8001ec2:	f007 fd4b 	bl	800995c <HAL_LTDC_ConfigLayer>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001ecc:	f001 fa34 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	3738      	adds	r7, #56	@ 0x38
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000a44 	.word	0x20000a44
 8001edc:	40016800 	.word	0x40016800

08001ee0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001ee6:	4a13      	ldr	r2, [pc, #76]	@ (8001f34 <MX_QUADSPI_Init+0x54>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001ef8:	2210      	movs	r2, #16
 8001efa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001efe:	2218      	movs	r2, #24
 8001f00:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001f04:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001f08:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001f10:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001f1c:	4804      	ldr	r0, [pc, #16]	@ (8001f30 <MX_QUADSPI_Init+0x50>)
 8001f1e:	f007 ff31 	bl	8009d84 <HAL_QSPI_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001f28:	f001 fa06 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000aec 	.word	0x20000aec
 8001f34:	a0001000 	.word	0xa0001000

08001f38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b090      	sub	sp, #64	@ 0x40
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001f52:	463b      	mov	r3, r7
 8001f54:	2228      	movs	r2, #40	@ 0x28
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f017 fd45 	bl	80199e8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f5e:	4b46      	ldr	r3, [pc, #280]	@ (8002078 <MX_RTC_Init+0x140>)
 8001f60:	4a46      	ldr	r2, [pc, #280]	@ (800207c <MX_RTC_Init+0x144>)
 8001f62:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f64:	4b44      	ldr	r3, [pc, #272]	@ (8002078 <MX_RTC_Init+0x140>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f6a:	4b43      	ldr	r3, [pc, #268]	@ (8002078 <MX_RTC_Init+0x140>)
 8001f6c:	227f      	movs	r2, #127	@ 0x7f
 8001f6e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f70:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <MX_RTC_Init+0x140>)
 8001f72:	22ff      	movs	r2, #255	@ 0xff
 8001f74:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f76:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <MX_RTC_Init+0x140>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <MX_RTC_Init+0x140>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f82:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <MX_RTC_Init+0x140>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f88:	483b      	ldr	r0, [pc, #236]	@ (8002078 <MX_RTC_Init+0x140>)
 8001f8a:	f009 f9a9 	bl	800b2e0 <HAL_RTC_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001f94:	f001 f9d0 	bl	8003338 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	482f      	ldr	r0, [pc, #188]	@ (8002078 <MX_RTC_Init+0x140>)
 8001fbc:	f009 fa12 	bl	800b3e4 <HAL_RTC_SetTime>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001fc6:	f001 f9b7 	bl	8003338 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fe2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4823      	ldr	r0, [pc, #140]	@ (8002078 <MX_RTC_Init+0x140>)
 8001fec:	f009 faf2 	bl	800b5d4 <HAL_RTC_SetDate>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001ff6:	f001 f99f 	bl	8003338 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002002:	2300      	movs	r3, #0
 8002004:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002024:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800202a:	463b      	mov	r3, r7
 800202c:	2201      	movs	r2, #1
 800202e:	4619      	mov	r1, r3
 8002030:	4811      	ldr	r0, [pc, #68]	@ (8002078 <MX_RTC_Init+0x140>)
 8002032:	f009 fba3 	bl	800b77c <HAL_RTC_SetAlarm>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800203c:	f001 f97c 	bl	8003338 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002040:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002046:	463b      	mov	r3, r7
 8002048:	2201      	movs	r2, #1
 800204a:	4619      	mov	r1, r3
 800204c:	480a      	ldr	r0, [pc, #40]	@ (8002078 <MX_RTC_Init+0x140>)
 800204e:	f009 fb95 	bl	800b77c <HAL_RTC_SetAlarm>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002058:	f001 f96e 	bl	8003338 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800205c:	2202      	movs	r2, #2
 800205e:	2100      	movs	r1, #0
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_RTC_Init+0x140>)
 8002062:	f009 fd73 	bl	800bb4c <HAL_RTCEx_SetTimeStamp>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 800206c:	f001 f964 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3740      	adds	r7, #64	@ 0x40
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000b38 	.word	0x20000b38
 800207c:	40002800 	.word	0x40002800

08002080 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002084:	4b4d      	ldr	r3, [pc, #308]	@ (80021bc <MX_SAI2_Init+0x13c>)
 8002086:	4a4e      	ldr	r2, [pc, #312]	@ (80021c0 <MX_SAI2_Init+0x140>)
 8002088:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800208a:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <MX_SAI2_Init+0x13c>)
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002090:	4b4a      	ldr	r3, [pc, #296]	@ (80021bc <MX_SAI2_Init+0x13c>)
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002096:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <MX_SAI2_Init+0x13c>)
 8002098:	2240      	movs	r2, #64	@ 0x40
 800209a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800209c:	4b47      	ldr	r3, [pc, #284]	@ (80021bc <MX_SAI2_Init+0x13c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80020a2:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80020a8:	4b44      	ldr	r3, [pc, #272]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80020ae:	4b43      	ldr	r3, [pc, #268]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80020b4:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80020ba:	4b40      	ldr	r3, [pc, #256]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80020c0:	4b3e      	ldr	r3, [pc, #248]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020c2:	4a40      	ldr	r2, [pc, #256]	@ (80021c4 <MX_SAI2_Init+0x144>)
 80020c4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80020c6:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80020cc:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80020d2:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80020d8:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80020de:	4b37      	ldr	r3, [pc, #220]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020e0:	2208      	movs	r2, #8
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80020e4:	4b35      	ldr	r3, [pc, #212]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80020ea:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80020f6:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80020fc:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <MX_SAI2_Init+0x13c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002102:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <MX_SAI2_Init+0x13c>)
 8002104:	2200      	movs	r2, #0
 8002106:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002108:	4b2c      	ldr	r3, [pc, #176]	@ (80021bc <MX_SAI2_Init+0x13c>)
 800210a:	2201      	movs	r2, #1
 800210c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800210e:	4b2b      	ldr	r3, [pc, #172]	@ (80021bc <MX_SAI2_Init+0x13c>)
 8002110:	2200      	movs	r2, #0
 8002112:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002114:	4829      	ldr	r0, [pc, #164]	@ (80021bc <MX_SAI2_Init+0x13c>)
 8002116:	f009 fd81 	bl	800bc1c <HAL_SAI_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002120:	f001 f90a 	bl	8003338 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002124:	4b28      	ldr	r3, [pc, #160]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002126:	4a29      	ldr	r2, [pc, #164]	@ (80021cc <MX_SAI2_Init+0x14c>)
 8002128:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800212a:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <MX_SAI2_Init+0x148>)
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002132:	2203      	movs	r2, #3
 8002134:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002136:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002138:	2240      	movs	r2, #64	@ 0x40
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800213c:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <MX_SAI2_Init+0x148>)
 800213e:	2200      	movs	r2, #0
 8002140:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002142:	4b21      	ldr	r3, [pc, #132]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002144:	2200      	movs	r2, #0
 8002146:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002148:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <MX_SAI2_Init+0x148>)
 800214a:	2201      	movs	r2, #1
 800214c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002154:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800215a:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <MX_SAI2_Init+0x148>)
 800215c:	2200      	movs	r2, #0
 800215e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002168:	2200      	movs	r2, #0
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800216c:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <MX_SAI2_Init+0x148>)
 800216e:	2200      	movs	r2, #0
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002174:	2208      	movs	r2, #8
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <MX_SAI2_Init+0x148>)
 800217a:	2201      	movs	r2, #1
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002180:	2200      	movs	r2, #0
 8002182:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002184:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002186:	2200      	movs	r2, #0
 8002188:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800218a:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <MX_SAI2_Init+0x148>)
 800218c:	2200      	movs	r2, #0
 800218e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002190:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002192:	2200      	movs	r2, #0
 8002194:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002196:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <MX_SAI2_Init+0x148>)
 8002198:	2200      	movs	r2, #0
 800219a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800219c:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <MX_SAI2_Init+0x148>)
 800219e:	2201      	movs	r2, #1
 80021a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80021a2:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <MX_SAI2_Init+0x148>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80021a8:	4807      	ldr	r0, [pc, #28]	@ (80021c8 <MX_SAI2_Init+0x148>)
 80021aa:	f009 fd37 	bl	800bc1c <HAL_SAI_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80021b4:	f001 f8c0 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000b58 	.word	0x20000b58
 80021c0:	40015c04 	.word	0x40015c04
 80021c4:	0002ee00 	.word	0x0002ee00
 80021c8:	20000bdc 	.word	0x20000bdc
 80021cc:	40015c24 	.word	0x40015c24

080021d0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80021d4:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <MX_SDMMC1_SD_Init+0x3c>)
 80021d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002210 <MX_SDMMC1_SD_Init+0x40>)
 80021d8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80021da:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <MX_SDMMC1_SD_Init+0x3c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <MX_SDMMC1_SD_Init+0x3c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <MX_SDMMC1_SD_Init+0x3c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80021ec:	4b07      	ldr	r3, [pc, #28]	@ (800220c <MX_SDMMC1_SD_Init+0x3c>)
 80021ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021f2:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <MX_SDMMC1_SD_Init+0x3c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80021fa:	4b04      	ldr	r3, [pc, #16]	@ (800220c <MX_SDMMC1_SD_Init+0x3c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000c60 	.word	0x20000c60
 8002210:	40012c00 	.word	0x40012c00

08002214 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002218:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 800221a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800221e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 8002222:	2200      	movs	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800222c:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002238:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 8002258:	2200      	movs	r2, #0
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	@ (8002270 <MX_SPDIFRX_Init+0x5c>)
 800225e:	f00a fd5d 	bl	800cd1c <HAL_SPDIFRX_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002268:	f001 f866 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000ce4 	.word	0x20000ce4

08002274 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <MX_SPI2_Init+0x74>)
 800227a:	4a1c      	ldr	r2, [pc, #112]	@ (80022ec <MX_SPI2_Init+0x78>)
 800227c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800227e:	4b1a      	ldr	r3, [pc, #104]	@ (80022e8 <MX_SPI2_Init+0x74>)
 8002280:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002284:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002286:	4b18      	ldr	r3, [pc, #96]	@ (80022e8 <MX_SPI2_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800228c:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <MX_SPI2_Init+0x74>)
 800228e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002292:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002294:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <MX_SPI2_Init+0x74>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800229a:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <MX_SPI2_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022bc:	2200      	movs	r2, #0
 80022be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80022c0:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022c2:	2207      	movs	r2, #7
 80022c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022ce:	2208      	movs	r2, #8
 80022d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022d2:	4805      	ldr	r0, [pc, #20]	@ (80022e8 <MX_SPI2_Init+0x74>)
 80022d4:	f00a fd7e 	bl	800cdd4 <HAL_SPI_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80022de:	f001 f82b 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000d30 	.word	0x20000d30
 80022ec:	40003800 	.word	0x40003800

080022f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b09a      	sub	sp, #104	@ 0x68
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002310:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	615a      	str	r2, [r3, #20]
 8002322:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	222c      	movs	r2, #44	@ 0x2c
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f017 fb5c 	bl	80199e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002330:	4b43      	ldr	r3, [pc, #268]	@ (8002440 <MX_TIM1_Init+0x150>)
 8002332:	4a44      	ldr	r2, [pc, #272]	@ (8002444 <MX_TIM1_Init+0x154>)
 8002334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002336:	4b42      	ldr	r3, [pc, #264]	@ (8002440 <MX_TIM1_Init+0x150>)
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233c:	4b40      	ldr	r3, [pc, #256]	@ (8002440 <MX_TIM1_Init+0x150>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002342:	4b3f      	ldr	r3, [pc, #252]	@ (8002440 <MX_TIM1_Init+0x150>)
 8002344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002348:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234a:	4b3d      	ldr	r3, [pc, #244]	@ (8002440 <MX_TIM1_Init+0x150>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002350:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <MX_TIM1_Init+0x150>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b3a      	ldr	r3, [pc, #232]	@ (8002440 <MX_TIM1_Init+0x150>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800235c:	4838      	ldr	r0, [pc, #224]	@ (8002440 <MX_TIM1_Init+0x150>)
 800235e:	f00a fde4 	bl	800cf2a <HAL_TIM_Base_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002368:	f000 ffe6 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002370:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002372:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002376:	4619      	mov	r1, r3
 8002378:	4831      	ldr	r0, [pc, #196]	@ (8002440 <MX_TIM1_Init+0x150>)
 800237a:	f00b f917 	bl	800d5ac <HAL_TIM_ConfigClockSource>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002384:	f000 ffd8 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002388:	482d      	ldr	r0, [pc, #180]	@ (8002440 <MX_TIM1_Init+0x150>)
 800238a:	f00a fe9d 	bl	800d0c8 <HAL_TIM_PWM_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002394:	f000 ffd0 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023a8:	4619      	mov	r1, r3
 80023aa:	4825      	ldr	r0, [pc, #148]	@ (8002440 <MX_TIM1_Init+0x150>)
 80023ac:	f00b fd8e 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80023b6:	f000 ffbf 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ba:	2360      	movs	r3, #96	@ 0x60
 80023bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023da:	2200      	movs	r2, #0
 80023dc:	4619      	mov	r1, r3
 80023de:	4818      	ldr	r0, [pc, #96]	@ (8002440 <MX_TIM1_Init+0x150>)
 80023e0:	f00a ffd0 	bl	800d384 <HAL_TIM_PWM_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80023ea:	f000 ffa5 	bl	8003338 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002402:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002406:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002410:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4807      	ldr	r0, [pc, #28]	@ (8002440 <MX_TIM1_Init+0x150>)
 8002424:	f00b fde0 	bl	800dfe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800242e:	f000 ff83 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002432:	4803      	ldr	r0, [pc, #12]	@ (8002440 <MX_TIM1_Init+0x150>)
 8002434:	f001 fde8 	bl	8004008 <HAL_TIM_MspPostInit>

}
 8002438:	bf00      	nop
 800243a:	3768      	adds	r7, #104	@ 0x68
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000d94 	.word	0x20000d94
 8002444:	40010000 	.word	0x40010000

08002448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08e      	sub	sp, #56	@ 0x38
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002468:	463b      	mov	r3, r7
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800247a:	4b2d      	ldr	r3, [pc, #180]	@ (8002530 <MX_TIM2_Init+0xe8>)
 800247c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002480:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002482:	4b2b      	ldr	r3, [pc, #172]	@ (8002530 <MX_TIM2_Init+0xe8>)
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b29      	ldr	r3, [pc, #164]	@ (8002530 <MX_TIM2_Init+0xe8>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800248e:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <MX_TIM2_Init+0xe8>)
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002496:	4b26      	ldr	r3, [pc, #152]	@ (8002530 <MX_TIM2_Init+0xe8>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249c:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <MX_TIM2_Init+0xe8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024a2:	4823      	ldr	r0, [pc, #140]	@ (8002530 <MX_TIM2_Init+0xe8>)
 80024a4:	f00a fd41 	bl	800cf2a <HAL_TIM_Base_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80024ae:	f000 ff43 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024bc:	4619      	mov	r1, r3
 80024be:	481c      	ldr	r0, [pc, #112]	@ (8002530 <MX_TIM2_Init+0xe8>)
 80024c0:	f00b f874 	bl	800d5ac <HAL_TIM_ConfigClockSource>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80024ca:	f000 ff35 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024ce:	4818      	ldr	r0, [pc, #96]	@ (8002530 <MX_TIM2_Init+0xe8>)
 80024d0:	f00a fdfa 	bl	800d0c8 <HAL_TIM_PWM_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80024da:	f000 ff2d 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4619      	mov	r1, r3
 80024ec:	4810      	ldr	r0, [pc, #64]	@ (8002530 <MX_TIM2_Init+0xe8>)
 80024ee:	f00b fced 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024f8:	f000 ff1e 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fc:	2360      	movs	r3, #96	@ 0x60
 80024fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250c:	463b      	mov	r3, r7
 800250e:	2200      	movs	r2, #0
 8002510:	4619      	mov	r1, r3
 8002512:	4807      	ldr	r0, [pc, #28]	@ (8002530 <MX_TIM2_Init+0xe8>)
 8002514:	f00a ff36 	bl	800d384 <HAL_TIM_PWM_ConfigChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800251e:	f000 ff0b 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002522:	4803      	ldr	r0, [pc, #12]	@ (8002530 <MX_TIM2_Init+0xe8>)
 8002524:	f001 fd70 	bl	8004008 <HAL_TIM_MspPostInit>

}
 8002528:	bf00      	nop
 800252a:	3738      	adds	r7, #56	@ 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000de0 	.word	0x20000de0

08002534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	@ 0x38
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002554:	463b      	mov	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002566:	4b2d      	ldr	r3, [pc, #180]	@ (800261c <MX_TIM3_Init+0xe8>)
 8002568:	4a2d      	ldr	r2, [pc, #180]	@ (8002620 <MX_TIM3_Init+0xec>)
 800256a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800256c:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <MX_TIM3_Init+0xe8>)
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <MX_TIM3_Init+0xe8>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002578:	4b28      	ldr	r3, [pc, #160]	@ (800261c <MX_TIM3_Init+0xe8>)
 800257a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800257e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b26      	ldr	r3, [pc, #152]	@ (800261c <MX_TIM3_Init+0xe8>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b25      	ldr	r3, [pc, #148]	@ (800261c <MX_TIM3_Init+0xe8>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800258c:	4823      	ldr	r0, [pc, #140]	@ (800261c <MX_TIM3_Init+0xe8>)
 800258e:	f00a fccc 	bl	800cf2a <HAL_TIM_Base_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002598:	f000 fece 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025a6:	4619      	mov	r1, r3
 80025a8:	481c      	ldr	r0, [pc, #112]	@ (800261c <MX_TIM3_Init+0xe8>)
 80025aa:	f00a ffff 	bl	800d5ac <HAL_TIM_ConfigClockSource>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80025b4:	f000 fec0 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025b8:	4818      	ldr	r0, [pc, #96]	@ (800261c <MX_TIM3_Init+0xe8>)
 80025ba:	f00a fd85 	bl	800d0c8 <HAL_TIM_PWM_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025c4:	f000 feb8 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4811      	ldr	r0, [pc, #68]	@ (800261c <MX_TIM3_Init+0xe8>)
 80025d8:	f00b fc78 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025e2:	f000 fea9 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e6:	2360      	movs	r3, #96	@ 0x60
 80025e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f6:	463b      	mov	r3, r7
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4807      	ldr	r0, [pc, #28]	@ (800261c <MX_TIM3_Init+0xe8>)
 80025fe:	f00a fec1 	bl	800d384 <HAL_TIM_PWM_ConfigChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002608:	f000 fe96 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800260c:	4803      	ldr	r0, [pc, #12]	@ (800261c <MX_TIM3_Init+0xe8>)
 800260e:	f001 fcfb 	bl	8004008 <HAL_TIM_MspPostInit>

}
 8002612:	bf00      	nop
 8002614:	3738      	adds	r7, #56	@ 0x38
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000e2c 	.word	0x20000e2c
 8002620:	40000400 	.word	0x40000400

08002624 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08e      	sub	sp, #56	@ 0x38
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002644:	463b      	mov	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002656:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <MX_TIM5_Init+0xe8>)
 8002658:	4a2d      	ldr	r2, [pc, #180]	@ (8002710 <MX_TIM5_Init+0xec>)
 800265a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800265c:	4b2b      	ldr	r3, [pc, #172]	@ (800270c <MX_TIM5_Init+0xe8>)
 800265e:	2200      	movs	r2, #0
 8002660:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <MX_TIM5_Init+0xe8>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002668:	4b28      	ldr	r3, [pc, #160]	@ (800270c <MX_TIM5_Init+0xe8>)
 800266a:	f04f 32ff 	mov.w	r2, #4294967295
 800266e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002670:	4b26      	ldr	r3, [pc, #152]	@ (800270c <MX_TIM5_Init+0xe8>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002676:	4b25      	ldr	r3, [pc, #148]	@ (800270c <MX_TIM5_Init+0xe8>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800267c:	4823      	ldr	r0, [pc, #140]	@ (800270c <MX_TIM5_Init+0xe8>)
 800267e:	f00a fc54 	bl	800cf2a <HAL_TIM_Base_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002688:	f000 fe56 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002696:	4619      	mov	r1, r3
 8002698:	481c      	ldr	r0, [pc, #112]	@ (800270c <MX_TIM5_Init+0xe8>)
 800269a:	f00a ff87 	bl	800d5ac <HAL_TIM_ConfigClockSource>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80026a4:	f000 fe48 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80026a8:	4818      	ldr	r0, [pc, #96]	@ (800270c <MX_TIM5_Init+0xe8>)
 80026aa:	f00a fd0d 	bl	800d0c8 <HAL_TIM_PWM_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80026b4:	f000 fe40 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	4811      	ldr	r0, [pc, #68]	@ (800270c <MX_TIM5_Init+0xe8>)
 80026c8:	f00b fc00 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80026d2:	f000 fe31 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d6:	2360      	movs	r3, #96	@ 0x60
 80026d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	220c      	movs	r2, #12
 80026ea:	4619      	mov	r1, r3
 80026ec:	4807      	ldr	r0, [pc, #28]	@ (800270c <MX_TIM5_Init+0xe8>)
 80026ee:	f00a fe49 	bl	800d384 <HAL_TIM_PWM_ConfigChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80026f8:	f000 fe1e 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80026fc:	4803      	ldr	r0, [pc, #12]	@ (800270c <MX_TIM5_Init+0xe8>)
 80026fe:	f001 fc83 	bl	8004008 <HAL_TIM_MspPostInit>

}
 8002702:	bf00      	nop
 8002704:	3738      	adds	r7, #56	@ 0x38
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000e78 	.word	0x20000e78
 8002710:	40000c00 	.word	0x40000c00

08002714 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 8002734:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <MX_TIM8_Init+0xa4>)
 8002736:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002738:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 8002746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800274a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002752:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002758:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800275e:	4815      	ldr	r0, [pc, #84]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 8002760:	f00a fbe3 	bl	800cf2a <HAL_TIM_Base_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800276a:	f000 fde5 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4619      	mov	r1, r3
 800277a:	480e      	ldr	r0, [pc, #56]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 800277c:	f00a ff16 	bl	800d5ac <HAL_TIM_ConfigClockSource>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002786:	f000 fdd7 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	4619      	mov	r1, r3
 800279a:	4806      	ldr	r0, [pc, #24]	@ (80027b4 <MX_TIM8_Init+0xa0>)
 800279c:	f00b fb96 	bl	800decc <HAL_TIMEx_MasterConfigSynchronization>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80027a6:	f000 fdc7 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000ec4 	.word	0x20000ec4
 80027b8:	40010400 	.word	0x40010400

080027bc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	615a      	str	r2, [r3, #20]
 80027d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <MX_TIM12_Init+0x84>)
 80027d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002844 <MX_TIM12_Init+0x88>)
 80027d8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80027da:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <MX_TIM12_Init+0x84>)
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <MX_TIM12_Init+0x84>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80027e6:	4b16      	ldr	r3, [pc, #88]	@ (8002840 <MX_TIM12_Init+0x84>)
 80027e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027ec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ee:	4b14      	ldr	r3, [pc, #80]	@ (8002840 <MX_TIM12_Init+0x84>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <MX_TIM12_Init+0x84>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80027fa:	4811      	ldr	r0, [pc, #68]	@ (8002840 <MX_TIM12_Init+0x84>)
 80027fc:	f00a fc64 	bl	800d0c8 <HAL_TIM_PWM_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002806:	f000 fd97 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280a:	2360      	movs	r3, #96	@ 0x60
 800280c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2200      	movs	r2, #0
 800281e:	4619      	mov	r1, r3
 8002820:	4807      	ldr	r0, [pc, #28]	@ (8002840 <MX_TIM12_Init+0x84>)
 8002822:	f00a fdaf 	bl	800d384 <HAL_TIM_PWM_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800282c:	f000 fd84 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002830:	4803      	ldr	r0, [pc, #12]	@ (8002840 <MX_TIM12_Init+0x84>)
 8002832:	f001 fbe9 	bl	8004008 <HAL_TIM_MspPostInit>

}
 8002836:	bf00      	nop
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000f10 	.word	0x20000f10
 8002844:	40001800 	.word	0x40001800

08002848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 800284e:	4a15      	ldr	r2, [pc, #84]	@ (80028a4 <MX_USART1_UART_Init+0x5c>)
 8002850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002852:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 8002854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 800286e:	220c      	movs	r2, #12
 8002870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002878:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800287e:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 8002886:	2200      	movs	r2, #0
 8002888:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800288a:	4805      	ldr	r0, [pc, #20]	@ (80028a0 <MX_USART1_UART_Init+0x58>)
 800288c:	f00b fc48 	bl	800e120 <HAL_UART_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002896:	f000 fd4f 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000f5c 	.word	0x20000f5c
 80028a4:	40011000 	.word	0x40011000

080028a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028ae:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <MX_USART6_UART_Init+0x5c>)
 80028b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80028b2:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028ba:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028ce:	220c      	movs	r2, #12
 80028d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	@ (8002900 <MX_USART6_UART_Init+0x58>)
 80028ec:	f00b fc18 	bl	800e120 <HAL_UART_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80028f6:	f000 fd1f 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000fe4 	.word	0x20000fe4
 8002904:	40011400 	.word	0x40011400

08002908 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
 800291c:	615a      	str	r2, [r3, #20]
 800291e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002920:	4b1f      	ldr	r3, [pc, #124]	@ (80029a0 <MX_FMC_Init+0x98>)
 8002922:	4a20      	ldr	r2, [pc, #128]	@ (80029a4 <MX_FMC_Init+0x9c>)
 8002924:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002926:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <MX_FMC_Init+0x98>)
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800292c:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <MX_FMC_Init+0x98>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002932:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <MX_FMC_Init+0x98>)
 8002934:	2204      	movs	r2, #4
 8002936:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <MX_FMC_Init+0x98>)
 800293a:	2210      	movs	r2, #16
 800293c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800293e:	4b18      	ldr	r3, [pc, #96]	@ (80029a0 <MX_FMC_Init+0x98>)
 8002940:	2240      	movs	r2, #64	@ 0x40
 8002942:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002944:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <MX_FMC_Init+0x98>)
 8002946:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800294a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800294c:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <MX_FMC_Init+0x98>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002952:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <MX_FMC_Init+0x98>)
 8002954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002958:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <MX_FMC_Init+0x98>)
 800295c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002962:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <MX_FMC_Init+0x98>)
 8002964:	2200      	movs	r2, #0
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002968:	2302      	movs	r3, #2
 800296a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800296c:	2307      	movs	r3, #7
 800296e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002970:	2304      	movs	r3, #4
 8002972:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002974:	2307      	movs	r3, #7
 8002976:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002978:	2303      	movs	r3, #3
 800297a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800297c:	2302      	movs	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002980:	2302      	movs	r3, #2
 8002982:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <MX_FMC_Init+0x98>)
 800298a:	f00a f993 	bl	800ccb4 <HAL_SDRAM_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002994:	f000 fcd0 	bl	8003338 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002998:	bf00      	nop
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000106c 	.word	0x2000106c
 80029a4:	a0000140 	.word	0xa0000140

080029a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b090      	sub	sp, #64	@ 0x40
 80029ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029be:	4bb0      	ldr	r3, [pc, #704]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	4aaf      	ldr	r2, [pc, #700]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029c4:	f043 0310 	orr.w	r3, r3, #16
 80029c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ca:	4bad      	ldr	r3, [pc, #692]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029d6:	4baa      	ldr	r3, [pc, #680]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4aa9      	ldr	r2, [pc, #676]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4ba7      	ldr	r3, [pc, #668]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	4ba4      	ldr	r3, [pc, #656]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4aa3      	ldr	r2, [pc, #652]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4ba1      	ldr	r3, [pc, #644]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a06:	4b9e      	ldr	r3, [pc, #632]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a9d      	ldr	r2, [pc, #628]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a0c:	f043 0308 	orr.w	r3, r3, #8
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b9b      	ldr	r3, [pc, #620]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1e:	4b98      	ldr	r3, [pc, #608]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	4a97      	ldr	r2, [pc, #604]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2a:	4b95      	ldr	r3, [pc, #596]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	4b92      	ldr	r3, [pc, #584]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a91      	ldr	r2, [pc, #580]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b8f      	ldr	r3, [pc, #572]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a4e:	4b8c      	ldr	r3, [pc, #560]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	4a8b      	ldr	r2, [pc, #556]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5a:	4b89      	ldr	r3, [pc, #548]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a66:	4b86      	ldr	r3, [pc, #536]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a85      	ldr	r2, [pc, #532]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b83      	ldr	r3, [pc, #524]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a7e:	4b80      	ldr	r3, [pc, #512]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a7f      	ldr	r2, [pc, #508]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a96:	4b7a      	ldr	r3, [pc, #488]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a79      	ldr	r2, [pc, #484]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b77      	ldr	r3, [pc, #476]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aae:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a73      	ldr	r2, [pc, #460]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b71      	ldr	r3, [pc, #452]	@ (8002c80 <MX_GPIO_Init+0x2d8>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2120      	movs	r1, #32
 8002aca:	486e      	ldr	r0, [pc, #440]	@ (8002c84 <MX_GPIO_Init+0x2dc>)
 8002acc:	f004 fb66 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	210c      	movs	r1, #12
 8002ad4:	486c      	ldr	r0, [pc, #432]	@ (8002c88 <MX_GPIO_Init+0x2e0>)
 8002ad6:	f004 fb61 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002ada:	2201      	movs	r2, #1
 8002adc:	2108      	movs	r1, #8
 8002ade:	486b      	ldr	r0, [pc, #428]	@ (8002c8c <MX_GPIO_Init+0x2e4>)
 8002ae0:	f004 fb5c 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002aea:	4867      	ldr	r0, [pc, #412]	@ (8002c88 <MX_GPIO_Init+0x2e0>)
 8002aec:	f004 fb56 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002af0:	2200      	movs	r2, #0
 8002af2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002af6:	4866      	ldr	r0, [pc, #408]	@ (8002c90 <MX_GPIO_Init+0x2e8>)
 8002af8:	f004 fb50 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	21c8      	movs	r1, #200	@ 0xc8
 8002b00:	4864      	ldr	r0, [pc, #400]	@ (8002c94 <MX_GPIO_Init+0x2ec>)
 8002b02:	f004 fb4b 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002b06:	2308      	movs	r3, #8
 8002b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b16:	4619      	mov	r1, r3
 8002b18:	485f      	ldr	r0, [pc, #380]	@ (8002c98 <MX_GPIO_Init+0x2f0>)
 8002b1a:	f004 f993 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002b1e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b30:	230a      	movs	r3, #10
 8002b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4858      	ldr	r0, [pc, #352]	@ (8002c9c <MX_GPIO_Init+0x2f4>)
 8002b3c:	f004 f982 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b46:	2300      	movs	r3, #0
 8002b48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b52:	4619      	mov	r1, r3
 8002b54:	4852      	ldr	r0, [pc, #328]	@ (8002ca0 <MX_GPIO_Init+0x2f8>)
 8002b56:	f004 f975 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002b5a:	2340      	movs	r3, #64	@ 0x40
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b5e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4845      	ldr	r0, [pc, #276]	@ (8002c84 <MX_GPIO_Init+0x2dc>)
 8002b70:	f004 f968 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002b74:	2320      	movs	r3, #32
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b88:	4619      	mov	r1, r3
 8002b8a:	483e      	ldr	r0, [pc, #248]	@ (8002c84 <MX_GPIO_Init+0x2dc>)
 8002b8c:	f004 f95a 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002b90:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4837      	ldr	r0, [pc, #220]	@ (8002c88 <MX_GPIO_Init+0x2e0>)
 8002baa:	f004 f94b 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4838      	ldr	r0, [pc, #224]	@ (8002ca4 <MX_GPIO_Init+0x2fc>)
 8002bc4:	f004 f93e 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002bc8:	2308      	movs	r3, #8
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bdc:	4619      	mov	r1, r3
 8002bde:	482b      	ldr	r0, [pc, #172]	@ (8002c8c <MX_GPIO_Init+0x2e4>)
 8002be0:	f004 f930 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002be4:	2310      	movs	r3, #16
 8002be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be8:	2300      	movs	r3, #0
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002bf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4823      	ldr	r0, [pc, #140]	@ (8002c84 <MX_GPIO_Init+0x2dc>)
 8002bf8:	f004 f924 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002bfc:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c02:	2300      	movs	r3, #0
 8002c04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c0e:	4619      	mov	r1, r3
 8002c10:	481f      	ldr	r0, [pc, #124]	@ (8002c90 <MX_GPIO_Init+0x2e8>)
 8002c12:	f004 f917 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002c16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4818      	ldr	r0, [pc, #96]	@ (8002c90 <MX_GPIO_Init+0x2e8>)
 8002c30:	f004 f908 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c3a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480f      	ldr	r0, [pc, #60]	@ (8002c88 <MX_GPIO_Init+0x2e0>)
 8002c4c:	f004 f8fa 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002c50:	2310      	movs	r3, #16
 8002c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c60:	230a      	movs	r3, #10
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002c64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4809      	ldr	r0, [pc, #36]	@ (8002c90 <MX_GPIO_Init+0x2e8>)
 8002c6c:	f004 f8ea 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002c70:	23c8      	movs	r3, #200	@ 0xc8
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c74:	2301      	movs	r3, #1
 8002c76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c7c:	e014      	b.n	8002ca8 <MX_GPIO_Init+0x300>
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020c00 	.word	0x40020c00
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40022800 	.word	0x40022800
 8002c90:	40021c00 	.word	0x40021c00
 8002c94:	40021800 	.word	0x40021800
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40022400 	.word	0x40022400
 8002ca4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4819      	ldr	r0, [pc, #100]	@ (8002d18 <MX_GPIO_Init+0x370>)
 8002cb4:	f004 f8c6 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002cb8:	2305      	movs	r3, #5
 8002cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002cc8:	230a      	movs	r3, #10
 8002cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ccc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4812      	ldr	r0, [pc, #72]	@ (8002d1c <MX_GPIO_Init+0x374>)
 8002cd4:	f004 f8b6 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002cd8:	2304      	movs	r3, #4
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce8:	4619      	mov	r1, r3
 8002cea:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <MX_GPIO_Init+0x370>)
 8002cec:	f004 f8aa 	bl	8006e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002cf0:	2328      	movs	r3, #40	@ 0x28
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d00:	230a      	movs	r3, #10
 8002d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <MX_GPIO_Init+0x378>)
 8002d0c:	f004 f89a 	bl	8006e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d10:	bf00      	nop
 8002d12:	3740      	adds	r7, #64	@ 0x40
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021800 	.word	0x40021800
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	40020000 	.word	0x40020000

08002d24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	b098      	sub	sp, #96	@ 0x60
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002d2c:	f016 fa12 	bl	8019154 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // Logger는 이미 SD카드와 연결됨
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8002d30:	4991      	ldr	r1, [pc, #580]	@ (8002f78 <StartDefaultTask+0x254>)
 8002d32:	2001      	movs	r0, #1
 8002d34:	f001 fd94 	bl	8004860 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8002d38:	4b90      	ldr	r3, [pc, #576]	@ (8002f7c <StartDefaultTask+0x258>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a90      	ldr	r2, [pc, #576]	@ (8002f80 <StartDefaultTask+0x25c>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	461a      	mov	r2, r3
 8002d46:	498f      	ldr	r1, [pc, #572]	@ (8002f84 <StartDefaultTask+0x260>)
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f001 fd89 	bl	8004860 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8002d4e:	498e      	ldr	r1, [pc, #568]	@ (8002f88 <StartDefaultTask+0x264>)
 8002d50:	2001      	movs	r0, #1
 8002d52:	f001 fd85 	bl	8004860 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8002d56:	498d      	ldr	r1, [pc, #564]	@ (8002f8c <StartDefaultTask+0x268>)
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f001 fd81 	bl	8004860 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8002d5e:	498c      	ldr	r1, [pc, #560]	@ (8002f90 <StartDefaultTask+0x26c>)
 8002d60:	2001      	movs	r0, #1
 8002d62:	f001 fd7d 	bl	8004860 <LOGGER_SendFormatted>
  
  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 8002d66:	498b      	ldr	r1, [pc, #556]	@ (8002f94 <StartDefaultTask+0x270>)
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f001 fd79 	bl	8004860 <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 8002d6e:	488a      	ldr	r0, [pc, #552]	@ (8002f98 <StartDefaultTask+0x274>)
 8002d70:	f001 fe12 	bl	8004998 <UART_Connect>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  if (uart_status == UART_STATUS_OK) {
 8002d7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <StartDefaultTask+0x72>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 8002d82:	4986      	ldr	r1, [pc, #536]	@ (8002f9c <StartDefaultTask+0x278>)
 8002d84:	2001      	movs	r0, #1
 8002d86:	f001 fd6b 	bl	8004860 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 8002d8a:	f001 fedb 	bl	8004b44 <UART_IsConnected>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d04a      	beq.n	8002e2a <StartDefaultTask+0x106>
 8002d94:	e00b      	b.n	8002dae <StartDefaultTask+0x8a>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8002d96:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4980      	ldr	r1, [pc, #512]	@ (8002fa0 <StartDefaultTask+0x27c>)
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f001 fd5e 	bl	8004860 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002da4:	497f      	ldr	r1, [pc, #508]	@ (8002fa4 <StartDefaultTask+0x280>)
 8002da6:	2003      	movs	r0, #3
 8002da8:	f001 fd5a 	bl	8004860 <LOGGER_SendFormatted>
    goto idle_loop;
 8002dac:	e0cd      	b.n	8002f4a <StartDefaultTask+0x226>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 8002dae:	497e      	ldr	r1, [pc, #504]	@ (8002fa8 <StartDefaultTask+0x284>)
 8002db0:	2001      	movs	r0, #1
 8002db2:	f001 fd55 	bl	8004860 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8002db6:	497d      	ldr	r1, [pc, #500]	@ (8002fac <StartDefaultTask+0x288>)
 8002db8:	2001      	movs	r0, #1
 8002dba:	f001 fd51 	bl	8004860 <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 8002dbe:	497c      	ldr	r1, [pc, #496]	@ (8002fb0 <StartDefaultTask+0x28c>)
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f001 fd4d 	bl	8004860 <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8002dc6:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002dca:	f013 fb41 	bl	8016450 <osDelay>
  
  // LoRa 기본 연결 테스트 + 초기 설정 명령어들
  const char* lora_init_commands[] = {
 8002dce:	4b79      	ldr	r3, [pc, #484]	@ (8002fb4 <StartDefaultTask+0x290>)
 8002dd0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002dd4:	461d      	mov	r5, r3
 8002dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dda:	682b      	ldr	r3, [r5, #0]
 8002ddc:	6023      	str	r3, [r4, #0]
    "AT+CLASS=A\r\n",   // Class A 설정
    "AT+BAND=7\r\n"     // Asia 923 MHz 대역 설정
  };
  
  // LoraStarter 컨텍스트 초기화
  LoraStarterContext lora_ctx = {
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	2230      	movs	r2, #48	@ 0x30
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f016 fdfe 	bl	80199e8 <memset>
 8002dec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	2305      	movs	r3, #5
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <StartDefaultTask+0x294>)
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	4b70      	ldr	r3, [pc, #448]	@ (8002fbc <StartDefaultTask+0x298>)
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	2303      	movs	r3, #3
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    .send_message = "TEST",
    .max_retry_count = 3,
    .send_interval_ms = 300000  // 5분 간격
  };
  
  LOG_INFO("=== LoRa Initialization ===");
 8002e02:	496f      	ldr	r1, [pc, #444]	@ (8002fc0 <StartDefaultTask+0x29c>)
 8002e04:	2001      	movs	r0, #1
 8002e06:	f001 fd2b 	bl	8004860 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	460b      	mov	r3, r1
 8002e14:	496b      	ldr	r1, [pc, #428]	@ (8002fc4 <StartDefaultTask+0x2a0>)
 8002e16:	2001      	movs	r0, #1
 8002e18:	f001 fd22 	bl	8004860 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // LoRa 로그를 SD카드에 저장하기 시작
  LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8002e1c:	496a      	ldr	r1, [pc, #424]	@ (8002fc8 <StartDefaultTask+0x2a4>)
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f001 fd1e 	bl	8004860 <LOGGER_SendFormatted>
  
  // SD카드 로그 파일 생성
  SDStorage_CreateNewLogFile();
 8002e24:	f7fe f984 	bl	8001130 <SDStorage_CreateNewLogFile>
 8002e28:	e008      	b.n	8002e3c <StartDefaultTask+0x118>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 8002e2a:	4968      	ldr	r1, [pc, #416]	@ (8002fcc <StartDefaultTask+0x2a8>)
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	f001 fd17 	bl	8004860 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002e32:	495c      	ldr	r1, [pc, #368]	@ (8002fa4 <StartDefaultTask+0x280>)
 8002e34:	2003      	movs	r0, #3
 8002e36:	f001 fd13 	bl	8004860 <LOGGER_SendFormatted>
    goto idle_loop;
 8002e3a:	e086      	b.n	8002f4a <StartDefaultTask+0x226>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (lora_new_response) {
 8002e40:	4b63      	ldr	r3, [pc, #396]	@ (8002fd0 <StartDefaultTask+0x2ac>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <StartDefaultTask+0x13a>
      rx_data = lora_rx_response;
 8002e4a:	4b62      	ldr	r3, [pc, #392]	@ (8002fd4 <StartDefaultTask+0x2b0>)
 8002e4c:	657b      	str	r3, [r7, #84]	@ 0x54
      lora_new_response = false; // 플래그 클리어
 8002e4e:	4b60      	ldr	r3, [pc, #384]	@ (8002fd0 <StartDefaultTask+0x2ac>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8002e54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e56:	4960      	ldr	r1, [pc, #384]	@ (8002fd8 <StartDefaultTask+0x2b4>)
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f001 fd01 	bl	8004860 <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fc97 	bl	8000798 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 8002e6a:	7a3b      	ldrb	r3, [r7, #8]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	460a      	mov	r2, r1
 8002e78:	4958      	ldr	r1, [pc, #352]	@ (8002fdc <StartDefaultTask+0x2b8>)
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f001 fcf0 	bl	8004860 <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 8002e80:	7a3b      	ldrb	r3, [r7, #8]
 8002e82:	2b0a      	cmp	r3, #10
 8002e84:	d85b      	bhi.n	8002f3e <StartDefaultTask+0x21a>
 8002e86:	a201      	add	r2, pc, #4	@ (adr r2, 8002e8c <StartDefaultTask+0x168>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002eb9 	.word	0x08002eb9
 8002e90:	08002ec3 	.word	0x08002ec3
 8002e94:	08002edb 	.word	0x08002edb
 8002e98:	08002ef3 	.word	0x08002ef3
 8002e9c:	08002efd 	.word	0x08002efd
 8002ea0:	08002ef3 	.word	0x08002ef3
 8002ea4:	08002efd 	.word	0x08002efd
 8002ea8:	08002f07 	.word	0x08002f07
 8002eac:	08002f1d 	.word	0x08002f1d
 8002eb0:	08002f27 	.word	0x08002f27
 8002eb4:	08002f27 	.word	0x08002f27
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 8002eb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ebc:	f013 fac8 	bl	8016450 <osDelay>
        break;
 8002ec0:	e042      	b.n	8002f48 <StartDefaultTask+0x224>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	4945      	ldr	r1, [pc, #276]	@ (8002fe0 <StartDefaultTask+0x2bc>)
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f001 fcc8 	bl	8004860 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8002ed0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ed4:	f013 fabc 	bl	8016450 <osDelay>
        break;
 8002ed8:	e036      	b.n	8002f48 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3301      	adds	r3, #1
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4940      	ldr	r1, [pc, #256]	@ (8002fe4 <StartDefaultTask+0x2c0>)
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f001 fcbc 	bl	8004860 <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8002ee8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002eec:	f013 fab0 	bl	8016450 <osDelay>
        break;
 8002ef0:	e02a      	b.n	8002f48 <StartDefaultTask+0x224>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 8002ef2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ef6:	f013 faab 	bl	8016450 <osDelay>
        break;
 8002efa:	e025      	b.n	8002f48 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8002efc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002f00:	f013 faa6 	bl	8016450 <osDelay>
        break;
 8002f04:	e020      	b.n	8002f48 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4937      	ldr	r1, [pc, #220]	@ (8002fe8 <StartDefaultTask+0x2c4>)
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f001 fca7 	bl	8004860 <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8002f12:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002f16:	f013 fa9b 	bl	8016450 <osDelay>
        break;
 8002f1a:	e015      	b.n	8002f48 <StartDefaultTask+0x224>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8002f1c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002f20:	f013 fa96 	bl	8016450 <osDelay>
        break;
 8002f24:	e010      	b.n	8002f48 <StartDefaultTask+0x224>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8002f26:	7a3b      	ldrb	r3, [r7, #8]
 8002f28:	2b09      	cmp	r3, #9
 8002f2a:	d101      	bne.n	8002f30 <StartDefaultTask+0x20c>
 8002f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fec <StartDefaultTask+0x2c8>)
 8002f2e:	e000      	b.n	8002f32 <StartDefaultTask+0x20e>
 8002f30:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff0 <StartDefaultTask+0x2cc>)
 8002f32:	461a      	mov	r2, r3
 8002f34:	492f      	ldr	r1, [pc, #188]	@ (8002ff4 <StartDefaultTask+0x2d0>)
 8002f36:	2001      	movs	r0, #1
 8002f38:	f001 fc92 	bl	8004860 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8002f3c:	e005      	b.n	8002f4a <StartDefaultTask+0x226>
      default:
        osDelay(1000);
 8002f3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f42:	f013 fa85 	bl	8016450 <osDelay>
        break;
 8002f46:	bf00      	nop
  {
 8002f48:	e778      	b.n	8002e3c <StartDefaultTask+0x118>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8002f4a:	492b      	ldr	r1, [pc, #172]	@ (8002ff8 <StartDefaultTask+0x2d4>)
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f001 fc87 	bl	8004860 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	653b      	str	r3, [r7, #80]	@ 0x50
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8002f56:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002f5a:	f013 fa79 	bl	8016450 <osDelay>
    idle_counter++;
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f60:	3301      	adds	r3, #1
 8002f62:	653b      	str	r3, [r7, #80]	@ 0x50
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8002f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4924      	ldr	r1, [pc, #144]	@ (8002ffc <StartDefaultTask+0x2d8>)
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	f001 fc77 	bl	8004860 <LOGGER_SendFormatted>
    osDelay(30000);
 8002f72:	bf00      	nop
 8002f74:	e7ef      	b.n	8002f56 <StartDefaultTask+0x232>
 8002f76:	bf00      	nop
 8002f78:	0801b0ec 	.word	0x0801b0ec
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	431bde83 	.word	0x431bde83
 8002f84:	0801b118 	.word	0x0801b118
 8002f88:	0801b130 	.word	0x0801b130
 8002f8c:	0801b158 	.word	0x0801b158
 8002f90:	0801b1a4 	.word	0x0801b1a4
 8002f94:	0801b1e0 	.word	0x0801b1e0
 8002f98:	0801b20c 	.word	0x0801b20c
 8002f9c:	0801b214 	.word	0x0801b214
 8002fa0:	0801b240 	.word	0x0801b240
 8002fa4:	0801b278 	.word	0x0801b278
 8002fa8:	0801b2bc 	.word	0x0801b2bc
 8002fac:	0801b318 	.word	0x0801b318
 8002fb0:	0801b350 	.word	0x0801b350
 8002fb4:	0801b5e0 	.word	0x0801b5e0
 8002fb8:	000493e0 	.word	0x000493e0
 8002fbc:	0801b390 	.word	0x0801b390
 8002fc0:	0801b398 	.word	0x0801b398
 8002fc4:	0801b3b4 	.word	0x0801b3b4
 8002fc8:	0801b3e4 	.word	0x0801b3e4
 8002fcc:	0801b2ec 	.word	0x0801b2ec
 8002fd0:	200014ac 	.word	0x200014ac
 8002fd4:	200012ac 	.word	0x200012ac
 8002fd8:	0801b41c 	.word	0x0801b41c
 8002fdc:	0801b44c 	.word	0x0801b44c
 8002fe0:	0801b478 	.word	0x0801b478
 8002fe4:	0801b4a0 	.word	0x0801b4a0
 8002fe8:	0801b4d4 	.word	0x0801b4d4
 8002fec:	0801b504 	.word	0x0801b504
 8002ff0:	0801b50c 	.word	0x0801b50c
 8002ff4:	0801b514 	.word	0x0801b514
 8002ff8:	0801b54c 	.word	0x0801b54c
 8002ffc:	0801b574 	.word	0x0801b574

08003000 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8003006:	af04      	add	r7, sp, #16
 8003008:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800300c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003010:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003012:	49a8      	ldr	r1, [pc, #672]	@ (80032b4 <StartReceiveTask+0x2b4>)
 8003014:	2001      	movs	r0, #1
 8003016:	f001 fc23 	bl	8004860 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 800301a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800301e:	f013 fa17 	bl	8016450 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003022:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003026:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 800302e:	f107 0208 	add.w	r2, r7, #8
 8003032:	f107 030c 	add.w	r3, r7, #12
 8003036:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fd28 	bl	8004a90 <UART_Receive>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003046:	4b9c      	ldr	r3, [pc, #624]	@ (80032b8 <StartReceiveTask+0x2b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a9a      	ldr	r2, [pc, #616]	@ (80032b8 <StartReceiveTask+0x2b8>)
 800304e:	6013      	str	r3, [r2, #0]
    if (debug_counter % 200 == 0 && status != UART_STATUS_TIMEOUT) {  // 10초마다, 타임아웃 제외
 8003050:	4b99      	ldr	r3, [pc, #612]	@ (80032b8 <StartReceiveTask+0x2b8>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b99      	ldr	r3, [pc, #612]	@ (80032bc <StartReceiveTask+0x2bc>)
 8003056:	fba3 1302 	umull	r1, r3, r3, r2
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	21c8      	movs	r1, #200	@ 0xc8
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11f      	bne.n	80030a8 <StartReceiveTask+0xa8>
 8003068:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800306c:	2b02      	cmp	r3, #2
 800306e:	d01b      	beq.n	80030a8 <StartReceiveTask+0xa8>
      LOG_INFO("[RX_TASK] Status check #%lu: status=%d, bytes=%d, flags: rx_complete=%d, rx_error=%d", 
 8003070:	4b91      	ldr	r3, [pc, #580]	@ (80032b8 <StartReceiveTask+0x2b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a91      	ldr	r2, [pc, #580]	@ (80032bc <StartReceiveTask+0x2bc>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	099a      	lsrs	r2, r3, #6
 800307c:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003080:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003084:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	488d      	ldr	r0, [pc, #564]	@ (80032c0 <StartReceiveTask+0x2c0>)
 800308c:	7800      	ldrb	r0, [r0, #0]
 800308e:	b2c0      	uxtb	r0, r0
 8003090:	4604      	mov	r4, r0
 8003092:	488c      	ldr	r0, [pc, #560]	@ (80032c4 <StartReceiveTask+0x2c4>)
 8003094:	7800      	ldrb	r0, [r0, #0]
 8003096:	b2c0      	uxtb	r0, r0
 8003098:	9002      	str	r0, [sp, #8]
 800309a:	9401      	str	r4, [sp, #4]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	460b      	mov	r3, r1
 80030a0:	4989      	ldr	r1, [pc, #548]	@ (80032c8 <StartReceiveTask+0x2c8>)
 80030a2:	2001      	movs	r0, #1
 80030a4:	f001 fbdc 	bl	8004860 <LOGGER_SendFormatted>
               debug_counter / 200, status, local_bytes_received, uart_rx_complete_flag, uart_rx_error_flag);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 80030a8:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 80fc 	bne.w	80032aa <StartReceiveTask+0x2aa>
 80030b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030b6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f340 80f4 	ble.w	80032aa <StartReceiveTask+0x2aa>
      // 수신 완료 - TDD ResponseHandler로 분석
      LOG_INFO("📥 RECV: '%s' (%d bytes)", local_buffer, local_bytes_received);
 80030c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030c6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f107 020c 	add.w	r2, r7, #12
 80030d0:	497e      	ldr	r1, [pc, #504]	@ (80032cc <StartReceiveTask+0x2cc>)
 80030d2:	2001      	movs	r0, #1
 80030d4:	f001 fbc4 	bl	8004860 <LOGGER_SendFormatted>
      
      // TDD ResponseHandler를 사용하여 응답 분석
      if (is_response_ok(local_buffer)) {
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fe6d 	bl	8000dbc <is_response_ok>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <StartReceiveTask+0xf2>
        LOG_INFO("✅ OK response");
 80030e8:	4979      	ldr	r1, [pc, #484]	@ (80032d0 <StartReceiveTask+0x2d0>)
 80030ea:	2001      	movs	r0, #1
 80030ec:	f001 fbb8 	bl	8004860 <LOGGER_SendFormatted>
 80030f0:	e049      	b.n	8003186 <StartReceiveTask+0x186>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	4977      	ldr	r1, [pc, #476]	@ (80032d4 <StartReceiveTask+0x2d4>)
 80030f8:	4618      	mov	r0, r3
 80030fa:	f016 fc90 	bl	8019a1e <strstr>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <StartReceiveTask+0x10e>
        LOG_INFO("✅ JOIN response");
 8003104:	4974      	ldr	r1, [pc, #464]	@ (80032d8 <StartReceiveTask+0x2d8>)
 8003106:	2001      	movs	r0, #1
 8003108:	f001 fbaa 	bl	8004860 <LOGGER_SendFormatted>
 800310c:	e03b      	b.n	8003186 <StartReceiveTask+0x186>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 800310e:	f107 030c 	add.w	r3, r7, #12
 8003112:	4972      	ldr	r1, [pc, #456]	@ (80032dc <StartReceiveTask+0x2dc>)
 8003114:	4618      	mov	r0, r3
 8003116:	f016 fc82 	bl	8019a1e <strstr>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <StartReceiveTask+0x12a>
        LOG_INFO("📡 LoRa module boot message (ignored)");
 8003120:	496f      	ldr	r1, [pc, #444]	@ (80032e0 <StartReceiveTask+0x2e0>)
 8003122:	2001      	movs	r0, #1
 8003124:	f001 fb9c 	bl	8004860 <LOGGER_SendFormatted>
 8003128:	e02d      	b.n	8003186 <StartReceiveTask+0x186>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd ff30 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        switch (response_type) {
 800313a:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800313e:	2b03      	cmp	r3, #3
 8003140:	d821      	bhi.n	8003186 <StartReceiveTask+0x186>
 8003142:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <StartReceiveTask+0x148>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	08003159 	.word	0x08003159
 800314c:	08003163 	.word	0x08003163
 8003150:	0800316d 	.word	0x0800316d
 8003154:	08003177 	.word	0x08003177
          case RESPONSE_OK:
            LOG_INFO("✅ OK");
 8003158:	4962      	ldr	r1, [pc, #392]	@ (80032e4 <StartReceiveTask+0x2e4>)
 800315a:	2001      	movs	r0, #1
 800315c:	f001 fb80 	bl	8004860 <LOGGER_SendFormatted>
            break;
 8003160:	e011      	b.n	8003186 <StartReceiveTask+0x186>
          case RESPONSE_ERROR:
            LOG_WARN("⚠️ ERROR");
 8003162:	4961      	ldr	r1, [pc, #388]	@ (80032e8 <StartReceiveTask+0x2e8>)
 8003164:	2002      	movs	r0, #2
 8003166:	f001 fb7b 	bl	8004860 <LOGGER_SendFormatted>
            break;
 800316a:	e00c      	b.n	8003186 <StartReceiveTask+0x186>
          case RESPONSE_TIMEOUT:
            LOG_WARN("⚠️ TIMEOUT");
 800316c:	495f      	ldr	r1, [pc, #380]	@ (80032ec <StartReceiveTask+0x2ec>)
 800316e:	2002      	movs	r0, #2
 8003170:	f001 fb76 	bl	8004860 <LOGGER_SendFormatted>
            break;
 8003174:	e007      	b.n	8003186 <StartReceiveTask+0x186>
          case RESPONSE_UNKNOWN:
            LOG_INFO("❓ UNKNOWN format: %.20s...", local_buffer);  // 처음 20자만 표시
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	461a      	mov	r2, r3
 800317c:	495c      	ldr	r1, [pc, #368]	@ (80032f0 <StartReceiveTask+0x2f0>)
 800317e:	2001      	movs	r0, #1
 8003180:	f001 fb6e 	bl	8004860 <LOGGER_SendFormatted>
            break;
 8003184:	bf00      	nop
        }
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003186:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800318a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	4619      	mov	r1, r3
 8003198:	4856      	ldr	r0, [pc, #344]	@ (80032f4 <StartReceiveTask+0x2f4>)
 800319a:	f016 fc93 	bl	8019ac4 <memcpy>
      rx_bytes_received = local_bytes_received;
 800319e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80031a2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a53      	ldr	r2, [pc, #332]	@ (80032f8 <StartReceiveTask+0x2f8>)
 80031aa:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fe00 	bl	8000dbc <is_response_ok>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <StartReceiveTask+0x1ca>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80031c8:	e03f      	b.n	800324a <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	4941      	ldr	r1, [pc, #260]	@ (80032d4 <StartReceiveTask+0x2d4>)
 80031d0:	4618      	mov	r0, r3
 80031d2:	f016 fc24 	bl	8019a1e <strstr>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <StartReceiveTask+0x1e4>
        // JOIN 성공 응답
        is_lora_command_response = true;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80031e2:	e032      	b.n	800324a <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	4944      	ldr	r1, [pc, #272]	@ (80032fc <StartReceiveTask+0x2fc>)
 80031ea:	4618      	mov	r0, r3
 80031ec:	f016 fc17 	bl	8019a1e <strstr>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <StartReceiveTask+0x1fe>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80031fc:	e025      	b.n	800324a <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 80031fe:	f107 030c 	add.w	r3, r7, #12
 8003202:	4936      	ldr	r1, [pc, #216]	@ (80032dc <StartReceiveTask+0x2dc>)
 8003204:	4618      	mov	r0, r3
 8003206:	f016 fc0a 	bl	8019a1e <strstr>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d108      	bne.n	8003222 <StartReceiveTask+0x222>
 8003210:	f107 030c 	add.w	r3, r7, #12
 8003214:	493a      	ldr	r1, [pc, #232]	@ (8003300 <StartReceiveTask+0x300>)
 8003216:	4618      	mov	r0, r3
 8003218:	f016 fc01 	bl	8019a1e <strstr>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <StartReceiveTask+0x22c>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8003222:	4938      	ldr	r1, [pc, #224]	@ (8003304 <StartReceiveTask+0x304>)
 8003224:	2000      	movs	r0, #0
 8003226:	f001 fb1b 	bl	8004860 <LOGGER_SendFormatted>
 800322a:	e00e      	b.n	800324a <StartReceiveTask+0x24a>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd feaf 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 8003236:	4603      	mov	r3, r0
 8003238:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (response_type != RESPONSE_UNKNOWN) {
 800323c:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 8003240:	2b03      	cmp	r3, #3
 8003242:	d002      	beq.n	800324a <StartReceiveTask+0x24a>
          is_lora_command_response = true;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 800324a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01d      	beq.n	800328e <StartReceiveTask+0x28e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8003252:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003256:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	4619      	mov	r1, r3
 8003264:	4828      	ldr	r0, [pc, #160]	@ (8003308 <StartReceiveTask+0x308>)
 8003266:	f016 fc2d 	bl	8019ac4 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 800326a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800326e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <StartReceiveTask+0x308>)
 8003276:	2100      	movs	r1, #0
 8003278:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 800327a:	4b24      	ldr	r3, [pc, #144]	@ (800330c <StartReceiveTask+0x30c>)
 800327c:	2201      	movs	r2, #1
 800327e:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	461a      	mov	r2, r3
 8003286:	4922      	ldr	r1, [pc, #136]	@ (8003310 <StartReceiveTask+0x310>)
 8003288:	2000      	movs	r0, #0
 800328a:	f001 fae9 	bl	8004860 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f016 fba5 	bl	80199e8 <memset>
      local_bytes_received = 0;
 800329e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80032a2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 80032aa:	2032      	movs	r0, #50	@ 0x32
 80032ac:	f013 f8d0 	bl	8016450 <osDelay>
  {
 80032b0:	e6bd      	b.n	800302e <StartReceiveTask+0x2e>
 80032b2:	bf00      	nop
 80032b4:	0801b5f4 	.word	0x0801b5f4
 80032b8:	20001524 	.word	0x20001524
 80032bc:	51eb851f 	.word	0x51eb851f
 80032c0:	20001510 	.word	0x20001510
 80032c4:	20001511 	.word	0x20001511
 80032c8:	0801b61c 	.word	0x0801b61c
 80032cc:	0801b674 	.word	0x0801b674
 80032d0:	0801b690 	.word	0x0801b690
 80032d4:	0801b6a0 	.word	0x0801b6a0
 80032d8:	0801b6ac 	.word	0x0801b6ac
 80032dc:	0801b6c0 	.word	0x0801b6c0
 80032e0:	0801b6cc 	.word	0x0801b6cc
 80032e4:	0801b6f4 	.word	0x0801b6f4
 80032e8:	0801b6fc 	.word	0x0801b6fc
 80032ec:	0801b70c 	.word	0x0801b70c
 80032f0:	0801b71c 	.word	0x0801b71c
 80032f4:	200010a8 	.word	0x200010a8
 80032f8:	200012a8 	.word	0x200012a8
 80032fc:	0801b73c 	.word	0x0801b73c
 8003300:	0801b744 	.word	0x0801b744
 8003304:	0801b754 	.word	0x0801b754
 8003308:	200012ac 	.word	0x200012ac
 800330c:	200014ac 	.word	0x200014ac
 8003310:	0801b790 	.word	0x0801b790

08003314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a04      	ldr	r2, [pc, #16]	@ (8003334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003326:	f001 feb5 	bl	8005094 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40001000 	.word	0x40001000

08003338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
}
 800333e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <Error_Handler+0x8>

08003344 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800334a:	4b10      	ldr	r3, [pc, #64]	@ (800338c <MX_DMA_Init+0x48>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	4a0f      	ldr	r2, [pc, #60]	@ (800338c <MX_DMA_Init+0x48>)
 8003350:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003354:	6313      	str	r3, [r2, #48]	@ 0x30
 8003356:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <MX_DMA_Init+0x48>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2105      	movs	r1, #5
 8003366:	2039      	movs	r0, #57	@ 0x39
 8003368:	f002 fa28 	bl	80057bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800336c:	2039      	movs	r0, #57	@ 0x39
 800336e:	f002 fa41 	bl	80057f4 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2105      	movs	r1, #5
 8003376:	2047      	movs	r0, #71	@ 0x47
 8003378:	f002 fa20 	bl	80057bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800337c:	2047      	movs	r0, #71	@ 0x47
 800337e:	f002 fa39 	bl	80057f4 <HAL_NVIC_EnableIRQ>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8003394:	4b18      	ldr	r3, [pc, #96]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 8003396:	4a19      	ldr	r2, [pc, #100]	@ (80033fc <MX_USART6_DMA_Init+0x6c>)
 8003398:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800339a:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 800339c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80033a0:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033ae:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033b4:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b6:	4b10      	ldr	r3, [pc, #64]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033bc:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033be:	2200      	movs	r2, #0
 80033c0:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033ce:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80033d6:	4808      	ldr	r0, [pc, #32]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033d8:	f002 fb86 	bl	8005ae8 <HAL_DMA_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_USART6_DMA_Init+0x56>
  {
    Error_Handler();
 80033e2:	f7ff ffa9 	bl	8003338 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <MX_USART6_DMA_Init+0x70>)
 80033e8:	4a03      	ldr	r2, [pc, #12]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033ea:	675a      	str	r2, [r3, #116]	@ 0x74
 80033ec:	4b02      	ldr	r3, [pc, #8]	@ (80033f8 <MX_USART6_DMA_Init+0x68>)
 80033ee:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <MX_USART6_DMA_Init+0x70>)
 80033f0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200014b0 	.word	0x200014b0
 80033fc:	40026428 	.word	0x40026428
 8003400:	20000fe4 	.word	0x20000fe4

08003404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <HAL_MspInit+0x4c>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	4a10      	ldr	r2, [pc, #64]	@ (8003450 <HAL_MspInit+0x4c>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003414:	6413      	str	r3, [r2, #64]	@ 0x40
 8003416:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <HAL_MspInit+0x4c>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341e:	607b      	str	r3, [r7, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003422:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_MspInit+0x4c>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <HAL_MspInit+0x4c>)
 8003428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800342c:	6453      	str	r3, [r2, #68]	@ 0x44
 800342e:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <HAL_MspInit+0x4c>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	210f      	movs	r1, #15
 800343e:	f06f 0001 	mvn.w	r0, #1
 8003442:	f002 f9bb 	bl	80057bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a21      	ldr	r2, [pc, #132]	@ (80034f8 <HAL_ADC_MspInit+0xa4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d13c      	bne.n	80034f0 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003476:	4b21      	ldr	r3, [pc, #132]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	4a20      	ldr	r2, [pc, #128]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 800347c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003480:	6453      	str	r3, [r2, #68]	@ 0x44
 8003482:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800348e:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	4a1a      	ldr	r2, [pc, #104]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 8003494:	f043 0320 	orr.w	r3, r3, #32
 8003498:	6313      	str	r3, [r2, #48]	@ 0x30
 800349a:	4b18      	ldr	r3, [pc, #96]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b12      	ldr	r3, [pc, #72]	@ (80034fc <HAL_ADC_MspInit+0xa8>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80034be:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80034c2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c4:	2303      	movs	r3, #3
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	4619      	mov	r1, r3
 80034d2:	480b      	ldr	r0, [pc, #44]	@ (8003500 <HAL_ADC_MspInit+0xac>)
 80034d4:	f003 fcb6 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80034d8:	2301      	movs	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034dc:	2303      	movs	r3, #3
 80034de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	4806      	ldr	r0, [pc, #24]	@ (8003504 <HAL_ADC_MspInit+0xb0>)
 80034ec:	f003 fcaa 	bl	8006e44 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80034f0:	bf00      	nop
 80034f2:	3728      	adds	r7, #40	@ 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40012200 	.word	0x40012200
 80034fc:	40023800 	.word	0x40023800
 8003500:	40021400 	.word	0x40021400
 8003504:	40020000 	.word	0x40020000

08003508 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0a      	ldr	r2, [pc, #40]	@ (8003540 <HAL_CRC_MspInit+0x38>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10b      	bne.n	8003532 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_CRC_MspInit+0x3c>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4a09      	ldr	r2, [pc, #36]	@ (8003544 <HAL_CRC_MspInit+0x3c>)
 8003520:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003524:	6313      	str	r3, [r2, #48]	@ 0x30
 8003526:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <HAL_CRC_MspInit+0x3c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40023000 	.word	0x40023000
 8003544:	40023800 	.word	0x40023800

08003548 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08e      	sub	sp, #56	@ 0x38
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a50      	ldr	r2, [pc, #320]	@ (80036a8 <HAL_DCMI_MspInit+0x160>)
 8003566:	4293      	cmp	r3, r2
 8003568:	f040 809a 	bne.w	80036a0 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800356c:	4b4f      	ldr	r3, [pc, #316]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 800356e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003570:	4a4e      	ldr	r2, [pc, #312]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6353      	str	r3, [r2, #52]	@ 0x34
 8003578:	4b4c      	ldr	r3, [pc, #304]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003584:	4b49      	ldr	r3, [pc, #292]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003588:	4a48      	ldr	r2, [pc, #288]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 800358a:	f043 0310 	orr.w	r3, r3, #16
 800358e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003590:	4b46      	ldr	r3, [pc, #280]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800359c:	4b43      	ldr	r3, [pc, #268]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	4a42      	ldr	r2, [pc, #264]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035a2:	f043 0308 	orr.w	r3, r3, #8
 80035a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a8:	4b40      	ldr	r3, [pc, #256]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80035b4:	4b3d      	ldr	r3, [pc, #244]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	4a3c      	ldr	r2, [pc, #240]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035be:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c0:	4b3a      	ldr	r3, [pc, #232]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80035cc:	4b37      	ldr	r3, [pc, #220]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	4a36      	ldr	r2, [pc, #216]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d8:	4b34      	ldr	r3, [pc, #208]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e4:	4b31      	ldr	r3, [pc, #196]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e8:	4a30      	ldr	r2, [pc, #192]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f0:	4b2e      	ldr	r3, [pc, #184]	@ (80036ac <HAL_DCMI_MspInit+0x164>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80035fc:	2360      	movs	r3, #96	@ 0x60
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003600:	2302      	movs	r3, #2
 8003602:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003608:	2300      	movs	r3, #0
 800360a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800360c:	230d      	movs	r3, #13
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003614:	4619      	mov	r1, r3
 8003616:	4826      	ldr	r0, [pc, #152]	@ (80036b0 <HAL_DCMI_MspInit+0x168>)
 8003618:	f003 fc14 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800361c:	2308      	movs	r3, #8
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2302      	movs	r3, #2
 8003622:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003628:	2300      	movs	r3, #0
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800362c:	230d      	movs	r3, #13
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003634:	4619      	mov	r1, r3
 8003636:	481f      	ldr	r0, [pc, #124]	@ (80036b4 <HAL_DCMI_MspInit+0x16c>)
 8003638:	f003 fc04 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800363c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	2302      	movs	r3, #2
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	2300      	movs	r3, #0
 800364c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800364e:	230d      	movs	r3, #13
 8003650:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003656:	4619      	mov	r1, r3
 8003658:	4817      	ldr	r0, [pc, #92]	@ (80036b8 <HAL_DCMI_MspInit+0x170>)
 800365a:	f003 fbf3 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800365e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	2300      	movs	r3, #0
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003670:	230d      	movs	r3, #13
 8003672:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003678:	4619      	mov	r1, r3
 800367a:	4810      	ldr	r0, [pc, #64]	@ (80036bc <HAL_DCMI_MspInit+0x174>)
 800367c:	f003 fbe2 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003680:	2350      	movs	r3, #80	@ 0x50
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003690:	230d      	movs	r3, #13
 8003692:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003698:	4619      	mov	r1, r3
 800369a:	4809      	ldr	r0, [pc, #36]	@ (80036c0 <HAL_DCMI_MspInit+0x178>)
 800369c:	f003 fbd2 	bl	8006e44 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80036a0:	bf00      	nop
 80036a2:	3738      	adds	r7, #56	@ 0x38
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	50050000 	.word	0x50050000
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021800 	.word	0x40021800
 80036bc:	40021c00 	.word	0x40021c00
 80036c0:	40020000 	.word	0x40020000

080036c4 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003708 <HAL_DMA2D_MspInit+0x44>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d113      	bne.n	80036fe <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <HAL_DMA2D_MspInit+0x48>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	4a0c      	ldr	r2, [pc, #48]	@ (800370c <HAL_DMA2D_MspInit+0x48>)
 80036dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e2:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <HAL_DMA2D_MspInit+0x48>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2105      	movs	r1, #5
 80036f2:	205a      	movs	r0, #90	@ 0x5a
 80036f4:	f002 f862 	bl	80057bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80036f8:	205a      	movs	r0, #90	@ 0x5a
 80036fa:	f002 f87b 	bl	80057f4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	4002b000 	.word	0x4002b000
 800370c:	40023800 	.word	0x40023800

08003710 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	@ 0x38
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3f      	ldr	r2, [pc, #252]	@ (800382c <HAL_ETH_MspInit+0x11c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d178      	bne.n	8003824 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003732:	4b3f      	ldr	r3, [pc, #252]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	4a3e      	ldr	r2, [pc, #248]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003738:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800373c:	6313      	str	r3, [r2, #48]	@ 0x30
 800373e:	4b3c      	ldr	r3, [pc, #240]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	623b      	str	r3, [r7, #32]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	4b39      	ldr	r3, [pc, #228]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	4a38      	ldr	r2, [pc, #224]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003750:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003754:	6313      	str	r3, [r2, #48]	@ 0x30
 8003756:	4b36      	ldr	r3, [pc, #216]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4b33      	ldr	r3, [pc, #204]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a32      	ldr	r2, [pc, #200]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003768:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800376c:	6313      	str	r3, [r2, #48]	@ 0x30
 800376e:	4b30      	ldr	r3, [pc, #192]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800377a:	4b2d      	ldr	r3, [pc, #180]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	4a2c      	ldr	r2, [pc, #176]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003784:	6313      	str	r3, [r2, #48]	@ 0x30
 8003786:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003792:	4b27      	ldr	r3, [pc, #156]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	4a26      	ldr	r2, [pc, #152]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	6313      	str	r3, [r2, #48]	@ 0x30
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037aa:	4b21      	ldr	r3, [pc, #132]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	4a20      	ldr	r2, [pc, #128]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003830 <HAL_ETH_MspInit+0x120>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80037c2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d0:	2303      	movs	r3, #3
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037d4:	230b      	movs	r3, #11
 80037d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037dc:	4619      	mov	r1, r3
 80037de:	4815      	ldr	r0, [pc, #84]	@ (8003834 <HAL_ETH_MspInit+0x124>)
 80037e0:	f003 fb30 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80037e4:	2332      	movs	r3, #50	@ 0x32
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e8:	2302      	movs	r3, #2
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f0:	2303      	movs	r3, #3
 80037f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037f4:	230b      	movs	r3, #11
 80037f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037fc:	4619      	mov	r1, r3
 80037fe:	480e      	ldr	r0, [pc, #56]	@ (8003838 <HAL_ETH_MspInit+0x128>)
 8003800:	f003 fb20 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003804:	2386      	movs	r3, #134	@ 0x86
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003814:	230b      	movs	r3, #11
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800381c:	4619      	mov	r1, r3
 800381e:	4807      	ldr	r0, [pc, #28]	@ (800383c <HAL_ETH_MspInit+0x12c>)
 8003820:	f003 fb10 	bl	8006e44 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003824:	bf00      	nop
 8003826:	3738      	adds	r7, #56	@ 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40028000 	.word	0x40028000
 8003830:	40023800 	.word	0x40023800
 8003834:	40021800 	.word	0x40021800
 8003838:	40020800 	.word	0x40020800
 800383c:	40020000 	.word	0x40020000

08003840 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b0ac      	sub	sp, #176	@ 0xb0
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003858:	f107 0318 	add.w	r3, r7, #24
 800385c:	2284      	movs	r2, #132	@ 0x84
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f016 f8c1 	bl	80199e8 <memset>
  if(hi2c->Instance==I2C1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a44      	ldr	r2, [pc, #272]	@ (800397c <HAL_I2C_MspInit+0x13c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d13d      	bne.n	80038ec <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003870:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003874:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003876:	2300      	movs	r3, #0
 8003878:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800387a:	f107 0318 	add.w	r3, r7, #24
 800387e:	4618      	mov	r0, r3
 8003880:	f006 fffe 	bl	800a880 <HAL_RCCEx_PeriphCLKConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800388a:	f7ff fd55 	bl	8003338 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388e:	4b3c      	ldr	r3, [pc, #240]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	4a3b      	ldr	r2, [pc, #236]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6313      	str	r3, [r2, #48]	@ 0x30
 800389a:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80038a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ae:	2312      	movs	r3, #18
 80038b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038c0:	2304      	movs	r3, #4
 80038c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80038ca:	4619      	mov	r1, r3
 80038cc:	482d      	ldr	r0, [pc, #180]	@ (8003984 <HAL_I2C_MspInit+0x144>)
 80038ce:	f003 fab9 	bl	8006e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 80038d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038de:	4b28      	ldr	r3, [pc, #160]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038ea:	e042      	b.n	8003972 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a25      	ldr	r2, [pc, #148]	@ (8003988 <HAL_I2C_MspInit+0x148>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d13d      	bne.n	8003972 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80038f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	4618      	mov	r0, r3
 8003908:	f006 ffba 	bl	800a880 <HAL_RCCEx_PeriphCLKConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003912:	f7ff fd11 	bl	8003338 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003916:	4b1a      	ldr	r3, [pc, #104]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	4a19      	ldr	r2, [pc, #100]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 800391c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003920:	6313      	str	r3, [r2, #48]	@ 0x30
 8003922:	4b17      	ldr	r3, [pc, #92]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800392e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003932:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003936:	2312      	movs	r3, #18
 8003938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800393c:	2301      	movs	r3, #1
 800393e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003948:	2304      	movs	r3, #4
 800394a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800394e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003952:	4619      	mov	r1, r3
 8003954:	480d      	ldr	r0, [pc, #52]	@ (800398c <HAL_I2C_MspInit+0x14c>)
 8003956:	f003 fa75 	bl	8006e44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800395a:	4b09      	ldr	r3, [pc, #36]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 8003960:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003964:	6413      	str	r3, [r2, #64]	@ 0x40
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_I2C_MspInit+0x140>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
}
 8003972:	bf00      	nop
 8003974:	37b0      	adds	r7, #176	@ 0xb0
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40005400 	.word	0x40005400
 8003980:	40023800 	.word	0x40023800
 8003984:	40020400 	.word	0x40020400
 8003988:	40005c00 	.word	0x40005c00
 800398c:	40021c00 	.word	0x40021c00

08003990 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08e      	sub	sp, #56	@ 0x38
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a55      	ldr	r2, [pc, #340]	@ (8003b04 <HAL_LTDC_MspInit+0x174>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	f040 80a3 	bne.w	8003afa <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80039b4:	4b54      	ldr	r3, [pc, #336]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b8:	4a53      	ldr	r2, [pc, #332]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039be:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c0:	4b51      	ldr	r3, [pc, #324]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039d2:	f043 0310 	orr.w	r3, r3, #16
 80039d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80039e4:	4b48      	ldr	r3, [pc, #288]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	4a47      	ldr	r2, [pc, #284]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80039f0:	4b45      	ldr	r3, [pc, #276]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80039fc:	4b42      	ldr	r3, [pc, #264]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a00:	4a41      	ldr	r2, [pc, #260]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 8003a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a08:	4b3f      	ldr	r3, [pc, #252]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a14:	4b3c      	ldr	r3, [pc, #240]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	4a3b      	ldr	r2, [pc, #236]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 8003a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a20:	4b39      	ldr	r3, [pc, #228]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a2c:	4b36      	ldr	r3, [pc, #216]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	4a35      	ldr	r2, [pc, #212]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 8003a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a38:	4b33      	ldr	r3, [pc, #204]	@ (8003b08 <HAL_LTDC_MspInit+0x178>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003a44:	2310      	movs	r3, #16
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a50:	2300      	movs	r3, #0
 8003a52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a54:	230e      	movs	r3, #14
 8003a56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	482b      	ldr	r0, [pc, #172]	@ (8003b0c <HAL_LTDC_MspInit+0x17c>)
 8003a60:	f003 f9f0 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003a64:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a72:	2300      	movs	r3, #0
 8003a74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a76:	230e      	movs	r3, #14
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4823      	ldr	r0, [pc, #140]	@ (8003b10 <HAL_LTDC_MspInit+0x180>)
 8003a82:	f003 f9df 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003a86:	23f7      	movs	r3, #247	@ 0xf7
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	2300      	movs	r3, #0
 8003a94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a96:	230e      	movs	r3, #14
 8003a98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	481c      	ldr	r0, [pc, #112]	@ (8003b14 <HAL_LTDC_MspInit+0x184>)
 8003aa2:	f003 f9cf 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003ab8:	2309      	movs	r3, #9
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4815      	ldr	r0, [pc, #84]	@ (8003b18 <HAL_LTDC_MspInit+0x188>)
 8003ac4:	f003 f9be 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003ac8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ada:	230e      	movs	r3, #14
 8003adc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	480d      	ldr	r0, [pc, #52]	@ (8003b1c <HAL_LTDC_MspInit+0x18c>)
 8003ae6:	f003 f9ad 	bl	8006e44 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2105      	movs	r1, #5
 8003aee:	2058      	movs	r0, #88	@ 0x58
 8003af0:	f001 fe64 	bl	80057bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003af4:	2058      	movs	r0, #88	@ 0x58
 8003af6:	f001 fe7d 	bl	80057f4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003afa:	bf00      	nop
 8003afc:	3738      	adds	r7, #56	@ 0x38
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40016800 	.word	0x40016800
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40022400 	.word	0x40022400
 8003b14:	40022800 	.word	0x40022800
 8003b18:	40021800 	.word	0x40021800
 8003b1c:	40022000 	.word	0x40022000

08003b20 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	@ 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c2c <HAL_QSPI_MspInit+0x10c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d170      	bne.n	8003c24 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003b42:	4b3b      	ldr	r3, [pc, #236]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	4a3a      	ldr	r2, [pc, #232]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8003b4e:	4b38      	ldr	r3, [pc, #224]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b5a:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	4a34      	ldr	r2, [pc, #208]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b60:	f043 0310 	orr.w	r3, r3, #16
 8003b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b66:	4b32      	ldr	r3, [pc, #200]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b72:	4b2f      	ldr	r3, [pc, #188]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	4a2e      	ldr	r2, [pc, #184]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b78:	f043 0302 	orr.w	r3, r3, #2
 8003b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b8a:	4b29      	ldr	r3, [pc, #164]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	4a28      	ldr	r2, [pc, #160]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b90:	f043 0308 	orr.w	r3, r3, #8
 8003b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b96:	4b26      	ldr	r3, [pc, #152]	@ (8003c30 <HAL_QSPI_MspInit+0x110>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003bb2:	2309      	movs	r3, #9
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003bb6:	f107 031c 	add.w	r3, r7, #28
 8003bba:	4619      	mov	r1, r3
 8003bbc:	481d      	ldr	r0, [pc, #116]	@ (8003c34 <HAL_QSPI_MspInit+0x114>)
 8003bbe:	f003 f941 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003bc2:	2340      	movs	r3, #64	@ 0x40
 8003bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003bd2:	230a      	movs	r3, #10
 8003bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003bd6:	f107 031c 	add.w	r3, r7, #28
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4816      	ldr	r0, [pc, #88]	@ (8003c38 <HAL_QSPI_MspInit+0x118>)
 8003bde:	f003 f931 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003be2:	2304      	movs	r3, #4
 8003be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003bf2:	2309      	movs	r3, #9
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf6:	f107 031c 	add.w	r3, r7, #28
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	480e      	ldr	r0, [pc, #56]	@ (8003c38 <HAL_QSPI_MspInit+0x118>)
 8003bfe:	f003 f921 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003c02:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c10:	2303      	movs	r3, #3
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003c14:	2309      	movs	r3, #9
 8003c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4807      	ldr	r0, [pc, #28]	@ (8003c3c <HAL_QSPI_MspInit+0x11c>)
 8003c20:	f003 f910 	bl	8006e44 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003c24:	bf00      	nop
 8003c26:	3730      	adds	r7, #48	@ 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	a0001000 	.word	0xa0001000
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020c00 	.word	0x40020c00

08003c40 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b0a4      	sub	sp, #144	@ 0x90
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	2284      	movs	r2, #132	@ 0x84
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f015 fec9 	bl	80199e8 <memset>
  if(hrtc->Instance==RTC)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c94 <HAL_RTC_MspInit+0x54>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d114      	bne.n	8003c8a <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c60:	2320      	movs	r3, #32
 8003c62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f006 fe06 	bl	800a880 <HAL_RCCEx_PeriphCLKConfig>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003c7a:	f7ff fb5d 	bl	8003338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <HAL_RTC_MspInit+0x58>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	4a05      	ldr	r2, [pc, #20]	@ (8003c98 <HAL_RTC_MspInit+0x58>)
 8003c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c88:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003c8a:	bf00      	nop
 8003c8c:	3790      	adds	r7, #144	@ 0x90
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40002800 	.word	0x40002800
 8003c98:	40023800 	.word	0x40023800

08003c9c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	@ 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a25      	ldr	r2, [pc, #148]	@ (8003d50 <HAL_SD_MspInit+0xb4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d144      	bne.n	8003d48 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003cbe:	4b25      	ldr	r3, [pc, #148]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	4a24      	ldr	r2, [pc, #144]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003cc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cca:	4b22      	ldr	r3, [pc, #136]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a1e      	ldr	r2, [pc, #120]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cee:	4b19      	ldr	r3, [pc, #100]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	4a18      	ldr	r2, [pc, #96]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003cf4:	f043 0308 	orr.w	r3, r3, #8
 8003cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfa:	4b16      	ldr	r3, [pc, #88]	@ (8003d54 <HAL_SD_MspInit+0xb8>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003d06:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003d0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d14:	2303      	movs	r3, #3
 8003d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003d18:	230c      	movs	r3, #12
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4619      	mov	r1, r3
 8003d22:	480d      	ldr	r0, [pc, #52]	@ (8003d58 <HAL_SD_MspInit+0xbc>)
 8003d24:	f003 f88e 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003d28:	2304      	movs	r3, #4
 8003d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d34:	2303      	movs	r3, #3
 8003d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003d38:	230c      	movs	r3, #12
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	4619      	mov	r1, r3
 8003d42:	4806      	ldr	r0, [pc, #24]	@ (8003d5c <HAL_SD_MspInit+0xc0>)
 8003d44:	f003 f87e 	bl	8006e44 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003d48:	bf00      	nop
 8003d4a:	3728      	adds	r7, #40	@ 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40020c00 	.word	0x40020c00

08003d60 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b0aa      	sub	sp, #168	@ 0xa8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d78:	f107 0310 	add.w	r3, r7, #16
 8003d7c:	2284      	movs	r2, #132	@ 0x84
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f015 fe31 	bl	80199e8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8003d8e:	d143      	bne.n	8003e18 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003d90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003d96:	2364      	movs	r3, #100	@ 0x64
 8003d98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003da2:	2302      	movs	r3, #2
 8003da4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003daa:	f107 0310 	add.w	r3, r7, #16
 8003dae:	4618      	mov	r0, r3
 8003db0:	f006 fd66 	bl	800a880 <HAL_RCCEx_PeriphCLKConfig>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8003dba:	f7ff fabd 	bl	8003338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003dbe:	4b18      	ldr	r3, [pc, #96]	@ (8003e20 <HAL_SPDIFRX_MspInit+0xc0>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	4a17      	ldr	r2, [pc, #92]	@ (8003e20 <HAL_SPDIFRX_MspInit+0xc0>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dca:	4b15      	ldr	r3, [pc, #84]	@ (8003e20 <HAL_SPDIFRX_MspInit+0xc0>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dd6:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <HAL_SPDIFRX_MspInit+0xc0>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	4a11      	ldr	r2, [pc, #68]	@ (8003e20 <HAL_SPDIFRX_MspInit+0xc0>)
 8003ddc:	f043 0308 	orr.w	r3, r3, #8
 8003de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <HAL_SPDIFRX_MspInit+0xc0>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df4:	2302      	movs	r3, #2
 8003df6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003e06:	2308      	movs	r3, #8
 8003e08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003e0c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003e10:	4619      	mov	r1, r3
 8003e12:	4804      	ldr	r0, [pc, #16]	@ (8003e24 <HAL_SPDIFRX_MspInit+0xc4>)
 8003e14:	f003 f816 	bl	8006e44 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8003e18:	bf00      	nop
 8003e1a:	37a8      	adds	r7, #168	@ 0xa8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40020c00 	.word	0x40020c00

08003e28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a25      	ldr	r2, [pc, #148]	@ (8003edc <HAL_SPI_MspInit+0xb4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d144      	bne.n	8003ed4 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	4a24      	ldr	r2, [pc, #144]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e56:	4b22      	ldr	r3, [pc, #136]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e62:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	4a18      	ldr	r2, [pc, #96]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e86:	4b16      	ldr	r3, [pc, #88]	@ (8003ee0 <HAL_SPI_MspInit+0xb8>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003e92:	2302      	movs	r3, #2
 8003e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e96:	2302      	movs	r3, #2
 8003e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ea2:	2305      	movs	r3, #5
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003ea6:	f107 0314 	add.w	r3, r7, #20
 8003eaa:	4619      	mov	r1, r3
 8003eac:	480d      	ldr	r0, [pc, #52]	@ (8003ee4 <HAL_SPI_MspInit+0xbc>)
 8003eae:	f002 ffc9 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003eb2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ec4:	2305      	movs	r3, #5
 8003ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4806      	ldr	r0, [pc, #24]	@ (8003ee8 <HAL_SPI_MspInit+0xc0>)
 8003ed0:	f002 ffb8 	bl	8006e44 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003ed4:	bf00      	nop
 8003ed6:	3728      	adds	r7, #40	@ 0x28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40003800 	.word	0x40003800
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	40020400 	.word	0x40020400

08003eec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	@ 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb4 <HAL_TIM_Base_MspInit+0xc8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10c      	bne.n	8003f18 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003efe:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f16:	e046      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f20:	d10c      	bne.n	8003f3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f22:	4b25      	ldr	r3, [pc, #148]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	4a24      	ldr	r2, [pc, #144]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f2e:	4b22      	ldr	r3, [pc, #136]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	69bb      	ldr	r3, [r7, #24]
}
 8003f3a:	e034      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1e      	ldr	r2, [pc, #120]	@ (8003fbc <HAL_TIM_Base_MspInit+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10c      	bne.n	8003f60 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f46:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f52:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
}
 8003f5e:	e022      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a16      	ldr	r2, [pc, #88]	@ (8003fc0 <HAL_TIM_Base_MspInit+0xd4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10c      	bne.n	8003f84 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f6a:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f76:	4b10      	ldr	r3, [pc, #64]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
}
 8003f82:	e010      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc4 <HAL_TIM_Base_MspInit+0xd8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	4a09      	ldr	r2, [pc, #36]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f9a:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <HAL_TIM_Base_MspInit+0xcc>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	bf00      	nop
 8003fa8:	3724      	adds	r7, #36	@ 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40010400 	.word	0x40010400

08003fc8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <HAL_TIM_PWM_MspInit+0x38>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003fda:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <HAL_TIM_PWM_MspInit+0x3c>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	4a09      	ldr	r2, [pc, #36]	@ (8004004 <HAL_TIM_PWM_MspInit+0x3c>)
 8003fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe6:	4b07      	ldr	r3, [pc, #28]	@ (8004004 <HAL_TIM_PWM_MspInit+0x3c>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40001800 	.word	0x40001800
 8004004:	40023800 	.word	0x40023800

08004008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004010:	f107 031c 	add.w	r3, r7, #28
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a56      	ldr	r2, [pc, #344]	@ (8004180 <HAL_TIM_MspPostInit+0x178>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d11d      	bne.n	8004066 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800402a:	4b56      	ldr	r3, [pc, #344]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	4a55      	ldr	r2, [pc, #340]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6313      	str	r3, [r2, #48]	@ 0x30
 8004036:	4b53      	ldr	r3, [pc, #332]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004048:	2302      	movs	r3, #2
 800404a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	2300      	movs	r3, #0
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004054:	2301      	movs	r3, #1
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	4619      	mov	r1, r3
 800405e:	484a      	ldr	r0, [pc, #296]	@ (8004188 <HAL_TIM_MspPostInit+0x180>)
 8004060:	f002 fef0 	bl	8006e44 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004064:	e087      	b.n	8004176 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406e:	d11d      	bne.n	80040ac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004070:	4b44      	ldr	r3, [pc, #272]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	4a43      	ldr	r2, [pc, #268]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6313      	str	r3, [r2, #48]	@ 0x30
 800407c:	4b41      	ldr	r3, [pc, #260]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004088:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800408c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408e:	2302      	movs	r3, #2
 8004090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004096:	2300      	movs	r3, #0
 8004098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800409a:	2301      	movs	r3, #1
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800409e:	f107 031c 	add.w	r3, r7, #28
 80040a2:	4619      	mov	r1, r3
 80040a4:	4838      	ldr	r0, [pc, #224]	@ (8004188 <HAL_TIM_MspPostInit+0x180>)
 80040a6:	f002 fecd 	bl	8006e44 <HAL_GPIO_Init>
}
 80040aa:	e064      	b.n	8004176 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a36      	ldr	r2, [pc, #216]	@ (800418c <HAL_TIM_MspPostInit+0x184>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d11c      	bne.n	80040f0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	4b33      	ldr	r3, [pc, #204]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040c2:	4b30      	ldr	r3, [pc, #192]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80040ce:	2310      	movs	r3, #16
 80040d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d2:	2302      	movs	r3, #2
 80040d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040da:	2300      	movs	r3, #0
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040de:	2302      	movs	r3, #2
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80040e2:	f107 031c 	add.w	r3, r7, #28
 80040e6:	4619      	mov	r1, r3
 80040e8:	4829      	ldr	r0, [pc, #164]	@ (8004190 <HAL_TIM_MspPostInit+0x188>)
 80040ea:	f002 feab 	bl	8006e44 <HAL_GPIO_Init>
}
 80040ee:	e042      	b.n	8004176 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a27      	ldr	r2, [pc, #156]	@ (8004194 <HAL_TIM_MspPostInit+0x18c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d11c      	bne.n	8004134 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80040fa:	4b22      	ldr	r3, [pc, #136]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	4a21      	ldr	r2, [pc, #132]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 8004100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004104:	6313      	str	r3, [r2, #48]	@ 0x30
 8004106:	4b1f      	ldr	r3, [pc, #124]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004112:	2301      	movs	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004116:	2302      	movs	r3, #2
 8004118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411e:	2300      	movs	r3, #0
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004122:	2302      	movs	r3, #2
 8004124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	4619      	mov	r1, r3
 800412c:	481a      	ldr	r0, [pc, #104]	@ (8004198 <HAL_TIM_MspPostInit+0x190>)
 800412e:	f002 fe89 	bl	8006e44 <HAL_GPIO_Init>
}
 8004132:	e020      	b.n	8004176 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a18      	ldr	r2, [pc, #96]	@ (800419c <HAL_TIM_MspPostInit+0x194>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d11b      	bne.n	8004176 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800413e:	4b11      	ldr	r3, [pc, #68]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	4a10      	ldr	r2, [pc, #64]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 8004144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004148:	6313      	str	r3, [r2, #48]	@ 0x30
 800414a:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <HAL_TIM_MspPostInit+0x17c>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004156:	2340      	movs	r3, #64	@ 0x40
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004162:	2300      	movs	r3, #0
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004166:	2309      	movs	r3, #9
 8004168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800416a:	f107 031c 	add.w	r3, r7, #28
 800416e:	4619      	mov	r1, r3
 8004170:	480b      	ldr	r0, [pc, #44]	@ (80041a0 <HAL_TIM_MspPostInit+0x198>)
 8004172:	f002 fe67 	bl	8006e44 <HAL_GPIO_Init>
}
 8004176:	bf00      	nop
 8004178:	3730      	adds	r7, #48	@ 0x30
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40023800 	.word	0x40023800
 8004188:	40020000 	.word	0x40020000
 800418c:	40000400 	.word	0x40000400
 8004190:	40020400 	.word	0x40020400
 8004194:	40000c00 	.word	0x40000c00
 8004198:	40022000 	.word	0x40022000
 800419c:	40001800 	.word	0x40001800
 80041a0:	40021c00 	.word	0x40021c00

080041a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b0ae      	sub	sp, #184	@ 0xb8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041bc:	f107 0320 	add.w	r3, r7, #32
 80041c0:	2284      	movs	r2, #132	@ 0x84
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f015 fc0f 	bl	80199e8 <memset>
  if(huart->Instance==USART1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a53      	ldr	r2, [pc, #332]	@ (800431c <HAL_UART_MspInit+0x178>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d15d      	bne.n	8004290 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041d4:	2340      	movs	r3, #64	@ 0x40
 80041d6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041d8:	2300      	movs	r3, #0
 80041da:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041dc:	f107 0320 	add.w	r3, r7, #32
 80041e0:	4618      	mov	r0, r3
 80041e2:	f006 fb4d 	bl	800a880 <HAL_RCCEx_PeriphCLKConfig>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80041ec:	f7ff f8a4 	bl	8003338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80041f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80041f6:	f043 0310 	orr.w	r3, r3, #16
 80041fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80041fc:	4b48      	ldr	r3, [pc, #288]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004208:	4b45      	ldr	r3, [pc, #276]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	4a44      	ldr	r2, [pc, #272]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 800420e:	f043 0302 	orr.w	r3, r3, #2
 8004212:	6313      	str	r3, [r2, #48]	@ 0x30
 8004214:	4b42      	ldr	r3, [pc, #264]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004220:	4b3f      	ldr	r3, [pc, #252]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	4a3e      	ldr	r2, [pc, #248]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6313      	str	r3, [r2, #48]	@ 0x30
 800422c:	4b3c      	ldr	r3, [pc, #240]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004238:	2380      	movs	r3, #128	@ 0x80
 800423a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423e:	2302      	movs	r3, #2
 8004240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004250:	2307      	movs	r3, #7
 8004252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004256:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800425a:	4619      	mov	r1, r3
 800425c:	4831      	ldr	r0, [pc, #196]	@ (8004324 <HAL_UART_MspInit+0x180>)
 800425e:	f002 fdf1 	bl	8006e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004262:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426a:	2302      	movs	r3, #2
 800426c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004270:	2300      	movs	r3, #0
 8004272:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004276:	2300      	movs	r3, #0
 8004278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800427c:	2307      	movs	r3, #7
 800427e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004282:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004286:	4619      	mov	r1, r3
 8004288:	4827      	ldr	r0, [pc, #156]	@ (8004328 <HAL_UART_MspInit+0x184>)
 800428a:	f002 fddb 	bl	8006e44 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800428e:	e040      	b.n	8004312 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a25      	ldr	r2, [pc, #148]	@ (800432c <HAL_UART_MspInit+0x188>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d13b      	bne.n	8004312 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800429a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800429e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80042a0:	2300      	movs	r3, #0
 80042a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042a4:	f107 0320 	add.w	r3, r7, #32
 80042a8:	4618      	mov	r0, r3
 80042aa:	f006 fae9 	bl	800a880 <HAL_RCCEx_PeriphCLKConfig>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80042b4:	f7ff f840 	bl	8003338 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80042b8:	4b19      	ldr	r3, [pc, #100]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80042ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042bc:	4a18      	ldr	r2, [pc, #96]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80042be:	f043 0320 	orr.w	r3, r3, #32
 80042c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80042c4:	4b16      	ldr	r3, [pc, #88]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d0:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	4a12      	ldr	r2, [pc, #72]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	6313      	str	r3, [r2, #48]	@ 0x30
 80042dc:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <HAL_UART_MspInit+0x17c>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80042e8:	23c0      	movs	r3, #192	@ 0xc0
 80042ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ee:	2302      	movs	r3, #2
 80042f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fa:	2303      	movs	r3, #3
 80042fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004300:	2308      	movs	r3, #8
 8004302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004306:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800430a:	4619      	mov	r1, r3
 800430c:	4808      	ldr	r0, [pc, #32]	@ (8004330 <HAL_UART_MspInit+0x18c>)
 800430e:	f002 fd99 	bl	8006e44 <HAL_GPIO_Init>
}
 8004312:	bf00      	nop
 8004314:	37b8      	adds	r7, #184	@ 0xb8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40011000 	.word	0x40011000
 8004320:	40023800 	.word	0x40023800
 8004324:	40020400 	.word	0x40020400
 8004328:	40020000 	.word	0x40020000
 800432c:	40011400 	.word	0x40011400
 8004330:	40020800 	.word	0x40020800

08004334 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004348:	4b3a      	ldr	r3, [pc, #232]	@ (8004434 <HAL_FMC_MspInit+0x100>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d16d      	bne.n	800442c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004350:	4b38      	ldr	r3, [pc, #224]	@ (8004434 <HAL_FMC_MspInit+0x100>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004356:	4b38      	ldr	r3, [pc, #224]	@ (8004438 <HAL_FMC_MspInit+0x104>)
 8004358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435a:	4a37      	ldr	r2, [pc, #220]	@ (8004438 <HAL_FMC_MspInit+0x104>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6393      	str	r3, [r2, #56]	@ 0x38
 8004362:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <HAL_FMC_MspInit+0x104>)
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800436e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004372:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2302      	movs	r3, #2
 8004376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437c:	2303      	movs	r3, #3
 800437e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004380:	230c      	movs	r3, #12
 8004382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	4619      	mov	r1, r3
 8004388:	482c      	ldr	r0, [pc, #176]	@ (800443c <HAL_FMC_MspInit+0x108>)
 800438a:	f002 fd5b 	bl	8006e44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800438e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004392:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004394:	2302      	movs	r3, #2
 8004396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439c:	2303      	movs	r3, #3
 800439e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043a0:	230c      	movs	r3, #12
 80043a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4825      	ldr	r0, [pc, #148]	@ (8004440 <HAL_FMC_MspInit+0x10c>)
 80043aa:	f002 fd4b 	bl	8006e44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80043ae:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80043b2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	2302      	movs	r3, #2
 80043b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043bc:	2303      	movs	r3, #3
 80043be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043c0:	230c      	movs	r3, #12
 80043c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	481e      	ldr	r0, [pc, #120]	@ (8004444 <HAL_FMC_MspInit+0x110>)
 80043ca:	f002 fd3b 	bl	8006e44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80043ce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80043d2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043dc:	2303      	movs	r3, #3
 80043de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043e0:	230c      	movs	r3, #12
 80043e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4817      	ldr	r0, [pc, #92]	@ (8004448 <HAL_FMC_MspInit+0x114>)
 80043ea:	f002 fd2b 	bl	8006e44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80043ee:	2328      	movs	r3, #40	@ 0x28
 80043f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fa:	2303      	movs	r3, #3
 80043fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043fe:	230c      	movs	r3, #12
 8004400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4811      	ldr	r0, [pc, #68]	@ (800444c <HAL_FMC_MspInit+0x118>)
 8004408:	f002 fd1c 	bl	8006e44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800440c:	2308      	movs	r3, #8
 800440e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004410:	2302      	movs	r3, #2
 8004412:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004418:	2303      	movs	r3, #3
 800441a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800441c:	230c      	movs	r3, #12
 800441e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	4619      	mov	r1, r3
 8004424:	480a      	ldr	r0, [pc, #40]	@ (8004450 <HAL_FMC_MspInit+0x11c>)
 8004426:	f002 fd0d 	bl	8006e44 <HAL_GPIO_Init>
 800442a:	e000      	b.n	800442e <HAL_FMC_MspInit+0xfa>
    return;
 800442c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20001528 	.word	0x20001528
 8004438:	40023800 	.word	0x40023800
 800443c:	40021000 	.word	0x40021000
 8004440:	40021800 	.word	0x40021800
 8004444:	40020c00 	.word	0x40020c00
 8004448:	40021400 	.word	0x40021400
 800444c:	40021c00 	.word	0x40021c00
 8004450:	40020800 	.word	0x40020800

08004454 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800445c:	f7ff ff6a 	bl	8004334 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	@ 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <HAL_SAI_MspInit+0xbc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d124      	bne.n	80044c4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800447a:	4b2b      	ldr	r3, [pc, #172]	@ (8004528 <HAL_SAI_MspInit+0xc0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004482:	4b2a      	ldr	r3, [pc, #168]	@ (800452c <HAL_SAI_MspInit+0xc4>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	4a29      	ldr	r2, [pc, #164]	@ (800452c <HAL_SAI_MspInit+0xc4>)
 8004488:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800448c:	6453      	str	r3, [r2, #68]	@ 0x44
 800448e:	4b27      	ldr	r3, [pc, #156]	@ (800452c <HAL_SAI_MspInit+0xc4>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800449a:	4b23      	ldr	r3, [pc, #140]	@ (8004528 <HAL_SAI_MspInit+0xc0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	4a21      	ldr	r2, [pc, #132]	@ (8004528 <HAL_SAI_MspInit+0xc0>)
 80044a2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80044a4:	23f0      	movs	r3, #240	@ 0xf0
 80044a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a8:	2302      	movs	r3, #2
 80044aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b0:	2300      	movs	r3, #0
 80044b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80044b4:	230a      	movs	r3, #10
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044b8:	f107 0314 	add.w	r3, r7, #20
 80044bc:	4619      	mov	r1, r3
 80044be:	481c      	ldr	r0, [pc, #112]	@ (8004530 <HAL_SAI_MspInit+0xc8>)
 80044c0:	f002 fcc0 	bl	8006e44 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004534 <HAL_SAI_MspInit+0xcc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d125      	bne.n	800451a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80044ce:	4b16      	ldr	r3, [pc, #88]	@ (8004528 <HAL_SAI_MspInit+0xc0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_SAI_MspInit+0xc4>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	4a14      	ldr	r2, [pc, #80]	@ (800452c <HAL_SAI_MspInit+0xc4>)
 80044dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044e2:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_SAI_MspInit+0xc4>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80044ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <HAL_SAI_MspInit+0xc0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004528 <HAL_SAI_MspInit+0xc0>)
 80044f6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80044f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fe:	2302      	movs	r3, #2
 8004500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004506:	2300      	movs	r3, #0
 8004508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800450a:	230a      	movs	r3, #10
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	4619      	mov	r1, r3
 8004514:	4808      	ldr	r0, [pc, #32]	@ (8004538 <HAL_SAI_MspInit+0xd0>)
 8004516:	f002 fc95 	bl	8006e44 <HAL_GPIO_Init>

    }
}
 800451a:	bf00      	nop
 800451c:	3728      	adds	r7, #40	@ 0x28
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40015c04 	.word	0x40015c04
 8004528:	2000152c 	.word	0x2000152c
 800452c:	40023800 	.word	0x40023800
 8004530:	40022000 	.word	0x40022000
 8004534:	40015c24 	.word	0x40015c24
 8004538:	40021800 	.word	0x40021800

0800453c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08e      	sub	sp, #56	@ 0x38
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800454c:	4b33      	ldr	r3, [pc, #204]	@ (800461c <HAL_InitTick+0xe0>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	4a32      	ldr	r2, [pc, #200]	@ (800461c <HAL_InitTick+0xe0>)
 8004552:	f043 0310 	orr.w	r3, r3, #16
 8004556:	6413      	str	r3, [r2, #64]	@ 0x40
 8004558:	4b30      	ldr	r3, [pc, #192]	@ (800461c <HAL_InitTick+0xe0>)
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004564:	f107 0210 	add.w	r2, r7, #16
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f006 f954 	bl	800a81c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800457e:	f006 f925 	bl	800a7cc <HAL_RCC_GetPCLK1Freq>
 8004582:	6378      	str	r0, [r7, #52]	@ 0x34
 8004584:	e004      	b.n	8004590 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004586:	f006 f921 	bl	800a7cc <HAL_RCC_GetPCLK1Freq>
 800458a:	4603      	mov	r3, r0
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004592:	4a23      	ldr	r2, [pc, #140]	@ (8004620 <HAL_InitTick+0xe4>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	0c9b      	lsrs	r3, r3, #18
 800459a:	3b01      	subs	r3, #1
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800459e:	4b21      	ldr	r3, [pc, #132]	@ (8004624 <HAL_InitTick+0xe8>)
 80045a0:	4a21      	ldr	r2, [pc, #132]	@ (8004628 <HAL_InitTick+0xec>)
 80045a2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80045a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004624 <HAL_InitTick+0xe8>)
 80045a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80045aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80045ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004624 <HAL_InitTick+0xe8>)
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80045b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004624 <HAL_InitTick+0xe8>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <HAL_InitTick+0xe8>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045be:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <HAL_InitTick+0xe8>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80045c4:	4817      	ldr	r0, [pc, #92]	@ (8004624 <HAL_InitTick+0xe8>)
 80045c6:	f008 fcb0 	bl	800cf2a <HAL_TIM_Base_Init>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80045d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11b      	bne.n	8004610 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80045d8:	4812      	ldr	r0, [pc, #72]	@ (8004624 <HAL_InitTick+0xe8>)
 80045da:	f008 fcfd 	bl	800cfd8 <HAL_TIM_Base_Start_IT>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80045e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d111      	bne.n	8004610 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045ec:	2036      	movs	r0, #54	@ 0x36
 80045ee:	f001 f901 	bl	80057f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b0f      	cmp	r3, #15
 80045f6:	d808      	bhi.n	800460a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80045f8:	2200      	movs	r2, #0
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	2036      	movs	r0, #54	@ 0x36
 80045fe:	f001 f8dd 	bl	80057bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004602:	4a0a      	ldr	r2, [pc, #40]	@ (800462c <HAL_InitTick+0xf0>)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e002      	b.n	8004610 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004610:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004614:	4618      	mov	r0, r3
 8004616:	3738      	adds	r7, #56	@ 0x38
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	431bde83 	.word	0x431bde83
 8004624:	20001530 	.word	0x20001530
 8004628:	40001000 	.word	0x40001000
 800462c:	2000004c 	.word	0x2000004c

08004630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <NMI_Handler+0x4>

08004638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800463c:	bf00      	nop
 800463e:	e7fd      	b.n	800463c <HardFault_Handler+0x4>

08004640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <MemManage_Handler+0x4>

08004648 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800464c:	bf00      	nop
 800464e:	e7fd      	b.n	800464c <BusFault_Handler+0x4>

08004650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <UsageFault_Handler+0x4>

08004658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800466c:	4802      	ldr	r0, [pc, #8]	@ (8004678 <TIM6_DAC_IRQHandler+0x10>)
 800466e:	f008 fd82 	bl	800d176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20001530 	.word	0x20001530

0800467c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004680:	4802      	ldr	r0, [pc, #8]	@ (800468c <OTG_FS_IRQHandler+0x10>)
 8004682:	f003 f885 	bl	8007790 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20009afc 	.word	0x20009afc

08004690 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004694:	4802      	ldr	r0, [pc, #8]	@ (80046a0 <LTDC_IRQHandler+0x10>)
 8004696:	f005 f89f 	bl	80097d8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000a44 	.word	0x20000a44

080046a4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80046a8:	4802      	ldr	r0, [pc, #8]	@ (80046b4 <DMA2D_IRQHandler+0x10>)
 80046aa:	f001 fedb 	bl	8006464 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	200008ac 	.word	0x200008ac

080046b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80046bc:	4802      	ldr	r0, [pc, #8]	@ (80046c8 <DMA2_Stream1_IRQHandler+0x10>)
 80046be:	f001 fc11 	bl	8005ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200014b0 	.word	0x200014b0

080046cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <USART6_IRQHandler+0x2c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d106      	bne.n	80046ec <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <USART6_IRQHandler+0x2c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2210      	movs	r2, #16
 80046e4:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 80046e6:	4804      	ldr	r0, [pc, #16]	@ (80046f8 <USART6_IRQHandler+0x2c>)
 80046e8:	f7fc fee2 	bl	80014b0 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80046ec:	4802      	ldr	r0, [pc, #8]	@ (80046f8 <USART6_IRQHandler+0x2c>)
 80046ee:	f009 ff8d 	bl	800e60c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000fe4 	.word	0x20000fe4

080046fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004704:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <_sbrk+0x5c>)
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <_sbrk+0x60>)
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004710:	4b13      	ldr	r3, [pc, #76]	@ (8004760 <_sbrk+0x64>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004718:	4b11      	ldr	r3, [pc, #68]	@ (8004760 <_sbrk+0x64>)
 800471a:	4a12      	ldr	r2, [pc, #72]	@ (8004764 <_sbrk+0x68>)
 800471c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800471e:	4b10      	ldr	r3, [pc, #64]	@ (8004760 <_sbrk+0x64>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d207      	bcs.n	800473c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800472c:	f015 f99e 	bl	8019a6c <__errno>
 8004730:	4603      	mov	r3, r0
 8004732:	220c      	movs	r2, #12
 8004734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	e009      	b.n	8004750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800473c:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <_sbrk+0x64>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004742:	4b07      	ldr	r3, [pc, #28]	@ (8004760 <_sbrk+0x64>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	4a05      	ldr	r2, [pc, #20]	@ (8004760 <_sbrk+0x64>)
 800474c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20050000 	.word	0x20050000
 800475c:	00000400 	.word	0x00000400
 8004760:	2000157c 	.word	0x2000157c
 8004764:	2000a028 	.word	0x2000a028

08004768 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800476c:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <SystemInit+0x20>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	4a05      	ldr	r2, [pc, #20]	@ (8004788 <SystemInit+0x20>)
 8004774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004790:	f000 f803 	bl	800479a <TIME_Platform_GetCurrentMs>
 8004794:	4603      	mov	r3, r0
}
 8004796:	4618      	mov	r0, r3
 8004798:	bd80      	pop	{r7, pc}

0800479a <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 800479e:	f000 fc8d 	bl	80050bc <HAL_GetTick>
 80047a2:	4603      	mov	r3, r0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <LOGGER_Connect+0x16>
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
 80047bc:	e016      	b.n	80047ec <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 80047be:	223f      	movs	r2, #63	@ 0x3f
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	480c      	ldr	r0, [pc, #48]	@ (80047f4 <LOGGER_Connect+0x4c>)
 80047c4:	f015 f918 	bl	80199f8 <strncpy>
    current_config.server_port = port;
 80047c8:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <LOGGER_Connect+0x50>)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f8a5 	bl	8004920 <LOGGER_Platform_Connect>
 80047d6:	4603      	mov	r3, r0
 80047d8:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 80047da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d102      	bne.n	80047e8 <LOGGER_Connect+0x40>
        logger_connected = true;
 80047e2:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <LOGGER_Connect+0x54>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]
    }
    return status;
 80047e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000007 	.word	0x20000007
 80047f8:	20000004 	.word	0x20000004
 80047fc:	20001580 	.word	0x20001580

08004800 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 8004808:	4b14      	ldr	r3, [pc, #80]	@ (800485c <LOGGER_Send+0x5c>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f083 0301 	eor.w	r3, r3, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <LOGGER_Send+0x1c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <LOGGER_Send+0x22>
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	e017      	b.n	8004852 <LOGGER_Send+0x52>
    
    // Network 모듈을 통해 로그 전송 (SD카드 또는 소켓)
    if (Network_IsConnected()) {
 8004822:	f7fc faad 	bl	8000d80 <Network_IsConnected>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00e      	beq.n	800484a <LOGGER_Send+0x4a>
        int result = Network_SendBinary(message, strlen(message) + 1); // null terminator 포함
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fb fcf9 	bl	8000224 <strlen>
 8004832:	4603      	mov	r3, r0
 8004834:	3301      	adds	r3, #1
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fc fa57 	bl	8000cec <Network_SendBinary>
 800483e:	60f8      	str	r0, [r7, #12]
        if (result == NETWORK_OK) {
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <LOGGER_Send+0x4a>
            return LOGGER_STATUS_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e003      	b.n	8004852 <LOGGER_Send+0x52>
        }
    }
    
    // Network 모듈 사용 실패 시 기존 플랫폼 방식 사용
    return LOGGER_Platform_Send(message);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f874 	bl	8004938 <LOGGER_Platform_Send>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20001580 	.word	0x20001580

08004860 <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8004860:	b40e      	push	{r1, r2, r3}
 8004862:	b590      	push	{r4, r7, lr}
 8004864:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004868:	af00      	add	r7, sp, #0
 800486a:	4602      	mov	r2, r0
 800486c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004870:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004874:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 8004876:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <LOGGER_SendFormatted+0xb4>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800487e:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d33c      	bcc.n	8004902 <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8004888:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800488c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004890:	4a21      	ldr	r2, [pc, #132]	@ (8004918 <LOGGER_SendFormatted+0xb8>)
 8004892:	461c      	mov	r4, r3
 8004894:	4613      	mov	r3, r2
 8004896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 800489c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048a0:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048aa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80048ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b2:	f107 001c 	add.w	r0, r7, #28
 80048b6:	4a19      	ldr	r2, [pc, #100]	@ (800491c <LOGGER_SendFormatted+0xbc>)
 80048b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80048bc:	f015 f800 	bl	80198c0 <sniprintf>
 80048c0:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 80048c4:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80048c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048cc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80048d0:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 80048d2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80048d6:	f107 021c 	add.w	r2, r7, #28
 80048da:	18d0      	adds	r0, r2, r3
 80048dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80048e0:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80048e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80048f2:	f015 f86b 	bl	80199cc <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 80048f6:	f107 031c 	add.w	r3, r7, #28
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ff80 	bl	8004800 <LOGGER_Send>
 8004900:	e000      	b.n	8004904 <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 8004902:	bf00      	nop
}
 8004904:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004908:	46bd      	mov	sp, r7
 800490a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800490e:	b003      	add	sp, #12
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000004 	.word	0x20000004
 8004918:	0801b7fc 	.word	0x0801b7fc
 800491c:	0801b80c 	.word	0x0801b80c

08004920 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <LOGGER_Platform_Send+0x14>
 8004946:	f04f 33ff 	mov.w	r3, #4294967295
 800494a:	e01c      	b.n	8004986 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fb fc69 	bl	8000224 <strlen>
 8004952:	4603      	mov	r3, r0
 8004954:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	dd12      	ble.n	8004982 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	b29a      	uxth	r2, r3
 8004960:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	480a      	ldr	r0, [pc, #40]	@ (8004990 <LOGGER_Platform_Send+0x58>)
 8004968:	f009 fc28 	bl	800e1bc <HAL_UART_Transmit>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d107      	bne.n	8004982 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8004972:	2364      	movs	r3, #100	@ 0x64
 8004974:	2202      	movs	r2, #2
 8004976:	4907      	ldr	r1, [pc, #28]	@ (8004994 <LOGGER_Platform_Send+0x5c>)
 8004978:	4805      	ldr	r0, [pc, #20]	@ (8004990 <LOGGER_Platform_Send+0x58>)
 800497a:	f009 fc1f 	bl	800e1bc <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e001      	b.n	8004986 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000f5c 	.word	0x20000f5c
 8004994:	0801b810 	.word	0x0801b810

08004998 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d105      	bne.n	80049b2 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 80049a6:	4913      	ldr	r1, [pc, #76]	@ (80049f4 <UART_Connect+0x5c>)
 80049a8:	2003      	movs	r0, #3
 80049aa:	f7ff ff59 	bl	8004860 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e01c      	b.n	80049ec <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4910      	ldr	r1, [pc, #64]	@ (80049f8 <UART_Connect+0x60>)
 80049b6:	2001      	movs	r0, #1
 80049b8:	f7ff ff52 	bl	8004860 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f8fb 	bl	8004bb8 <UART_Platform_Connect>
 80049c2:	4603      	mov	r3, r0
 80049c4:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d108      	bne.n	80049de <UART_Connect+0x46>
        uart_connected = true;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <UART_Connect+0x64>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	490a      	ldr	r1, [pc, #40]	@ (8004a00 <UART_Connect+0x68>)
 80049d6:	2001      	movs	r0, #1
 80049d8:	f7ff ff42 	bl	8004860 <LOGGER_SendFormatted>
 80049dc:	e005      	b.n	80049ea <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	4908      	ldr	r1, [pc, #32]	@ (8004a04 <UART_Connect+0x6c>)
 80049e4:	2003      	movs	r0, #3
 80049e6:	f7ff ff3b 	bl	8004860 <LOGGER_SendFormatted>
    }

    return status;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	0801b814 	.word	0x0801b814
 80049f8:	0801b838 	.word	0x0801b838
 80049fc:	20001581 	.word	0x20001581
 8004a00:	0801b850 	.word	0x0801b850
 8004a04:	0801b874 	.word	0x0801b874

08004a08 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8004a10:	4b19      	ldr	r3, [pc, #100]	@ (8004a78 <UART_Send+0x70>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f083 0301 	eor.w	r3, r3, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8004a1e:	4917      	ldr	r1, [pc, #92]	@ (8004a7c <UART_Send+0x74>)
 8004a20:	2003      	movs	r0, #3
 8004a22:	f7ff ff1d 	bl	8004860 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e022      	b.n	8004a70 <UART_Send+0x68>
    }

    if (data == NULL) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8004a30:	4913      	ldr	r1, [pc, #76]	@ (8004a80 <UART_Send+0x78>)
 8004a32:	2003      	movs	r0, #3
 8004a34:	f7ff ff14 	bl	8004860 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e019      	b.n	8004a70 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4911      	ldr	r1, [pc, #68]	@ (8004a84 <UART_Send+0x7c>)
 8004a40:	2000      	movs	r0, #0
 8004a42:	f7ff ff0d 	bl	8004860 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f99e 	bl	8004d88 <UART_Platform_Send>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	490b      	ldr	r1, [pc, #44]	@ (8004a88 <UART_Send+0x80>)
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f7ff ff00 	bl	8004860 <LOGGER_SendFormatted>
 8004a60:	e005      	b.n	8004a6e <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4909      	ldr	r1, [pc, #36]	@ (8004a8c <UART_Send+0x84>)
 8004a68:	2003      	movs	r0, #3
 8004a6a:	f7ff fef9 	bl	8004860 <LOGGER_SendFormatted>
    }

    return status;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20001581 	.word	0x20001581
 8004a7c:	0801b8a0 	.word	0x0801b8a0
 8004a80:	0801b8c4 	.word	0x0801b8c4
 8004a84:	0801b8e4 	.word	0x0801b8e4
 8004a88:	0801b8fc 	.word	0x0801b8fc
 8004a8c:	0801b918 	.word	0x0801b918

08004a90 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8004a9c:	4b22      	ldr	r3, [pc, #136]	@ (8004b28 <UART_Receive+0x98>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	f083 0301 	eor.w	r3, r3, #1
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8004aaa:	4920      	ldr	r1, [pc, #128]	@ (8004b2c <UART_Receive+0x9c>)
 8004aac:	2003      	movs	r0, #3
 8004aae:	f7ff fed7 	bl	8004860 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e034      	b.n	8004b20 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <UART_Receive+0x38>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	dd02      	ble.n	8004ac8 <UART_Receive+0x38>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8004ac8:	4919      	ldr	r1, [pc, #100]	@ (8004b30 <UART_Receive+0xa0>)
 8004aca:	2003      	movs	r0, #3
 8004acc:	f7ff fec8 	bl	8004860 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e025      	b.n	8004b20 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	4917      	ldr	r1, [pc, #92]	@ (8004b34 <UART_Receive+0xa4>)
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7ff fec1 	bl	8004860 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f98c 	bl	8004e00 <UART_Platform_Receive>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	490f      	ldr	r1, [pc, #60]	@ (8004b38 <UART_Receive+0xa8>)
 8004afa:	2000      	movs	r0, #0
 8004afc:	f7ff feb0 	bl	8004860 <LOGGER_SendFormatted>
 8004b00:	e00d      	b.n	8004b1e <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d104      	bne.n	8004b12 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8004b08:	490c      	ldr	r1, [pc, #48]	@ (8004b3c <UART_Receive+0xac>)
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	f7ff fea8 	bl	8004860 <LOGGER_SendFormatted>
 8004b10:	e005      	b.n	8004b1e <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	461a      	mov	r2, r3
 8004b16:	490a      	ldr	r1, [pc, #40]	@ (8004b40 <UART_Receive+0xb0>)
 8004b18:	2003      	movs	r0, #3
 8004b1a:	f7ff fea1 	bl	8004860 <LOGGER_SendFormatted>
    }

    return status;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20001581 	.word	0x20001581
 8004b2c:	0801b93c 	.word	0x0801b93c
 8004b30:	0801b964 	.word	0x0801b964
 8004b34:	0801b990 	.word	0x0801b990
 8004b38:	0801b9b8 	.word	0x0801b9b8
 8004b3c:	0801b9d8 	.word	0x0801b9d8
 8004b40:	0801b9f0 	.word	0x0801b9f0

08004b44 <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
    return uart_connected;
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <UART_IsConnected+0x14>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20001581 	.word	0x20001581

08004b5c <flush_rx_buffer>:
// 전역 변수
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004b66:	e007      	b.n	8004b78 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004b68:	4b12      	ldr	r3, [pc, #72]	@ (8004bb4 <flush_rx_buffer+0x58>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3301      	adds	r3, #1
 8004b76:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004b78:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <flush_rx_buffer+0x58>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d106      	bne.n	8004b94 <flush_rx_buffer+0x38>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b63      	cmp	r3, #99	@ 0x63
 8004b8a:	dded      	ble.n	8004b68 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004b8c:	e002      	b.n	8004b94 <flush_rx_buffer+0x38>
        flush_count++;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3301      	adds	r3, #1
 8004b92:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004b94:	1cf9      	adds	r1, r7, #3
 8004b96:	2301      	movs	r3, #1
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4806      	ldr	r0, [pc, #24]	@ (8004bb4 <flush_rx_buffer+0x58>)
 8004b9c:	f009 fb97 	bl	800e2ce <HAL_UART_Receive>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <flush_rx_buffer+0x50>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b63      	cmp	r3, #99	@ 0x63
 8004baa:	ddf0      	ble.n	8004b8e <flush_rx_buffer+0x32>
    }
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000fe4 	.word	0x20000fe4

08004bb8 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8004bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8004d30 <UART_Platform_Connect+0x178>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8004bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004bc8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004bca:	4b5a      	ldr	r3, [pc, #360]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd0:	4959      	ldr	r1, [pc, #356]	@ (8004d38 <UART_Platform_Connect+0x180>)
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f7ff fe44 	bl	8004860 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8004bd8:	4b56      	ldr	r3, [pc, #344]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8004be0:	4956      	ldr	r1, [pc, #344]	@ (8004d3c <UART_Platform_Connect+0x184>)
 8004be2:	2001      	movs	r0, #1
 8004be4:	f7ff fe3c 	bl	8004860 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004be8:	4b52      	ldr	r3, [pc, #328]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4952      	ldr	r1, [pc, #328]	@ (8004d40 <UART_Platform_Connect+0x188>)
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	f7ff fe32 	bl	8004860 <LOGGER_SendFormatted>
 8004bfc:	e018      	b.n	8004c30 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8004bfe:	4951      	ldr	r1, [pc, #324]	@ (8004d44 <UART_Platform_Connect+0x18c>)
 8004c00:	2003      	movs	r0, #3
 8004c02:	f7ff fe2d 	bl	8004860 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004c06:	4b4b      	ldr	r3, [pc, #300]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c08:	4a4f      	ldr	r2, [pc, #316]	@ (8004d48 <UART_Platform_Connect+0x190>)
 8004c0a:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8004d48 <UART_Platform_Connect+0x190>)
 8004c0e:	4a49      	ldr	r2, [pc, #292]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c10:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8004c12:	4b48      	ldr	r3, [pc, #288]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d004      	beq.n	8004c24 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8004c1a:	494c      	ldr	r1, [pc, #304]	@ (8004d4c <UART_Platform_Connect+0x194>)
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f7ff fe1f 	bl	8004860 <LOGGER_SendFormatted>
 8004c22:	e005      	b.n	8004c30 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8004c24:	494a      	ldr	r1, [pc, #296]	@ (8004d50 <UART_Platform_Connect+0x198>)
 8004c26:	2003      	movs	r0, #3
 8004c28:	f7ff fe1a 	bl	8004860 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e07a      	b.n	8004d26 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8004c30:	4b48      	ldr	r3, [pc, #288]	@ (8004d54 <UART_Platform_Connect+0x19c>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8004c38:	483e      	ldr	r0, [pc, #248]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c3a:	f009 fc54 	bl	800e4e6 <HAL_UART_DMAStop>
        dma_receiving = false;
 8004c3e:	4b45      	ldr	r3, [pc, #276]	@ (8004d54 <UART_Platform_Connect+0x19c>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8004c44:	4944      	ldr	r1, [pc, #272]	@ (8004d58 <UART_Platform_Connect+0x1a0>)
 8004c46:	2001      	movs	r0, #1
 8004c48:	f7ff fe0a 	bl	8004860 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8004c4c:	4b39      	ldr	r3, [pc, #228]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8004c52:	4b38      	ldr	r3, [pc, #224]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8004c5a:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d026      	beq.n	8004cb0 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8004c62:	4b34      	ldr	r3, [pc, #208]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d01a      	beq.n	8004ca6 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8004c70:	493a      	ldr	r1, [pc, #232]	@ (8004d5c <UART_Platform_Connect+0x1a4>)
 8004c72:	2001      	movs	r0, #1
 8004c74:	f7ff fdf4 	bl	8004860 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8004c78:	4b2e      	ldr	r3, [pc, #184]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 ffe1 	bl	8005c44 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8004c82:	4b2c      	ldr	r3, [pc, #176]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff2e 	bl	8005ae8 <HAL_DMA_Init>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8004c92:	4933      	ldr	r1, [pc, #204]	@ (8004d60 <UART_Platform_Connect+0x1a8>)
 8004c94:	2003      	movs	r0, #3
 8004c96:	f7ff fde3 	bl	8004860 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e043      	b.n	8004d26 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8004c9e:	4931      	ldr	r1, [pc, #196]	@ (8004d64 <UART_Platform_Connect+0x1ac>)
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	f7ff fddd 	bl	8004860 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004ca6:	4b23      	ldr	r3, [pc, #140]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8004cb0:	f7ff ff54 	bl	8004b5c <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8004cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004d68 <UART_Platform_Connect+0x1b0>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8004cba:	4b2c      	ldr	r3, [pc, #176]	@ (8004d6c <UART_Platform_Connect+0x1b4>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d70 <UART_Platform_Connect+0x1b8>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4829      	ldr	r0, [pc, #164]	@ (8004d74 <UART_Platform_Connect+0x1bc>)
 8004cce:	f014 fe8b 	bl	80199e8 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8004cd2:	4929      	ldr	r1, [pc, #164]	@ (8004d78 <UART_Platform_Connect+0x1c0>)
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7ff fdc3 	bl	8004860 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cde:	4925      	ldr	r1, [pc, #148]	@ (8004d74 <UART_Platform_Connect+0x1bc>)
 8004ce0:	4814      	ldr	r0, [pc, #80]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004ce2:	f009 fbbc 	bl	800e45e <HAL_UART_Receive_DMA>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8004cf0:	4b18      	ldr	r3, [pc, #96]	@ (8004d54 <UART_Platform_Connect+0x19c>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8004cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cfa:	4920      	ldr	r1, [pc, #128]	@ (8004d7c <UART_Platform_Connect+0x1c4>)
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f7ff fdaf 	bl	8004860 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e00f      	b.n	8004d26 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	491d      	ldr	r1, [pc, #116]	@ (8004d80 <UART_Platform_Connect+0x1c8>)
 8004d0c:	2003      	movs	r0, #3
 8004d0e:	f7ff fda7 	bl	8004860 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8004d12:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004d14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004d16:	4b07      	ldr	r3, [pc, #28]	@ (8004d34 <UART_Platform_Connect+0x17c>)
 8004d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d1c:	4919      	ldr	r1, [pc, #100]	@ (8004d84 <UART_Platform_Connect+0x1cc>)
 8004d1e:	2003      	movs	r0, #3
 8004d20:	f7ff fd9e 	bl	8004860 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004d24:	2301      	movs	r3, #1
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20001582 	.word	0x20001582
 8004d34:	20000fe4 	.word	0x20000fe4
 8004d38:	0801bbec 	.word	0x0801bbec
 8004d3c:	0801bc18 	.word	0x0801bc18
 8004d40:	0801bc40 	.word	0x0801bc40
 8004d44:	0801bc5c 	.word	0x0801bc5c
 8004d48:	200014b0 	.word	0x200014b0
 8004d4c:	0801bc98 	.word	0x0801bc98
 8004d50:	0801bcc4 	.word	0x0801bcc4
 8004d54:	20001583 	.word	0x20001583
 8004d58:	0801bcf0 	.word	0x0801bcf0
 8004d5c:	0801bd1c 	.word	0x0801bd1c
 8004d60:	0801bd4c 	.word	0x0801bd4c
 8004d64:	0801bd78 	.word	0x0801bd78
 8004d68:	20001510 	.word	0x20001510
 8004d6c:	20001511 	.word	0x20001511
 8004d70:	20001512 	.word	0x20001512
 8004d74:	200010a8 	.word	0x200010a8
 8004d78:	0801bda4 	.word	0x0801bda4
 8004d7c:	0801bdcc 	.word	0x0801bdcc
 8004d80:	0801be10 	.word	0x0801be10
 8004d84:	0801be4c 	.word	0x0801be4c

08004d88 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d006      	beq.n	8004da4 <UART_Platform_Send+0x1c>
 8004d96:	4b17      	ldr	r3, [pc, #92]	@ (8004df4 <UART_Platform_Send+0x6c>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f083 0301 	eor.w	r3, r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <UART_Platform_Send+0x20>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e021      	b.n	8004dec <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fb fa3b 	bl	8000224 <strlen>
 8004dae:	4603      	mov	r3, r0
 8004db0:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <UART_Platform_Send+0x34>
 8004db8:	2300      	movs	r3, #0
 8004dba:	e017      	b.n	8004dec <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8004dbc:	f7ff fece 	bl	8004b5c <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	480b      	ldr	r0, [pc, #44]	@ (8004df8 <UART_Platform_Send+0x70>)
 8004dcc:	f009 f9f6 	bl	800e1bc <HAL_UART_Transmit>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8004dd4:	7afb      	ldrb	r3, [r7, #11]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e006      	b.n	8004dec <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8004dde:	7afb      	ldrb	r3, [r7, #11]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4906      	ldr	r1, [pc, #24]	@ (8004dfc <UART_Platform_Send+0x74>)
 8004de4:	2003      	movs	r0, #3
 8004de6:	f7ff fd3b 	bl	8004860 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004dea:	2301      	movs	r3, #1
    }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20001582 	.word	0x20001582
 8004df8:	20000fe4 	.word	0x20000fe4
 8004dfc:	0801beac 	.word	0x0801beac

08004e00 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	@ 0x28
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <UART_Platform_Receive+0x26>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d006      	beq.n	8004e26 <UART_Platform_Receive+0x26>
 8004e18:	4b74      	ldr	r3, [pc, #464]	@ (8004fec <UART_Platform_Receive+0x1ec>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f083 0301 	eor.w	r3, r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0dc      	b.n	8004fe4 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dc04      	bgt.n	8004e3a <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e0d4      	b.n	8004fe4 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8004e40:	4b6b      	ldr	r3, [pc, #428]	@ (8004ff0 <UART_Platform_Receive+0x1f0>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f083 0301 	eor.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e0c8      	b.n	8004fe4 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8004e52:	4b68      	ldr	r3, [pc, #416]	@ (8004ff4 <UART_Platform_Receive+0x1f4>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8004e5c:	4b65      	ldr	r3, [pc, #404]	@ (8004ff4 <UART_Platform_Receive+0x1f4>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8004e62:	4965      	ldr	r1, [pc, #404]	@ (8004ff8 <UART_Platform_Receive+0x1f8>)
 8004e64:	2002      	movs	r0, #2
 8004e66:	f7ff fcfb 	bl	8004860 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e0ba      	b.n	8004fe4 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8004e6e:	4b63      	ldr	r3, [pc, #396]	@ (8004ffc <UART_Platform_Receive+0x1fc>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80b4 	beq.w	8004fe2 <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8004e7a:	4b60      	ldr	r3, [pc, #384]	@ (8004ffc <UART_Platform_Receive+0x1fc>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8004e80:	4b5f      	ldr	r3, [pc, #380]	@ (8005000 <UART_Platform_Receive+0x200>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	837b      	strh	r3, [r7, #26]
        LOG_INFO("[UART_STM32] DMA received %d bytes", received_length);
 8004e86:	8b7b      	ldrh	r3, [r7, #26]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	495e      	ldr	r1, [pc, #376]	@ (8005004 <UART_Platform_Receive+0x204>)
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	f7ff fce7 	bl	8004860 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8004e92:	8b7b      	ldrh	r3, [r7, #26]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 809e 	beq.w	8004fd6 <UART_Platform_Receive+0x1d6>
 8004e9a:	8b7b      	ldrh	r3, [r7, #26]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	f340 8099 	ble.w	8004fd6 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8004ea4:	8b7b      	ldrh	r3, [r7, #26]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4957      	ldr	r1, [pc, #348]	@ (8005008 <UART_Platform_Receive+0x208>)
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f014 fe0a 	bl	8019ac4 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8004eb0:	8b7b      	ldrh	r3, [r7, #26]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8004eba:	8b7a      	ldrh	r2, [r7, #26]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_INFO("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8004ec0:	8b7a      	ldrh	r2, [r7, #26]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4951      	ldr	r1, [pc, #324]	@ (800500c <UART_Platform_Receive+0x20c>)
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f7ff fcca 	bl	8004860 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8004ecc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	484d      	ldr	r0, [pc, #308]	@ (8005008 <UART_Platform_Receive+0x208>)
 8004ed4:	f014 fd88 	bl	80199e8 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8004ed8:	484d      	ldr	r0, [pc, #308]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004eda:	f009 fb04 	bl	800e4e6 <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8004ede:	4b4c      	ldr	r3, [pc, #304]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8004ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2202      	movs	r2, #2
 8004eec:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8004eee:	4b48      	ldr	r3, [pc, #288]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8004ef6:	4b46      	ldr	r3, [pc, #280]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2208      	movs	r2, #8
 8004efc:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8004efe:	4b44      	ldr	r3, [pc, #272]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2210      	movs	r2, #16
 8004f04:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8004f06:	4b42      	ldr	r3, [pc, #264]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d025      	beq.n	8004f5a <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8004f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f12:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004f14:	e00b      	b.n	8004f2e <UART_Platform_Receive+0x12e>
                    timeout--;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e002      	b.n	8004f28 <UART_Platform_Receive+0x128>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	3301      	adds	r3, #1
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b63      	cmp	r3, #99	@ 0x63
 8004f2c:	ddf9      	ble.n	8004f22 <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004f2e:	4b38      	ldr	r3, [pc, #224]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d002      	beq.n	8004f42 <UART_Platform_Receive+0x142>
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dce9      	bgt.n	8004f16 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d108      	bne.n	8004f5a <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8004f48:	4932      	ldr	r1, [pc, #200]	@ (8005014 <UART_Platform_Receive+0x214>)
 8004f4a:	2002      	movs	r0, #2
 8004f4c:	f7ff fc88 	bl	8004860 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004f50:	4b2f      	ldr	r3, [pc, #188]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8004f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8004f62:	4b2b      	ldr	r3, [pc, #172]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004f64:	2220      	movs	r2, #32
 8004f66:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	e002      	b.n	8004f74 <UART_Platform_Receive+0x174>
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	3301      	adds	r3, #1
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	ddf7      	ble.n	8004f6e <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f82:	4921      	ldr	r1, [pc, #132]	@ (8005008 <UART_Platform_Receive+0x208>)
 8004f84:	4822      	ldr	r0, [pc, #136]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004f86:	f009 fa6a 	bl	800e45e <HAL_UART_Receive_DMA>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8004f8e:	7e7b      	ldrb	r3, [r7, #25]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8004f94:	4920      	ldr	r1, [pc, #128]	@ (8005018 <UART_Platform_Receive+0x218>)
 8004f96:	2000      	movs	r0, #0
 8004f98:	f7ff fc62 	bl	8004860 <LOGGER_SendFormatted>
 8004f9c:	e019      	b.n	8004fd2 <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8004f9e:	7e7a      	ldrb	r2, [r7, #25]
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004fa2:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	460b      	mov	r3, r1
 8004fae:	491b      	ldr	r1, [pc, #108]	@ (800501c <UART_Platform_Receive+0x21c>)
 8004fb0:	2002      	movs	r0, #2
 8004fb2:	f7ff fc55 	bl	8004860 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8004fb6:	4b16      	ldr	r3, [pc, #88]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8004fbe:	4b14      	ldr	r3, [pc, #80]	@ (8005010 <UART_Platform_Receive+0x210>)
 8004fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4915      	ldr	r1, [pc, #84]	@ (8005020 <UART_Platform_Receive+0x220>)
 8004fcc:	2002      	movs	r0, #2
 8004fce:	f7ff fc47 	bl	8004860 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e006      	b.n	8004fe4 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8004fd6:	8b7a      	ldrh	r2, [r7, #26]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4912      	ldr	r1, [pc, #72]	@ (8005024 <UART_Platform_Receive+0x224>)
 8004fdc:	2002      	movs	r0, #2
 8004fde:	f7ff fc3f 	bl	8004860 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8004fe2:	2302      	movs	r3, #2
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20001582 	.word	0x20001582
 8004ff0:	20001583 	.word	0x20001583
 8004ff4:	20001511 	.word	0x20001511
 8004ff8:	0801bee4 	.word	0x0801bee4
 8004ffc:	20001510 	.word	0x20001510
 8005000:	20001512 	.word	0x20001512
 8005004:	0801bf14 	.word	0x0801bf14
 8005008:	200010a8 	.word	0x200010a8
 800500c:	0801bf38 	.word	0x0801bf38
 8005010:	20000fe4 	.word	0x20000fe4
 8005014:	0801bf64 	.word	0x0801bf64
 8005018:	0801bfa0 	.word	0x0801bfa0
 800501c:	0801bfd0 	.word	0x0801bfd0
 8005020:	0801c018 	.word	0x0801c018
 8005024:	0801c034 	.word	0x0801c034

08005028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005060 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800502c:	f7ff fb9c 	bl	8004768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005030:	480c      	ldr	r0, [pc, #48]	@ (8005064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005032:	490d      	ldr	r1, [pc, #52]	@ (8005068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005034:	4a0d      	ldr	r2, [pc, #52]	@ (800506c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005038:	e002      	b.n	8005040 <LoopCopyDataInit>

0800503a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800503a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800503c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800503e:	3304      	adds	r3, #4

08005040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005044:	d3f9      	bcc.n	800503a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005046:	4a0a      	ldr	r2, [pc, #40]	@ (8005070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005048:	4c0a      	ldr	r4, [pc, #40]	@ (8005074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800504a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800504c:	e001      	b.n	8005052 <LoopFillZerobss>

0800504e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800504e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005050:	3204      	adds	r2, #4

08005052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005054:	d3fb      	bcc.n	800504e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005056:	f014 fd0f 	bl	8019a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800505a:	f7fc fabd 	bl	80015d8 <main>
  bx  lr    
 800505e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005060:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005068:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800506c:	0801c280 	.word	0x0801c280
  ldr r2, =_sbss
 8005070:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005074:	2000a024 	.word	0x2000a024

08005078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005078:	e7fe      	b.n	8005078 <ADC_IRQHandler>

0800507a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800507e:	2003      	movs	r0, #3
 8005080:	f000 fb91 	bl	80057a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005084:	2000      	movs	r0, #0
 8005086:	f7ff fa59 	bl	800453c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800508a:	f7fe f9bb 	bl	8003404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005098:	4b06      	ldr	r3, [pc, #24]	@ (80050b4 <HAL_IncTick+0x20>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <HAL_IncTick+0x24>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4413      	add	r3, r2
 80050a4:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <HAL_IncTick+0x24>)
 80050a6:	6013      	str	r3, [r2, #0]
}
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000050 	.word	0x20000050
 80050b8:	20001584 	.word	0x20001584

080050bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return uwTick;
 80050c0:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <HAL_GetTick+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20001584 	.word	0x20001584

080050d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050dc:	f7ff ffee 	bl	80050bc <HAL_GetTick>
 80050e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d005      	beq.n	80050fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <HAL_Delay+0x44>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050fa:	bf00      	nop
 80050fc:	f7ff ffde 	bl	80050bc <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	429a      	cmp	r2, r3
 800510a:	d8f7      	bhi.n	80050fc <HAL_Delay+0x28>
  {
  }
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000050 	.word	0x20000050

0800511c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e031      	b.n	8005196 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fe f98a 	bl	8003454 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b00      	cmp	r3, #0
 8005158:	d116      	bne.n	8005188 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800515e:	4b10      	ldr	r3, [pc, #64]	@ (80051a0 <HAL_ADC_Init+0x84>)
 8005160:	4013      	ands	r3, r2
 8005162:	f043 0202 	orr.w	r2, r3, #2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f974 	bl	8005458 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	f043 0201 	orr.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	641a      	str	r2, [r3, #64]	@ 0x40
 8005186:	e001      	b.n	800518c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	ffffeefd 	.word	0xffffeefd

080051a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x1c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e13a      	b.n	8005436 <HAL_ADC_ConfigChannel+0x292>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d93a      	bls.n	8005246 <HAL_ADC_ConfigChannel+0xa2>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051d8:	d035      	beq.n	8005246 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68d9      	ldr	r1, [r3, #12]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	4613      	mov	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4413      	add	r3, r2
 80051ee:	3b1e      	subs	r3, #30
 80051f0:	2207      	movs	r2, #7
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43da      	mvns	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	400a      	ands	r2, r1
 80051fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a8f      	ldr	r2, [pc, #572]	@ (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10a      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68d9      	ldr	r1, [r3, #12]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	061a      	lsls	r2, r3, #24
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800521e:	e039      	b.n	8005294 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68d9      	ldr	r1, [r3, #12]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	4618      	mov	r0, r3
 8005232:	4603      	mov	r3, r0
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4403      	add	r3, r0
 8005238:	3b1e      	subs	r3, #30
 800523a:	409a      	lsls	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005244:	e026      	b.n	8005294 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6919      	ldr	r1, [r3, #16]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	4613      	mov	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4413      	add	r3, r2
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2207      	movs	r2, #7
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43da      	mvns	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	400a      	ands	r2, r1
 800526c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6919      	ldr	r1, [r3, #16]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	4618      	mov	r0, r3
 8005280:	4603      	mov	r3, r0
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	4403      	add	r3, r0
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	409a      	lsls	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b06      	cmp	r3, #6
 800529a:	d824      	bhi.n	80052e6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	3b05      	subs	r3, #5
 80052ae:	221f      	movs	r2, #31
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43da      	mvns	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	400a      	ands	r2, r1
 80052bc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	4618      	mov	r0, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	3b05      	subs	r3, #5
 80052d8:	fa00 f203 	lsl.w	r2, r0, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80052e4:	e04c      	b.n	8005380 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d824      	bhi.n	8005338 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	3b23      	subs	r3, #35	@ 0x23
 8005300:	221f      	movs	r2, #31
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43da      	mvns	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	400a      	ands	r2, r1
 800530e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	4618      	mov	r0, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	3b23      	subs	r3, #35	@ 0x23
 800532a:	fa00 f203 	lsl.w	r2, r0, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30
 8005336:	e023      	b.n	8005380 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	3b41      	subs	r3, #65	@ 0x41
 800534a:	221f      	movs	r2, #31
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43da      	mvns	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	400a      	ands	r2, r1
 8005358:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	4618      	mov	r0, r3
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	3b41      	subs	r3, #65	@ 0x41
 8005374:	fa00 f203 	lsl.w	r2, r0, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a30      	ldr	r2, [pc, #192]	@ (8005448 <HAL_ADC_ConfigChannel+0x2a4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10a      	bne.n	80053a0 <HAL_ADC_ConfigChannel+0x1fc>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005392:	d105      	bne.n	80053a0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005394:	4b2d      	ldr	r3, [pc, #180]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a2c      	ldr	r2, [pc, #176]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 800539a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800539e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a28      	ldr	r2, [pc, #160]	@ (8005448 <HAL_ADC_ConfigChannel+0x2a4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10f      	bne.n	80053ca <HAL_ADC_ConfigChannel+0x226>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b12      	cmp	r3, #18
 80053b0:	d10b      	bne.n	80053ca <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80053b2:	4b26      	ldr	r3, [pc, #152]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4a25      	ldr	r2, [pc, #148]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 80053b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80053bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80053be:	4b23      	ldr	r3, [pc, #140]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4a22      	ldr	r2, [pc, #136]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 80053c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005448 <HAL_ADC_ConfigChannel+0x2a4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d12b      	bne.n	800542c <HAL_ADC_ConfigChannel+0x288>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <HAL_ADC_ConfigChannel+0x242>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b11      	cmp	r3, #17
 80053e4:	d122      	bne.n	800542c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80053e6:	4b19      	ldr	r3, [pc, #100]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4a18      	ldr	r2, [pc, #96]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 80053ec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80053f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80053f2:	4b16      	ldr	r3, [pc, #88]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	4a15      	ldr	r2, [pc, #84]	@ (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 80053f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a10      	ldr	r2, [pc, #64]	@ (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d111      	bne.n	800542c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <HAL_ADC_ConfigChannel+0x2ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a11      	ldr	r2, [pc, #68]	@ (8005454 <HAL_ADC_ConfigChannel+0x2b0>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	0c9a      	lsrs	r2, r3, #18
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800541e:	e002      	b.n	8005426 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3b01      	subs	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f9      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	10000012 	.word	0x10000012
 8005448:	40012000 	.word	0x40012000
 800544c:	40012300 	.word	0x40012300
 8005450:	20000000 	.word	0x20000000
 8005454:	431bde83 	.word	0x431bde83

08005458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005460:	4b78      	ldr	r3, [pc, #480]	@ (8005644 <ADC_Init+0x1ec>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a77      	ldr	r2, [pc, #476]	@ (8005644 <ADC_Init+0x1ec>)
 8005466:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800546a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800546c:	4b75      	ldr	r3, [pc, #468]	@ (8005644 <ADC_Init+0x1ec>)
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4973      	ldr	r1, [pc, #460]	@ (8005644 <ADC_Init+0x1ec>)
 8005476:	4313      	orrs	r3, r2
 8005478:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80054ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	4a58      	ldr	r2, [pc, #352]	@ (8005648 <ADC_Init+0x1f0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d022      	beq.n	8005532 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6899      	ldr	r1, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800551c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6899      	ldr	r1, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	e00f      	b.n	8005552 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0202 	bic.w	r2, r2, #2
 8005560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6899      	ldr	r1, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	005a      	lsls	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01b      	beq.n	80055b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800558e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800559e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055aa:	3b01      	subs	r3, #1
 80055ac:	035a      	lsls	r2, r3, #13
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	e007      	b.n	80055c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80055d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	051a      	lsls	r2, r3, #20
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80055fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6899      	ldr	r1, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800560a:	025a      	lsls	r2, r3, #9
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	029a      	lsls	r2, r3, #10
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40012300 	.word	0x40012300
 8005648:	0f000001 	.word	0x0f000001

0800564c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800565c:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <__NVIC_SetPriorityGrouping+0x40>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005668:	4013      	ands	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005674:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <__NVIC_SetPriorityGrouping+0x44>)
 8005676:	4313      	orrs	r3, r2
 8005678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800567a:	4a04      	ldr	r2, [pc, #16]	@ (800568c <__NVIC_SetPriorityGrouping+0x40>)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	60d3      	str	r3, [r2, #12]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	e000ed00 	.word	0xe000ed00
 8005690:	05fa0000 	.word	0x05fa0000

08005694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005698:	4b04      	ldr	r3, [pc, #16]	@ (80056ac <__NVIC_GetPriorityGrouping+0x18>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	f003 0307 	and.w	r3, r3, #7
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	e000ed00 	.word	0xe000ed00

080056b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	db0b      	blt.n	80056da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	f003 021f 	and.w	r2, r3, #31
 80056c8:	4907      	ldr	r1, [pc, #28]	@ (80056e8 <__NVIC_EnableIRQ+0x38>)
 80056ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2001      	movs	r0, #1
 80056d2:	fa00 f202 	lsl.w	r2, r0, r2
 80056d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	e000e100 	.word	0xe000e100

080056ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	6039      	str	r1, [r7, #0]
 80056f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	db0a      	blt.n	8005716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	490c      	ldr	r1, [pc, #48]	@ (8005738 <__NVIC_SetPriority+0x4c>)
 8005706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570a:	0112      	lsls	r2, r2, #4
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	440b      	add	r3, r1
 8005710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005714:	e00a      	b.n	800572c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	4908      	ldr	r1, [pc, #32]	@ (800573c <__NVIC_SetPriority+0x50>)
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	3b04      	subs	r3, #4
 8005724:	0112      	lsls	r2, r2, #4
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	440b      	add	r3, r1
 800572a:	761a      	strb	r2, [r3, #24]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	e000e100 	.word	0xe000e100
 800573c:	e000ed00 	.word	0xe000ed00

08005740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	@ 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f1c3 0307 	rsb	r3, r3, #7
 800575a:	2b04      	cmp	r3, #4
 800575c:	bf28      	it	cs
 800575e:	2304      	movcs	r3, #4
 8005760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3304      	adds	r3, #4
 8005766:	2b06      	cmp	r3, #6
 8005768:	d902      	bls.n	8005770 <NVIC_EncodePriority+0x30>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3b03      	subs	r3, #3
 800576e:	e000      	b.n	8005772 <NVIC_EncodePriority+0x32>
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005774:	f04f 32ff 	mov.w	r2, #4294967295
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43da      	mvns	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	401a      	ands	r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005788:	f04f 31ff 	mov.w	r1, #4294967295
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	43d9      	mvns	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005798:	4313      	orrs	r3, r2
         );
}
 800579a:	4618      	mov	r0, r3
 800579c:	3724      	adds	r7, #36	@ 0x24
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ff4c 	bl	800564c <__NVIC_SetPriorityGrouping>
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057ce:	f7ff ff61 	bl	8005694 <__NVIC_GetPriorityGrouping>
 80057d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	6978      	ldr	r0, [r7, #20]
 80057da:	f7ff ffb1 	bl	8005740 <NVIC_EncodePriority>
 80057de:	4602      	mov	r2, r0
 80057e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff ff80 	bl	80056ec <__NVIC_SetPriority>
}
 80057ec:	bf00      	nop
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff ff54 	bl	80056b0 <__NVIC_EnableIRQ>
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e054      	b.n	80058cc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	7f5b      	ldrb	r3, [r3, #29]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fd fe68 	bl	8003508 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	791b      	ldrb	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10c      	bne.n	8005860 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a22      	ldr	r2, [pc, #136]	@ (80058d4 <HAL_CRC_Init+0xc4>)
 800584c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0218 	bic.w	r2, r2, #24
 800585c:	609a      	str	r2, [r3, #8]
 800585e:	e00c      	b.n	800587a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6899      	ldr	r1, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	461a      	mov	r2, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f834 	bl	80058d8 <HAL_CRCEx_Polynomial_Set>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e028      	b.n	80058cc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	795b      	ldrb	r3, [r3, #5]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d105      	bne.n	800588e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f04f 32ff 	mov.w	r2, #4294967295
 800588a:	611a      	str	r2, [r3, #16]
 800588c:	e004      	b.n	8005898 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6912      	ldr	r2, [r2, #16]
 8005896:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695a      	ldr	r2, [r3, #20]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	04c11db7 	.word	0x04c11db7

080058d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80058e8:	231f      	movs	r3, #31
 80058ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
 80058fa:	e063      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80058fc:	bf00      	nop
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1e5a      	subs	r2, r3, #1
 8005902:	613a      	str	r2, [r7, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <HAL_CRCEx_Polynomial_Set+0x44>
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b18      	cmp	r3, #24
 8005920:	d846      	bhi.n	80059b0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005922:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	080059b7 	.word	0x080059b7
 800592c:	080059b1 	.word	0x080059b1
 8005930:	080059b1 	.word	0x080059b1
 8005934:	080059b1 	.word	0x080059b1
 8005938:	080059b1 	.word	0x080059b1
 800593c:	080059b1 	.word	0x080059b1
 8005940:	080059b1 	.word	0x080059b1
 8005944:	080059b1 	.word	0x080059b1
 8005948:	080059a5 	.word	0x080059a5
 800594c:	080059b1 	.word	0x080059b1
 8005950:	080059b1 	.word	0x080059b1
 8005954:	080059b1 	.word	0x080059b1
 8005958:	080059b1 	.word	0x080059b1
 800595c:	080059b1 	.word	0x080059b1
 8005960:	080059b1 	.word	0x080059b1
 8005964:	080059b1 	.word	0x080059b1
 8005968:	08005999 	.word	0x08005999
 800596c:	080059b1 	.word	0x080059b1
 8005970:	080059b1 	.word	0x080059b1
 8005974:	080059b1 	.word	0x080059b1
 8005978:	080059b1 	.word	0x080059b1
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059b1 	.word	0x080059b1
 8005984:	080059b1 	.word	0x080059b1
 8005988:	0800598d 	.word	0x0800598d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b06      	cmp	r3, #6
 8005990:	d913      	bls.n	80059ba <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005996:	e010      	b.n	80059ba <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b07      	cmp	r3, #7
 800599c:	d90f      	bls.n	80059be <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80059a2:	e00c      	b.n	80059be <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d90b      	bls.n	80059c2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80059ae:	e008      	b.n	80059c2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
        break;
 80059b4:	e006      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059b6:	bf00      	nop
 80059b8:	e004      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059ba:	bf00      	nop
 80059bc:	e002      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80059c2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f023 0118 	bic.w	r1, r3, #24
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e069      	b.n	8005ada <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fd fd98 	bl	8003548 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6819      	ldr	r1, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae4 <HAL_DCMI_Init+0xf0>)
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6819      	ldr	r1, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a52:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005a5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a76:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a82:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d112      	bne.n	8005aba <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	7f1b      	ldrb	r3, [r3, #28]
 8005a98:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7f5b      	ldrb	r3, [r3, #29]
 8005a9e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005aa0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7f9b      	ldrb	r3, [r3, #30]
 8005aa6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005aa8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7fdb      	ldrb	r3, [r3, #31]
 8005ab0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005ab6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005ab8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 021e 	orr.w	r2, r2, #30
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	ffe0f007 	.word	0xffe0f007

08005ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005af4:	f7ff fae2 	bl	80050bc <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e099      	b.n	8005c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b24:	e00f      	b.n	8005b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b26:	f7ff fac9 	bl	80050bc <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d908      	bls.n	8005b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e078      	b.n	8005c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e8      	bne.n	8005b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4b38      	ldr	r3, [pc, #224]	@ (8005c40 <HAL_DMA_Init+0x158>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d107      	bne.n	8005bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0307 	bic.w	r3, r3, #7
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d117      	bne.n	8005c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00e      	beq.n	8005c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fb73 	bl	80062d8 <DMA_CheckFifoParam>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2240      	movs	r2, #64	@ 0x40
 8005bfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005c06:	2301      	movs	r3, #1
 8005c08:	e016      	b.n	8005c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fb2a 	bl	800626c <DMA_CalcBaseAndBitshift>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c20:	223f      	movs	r2, #63	@ 0x3f
 8005c22:	409a      	lsls	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	f010803f 	.word	0xf010803f

08005c44 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e050      	b.n	8005cf8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d101      	bne.n	8005c66 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
 8005c64:	e048      	b.n	8005cf8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0201 	bic.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2200      	movs	r2, #0
 8005c94:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2221      	movs	r2, #33	@ 0x21
 8005ca4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fae0 	bl	800626c <DMA_CalcBaseAndBitshift>
 8005cac:	4603      	mov	r3, r0
 8005cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	223f      	movs	r2, #63	@ 0x3f
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_DMA_Start_IT+0x26>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e048      	b.n	8005db8 <HAL_DMA_Start_IT+0xb8>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d137      	bne.n	8005daa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fa5e 	bl	8006210 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d58:	223f      	movs	r2, #63	@ 0x3f
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0216 	orr.w	r2, r2, #22
 8005d6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d7e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0208 	orr.w	r2, r2, #8
 8005d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e005      	b.n	8005db6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
 8005db4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dce:	f7ff f975 	bl	80050bc <HAL_GetTick>
 8005dd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d008      	beq.n	8005df2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2280      	movs	r2, #128	@ 0x80
 8005de4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e052      	b.n	8005e98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0216 	bic.w	r2, r2, #22
 8005e00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695a      	ldr	r2, [r3, #20]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d103      	bne.n	8005e22 <HAL_DMA_Abort+0x62>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0208 	bic.w	r2, r2, #8
 8005e30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e42:	e013      	b.n	8005e6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e44:	f7ff f93a 	bl	80050bc <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d90c      	bls.n	8005e6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e015      	b.n	8005e98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e4      	bne.n	8005e44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e7e:	223f      	movs	r2, #63	@ 0x3f
 8005e80:	409a      	lsls	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d004      	beq.n	8005ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2280      	movs	r2, #128	@ 0x80
 8005eb8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e00c      	b.n	8005ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2205      	movs	r2, #5
 8005ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800612c <HAL_DMA_IRQHandler+0x248>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a8e      	ldr	r2, [pc, #568]	@ (8006130 <HAL_DMA_IRQHandler+0x24c>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	0a9b      	lsrs	r3, r3, #10
 8005efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0e:	2208      	movs	r2, #8
 8005f10:	409a      	lsls	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01a      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d013      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f48:	f043 0201 	orr.w	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f54:	2201      	movs	r2, #1
 8005f56:	409a      	lsls	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d012      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00b      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f72:	2201      	movs	r2, #1
 8005f74:	409a      	lsls	r2, r3
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7e:	f043 0202 	orr.w	r2, r3, #2
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d012      	beq.n	8005fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa8:	2204      	movs	r2, #4
 8005faa:	409a      	lsls	r2, r3
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb4:	f043 0204 	orr.w	r2, r3, #4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d043      	beq.n	8006054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d03c      	beq.n	8006054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fde:	2210      	movs	r2, #16
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d018      	beq.n	8006026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d108      	bne.n	8006014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d024      	beq.n	8006054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
 8006012:	e01f      	b.n	8006054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	4798      	blx	r3
 8006024:	e016      	b.n	8006054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d107      	bne.n	8006044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0208 	bic.w	r2, r2, #8
 8006042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006058:	2220      	movs	r2, #32
 800605a:	409a      	lsls	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4013      	ands	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 808f 	beq.w	8006184 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8087 	beq.w	8006184 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800607a:	2220      	movs	r2, #32
 800607c:	409a      	lsls	r2, r3
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b05      	cmp	r3, #5
 800608c:	d136      	bne.n	80060fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0216 	bic.w	r2, r2, #22
 800609c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <HAL_DMA_IRQHandler+0x1da>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0208 	bic.w	r2, r2, #8
 80060cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d2:	223f      	movs	r2, #63	@ 0x3f
 80060d4:	409a      	lsls	r2, r3
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d07e      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
        }
        return;
 80060fa:	e079      	b.n	80061f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01d      	beq.n	8006146 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10d      	bne.n	8006134 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611c:	2b00      	cmp	r3, #0
 800611e:	d031      	beq.n	8006184 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
 8006128:	e02c      	b.n	8006184 <HAL_DMA_IRQHandler+0x2a0>
 800612a:	bf00      	nop
 800612c:	20000000 	.word	0x20000000
 8006130:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d023      	beq.n	8006184 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	e01e      	b.n	8006184 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10f      	bne.n	8006174 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0210 	bic.w	r2, r2, #16
 8006162:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006188:	2b00      	cmp	r3, #0
 800618a:	d032      	beq.n	80061f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d022      	beq.n	80061de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2205      	movs	r2, #5
 800619c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d307      	bcc.n	80061cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f2      	bne.n	80061b0 <HAL_DMA_IRQHandler+0x2cc>
 80061ca:	e000      	b.n	80061ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4798      	blx	r3
 80061ee:	e000      	b.n	80061f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80061f0:	bf00      	nop
    }
  }
}
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800622c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b40      	cmp	r3, #64	@ 0x40
 800623c:	d108      	bne.n	8006250 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800624e:	e007      	b.n	8006260 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	3b10      	subs	r3, #16
 800627c:	4a13      	ldr	r2, [pc, #76]	@ (80062cc <DMA_CalcBaseAndBitshift+0x60>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006286:	4a12      	ldr	r2, [pc, #72]	@ (80062d0 <DMA_CalcBaseAndBitshift+0x64>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d908      	bls.n	80062ac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <DMA_CalcBaseAndBitshift+0x68>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80062aa:	e006      	b.n	80062ba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b08      	ldr	r3, [pc, #32]	@ (80062d4 <DMA_CalcBaseAndBitshift+0x68>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	aaaaaaab 	.word	0xaaaaaaab
 80062d0:	0801c1a0 	.word	0x0801c1a0
 80062d4:	fffffc00 	.word	0xfffffc00

080062d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d11f      	bne.n	8006332 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d856      	bhi.n	80063a6 <DMA_CheckFifoParam+0xce>
 80062f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <DMA_CheckFifoParam+0x28>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006311 	.word	0x08006311
 8006304:	08006323 	.word	0x08006323
 8006308:	08006311 	.word	0x08006311
 800630c:	080063a7 	.word	0x080063a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d046      	beq.n	80063aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006320:	e043      	b.n	80063aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800632a:	d140      	bne.n	80063ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006330:	e03d      	b.n	80063ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800633a:	d121      	bne.n	8006380 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d837      	bhi.n	80063b2 <DMA_CheckFifoParam+0xda>
 8006342:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <DMA_CheckFifoParam+0x70>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006359 	.word	0x08006359
 800634c:	0800635f 	.word	0x0800635f
 8006350:	08006359 	.word	0x08006359
 8006354:	08006371 	.word	0x08006371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
      break;
 800635c:	e030      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d025      	beq.n	80063b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800636e:	e022      	b.n	80063b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006378:	d11f      	bne.n	80063ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800637e:	e01c      	b.n	80063ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d903      	bls.n	800638e <DMA_CheckFifoParam+0xb6>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d003      	beq.n	8006394 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800638c:	e018      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
      break;
 8006392:	e015      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00e      	beq.n	80063be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
      break;
 80063a4:	e00b      	b.n	80063be <DMA_CheckFifoParam+0xe6>
      break;
 80063a6:	bf00      	nop
 80063a8:	e00a      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063aa:	bf00      	nop
 80063ac:	e008      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063ae:	bf00      	nop
 80063b0:	e006      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063b2:	bf00      	nop
 80063b4:	e004      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063b6:	bf00      	nop
 80063b8:	e002      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80063ba:	bf00      	nop
 80063bc:	e000      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063be:	bf00      	nop
    }
  } 
  
  return status; 
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e039      	b.n	8006456 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fd f964 	bl	80036c4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006420:	f023 0107 	bic.w	r1, r3, #7
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006436:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <HAL_DMA2D_Init+0x90>)
 8006438:	4013      	ands	r3, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68d1      	ldr	r1, [r2, #12]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	430b      	orrs	r3, r1
 8006444:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	ffffc000 	.word	0xffffc000

08006464 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d026      	beq.n	80064d4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648c:	2b00      	cmp	r3, #0
 800648e:	d021      	beq.n	80064d4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800649e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	f043 0201 	orr.w	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2201      	movs	r2, #1
 80064b2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2204      	movs	r2, #4
 80064b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d026      	beq.n	800652c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d021      	beq.n	800652c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064f6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2220      	movs	r2, #32
 80064fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006504:	f043 0202 	orr.w	r2, r3, #2
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2204      	movs	r2, #4
 8006510:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d026      	beq.n	8006584 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800653c:	2b00      	cmp	r3, #0
 800653e:	d021      	beq.n	8006584 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800654e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2208      	movs	r2, #8
 8006556:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655c:	f043 0204 	orr.w	r2, r3, #4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2204      	movs	r2, #4
 8006568:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d013      	beq.n	80065b6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2204      	movs	r2, #4
 80065ae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f853 	bl	800665c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d024      	beq.n	800660a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01f      	beq.n	800660a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80065d8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2202      	movs	r2, #2
 80065e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01f      	beq.n	8006654 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01a      	beq.n	8006654 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800662c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2210      	movs	r2, #16
 8006634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f80e 	bl	8006670 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_DMA2D_ConfigLayer+0x20>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e079      	b.n	8006798 <HAL_DMA2D_ConfigLayer+0x114>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	3318      	adds	r3, #24
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80066ce:	4b35      	ldr	r3, [pc, #212]	@ (80067a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80066d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b0a      	cmp	r3, #10
 80066d8:	d003      	beq.n	80066e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b09      	cmp	r3, #9
 80066e0:	d107      	bne.n	80066f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e005      	b.n	80066fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	061b      	lsls	r3, r3, #24
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d120      	bne.n	8006746 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	43db      	mvns	r3, r3
 800670e:	ea02 0103 	and.w	r1, r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	430a      	orrs	r2, r1
 800671a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b0a      	cmp	r3, #10
 800672c:	d003      	beq.n	8006736 <HAL_DMA2D_ConfigLayer+0xb2>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b09      	cmp	r3, #9
 8006734:	d127      	bne.n	8006786 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006742:	629a      	str	r2, [r3, #40]	@ 0x28
 8006744:	e01f      	b.n	8006786 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	43db      	mvns	r3, r3
 8006750:	ea02 0103 	and.w	r1, r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	430a      	orrs	r2, r1
 800675c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b0a      	cmp	r3, #10
 800676e:	d003      	beq.n	8006778 <HAL_DMA2D_ConfigLayer+0xf4>
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b09      	cmp	r3, #9
 8006776:	d106      	bne.n	8006786 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006784:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	ff03000f 	.word	0xff03000f

080067a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e086      	b.n	80068c8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fc ff9f 	bl	8003710 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067d2:	4b3f      	ldr	r3, [pc, #252]	@ (80068d0 <HAL_ETH_Init+0x128>)
 80067d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d6:	4a3e      	ldr	r2, [pc, #248]	@ (80068d0 <HAL_ETH_Init+0x128>)
 80067d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80067de:	4b3c      	ldr	r3, [pc, #240]	@ (80068d0 <HAL_ETH_Init+0x128>)
 80067e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067e6:	60bb      	str	r3, [r7, #8]
 80067e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80067ea:	4b3a      	ldr	r3, [pc, #232]	@ (80068d4 <HAL_ETH_Init+0x12c>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	4a39      	ldr	r2, [pc, #228]	@ (80068d4 <HAL_ETH_Init+0x12c>)
 80067f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80067f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80067f6:	4b37      	ldr	r3, [pc, #220]	@ (80068d4 <HAL_ETH_Init+0x12c>)
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	4935      	ldr	r1, [pc, #212]	@ (80068d4 <HAL_ETH_Init+0x12c>)
 8006800:	4313      	orrs	r3, r2
 8006802:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006804:	4b33      	ldr	r3, [pc, #204]	@ (80068d4 <HAL_ETH_Init+0x12c>)
 8006806:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	f043 0301 	orr.w	r3, r3, #1
 800681a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800681e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006820:	f7fe fc4c 	bl	80050bc <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006826:	e011      	b.n	800684c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006828:	f7fe fc48 	bl	80050bc <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006836:	d909      	bls.n	800684c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2204      	movs	r2, #4
 800683c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	22e0      	movs	r2, #224	@ 0xe0
 8006844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e03d      	b.n	80068c8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e4      	bne.n	8006828 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f97a 	bl	8006b58 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa25 	bl	8006cb4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa7b 	bl	8006d66 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	461a      	mov	r2, r3
 8006876:	2100      	movs	r1, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f9e3 	bl	8006c44 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800688c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <HAL_ETH_Init+0x130>)
 800689c:	430b      	orrs	r3, r1
 800689e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80068b2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2210      	movs	r2, #16
 80068c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40023800 	.word	0x40023800
 80068d4:	40013800 	.word	0x40013800
 80068d8:	00020060 	.word	0x00020060

080068dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4b53      	ldr	r3, [pc, #332]	@ (8006a40 <ETH_SetMACConfig+0x164>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	7b9b      	ldrb	r3, [r3, #14]
 80068fa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	7c12      	ldrb	r2, [r2, #16]
 8006900:	2a00      	cmp	r2, #0
 8006902:	d102      	bne.n	800690a <ETH_SetMACConfig+0x2e>
 8006904:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006908:	e000      	b.n	800690c <ETH_SetMACConfig+0x30>
 800690a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800690c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	7c52      	ldrb	r2, [r2, #17]
 8006912:	2a00      	cmp	r2, #0
 8006914:	d102      	bne.n	800691c <ETH_SetMACConfig+0x40>
 8006916:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800691a:	e000      	b.n	800691e <ETH_SetMACConfig+0x42>
 800691c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800691e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006924:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	7fdb      	ldrb	r3, [r3, #31]
 800692a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800692c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006932:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	7f92      	ldrb	r2, [r2, #30]
 8006938:	2a00      	cmp	r2, #0
 800693a:	d102      	bne.n	8006942 <ETH_SetMACConfig+0x66>
 800693c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006940:	e000      	b.n	8006944 <ETH_SetMACConfig+0x68>
 8006942:	2200      	movs	r2, #0
                        macconf->Speed |
 8006944:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	7f1b      	ldrb	r3, [r3, #28]
 800694a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800694c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006952:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	791b      	ldrb	r3, [r3, #4]
 8006958:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800695a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006962:	2a00      	cmp	r2, #0
 8006964:	d102      	bne.n	800696c <ETH_SetMACConfig+0x90>
 8006966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800696a:	e000      	b.n	800696e <ETH_SetMACConfig+0x92>
 800696c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800696e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	7bdb      	ldrb	r3, [r3, #15]
 8006974:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006976:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800697c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006984:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006986:	4313      	orrs	r3, r2
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800699e:	2001      	movs	r0, #1
 80069a0:	f7fe fb98 	bl	80050d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80069ba:	4013      	ands	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069c2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	d101      	bne.n	80069d2 <ETH_SetMACConfig+0xf6>
 80069ce:	2280      	movs	r2, #128	@ 0x80
 80069d0:	e000      	b.n	80069d4 <ETH_SetMACConfig+0xf8>
 80069d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069d4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80069da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80069e2:	2a01      	cmp	r2, #1
 80069e4:	d101      	bne.n	80069ea <ETH_SetMACConfig+0x10e>
 80069e6:	2208      	movs	r2, #8
 80069e8:	e000      	b.n	80069ec <ETH_SetMACConfig+0x110>
 80069ea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80069ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80069f4:	2a01      	cmp	r2, #1
 80069f6:	d101      	bne.n	80069fc <ETH_SetMACConfig+0x120>
 80069f8:	2204      	movs	r2, #4
 80069fa:	e000      	b.n	80069fe <ETH_SetMACConfig+0x122>
 80069fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80069fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8006a06:	2a01      	cmp	r2, #1
 8006a08:	d101      	bne.n	8006a0e <ETH_SetMACConfig+0x132>
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	e000      	b.n	8006a10 <ETH_SetMACConfig+0x134>
 8006a0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006a10:	4313      	orrs	r3, r2
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006a28:	2001      	movs	r0, #1
 8006a2a:	f7fe fb53 	bl	80050d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	619a      	str	r2, [r3, #24]
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	fd20810f 	.word	0xfd20810f

08006a44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b54 <ETH_SetDMAConfig+0x110>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	7b1b      	ldrb	r3, [r3, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <ETH_SetDMAConfig+0x2c>
 8006a6a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a6e:	e000      	b.n	8006a72 <ETH_SetDMAConfig+0x2e>
 8006a70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	7b5b      	ldrb	r3, [r3, #13]
 8006a76:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a78:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	7f52      	ldrb	r2, [r2, #29]
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	d102      	bne.n	8006a88 <ETH_SetDMAConfig+0x44>
 8006a82:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a86:	e000      	b.n	8006a8a <ETH_SetDMAConfig+0x46>
 8006a88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	7b9b      	ldrb	r3, [r3, #14]
 8006a90:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a92:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	7f1b      	ldrb	r3, [r3, #28]
 8006a9e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006aa0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	7f9b      	ldrb	r3, [r3, #30]
 8006aa6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006aa8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006aae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ab6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ada:	2001      	movs	r0, #1
 8006adc:	f7fe fafa 	bl	80050d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ae8:	461a      	mov	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	791b      	ldrb	r3, [r3, #4]
 8006af2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006af8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006afe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006b04:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006b0c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006b0e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006b16:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006b1c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b2a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006b38:	2001      	movs	r0, #1
 8006b3a:	f7fe facb 	bl	80050d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b46:	461a      	mov	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6013      	str	r3, [r2, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	f8de3f23 	.word	0xf8de3f23

08006b58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b0a6      	sub	sp, #152	@ 0x98
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006bc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006bc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006bd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff fe7f 	bl	80068dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006bde:	2301      	movs	r3, #1
 8006be0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006be2:	2301      	movs	r3, #1
 8006be4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006c00:	2300      	movs	r3, #0
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006c0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006c12:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006c14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006c18:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006c1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c1e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006c2e:	f107 0308 	add.w	r3, r7, #8
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff ff05 	bl	8006a44 <ETH_SetDMAConfig>
}
 8006c3a:	bf00      	nop
 8006c3c:	3798      	adds	r7, #152	@ 0x98
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3305      	adds	r3, #5
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	3204      	adds	r2, #4
 8006c5c:	7812      	ldrb	r2, [r2, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	4b11      	ldr	r3, [pc, #68]	@ (8006cac <ETH_MACAddressConfig+0x68>)
 8006c66:	4413      	add	r3, r2
 8006c68:	461a      	mov	r2, r3
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3303      	adds	r3, #3
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	061a      	lsls	r2, r3, #24
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3302      	adds	r3, #2
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	041b      	lsls	r3, r3, #16
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3301      	adds	r3, #1
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	021b      	lsls	r3, r3, #8
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	7812      	ldrb	r2, [r2, #0]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	4b06      	ldr	r3, [pc, #24]	@ (8006cb0 <ETH_MACAddressConfig+0x6c>)
 8006c96:	4413      	add	r3, r2
 8006c98:	461a      	mov	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6013      	str	r3, [r2, #0]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40028040 	.word	0x40028040
 8006cb0:	40028044 	.word	0x40028044

08006cb4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	e03e      	b.n	8006d40 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68d9      	ldr	r1, [r3, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	440b      	add	r3, r1
 8006cd2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	3206      	adds	r2, #6
 8006cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d80c      	bhi.n	8006d24 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68d9      	ldr	r1, [r3, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	440b      	add	r3, r1
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	e004      	b.n	8006d2e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d9bd      	bls.n	8006cc2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d58:	611a      	str	r2, [r3, #16]
}
 8006d5a:	bf00      	nop
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e048      	b.n	8006e06 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6919      	ldr	r1, [r3, #16]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	440b      	add	r3, r1
 8006d84:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2200      	movs	r2, #0
 8006da2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006db0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	3212      	adds	r2, #18
 8006dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d80c      	bhi.n	8006df6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6919      	ldr	r1, [r3, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	440b      	add	r3, r1
 8006dee:	461a      	mov	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	60da      	str	r2, [r3, #12]
 8006df4:	e004      	b.n	8006e00 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d9b3      	bls.n	8006d74 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691a      	ldr	r2, [r3, #16]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e36:	60da      	str	r2, [r3, #12]
}
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	@ 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e56:	2300      	movs	r3, #0
 8006e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	e175      	b.n	8007150 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e64:	2201      	movs	r2, #1
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4013      	ands	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	f040 8164 	bne.w	800714a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d005      	beq.n	8006e9a <HAL_GPIO_Init+0x56>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d130      	bne.n	8006efc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	2203      	movs	r2, #3
 8006ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4013      	ands	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	091b      	lsrs	r3, r3, #4
 8006ee6:	f003 0201 	and.w	r2, r3, #1
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d017      	beq.n	8006f38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	2203      	movs	r2, #3
 8006f14:	fa02 f303 	lsl.w	r3, r2, r3
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d123      	bne.n	8006f8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	08da      	lsrs	r2, r3, #3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3208      	adds	r2, #8
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	220f      	movs	r2, #15
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	43db      	mvns	r3, r3
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	4013      	ands	r3, r2
 8006f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	08da      	lsrs	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3208      	adds	r2, #8
 8006f86:	69b9      	ldr	r1, [r7, #24]
 8006f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	2203      	movs	r2, #3
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f003 0203 	and.w	r2, r3, #3
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 80be 	beq.w	800714a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fce:	4b66      	ldr	r3, [pc, #408]	@ (8007168 <HAL_GPIO_Init+0x324>)
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd2:	4a65      	ldr	r2, [pc, #404]	@ (8007168 <HAL_GPIO_Init+0x324>)
 8006fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fda:	4b63      	ldr	r3, [pc, #396]	@ (8007168 <HAL_GPIO_Init+0x324>)
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006fe6:	4a61      	ldr	r2, [pc, #388]	@ (800716c <HAL_GPIO_Init+0x328>)
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	089b      	lsrs	r3, r3, #2
 8006fec:	3302      	adds	r3, #2
 8006fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	220f      	movs	r2, #15
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a58      	ldr	r2, [pc, #352]	@ (8007170 <HAL_GPIO_Init+0x32c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d037      	beq.n	8007082 <HAL_GPIO_Init+0x23e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a57      	ldr	r2, [pc, #348]	@ (8007174 <HAL_GPIO_Init+0x330>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d031      	beq.n	800707e <HAL_GPIO_Init+0x23a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a56      	ldr	r2, [pc, #344]	@ (8007178 <HAL_GPIO_Init+0x334>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d02b      	beq.n	800707a <HAL_GPIO_Init+0x236>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a55      	ldr	r2, [pc, #340]	@ (800717c <HAL_GPIO_Init+0x338>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d025      	beq.n	8007076 <HAL_GPIO_Init+0x232>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a54      	ldr	r2, [pc, #336]	@ (8007180 <HAL_GPIO_Init+0x33c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d01f      	beq.n	8007072 <HAL_GPIO_Init+0x22e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a53      	ldr	r2, [pc, #332]	@ (8007184 <HAL_GPIO_Init+0x340>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d019      	beq.n	800706e <HAL_GPIO_Init+0x22a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a52      	ldr	r2, [pc, #328]	@ (8007188 <HAL_GPIO_Init+0x344>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d013      	beq.n	800706a <HAL_GPIO_Init+0x226>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a51      	ldr	r2, [pc, #324]	@ (800718c <HAL_GPIO_Init+0x348>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00d      	beq.n	8007066 <HAL_GPIO_Init+0x222>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a50      	ldr	r2, [pc, #320]	@ (8007190 <HAL_GPIO_Init+0x34c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <HAL_GPIO_Init+0x21e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a4f      	ldr	r2, [pc, #316]	@ (8007194 <HAL_GPIO_Init+0x350>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d101      	bne.n	800705e <HAL_GPIO_Init+0x21a>
 800705a:	2309      	movs	r3, #9
 800705c:	e012      	b.n	8007084 <HAL_GPIO_Init+0x240>
 800705e:	230a      	movs	r3, #10
 8007060:	e010      	b.n	8007084 <HAL_GPIO_Init+0x240>
 8007062:	2308      	movs	r3, #8
 8007064:	e00e      	b.n	8007084 <HAL_GPIO_Init+0x240>
 8007066:	2307      	movs	r3, #7
 8007068:	e00c      	b.n	8007084 <HAL_GPIO_Init+0x240>
 800706a:	2306      	movs	r3, #6
 800706c:	e00a      	b.n	8007084 <HAL_GPIO_Init+0x240>
 800706e:	2305      	movs	r3, #5
 8007070:	e008      	b.n	8007084 <HAL_GPIO_Init+0x240>
 8007072:	2304      	movs	r3, #4
 8007074:	e006      	b.n	8007084 <HAL_GPIO_Init+0x240>
 8007076:	2303      	movs	r3, #3
 8007078:	e004      	b.n	8007084 <HAL_GPIO_Init+0x240>
 800707a:	2302      	movs	r3, #2
 800707c:	e002      	b.n	8007084 <HAL_GPIO_Init+0x240>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <HAL_GPIO_Init+0x240>
 8007082:	2300      	movs	r3, #0
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	f002 0203 	and.w	r2, r2, #3
 800708a:	0092      	lsls	r2, r2, #2
 800708c:	4093      	lsls	r3, r2
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4313      	orrs	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007094:	4935      	ldr	r1, [pc, #212]	@ (800716c <HAL_GPIO_Init+0x328>)
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	089b      	lsrs	r3, r3, #2
 800709a:	3302      	adds	r3, #2
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007198 <HAL_GPIO_Init+0x354>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	43db      	mvns	r3, r3
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	4013      	ands	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070c6:	4a34      	ldr	r2, [pc, #208]	@ (8007198 <HAL_GPIO_Init+0x354>)
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070cc:	4b32      	ldr	r3, [pc, #200]	@ (8007198 <HAL_GPIO_Init+0x354>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	43db      	mvns	r3, r3
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	4013      	ands	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070f0:	4a29      	ldr	r2, [pc, #164]	@ (8007198 <HAL_GPIO_Init+0x354>)
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80070f6:	4b28      	ldr	r3, [pc, #160]	@ (8007198 <HAL_GPIO_Init+0x354>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	43db      	mvns	r3, r3
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	4013      	ands	r3, r2
 8007104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800711a:	4a1f      	ldr	r2, [pc, #124]	@ (8007198 <HAL_GPIO_Init+0x354>)
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007120:	4b1d      	ldr	r3, [pc, #116]	@ (8007198 <HAL_GPIO_Init+0x354>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	43db      	mvns	r3, r3
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	4013      	ands	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007144:	4a14      	ldr	r2, [pc, #80]	@ (8007198 <HAL_GPIO_Init+0x354>)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	3301      	adds	r3, #1
 800714e:	61fb      	str	r3, [r7, #28]
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	2b0f      	cmp	r3, #15
 8007154:	f67f ae86 	bls.w	8006e64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007158:	bf00      	nop
 800715a:	bf00      	nop
 800715c:	3724      	adds	r7, #36	@ 0x24
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40023800 	.word	0x40023800
 800716c:	40013800 	.word	0x40013800
 8007170:	40020000 	.word	0x40020000
 8007174:	40020400 	.word	0x40020400
 8007178:	40020800 	.word	0x40020800
 800717c:	40020c00 	.word	0x40020c00
 8007180:	40021000 	.word	0x40021000
 8007184:	40021400 	.word	0x40021400
 8007188:	40021800 	.word	0x40021800
 800718c:	40021c00 	.word	0x40021c00
 8007190:	40022000 	.word	0x40022000
 8007194:	40022400 	.word	0x40022400
 8007198:	40013c00 	.word	0x40013c00

0800719c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
 80071a8:	4613      	mov	r3, r2
 80071aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071ac:	787b      	ldrb	r3, [r7, #1]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071b2:	887a      	ldrh	r2, [r7, #2]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80071b8:	e003      	b.n	80071c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80071ba:	887b      	ldrh	r3, [r7, #2]
 80071bc:	041a      	lsls	r2, r3, #16
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	619a      	str	r2, [r3, #24]
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af02      	add	r7, sp, #8
 80071d4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e059      	b.n	8007294 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f011 fffe 	bl	80191fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2203      	movs	r2, #3
 8007204:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800720e:	d102      	bne.n	8007216 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f009 f995 	bl	801054a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7c1a      	ldrb	r2, [r3, #16]
 8007228:	f88d 2000 	strb.w	r2, [sp]
 800722c:	3304      	adds	r3, #4
 800722e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007230:	f009 f920 	bl	8010474 <USB_CoreInit>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e026      	b.n	8007294 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2101      	movs	r1, #1
 800724c:	4618      	mov	r0, r3
 800724e:	f009 f98d 	bl	801056c <USB_SetCurrentMode>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e017      	b.n	8007294 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	7c1a      	ldrb	r2, [r3, #16]
 800726c:	f88d 2000 	strb.w	r2, [sp]
 8007270:	3304      	adds	r3, #4
 8007272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007274:	f009 fb36 	bl	80108e4 <USB_HostInit>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e004      	b.n	8007294 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800729c:	b590      	push	{r4, r7, lr}
 800729e:	b08b      	sub	sp, #44	@ 0x2c
 80072a0:	af04      	add	r7, sp, #16
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	70fb      	strb	r3, [r7, #3]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70bb      	strb	r3, [r7, #2]
 80072b2:	4613      	mov	r3, r2
 80072b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80072b6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80072b8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_HCD_HC_Init+0x2c>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e09d      	b.n	8007404 <HAL_HCD_HC_Init+0x168>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80072d0:	78fa      	ldrb	r2, [r7, #3]
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	4613      	mov	r3, r2
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	3319      	adds	r3, #25
 80072e0:	2200      	movs	r2, #0
 80072e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4613      	mov	r3, r2
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	1a9b      	subs	r3, r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	3314      	adds	r3, #20
 80072f4:	787a      	ldrb	r2, [r7, #1]
 80072f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	3315      	adds	r3, #21
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	3326      	adds	r3, #38	@ 0x26
 800731c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007320:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	78bb      	ldrb	r3, [r7, #2]
 8007326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800732a:	b2d8      	uxtb	r0, r3
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	3316      	adds	r3, #22
 800733a:	4602      	mov	r2, r0
 800733c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fbc8 	bl	8007ad8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8007348:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800734c:	2b00      	cmp	r3, #0
 800734e:	da0a      	bge.n	8007366 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4613      	mov	r3, r2
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	3317      	adds	r3, #23
 8007360:	2201      	movs	r2, #1
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e009      	b.n	800737a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3317      	adds	r3, #23
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f009 fc08 	bl	8010b94 <USB_GetHostSpeed>
 8007384:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8007386:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d10b      	bne.n	80073a6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800738e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007392:	2b01      	cmp	r3, #1
 8007394:	d107      	bne.n	80073a6 <HAL_HCD_HC_Init+0x10a>
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2bbc      	cmp	r3, #188	@ 0xbc
 80073a0:	d901      	bls.n	80073a6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80073a2:	23bc      	movs	r3, #188	@ 0xbc
 80073a4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	4613      	mov	r3, r2
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	440b      	add	r3, r1
 80073b4:	3318      	adds	r3, #24
 80073b6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80073ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80073bc:	78fa      	ldrb	r2, [r7, #3]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	b298      	uxth	r0, r3
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	3328      	adds	r3, #40	@ 0x28
 80073d0:	4602      	mov	r2, r0
 80073d2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	787c      	ldrb	r4, [r7, #1]
 80073de:	78ba      	ldrb	r2, [r7, #2]
 80073e0:	78f9      	ldrb	r1, [r7, #3]
 80073e2:	9302      	str	r3, [sp, #8]
 80073e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4623      	mov	r3, r4
 80073f2:	f009 fbf7 	bl	8010be4 <USB_HC_Init>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd90      	pop	{r4, r7, pc}

0800740c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_HCD_HC_Halt+0x1e>
 8007426:	2302      	movs	r3, #2
 8007428:	e00f      	b.n	800744a <HAL_HCD_HC_Halt+0x3e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f009 ff89 	bl	8011352 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	4608      	mov	r0, r1
 800745e:	4611      	mov	r1, r2
 8007460:	461a      	mov	r2, r3
 8007462:	4603      	mov	r3, r0
 8007464:	70fb      	strb	r3, [r7, #3]
 8007466:	460b      	mov	r3, r1
 8007468:	70bb      	strb	r3, [r7, #2]
 800746a:	4613      	mov	r3, r2
 800746c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	3317      	adds	r3, #23
 800747e:	78ba      	ldrb	r2, [r7, #2]
 8007480:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	3326      	adds	r3, #38	@ 0x26
 8007492:	787a      	ldrb	r2, [r7, #1]
 8007494:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007496:	7c3b      	ldrb	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d114      	bne.n	80074c6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4613      	mov	r3, r2
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	332a      	adds	r3, #42	@ 0x2a
 80074ac:	2203      	movs	r2, #3
 80074ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80074b0:	78fa      	ldrb	r2, [r7, #3]
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	4613      	mov	r3, r2
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	1a9b      	subs	r3, r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	3319      	adds	r3, #25
 80074c0:	7f3a      	ldrb	r2, [r7, #28]
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e009      	b.n	80074da <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	1a9b      	subs	r3, r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	332a      	adds	r3, #42	@ 0x2a
 80074d6:	2202      	movs	r2, #2
 80074d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80074da:	787b      	ldrb	r3, [r7, #1]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	f200 8102 	bhi.w	80076e6 <HAL_HCD_HC_SubmitRequest+0x292>
 80074e2:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	080076d1 	.word	0x080076d1
 80074f0:	080075bd 	.word	0x080075bd
 80074f4:	08007647 	.word	0x08007647
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80074f8:	7c3b      	ldrb	r3, [r7, #16]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	f040 80f5 	bne.w	80076ea <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8007500:	78bb      	ldrb	r3, [r7, #2]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d12d      	bne.n	8007562 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8007506:	8b3b      	ldrh	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4613      	mov	r3, r2
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	1a9b      	subs	r3, r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	440b      	add	r3, r1
 800751a:	333d      	adds	r3, #61	@ 0x3d
 800751c:	2201      	movs	r2, #1
 800751e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	4613      	mov	r3, r2
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	333d      	adds	r3, #61	@ 0x3d
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	332a      	adds	r3, #42	@ 0x2a
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800754a:	e0ce      	b.n	80076ea <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800754c:	78fa      	ldrb	r2, [r7, #3]
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	332a      	adds	r3, #42	@ 0x2a
 800755c:	2202      	movs	r2, #2
 800755e:	701a      	strb	r2, [r3, #0]
      break;
 8007560:	e0c3      	b.n	80076ea <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	4613      	mov	r3, r2
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	1a9b      	subs	r3, r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	331a      	adds	r3, #26
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b01      	cmp	r3, #1
 8007576:	f040 80b8 	bne.w	80076ea <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4613      	mov	r3, r2
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	1a9b      	subs	r3, r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	333c      	adds	r3, #60	@ 0x3c
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007590:	78fa      	ldrb	r2, [r7, #3]
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4613      	mov	r3, r2
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	1a9b      	subs	r3, r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	332a      	adds	r3, #42	@ 0x2a
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
      break;
 80075a4:	e0a1      	b.n	80076ea <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80075a6:	78fa      	ldrb	r2, [r7, #3]
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	332a      	adds	r3, #42	@ 0x2a
 80075b6:	2202      	movs	r2, #2
 80075b8:	701a      	strb	r2, [r3, #0]
      break;
 80075ba:	e096      	b.n	80076ea <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80075bc:	78bb      	ldrb	r3, [r7, #2]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d120      	bne.n	8007604 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80075c2:	78fa      	ldrb	r2, [r7, #3]
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	4613      	mov	r3, r2
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	1a9b      	subs	r3, r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	440b      	add	r3, r1
 80075d0:	333d      	adds	r3, #61	@ 0x3d
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075d8:	78fa      	ldrb	r2, [r7, #3]
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	4613      	mov	r3, r2
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	332a      	adds	r3, #42	@ 0x2a
 80075e8:	2200      	movs	r2, #0
 80075ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80075ec:	e07e      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80075ee:	78fa      	ldrb	r2, [r7, #3]
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	4613      	mov	r3, r2
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	332a      	adds	r3, #42	@ 0x2a
 80075fe:	2202      	movs	r2, #2
 8007600:	701a      	strb	r2, [r3, #0]
      break;
 8007602:	e073      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007604:	78fa      	ldrb	r2, [r7, #3]
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4613      	mov	r3, r2
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	1a9b      	subs	r3, r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	333c      	adds	r3, #60	@ 0x3c
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10a      	bne.n	8007630 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	4613      	mov	r3, r2
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	1a9b      	subs	r3, r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	332a      	adds	r3, #42	@ 0x2a
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
      break;
 800762e:	e05d      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007630:	78fa      	ldrb	r2, [r7, #3]
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	4613      	mov	r3, r2
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	332a      	adds	r3, #42	@ 0x2a
 8007640:	2202      	movs	r2, #2
 8007642:	701a      	strb	r2, [r3, #0]
      break;
 8007644:	e052      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007646:	78bb      	ldrb	r3, [r7, #2]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d120      	bne.n	800768e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	440b      	add	r3, r1
 800765a:	333d      	adds	r3, #61	@ 0x3d
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	332a      	adds	r3, #42	@ 0x2a
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007676:	e039      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4613      	mov	r3, r2
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	332a      	adds	r3, #42	@ 0x2a
 8007688:	2202      	movs	r2, #2
 800768a:	701a      	strb	r2, [r3, #0]
      break;
 800768c:	e02e      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800768e:	78fa      	ldrb	r2, [r7, #3]
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	333c      	adds	r3, #60	@ 0x3c
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	332a      	adds	r3, #42	@ 0x2a
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
      break;
 80076b8:	e018      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	6879      	ldr	r1, [r7, #4]
 80076be:	4613      	mov	r3, r2
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	332a      	adds	r3, #42	@ 0x2a
 80076ca:	2202      	movs	r2, #2
 80076cc:	701a      	strb	r2, [r3, #0]
      break;
 80076ce:	e00d      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	4613      	mov	r3, r2
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	1a9b      	subs	r3, r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	332a      	adds	r3, #42	@ 0x2a
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e002      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80076e6:	bf00      	nop
 80076e8:	e000      	b.n	80076ec <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80076ea:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80076ec:	78fa      	ldrb	r2, [r7, #3]
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	4613      	mov	r3, r2
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	1a9b      	subs	r3, r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	440b      	add	r3, r1
 80076fa:	332c      	adds	r3, #44	@ 0x2c
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	8b39      	ldrh	r1, [r7, #24]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4403      	add	r3, r0
 8007710:	3334      	adds	r3, #52	@ 0x34
 8007712:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007714:	78fa      	ldrb	r2, [r7, #3]
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	4613      	mov	r3, r2
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	440b      	add	r3, r1
 8007722:	334c      	adds	r3, #76	@ 0x4c
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4613      	mov	r3, r2
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	1a9b      	subs	r3, r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	3338      	adds	r3, #56	@ 0x38
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800773c:	78fa      	ldrb	r2, [r7, #3]
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	4613      	mov	r3, r2
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	1a9b      	subs	r3, r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	440b      	add	r3, r1
 800774a:	3315      	adds	r3, #21
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007750:	78fa      	ldrb	r2, [r7, #3]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	334d      	adds	r3, #77	@ 0x4d
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	78fa      	ldrb	r2, [r7, #3]
 800776a:	4613      	mov	r3, r2
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	3310      	adds	r3, #16
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	1d19      	adds	r1, r3, #4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	799b      	ldrb	r3, [r3, #6]
 800777e:	461a      	mov	r2, r3
 8007780:	f009 fb5c 	bl	8010e3c <USB_HC_StartXfer>
 8007784:	4603      	mov	r3, r0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop

08007790 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f009 f856 	bl	8010858 <USB_GetMode>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	f040 80fb 	bne.w	80079aa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f009 f819 	bl	80107f0 <USB_ReadInterrupts>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80f1 	beq.w	80079a8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f009 f810 	bl	80107f0 <USB_ReadInterrupts>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077da:	d104      	bne.n	80077e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80077e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f009 f800 	bl	80107f0 <USB_ReadInterrupts>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077fa:	d104      	bne.n	8007806 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007804:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f008 fff0 	bl	80107f0 <USB_ReadInterrupts>
 8007810:	4603      	mov	r3, r0
 8007812:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007816:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800781a:	d104      	bne.n	8007826 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007824:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f008 ffe0 	bl	80107f0 <USB_ReadInterrupts>
 8007830:	4603      	mov	r3, r0
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d103      	bne.n	8007842 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2202      	movs	r2, #2
 8007840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f008 ffd2 	bl	80107f0 <USB_ReadInterrupts>
 800784c:	4603      	mov	r3, r0
 800784e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007856:	d120      	bne.n	800789a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007860:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d113      	bne.n	800789a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007872:	2110      	movs	r1, #16
 8007874:	6938      	ldr	r0, [r7, #16]
 8007876:	f008 fec5 	bl	8010604 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800787a:	6938      	ldr	r0, [r7, #16]
 800787c:	f008 fef4 	bl	8010668 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7a5b      	ldrb	r3, [r3, #9]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d105      	bne.n	8007894 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2101      	movs	r1, #1
 800788e:	4618      	mov	r0, r3
 8007890:	f009 f8e0 	bl	8010a54 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f011 fd23 	bl	80192e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f008 ffa6 	bl	80107f0 <USB_ReadInterrupts>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078ae:	d102      	bne.n	80078b6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 fd4d 	bl	8009350 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f008 ff98 	bl	80107f0 <USB_ReadInterrupts>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d106      	bne.n	80078d8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f011 fcec 	bl	80192a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2208      	movs	r2, #8
 80078d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4618      	mov	r0, r3
 80078de:	f008 ff87 	bl	80107f0 <USB_ReadInterrupts>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ec:	d139      	bne.n	8007962 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f009 fd1c 	bl	8011330 <USB_HC_ReadInterrupt>
 80078f8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	e025      	b.n	800794c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d018      	beq.n	8007946 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800792a:	d106      	bne.n	800793a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f905 	bl	8007b42 <HCD_HC_IN_IRQHandler>
 8007938:	e005      	b.n	8007946 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 ff67 	bl	8008814 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	3301      	adds	r3, #1
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	795b      	ldrb	r3, [r3, #5]
 8007950:	461a      	mov	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	4293      	cmp	r3, r2
 8007956:	d3d3      	bcc.n	8007900 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f008 ff42 	bl	80107f0 <USB_ReadInterrupts>
 800796c:	4603      	mov	r3, r0
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b10      	cmp	r3, #16
 8007974:	d101      	bne.n	800797a <HAL_HCD_IRQHandler+0x1ea>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <HAL_HCD_IRQHandler+0x1ec>
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d014      	beq.n	80079aa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699a      	ldr	r2, [r3, #24]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0210 	bic.w	r2, r2, #16
 800798e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 fbfe 	bl	8009192 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0210 	orr.w	r2, r2, #16
 80079a4:	619a      	str	r2, [r3, #24]
 80079a6:	e000      	b.n	80079aa <HAL_HCD_IRQHandler+0x21a>
      return;
 80079a8:	bf00      	nop
    }
  }
}
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_HCD_Start+0x16>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e013      	b.n	80079ee <HAL_HCD_Start+0x3e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2101      	movs	r1, #1
 80079d4:	4618      	mov	r0, r3
 80079d6:	f009 f8a4 	bl	8010b22 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f008 fda2 	bl	8010528 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_HCD_Stop+0x16>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e00d      	b.n	8007a28 <HAL_HCD_Stop+0x32>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f009 fdf7 	bl	801160c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f009 f846 	bl	8010ace <USB_ResetPort>
 8007a42:	4603      	mov	r3, r0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	334c      	adds	r3, #76	@ 0x4c
 8007a68:	781b      	ldrb	r3, [r3, #0]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007a82:	78fa      	ldrb	r2, [r7, #3]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	1a9b      	subs	r3, r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	3338      	adds	r3, #56	@ 0x38
 8007a92:	681b      	ldr	r3, [r3, #0]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f009 f888 	bl	8010bc2 <USB_GetCurrentFrame>
 8007ab2:	4603      	mov	r3, r0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f009 f863 	bl	8010b94 <USB_GetHostSpeed>
 8007ace:	4603      	mov	r3, r0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	1a9b      	subs	r3, r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	440b      	add	r3, r1
 8007af2:	331a      	adds	r3, #26
 8007af4:	2200      	movs	r2, #0
 8007af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	4613      	mov	r3, r2
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	1a9b      	subs	r3, r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	331b      	adds	r3, #27
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	3325      	adds	r3, #37	@ 0x25
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	1a9b      	subs	r3, r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	3324      	adds	r3, #36	@ 0x24
 8007b30:	2200      	movs	r2, #0
 8007b32:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b086      	sub	sp, #24
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f008 fe58 	bl	8010816 <USB_ReadChInterrupts>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d11a      	bne.n	8007ba6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	2304      	movs	r3, #4
 8007b80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	011b      	lsls	r3, r3, #4
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	440b      	add	r3, r1
 8007b90:	334d      	adds	r3, #77	@ 0x4d
 8007b92:	2207      	movs	r2, #7
 8007b94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f009 fbd7 	bl	8011352 <USB_HC_Halt>
 8007ba4:	e09e      	b.n	8007ce4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	4611      	mov	r1, r2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f008 fe31 	bl	8010816 <USB_ReadChInterrupts>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bbe:	d11b      	bne.n	8007bf8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007bd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007bd4:	78fa      	ldrb	r2, [r7, #3]
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	334d      	adds	r3, #77	@ 0x4d
 8007be4:	2208      	movs	r2, #8
 8007be6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	78fa      	ldrb	r2, [r7, #3]
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f009 fbae 	bl	8011352 <USB_HC_Halt>
 8007bf6:	e075      	b.n	8007ce4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f008 fe08 	bl	8010816 <USB_ReadChInterrupts>
 8007c06:	4603      	mov	r3, r0
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d11a      	bne.n	8007c46 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	2308      	movs	r3, #8
 8007c20:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	334d      	adds	r3, #77	@ 0x4d
 8007c32:	2206      	movs	r2, #6
 8007c34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f009 fb87 	bl	8011352 <USB_HC_Halt>
 8007c44:	e04e      	b.n	8007ce4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f008 fde1 	bl	8010816 <USB_ReadChInterrupts>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c5e:	d11b      	bne.n	8007c98 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007c74:	78fa      	ldrb	r2, [r7, #3]
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	334d      	adds	r3, #77	@ 0x4d
 8007c84:	2209      	movs	r2, #9
 8007c86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	78fa      	ldrb	r2, [r7, #3]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f009 fb5e 	bl	8011352 <USB_HC_Halt>
 8007c96:	e025      	b.n	8007ce4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	78fa      	ldrb	r2, [r7, #3]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f008 fdb8 	bl	8010816 <USB_ReadChInterrupts>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cac:	2b80      	cmp	r3, #128	@ 0x80
 8007cae:	d119      	bne.n	8007ce4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	2380      	movs	r3, #128	@ 0x80
 8007cc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	440b      	add	r3, r1
 8007cd0:	334d      	adds	r3, #77	@ 0x4d
 8007cd2:	2207      	movs	r2, #7
 8007cd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f009 fb37 	bl	8011352 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f008 fd92 	bl	8010816 <USB_ReadChInterrupts>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfc:	d112      	bne.n	8007d24 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	78fa      	ldrb	r2, [r7, #3]
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f009 fb23 	bl	8011352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d1e:	6093      	str	r3, [r2, #8]
 8007d20:	f000 bd75 	b.w	800880e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	78fa      	ldrb	r2, [r7, #3]
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f008 fd72 	bl	8010816 <USB_ReadChInterrupts>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	f040 8128 	bne.w	8007f8e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	2320      	movs	r3, #32
 8007d4e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007d50:	78fa      	ldrb	r2, [r7, #3]
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4613      	mov	r3, r2
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	331b      	adds	r3, #27
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d119      	bne.n	8007d9a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	331b      	adds	r3, #27
 8007d76:	2200      	movs	r2, #0
 8007d78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	78fa      	ldrb	r2, [r7, #3]
 8007d8a:	0151      	lsls	r1, r2, #5
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	440a      	add	r2, r1
 8007d90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d98:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	799b      	ldrb	r3, [r3, #6]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01b      	beq.n	8007dda <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007da2:	78fa      	ldrb	r2, [r7, #3]
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	4613      	mov	r3, r2
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	440b      	add	r3, r1
 8007db0:	3330      	adds	r3, #48	@ 0x30
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dc6:	78fa      	ldrb	r2, [r7, #3]
 8007dc8:	1ac9      	subs	r1, r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4403      	add	r3, r0
 8007dd6:	3338      	adds	r3, #56	@ 0x38
 8007dd8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	4613      	mov	r3, r2
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	334d      	adds	r3, #77	@ 0x4d
 8007dea:	2201      	movs	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8007dee:	78fa      	ldrb	r2, [r7, #3]
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3344      	adds	r3, #68	@ 0x44
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0e:	461a      	mov	r2, r3
 8007e10:	2301      	movs	r3, #1
 8007e12:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	1a9b      	subs	r3, r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	440b      	add	r3, r1
 8007e22:	3326      	adds	r3, #38	@ 0x26
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	6879      	ldr	r1, [r7, #4]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	1a9b      	subs	r3, r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	440b      	add	r3, r1
 8007e38:	3326      	adds	r3, #38	@ 0x26
 8007e3a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d110      	bne.n	8007e62 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	78fa      	ldrb	r2, [r7, #3]
 8007e46:	4611      	mov	r1, r2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f009 fa82 	bl	8011352 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	6093      	str	r3, [r2, #8]
 8007e60:	e03d      	b.n	8007ede <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	4613      	mov	r3, r2
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	3326      	adds	r3, #38	@ 0x26
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d00a      	beq.n	8007e8e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	3326      	adds	r3, #38	@ 0x26
 8007e88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d127      	bne.n	8007ede <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	78fa      	ldrb	r2, [r7, #3]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ea8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007eac:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007eae:	78fa      	ldrb	r2, [r7, #3]
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	1a9b      	subs	r3, r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	334c      	adds	r3, #76	@ 0x4c
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	440b      	add	r3, r1
 8007ed0:	334c      	adds	r3, #76	@ 0x4c
 8007ed2:	781a      	ldrb	r2, [r3, #0]
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f011 fa0f 	bl	80192fc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	799b      	ldrb	r3, [r3, #6]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d13b      	bne.n	8007f5e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007ee6:	78fa      	ldrb	r2, [r7, #3]
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	4613      	mov	r3, r2
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	3338      	adds	r3, #56	@ 0x38
 8007ef6:	6819      	ldr	r1, [r3, #0]
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4403      	add	r3, r0
 8007f06:	3328      	adds	r3, #40	@ 0x28
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	440b      	add	r3, r1
 8007f0c:	1e59      	subs	r1, r3, #1
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	1a9b      	subs	r3, r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4403      	add	r3, r0
 8007f1c:	3328      	adds	r3, #40	@ 0x28
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 8470 	beq.w	800880e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007f2e:	78fa      	ldrb	r2, [r7, #3]
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	4613      	mov	r3, r2
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	1a9b      	subs	r3, r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	440b      	add	r3, r1
 8007f3c:	333c      	adds	r3, #60	@ 0x3c
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	f083 0301 	eor.w	r3, r3, #1
 8007f46:	b2d8      	uxtb	r0, r3
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	333c      	adds	r3, #60	@ 0x3c
 8007f56:	4602      	mov	r2, r0
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	f000 bc58 	b.w	800880e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007f5e:	78fa      	ldrb	r2, [r7, #3]
 8007f60:	6879      	ldr	r1, [r7, #4]
 8007f62:	4613      	mov	r3, r2
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	1a9b      	subs	r3, r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	333c      	adds	r3, #60	@ 0x3c
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	f083 0301 	eor.w	r3, r3, #1
 8007f76:	b2d8      	uxtb	r0, r3
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	333c      	adds	r3, #60	@ 0x3c
 8007f86:	4602      	mov	r2, r0
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	f000 bc40 	b.w	800880e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	4611      	mov	r1, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f008 fc3d 	bl	8010816 <USB_ReadChInterrupts>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d131      	bne.n	800800a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007fb8:	78fa      	ldrb	r2, [r7, #3]
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	1a9b      	subs	r3, r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	331a      	adds	r3, #26
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	f040 841f 	bne.w	800880e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007fd0:	78fa      	ldrb	r2, [r7, #3]
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	331b      	adds	r3, #27
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	334d      	adds	r3, #77	@ 0x4d
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	78fa      	ldrb	r2, [r7, #3]
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f009 f9a6 	bl	8011352 <USB_HC_Halt>
 8008006:	f000 bc02 	b.w	800880e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f008 fbff 	bl	8010816 <USB_ReadChInterrupts>
 8008018:	4603      	mov	r3, r0
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b02      	cmp	r3, #2
 8008020:	f040 8305 	bne.w	800862e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4413      	add	r3, r2
 800802c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008030:	461a      	mov	r2, r3
 8008032:	2302      	movs	r3, #2
 8008034:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	1a9b      	subs	r3, r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	334d      	adds	r3, #77	@ 0x4d
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d114      	bne.n	8008076 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4613      	mov	r3, r2
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	334d      	adds	r3, #77	@ 0x4d
 800805c:	2202      	movs	r2, #2
 800805e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	334c      	adds	r3, #76	@ 0x4c
 8008070:	2201      	movs	r2, #1
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e2cc      	b.n	8008610 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	1a9b      	subs	r3, r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	334d      	adds	r3, #77	@ 0x4d
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b06      	cmp	r3, #6
 800808a:	d114      	bne.n	80080b6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	334d      	adds	r3, #77	@ 0x4d
 800809c:	2202      	movs	r2, #2
 800809e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80080a0:	78fa      	ldrb	r2, [r7, #3]
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	4613      	mov	r3, r2
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	334c      	adds	r3, #76	@ 0x4c
 80080b0:	2205      	movs	r2, #5
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	e2ac      	b.n	8008610 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80080b6:	78fa      	ldrb	r2, [r7, #3]
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	4613      	mov	r3, r2
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	1a9b      	subs	r3, r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	440b      	add	r3, r1
 80080c4:	334d      	adds	r3, #77	@ 0x4d
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b07      	cmp	r3, #7
 80080ca:	d00b      	beq.n	80080e4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80080cc:	78fa      	ldrb	r2, [r7, #3]
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	4613      	mov	r3, r2
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	1a9b      	subs	r3, r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	334d      	adds	r3, #77	@ 0x4d
 80080dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80080de:	2b09      	cmp	r3, #9
 80080e0:	f040 80a6 	bne.w	8008230 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80080e4:	78fa      	ldrb	r2, [r7, #3]
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	4613      	mov	r3, r2
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	334d      	adds	r3, #77	@ 0x4d
 80080f4:	2202      	movs	r2, #2
 80080f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	1a9b      	subs	r3, r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	3344      	adds	r3, #68	@ 0x44
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	1c59      	adds	r1, r3, #1
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4613      	mov	r3, r2
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4403      	add	r3, r0
 8008118:	3344      	adds	r3, #68	@ 0x44
 800811a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800811c:	78fa      	ldrb	r2, [r7, #3]
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4613      	mov	r3, r2
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	3344      	adds	r3, #68	@ 0x44
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d943      	bls.n	80081ba <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	1a9b      	subs	r3, r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	440b      	add	r3, r1
 8008140:	3344      	adds	r3, #68	@ 0x44
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	331a      	adds	r3, #26
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d123      	bne.n	80081a4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	4613      	mov	r3, r2
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	331b      	adds	r3, #27
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008170:	78fa      	ldrb	r2, [r7, #3]
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	4613      	mov	r3, r2
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	1a9b      	subs	r3, r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	440b      	add	r3, r1
 800817e:	331c      	adds	r3, #28
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	4413      	add	r3, r2
 800818c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	78fa      	ldrb	r2, [r7, #3]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	440a      	add	r2, r1
 800819a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800819e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081a2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80081a4:	78fa      	ldrb	r2, [r7, #3]
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	334c      	adds	r3, #76	@ 0x4c
 80081b4:	2204      	movs	r2, #4
 80081b6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80081b8:	e229      	b.n	800860e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	334c      	adds	r3, #76	@ 0x4c
 80081ca:	2202      	movs	r2, #2
 80081cc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	3326      	adds	r3, #38	@ 0x26
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3326      	adds	r3, #38	@ 0x26
 80081f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	f040 8209 	bne.w	800860e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4413      	add	r3, r2
 8008204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008212:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800821a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	4413      	add	r3, r2
 8008224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008228:	461a      	mov	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800822e:	e1ee      	b.n	800860e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	4613      	mov	r3, r2
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	334d      	adds	r3, #77	@ 0x4d
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b05      	cmp	r3, #5
 8008244:	f040 80c8 	bne.w	80083d8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008248:	78fa      	ldrb	r2, [r7, #3]
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	334d      	adds	r3, #77	@ 0x4d
 8008258:	2202      	movs	r2, #2
 800825a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	331b      	adds	r3, #27
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b01      	cmp	r3, #1
 8008270:	f040 81ce 	bne.w	8008610 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008274:	78fa      	ldrb	r2, [r7, #3]
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4613      	mov	r3, r2
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	3326      	adds	r3, #38	@ 0x26
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d16b      	bne.n	8008362 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	4613      	mov	r3, r2
 8008290:	011b      	lsls	r3, r3, #4
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	440b      	add	r3, r1
 8008298:	3348      	adds	r3, #72	@ 0x48
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	1c59      	adds	r1, r3, #1
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4403      	add	r3, r0
 80082aa:	3348      	adds	r3, #72	@ 0x48
 80082ac:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80082ae:	78fa      	ldrb	r2, [r7, #3]
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	011b      	lsls	r3, r3, #4
 80082b6:	1a9b      	subs	r3, r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	3348      	adds	r3, #72	@ 0x48
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d943      	bls.n	800834c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	3348      	adds	r3, #72	@ 0x48
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	331b      	adds	r3, #27
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80082ec:	78fa      	ldrb	r2, [r7, #3]
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	4613      	mov	r3, r2
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	3344      	adds	r3, #68	@ 0x44
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d809      	bhi.n	8008316 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	1a9b      	subs	r3, r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	331c      	adds	r3, #28
 8008312:	2201      	movs	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	4413      	add	r3, r2
 800831e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	0151      	lsls	r1, r2, #5
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	440a      	add	r2, r1
 800832c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008334:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	4613      	mov	r3, r2
 800833c:	011b      	lsls	r3, r3, #4
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	334c      	adds	r3, #76	@ 0x4c
 8008346:	2204      	movs	r2, #4
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	e014      	b.n	8008376 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	334c      	adds	r3, #76	@ 0x4c
 800835c:	2202      	movs	r2, #2
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e009      	b.n	8008376 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008362:	78fa      	ldrb	r2, [r7, #3]
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	334c      	adds	r3, #76	@ 0x4c
 8008372:	2202      	movs	r2, #2
 8008374:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	3326      	adds	r3, #38	@ 0x26
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800838c:	78fa      	ldrb	r2, [r7, #3]
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	3326      	adds	r3, #38	@ 0x26
 800839c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800839e:	2b02      	cmp	r3, #2
 80083a0:	f040 8136 	bne.w	8008610 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80083ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d0:	461a      	mov	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	e11b      	b.n	8008610 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4613      	mov	r3, r2
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	334d      	adds	r3, #77	@ 0x4d
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	f040 8081 	bne.w	80084f2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	4613      	mov	r3, r2
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	440b      	add	r3, r1
 80083fe:	334d      	adds	r3, #77	@ 0x4d
 8008400:	2202      	movs	r2, #2
 8008402:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008404:	78fa      	ldrb	r2, [r7, #3]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	331b      	adds	r3, #27
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b01      	cmp	r3, #1
 8008418:	f040 80fa 	bne.w	8008610 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800841c:	78fa      	ldrb	r2, [r7, #3]
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4613      	mov	r3, r2
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	334c      	adds	r3, #76	@ 0x4c
 800842c:	2202      	movs	r2, #2
 800842e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	4413      	add	r3, r2
 8008438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	78fa      	ldrb	r2, [r7, #3]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	440a      	add	r2, r1
 8008446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800844a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800844e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	4413      	add	r3, r2
 8008458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	440a      	add	r2, r1
 8008466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800846a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800846e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	78fa      	ldrb	r2, [r7, #3]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	440a      	add	r2, r1
 8008486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800848a:	f023 0320 	bic.w	r3, r3, #32
 800848e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	1a9b      	subs	r3, r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	3326      	adds	r3, #38	@ 0x26
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00b      	beq.n	80084be <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	4613      	mov	r3, r2
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	1a9b      	subs	r3, r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	440b      	add	r3, r1
 80084b4:	3326      	adds	r3, #38	@ 0x26
 80084b6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	f040 80a9 	bne.w	8008610 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ea:	461a      	mov	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	e08e      	b.n	8008610 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	4613      	mov	r3, r2
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	440b      	add	r3, r1
 8008500:	334d      	adds	r3, #77	@ 0x4d
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b04      	cmp	r3, #4
 8008506:	d143      	bne.n	8008590 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	334d      	adds	r3, #77	@ 0x4d
 8008518:	2202      	movs	r2, #2
 800851a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	334c      	adds	r3, #76	@ 0x4c
 800852c:	2202      	movs	r2, #2
 800852e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	011b      	lsls	r3, r3, #4
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	3326      	adds	r3, #38	@ 0x26
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	4613      	mov	r3, r2
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	1a9b      	subs	r3, r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	3326      	adds	r3, #38	@ 0x26
 8008556:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008558:	2b02      	cmp	r3, #2
 800855a:	d159      	bne.n	8008610 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008572:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800857a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	4413      	add	r3, r2
 8008584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008588:	461a      	mov	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e03f      	b.n	8008610 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	4613      	mov	r3, r2
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	1a9b      	subs	r3, r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	334d      	adds	r3, #77	@ 0x4d
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	d126      	bne.n	80085f4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80085a6:	78fa      	ldrb	r2, [r7, #3]
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	4613      	mov	r3, r2
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	334d      	adds	r3, #77	@ 0x4d
 80085b6:	2202      	movs	r2, #2
 80085b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	3344      	adds	r3, #68	@ 0x44
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	1c59      	adds	r1, r3, #1
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4613      	mov	r3, r2
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	1a9b      	subs	r3, r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4403      	add	r3, r0
 80085da:	3344      	adds	r3, #68	@ 0x44
 80085dc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	4613      	mov	r3, r2
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	1a9b      	subs	r3, r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	440b      	add	r3, r1
 80085ec:	334c      	adds	r3, #76	@ 0x4c
 80085ee:	2204      	movs	r2, #4
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	e00d      	b.n	8008610 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80085f4:	78fa      	ldrb	r2, [r7, #3]
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4613      	mov	r3, r2
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	334d      	adds	r3, #77	@ 0x4d
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b02      	cmp	r3, #2
 8008608:	f000 8100 	beq.w	800880c <HCD_HC_IN_IRQHandler+0xcca>
 800860c:	e000      	b.n	8008610 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800860e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	4613      	mov	r3, r2
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	1a9b      	subs	r3, r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	440b      	add	r3, r1
 800861e:	334c      	adds	r3, #76	@ 0x4c
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f010 fe68 	bl	80192fc <HAL_HCD_HC_NotifyURBChange_Callback>
 800862c:	e0ef      	b.n	800880e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	78fa      	ldrb	r2, [r7, #3]
 8008634:	4611      	mov	r1, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f008 f8ed 	bl	8010816 <USB_ReadChInterrupts>
 800863c:	4603      	mov	r3, r0
 800863e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008642:	2b40      	cmp	r3, #64	@ 0x40
 8008644:	d12f      	bne.n	80086a6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	4413      	add	r3, r2
 800864e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008652:	461a      	mov	r2, r3
 8008654:	2340      	movs	r3, #64	@ 0x40
 8008656:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008658:	78fa      	ldrb	r2, [r7, #3]
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	4613      	mov	r3, r2
 800865e:	011b      	lsls	r3, r3, #4
 8008660:	1a9b      	subs	r3, r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	440b      	add	r3, r1
 8008666:	334d      	adds	r3, #77	@ 0x4d
 8008668:	2205      	movs	r2, #5
 800866a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	331a      	adds	r3, #26
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	3344      	adds	r3, #68	@ 0x44
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f008 fe57 	bl	8011352 <USB_HC_Halt>
 80086a4:	e0b3      	b.n	800880e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	4611      	mov	r1, r2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f008 f8b1 	bl	8010816 <USB_ReadChInterrupts>
 80086b4:	4603      	mov	r3, r0
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	f040 80a7 	bne.w	800880e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	3326      	adds	r3, #38	@ 0x26
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d11b      	bne.n	800870e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80086d6:	78fa      	ldrb	r2, [r7, #3]
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	3344      	adds	r3, #68	@ 0x44
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	334d      	adds	r3, #77	@ 0x4d
 80086fa:	2204      	movs	r2, #4
 80086fc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f008 fe23 	bl	8011352 <USB_HC_Halt>
 800870c:	e03f      	b.n	800878e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	1a9b      	subs	r3, r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	440b      	add	r3, r1
 800871c:	3326      	adds	r3, #38	@ 0x26
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00a      	beq.n	800873a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008724:	78fa      	ldrb	r2, [r7, #3]
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	4613      	mov	r3, r2
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	1a9b      	subs	r3, r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	440b      	add	r3, r1
 8008732:	3326      	adds	r3, #38	@ 0x26
 8008734:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008736:	2b02      	cmp	r3, #2
 8008738:	d129      	bne.n	800878e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	1a9b      	subs	r3, r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	3344      	adds	r3, #68	@ 0x44
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	799b      	ldrb	r3, [r3, #6]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <HCD_HC_IN_IRQHandler+0xc2a>
 8008756:	78fa      	ldrb	r2, [r7, #3]
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	4613      	mov	r3, r2
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	1a9b      	subs	r3, r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	440b      	add	r3, r1
 8008764:	331b      	adds	r3, #27
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d110      	bne.n	800878e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	011b      	lsls	r3, r3, #4
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	334d      	adds	r3, #77	@ 0x4d
 800877c:	2204      	movs	r2, #4
 800877e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	4611      	mov	r1, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f008 fde2 	bl	8011352 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	331b      	adds	r3, #27
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d129      	bne.n	80087f8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80087a4:	78fa      	ldrb	r2, [r7, #3]
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	331b      	adds	r3, #27
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	78fa      	ldrb	r2, [r7, #3]
 80087c8:	0151      	lsls	r1, r2, #5
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	440a      	add	r2, r1
 80087ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087d6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	0151      	lsls	r1, r2, #5
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	440a      	add	r2, r1
 80087ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087f2:	f043 0320 	orr.w	r3, r3, #32
 80087f6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008804:	461a      	mov	r2, r3
 8008806:	2310      	movs	r3, #16
 8008808:	6093      	str	r3, [r2, #8]
 800880a:	e000      	b.n	800880e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800880c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	4611      	mov	r1, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f007 ffef 	bl	8010816 <USB_ReadChInterrupts>
 8008838:	4603      	mov	r3, r0
 800883a:	f003 0304 	and.w	r3, r3, #4
 800883e:	2b04      	cmp	r3, #4
 8008840:	d11b      	bne.n	800887a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884e:	461a      	mov	r2, r3
 8008850:	2304      	movs	r3, #4
 8008852:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	334d      	adds	r3, #77	@ 0x4d
 8008864:	2207      	movs	r2, #7
 8008866:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f008 fd6e 	bl	8011352 <USB_HC_Halt>
 8008876:	f000 bc89 	b.w	800918c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f007 ffc7 	bl	8010816 <USB_ReadChInterrupts>
 8008888:	4603      	mov	r3, r0
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b20      	cmp	r3, #32
 8008890:	f040 8082 	bne.w	8008998 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	4413      	add	r3, r2
 800889c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a0:	461a      	mov	r2, r3
 80088a2:	2320      	movs	r3, #32
 80088a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	3319      	adds	r3, #25
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d124      	bne.n	8008906 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4613      	mov	r3, r2
 80088c2:	011b      	lsls	r3, r3, #4
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	3319      	adds	r3, #25
 80088cc:	2200      	movs	r2, #0
 80088ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	334c      	adds	r3, #76	@ 0x4c
 80088e0:	2202      	movs	r2, #2
 80088e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	334d      	adds	r3, #77	@ 0x4d
 80088f4:	2203      	movs	r2, #3
 80088f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f008 fd26 	bl	8011352 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	4613      	mov	r3, r2
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	1a9b      	subs	r3, r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	440b      	add	r3, r1
 8008914:	331a      	adds	r3, #26
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b01      	cmp	r3, #1
 800891a:	f040 8437 	bne.w	800918c <HCD_HC_OUT_IRQHandler+0x978>
 800891e:	78fa      	ldrb	r2, [r7, #3]
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	331b      	adds	r3, #27
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 842b 	bne.w	800918c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8008936:	78fa      	ldrb	r2, [r7, #3]
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	4613      	mov	r3, r2
 800893c:	011b      	lsls	r3, r3, #4
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	440b      	add	r3, r1
 8008944:	3326      	adds	r3, #38	@ 0x26
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d009      	beq.n	8008960 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800894c:	78fa      	ldrb	r2, [r7, #3]
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4613      	mov	r3, r2
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	1a9b      	subs	r3, r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	440b      	add	r3, r1
 800895a:	331b      	adds	r3, #27
 800895c:	2201      	movs	r2, #1
 800895e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	334d      	adds	r3, #77	@ 0x4d
 8008970:	2203      	movs	r2, #3
 8008972:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f008 fce8 	bl	8011352 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	011b      	lsls	r3, r3, #4
 800898a:	1a9b      	subs	r3, r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	3344      	adds	r3, #68	@ 0x44
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	e3f9      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	78fa      	ldrb	r2, [r7, #3]
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f007 ff38 	bl	8010816 <USB_ReadChInterrupts>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b0:	d111      	bne.n	80089d6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089be:	461a      	mov	r2, r3
 80089c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f008 fcbf 	bl	8011352 <USB_HC_Halt>
 80089d4:	e3da      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f007 ff19 	bl	8010816 <USB_ReadChInterrupts>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d168      	bne.n	8008ac0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	1a9b      	subs	r3, r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	3344      	adds	r3, #68	@ 0x44
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f007 ff03 	bl	8010816 <USB_ReadChInterrupts>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a16:	2b40      	cmp	r3, #64	@ 0x40
 8008a18:	d112      	bne.n	8008a40 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	1a9b      	subs	r3, r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	440b      	add	r3, r1
 8008a28:	3319      	adds	r3, #25
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	2340      	movs	r3, #64	@ 0x40
 8008a3e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	4613      	mov	r3, r2
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	331b      	adds	r3, #27
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d019      	beq.n	8008a8a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	1a9b      	subs	r3, r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	440b      	add	r3, r1
 8008a64:	331b      	adds	r3, #27
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	78fa      	ldrb	r2, [r7, #3]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a88:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a96:	461a      	mov	r2, r3
 8008a98:	2301      	movs	r3, #1
 8008a9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008a9c:	78fa      	ldrb	r2, [r7, #3]
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	334d      	adds	r3, #77	@ 0x4d
 8008aac:	2201      	movs	r2, #1
 8008aae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f008 fc4a 	bl	8011352 <USB_HC_Halt>
 8008abe:	e365      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	78fa      	ldrb	r2, [r7, #3]
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f007 fea4 	bl	8010816 <USB_ReadChInterrupts>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad4:	2b40      	cmp	r3, #64	@ 0x40
 8008ad6:	d139      	bne.n	8008b4c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	4613      	mov	r3, r2
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	334d      	adds	r3, #77	@ 0x4d
 8008ae8:	2205      	movs	r2, #5
 8008aea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	4613      	mov	r3, r2
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	331a      	adds	r3, #26
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008b02:	78fa      	ldrb	r2, [r7, #3]
 8008b04:	6879      	ldr	r1, [r7, #4]
 8008b06:	4613      	mov	r3, r2
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	440b      	add	r3, r1
 8008b10:	3319      	adds	r3, #25
 8008b12:	2201      	movs	r2, #1
 8008b14:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	440b      	add	r3, r1
 8008b24:	3344      	adds	r3, #68	@ 0x44
 8008b26:	2200      	movs	r2, #0
 8008b28:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f008 fc0d 	bl	8011352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b44:	461a      	mov	r2, r3
 8008b46:	2340      	movs	r3, #64	@ 0x40
 8008b48:	6093      	str	r3, [r2, #8]
 8008b4a:	e31f      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	78fa      	ldrb	r2, [r7, #3]
 8008b52:	4611      	mov	r1, r2
 8008b54:	4618      	mov	r0, r3
 8008b56:	f007 fe5e 	bl	8010816 <USB_ReadChInterrupts>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d11a      	bne.n	8008b9a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b70:	461a      	mov	r2, r3
 8008b72:	2308      	movs	r3, #8
 8008b74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	011b      	lsls	r3, r3, #4
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	334d      	adds	r3, #77	@ 0x4d
 8008b86:	2206      	movs	r2, #6
 8008b88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f008 fbdd 	bl	8011352 <USB_HC_Halt>
 8008b98:	e2f8      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f007 fe37 	bl	8010816 <USB_ReadChInterrupts>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f003 0310 	and.w	r3, r3, #16
 8008bae:	2b10      	cmp	r3, #16
 8008bb0:	d144      	bne.n	8008c3c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	6879      	ldr	r1, [r7, #4]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	011b      	lsls	r3, r3, #4
 8008bba:	1a9b      	subs	r3, r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	3344      	adds	r3, #68	@ 0x44
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	334d      	adds	r3, #77	@ 0x4d
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	4613      	mov	r3, r2
 8008be0:	011b      	lsls	r3, r3, #4
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	440b      	add	r3, r1
 8008be8:	3319      	adds	r3, #25
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d114      	bne.n	8008c1a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008bf0:	78fa      	ldrb	r2, [r7, #3]
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	011b      	lsls	r3, r3, #4
 8008bf8:	1a9b      	subs	r3, r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	3318      	adds	r3, #24
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d109      	bne.n	8008c1a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	011b      	lsls	r3, r3, #4
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	440b      	add	r3, r1
 8008c14:	3319      	adds	r3, #25
 8008c16:	2201      	movs	r2, #1
 8008c18:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	4611      	mov	r1, r2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f008 fb95 	bl	8011352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c34:	461a      	mov	r2, r3
 8008c36:	2310      	movs	r3, #16
 8008c38:	6093      	str	r3, [r2, #8]
 8008c3a:	e2a7      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	78fa      	ldrb	r2, [r7, #3]
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f007 fde6 	bl	8010816 <USB_ReadChInterrupts>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c50:	2b80      	cmp	r3, #128	@ 0x80
 8008c52:	f040 8083 	bne.w	8008d5c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	799b      	ldrb	r3, [r3, #6]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d111      	bne.n	8008c82 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	1a9b      	subs	r3, r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	440b      	add	r3, r1
 8008c6c:	334d      	adds	r3, #77	@ 0x4d
 8008c6e:	2207      	movs	r2, #7
 8008c70:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	4611      	mov	r1, r2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f008 fb69 	bl	8011352 <USB_HC_Halt>
 8008c80:	e062      	b.n	8008d48 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8008c82:	78fa      	ldrb	r2, [r7, #3]
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	4613      	mov	r3, r2
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	440b      	add	r3, r1
 8008c90:	3344      	adds	r3, #68	@ 0x44
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	1c59      	adds	r1, r3, #1
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4403      	add	r3, r0
 8008ca2:	3344      	adds	r3, #68	@ 0x44
 8008ca4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008ca6:	78fa      	ldrb	r2, [r7, #3]
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	4613      	mov	r3, r2
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	1a9b      	subs	r3, r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	3344      	adds	r3, #68	@ 0x44
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d922      	bls.n	8008d02 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	011b      	lsls	r3, r3, #4
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	3344      	adds	r3, #68	@ 0x44
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	334c      	adds	r3, #76	@ 0x4c
 8008ce0:	2204      	movs	r2, #4
 8008ce2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	334c      	adds	r3, #76	@ 0x4c
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f010 fafe 	bl	80192fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8008d00:	e022      	b.n	8008d48 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	334c      	adds	r3, #76	@ 0x4c
 8008d12:	2202      	movs	r2, #2
 8008d14:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d2c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d34:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d42:	461a      	mov	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d54:	461a      	mov	r2, r3
 8008d56:	2380      	movs	r3, #128	@ 0x80
 8008d58:	6093      	str	r3, [r2, #8]
 8008d5a:	e217      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	78fa      	ldrb	r2, [r7, #3]
 8008d62:	4611      	mov	r1, r2
 8008d64:	4618      	mov	r0, r3
 8008d66:	f007 fd56 	bl	8010816 <USB_ReadChInterrupts>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d74:	d11b      	bne.n	8008dae <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008d76:	78fa      	ldrb	r2, [r7, #3]
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	1a9b      	subs	r3, r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	334d      	adds	r3, #77	@ 0x4d
 8008d86:	2209      	movs	r2, #9
 8008d88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f008 fadd 	bl	8011352 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008da4:	461a      	mov	r2, r3
 8008da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008daa:	6093      	str	r3, [r2, #8]
 8008dac:	e1ee      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	78fa      	ldrb	r2, [r7, #3]
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f007 fd2d 	bl	8010816 <USB_ReadChInterrupts>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	f040 81df 	bne.w	8009186 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	334d      	adds	r3, #77	@ 0x4d
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	f040 8093 	bne.w	8008f18 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4613      	mov	r3, r2
 8008df8:	011b      	lsls	r3, r3, #4
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	334d      	adds	r3, #77	@ 0x4d
 8008e02:	2202      	movs	r2, #2
 8008e04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	334c      	adds	r3, #76	@ 0x4c
 8008e16:	2201      	movs	r2, #1
 8008e18:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008e1a:	78fa      	ldrb	r2, [r7, #3]
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	440b      	add	r3, r1
 8008e28:	3326      	adds	r3, #38	@ 0x26
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d00b      	beq.n	8008e48 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	4613      	mov	r3, r2
 8008e36:	011b      	lsls	r3, r3, #4
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	440b      	add	r3, r1
 8008e3e:	3326      	adds	r3, #38	@ 0x26
 8008e40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	f040 8190 	bne.w	8009168 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	799b      	ldrb	r3, [r3, #6]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d115      	bne.n	8008e7c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	4613      	mov	r3, r2
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	333d      	adds	r3, #61	@ 0x3d
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	f083 0301 	eor.w	r3, r3, #1
 8008e68:	b2d8      	uxtb	r0, r3
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	011b      	lsls	r3, r3, #4
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	440b      	add	r3, r1
 8008e76:	333d      	adds	r3, #61	@ 0x3d
 8008e78:	4602      	mov	r2, r0
 8008e7a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	799b      	ldrb	r3, [r3, #6]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	f040 8171 	bne.w	8009168 <HCD_HC_OUT_IRQHandler+0x954>
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	1a9b      	subs	r3, r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	440b      	add	r3, r1
 8008e94:	3334      	adds	r3, #52	@ 0x34
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 8165 	beq.w	8009168 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	3334      	adds	r3, #52	@ 0x34
 8008eae:	6819      	ldr	r1, [r3, #0]
 8008eb0:	78fa      	ldrb	r2, [r7, #3]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4403      	add	r3, r0
 8008ebe:	3328      	adds	r3, #40	@ 0x28
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	440b      	add	r3, r1
 8008ec4:	1e59      	subs	r1, r3, #1
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4403      	add	r3, r0
 8008ed4:	3328      	adds	r3, #40	@ 0x28
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008edc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 813f 	beq.w	8009168 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	333d      	adds	r3, #61	@ 0x3d
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	f083 0301 	eor.w	r3, r3, #1
 8008f02:	b2d8      	uxtb	r0, r3
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	440b      	add	r3, r1
 8008f10:	333d      	adds	r3, #61	@ 0x3d
 8008f12:	4602      	mov	r2, r0
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	e127      	b.n	8009168 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	440b      	add	r3, r1
 8008f26:	334d      	adds	r3, #77	@ 0x4d
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d120      	bne.n	8008f70 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	4613      	mov	r3, r2
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	440b      	add	r3, r1
 8008f3c:	334d      	adds	r3, #77	@ 0x4d
 8008f3e:	2202      	movs	r2, #2
 8008f40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	1a9b      	subs	r3, r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	440b      	add	r3, r1
 8008f50:	331b      	adds	r3, #27
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	f040 8107 	bne.w	8009168 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	334c      	adds	r3, #76	@ 0x4c
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	701a      	strb	r2, [r3, #0]
 8008f6e:	e0fb      	b.n	8009168 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	4613      	mov	r3, r2
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	334d      	adds	r3, #77	@ 0x4d
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d13a      	bne.n	8008ffc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	334d      	adds	r3, #77	@ 0x4d
 8008f96:	2202      	movs	r2, #2
 8008f98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	1a9b      	subs	r3, r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	334c      	adds	r3, #76	@ 0x4c
 8008faa:	2202      	movs	r2, #2
 8008fac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	1a9b      	subs	r3, r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	331b      	adds	r3, #27
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	f040 80d1 	bne.w	8009168 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008fc6:	78fa      	ldrb	r2, [r7, #3]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	1a9b      	subs	r3, r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	331b      	adds	r3, #27
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	0151      	lsls	r1, r2, #5
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	440a      	add	r2, r1
 8008ff0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ff8:	6053      	str	r3, [r2, #4]
 8008ffa:	e0b5      	b.n	8009168 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	4613      	mov	r3, r2
 8009002:	011b      	lsls	r3, r3, #4
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	334d      	adds	r3, #77	@ 0x4d
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b05      	cmp	r3, #5
 8009010:	d114      	bne.n	800903c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009012:	78fa      	ldrb	r2, [r7, #3]
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	4613      	mov	r3, r2
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	440b      	add	r3, r1
 8009020:	334d      	adds	r3, #77	@ 0x4d
 8009022:	2202      	movs	r2, #2
 8009024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	1a9b      	subs	r3, r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	334c      	adds	r3, #76	@ 0x4c
 8009036:	2202      	movs	r2, #2
 8009038:	701a      	strb	r2, [r3, #0]
 800903a:	e095      	b.n	8009168 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800903c:	78fa      	ldrb	r2, [r7, #3]
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	4613      	mov	r3, r2
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	1a9b      	subs	r3, r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	440b      	add	r3, r1
 800904a:	334d      	adds	r3, #77	@ 0x4d
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b06      	cmp	r3, #6
 8009050:	d114      	bne.n	800907c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009052:	78fa      	ldrb	r2, [r7, #3]
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	1a9b      	subs	r3, r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	334d      	adds	r3, #77	@ 0x4d
 8009062:	2202      	movs	r2, #2
 8009064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009066:	78fa      	ldrb	r2, [r7, #3]
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	440b      	add	r3, r1
 8009074:	334c      	adds	r3, #76	@ 0x4c
 8009076:	2205      	movs	r2, #5
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	e075      	b.n	8009168 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800907c:	78fa      	ldrb	r2, [r7, #3]
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	4613      	mov	r3, r2
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	440b      	add	r3, r1
 800908a:	334d      	adds	r3, #77	@ 0x4d
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b07      	cmp	r3, #7
 8009090:	d00a      	beq.n	80090a8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009092:	78fa      	ldrb	r2, [r7, #3]
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	1a9b      	subs	r3, r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	440b      	add	r3, r1
 80090a0:	334d      	adds	r3, #77	@ 0x4d
 80090a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80090a4:	2b09      	cmp	r3, #9
 80090a6:	d170      	bne.n	800918a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80090a8:	78fa      	ldrb	r2, [r7, #3]
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4613      	mov	r3, r2
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	334d      	adds	r3, #77	@ 0x4d
 80090b8:	2202      	movs	r2, #2
 80090ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	4613      	mov	r3, r2
 80090c2:	011b      	lsls	r3, r3, #4
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	3344      	adds	r3, #68	@ 0x44
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	1c59      	adds	r1, r3, #1
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4613      	mov	r3, r2
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	1a9b      	subs	r3, r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4403      	add	r3, r0
 80090dc:	3344      	adds	r3, #68	@ 0x44
 80090de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090e0:	78fa      	ldrb	r2, [r7, #3]
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	4613      	mov	r3, r2
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	1a9b      	subs	r3, r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	440b      	add	r3, r1
 80090ee:	3344      	adds	r3, #68	@ 0x44
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d914      	bls.n	8009120 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80090f6:	78fa      	ldrb	r2, [r7, #3]
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	4613      	mov	r3, r2
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	440b      	add	r3, r1
 8009104:	3344      	adds	r3, #68	@ 0x44
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800910a:	78fa      	ldrb	r2, [r7, #3]
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	4613      	mov	r3, r2
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	440b      	add	r3, r1
 8009118:	334c      	adds	r3, #76	@ 0x4c
 800911a:	2204      	movs	r2, #4
 800911c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800911e:	e022      	b.n	8009166 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	4613      	mov	r3, r2
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	334c      	adds	r3, #76	@ 0x4c
 8009130:	2202      	movs	r2, #2
 8009132:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	4413      	add	r3, r2
 800913c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800914a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009152:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	4413      	add	r3, r2
 800915c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009160:	461a      	mov	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009166:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	4613      	mov	r3, r2
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	440b      	add	r3, r1
 8009176:	334c      	adds	r3, #76	@ 0x4c
 8009178:	781a      	ldrb	r2, [r3, #0]
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f010 f8bc 	bl	80192fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8009184:	e002      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009186:	bf00      	nop
 8009188:	e000      	b.n	800918c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800918a:	bf00      	nop
  }
}
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b08a      	sub	sp, #40	@ 0x28
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	0c5b      	lsrs	r3, r3, #17
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	091b      	lsrs	r3, r3, #4
 80091c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091c6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d004      	beq.n	80091d8 <HCD_RXQLVL_IRQHandler+0x46>
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2b05      	cmp	r3, #5
 80091d2:	f000 80b6 	beq.w	8009342 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80091d6:	e0b7      	b.n	8009348 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 80b3 	beq.w	8009346 <HCD_RXQLVL_IRQHandler+0x1b4>
 80091e0:	6879      	ldr	r1, [r7, #4]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	4613      	mov	r3, r2
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	1a9b      	subs	r3, r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	332c      	adds	r3, #44	@ 0x2c
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 80a7 	beq.w	8009346 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	4613      	mov	r3, r2
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	1a9b      	subs	r3, r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	440b      	add	r3, r1
 8009206:	3338      	adds	r3, #56	@ 0x38
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	18d1      	adds	r1, r2, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	4613      	mov	r3, r2
 8009214:	011b      	lsls	r3, r3, #4
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4403      	add	r3, r0
 800921c:	3334      	adds	r3, #52	@ 0x34
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4299      	cmp	r1, r3
 8009222:	f200 8083 	bhi.w	800932c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4613      	mov	r3, r2
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	332c      	adds	r3, #44	@ 0x2c
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	b292      	uxth	r2, r2
 8009240:	4619      	mov	r1, r3
 8009242:	f007 fa7d 	bl	8010740 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	4613      	mov	r3, r2
 800924c:	011b      	lsls	r3, r3, #4
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	332c      	adds	r3, #44	@ 0x2c
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	18d1      	adds	r1, r2, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	4613      	mov	r3, r2
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	1a9b      	subs	r3, r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4403      	add	r3, r0
 800926a:	332c      	adds	r3, #44	@ 0x2c
 800926c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	4613      	mov	r3, r2
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	1a9b      	subs	r3, r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	3338      	adds	r3, #56	@ 0x38
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	18d1      	adds	r1, r2, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	4613      	mov	r3, r2
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	1a9b      	subs	r3, r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4403      	add	r3, r0
 8009292:	3338      	adds	r3, #56	@ 0x38
 8009294:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	6a3b      	ldr	r3, [r7, #32]
 800929c:	4413      	add	r3, r2
 800929e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	0cdb      	lsrs	r3, r3, #19
 80092a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092aa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	4613      	mov	r3, r2
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	1a9b      	subs	r3, r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	3328      	adds	r3, #40	@ 0x28
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d13f      	bne.n	8009346 <HCD_RXQLVL_IRQHandler+0x1b4>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d03c      	beq.n	8009346 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80092e2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092ea:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092f8:	461a      	mov	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	4613      	mov	r3, r2
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	1a9b      	subs	r3, r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	333c      	adds	r3, #60	@ 0x3c
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f083 0301 	eor.w	r3, r3, #1
 8009314:	b2d8      	uxtb	r0, r3
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	69ba      	ldr	r2, [r7, #24]
 800931a:	4613      	mov	r3, r2
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	1a9b      	subs	r3, r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	333c      	adds	r3, #60	@ 0x3c
 8009326:	4602      	mov	r2, r0
 8009328:	701a      	strb	r2, [r3, #0]
      break;
 800932a:	e00c      	b.n	8009346 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	4613      	mov	r3, r2
 8009332:	011b      	lsls	r3, r3, #4
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	440b      	add	r3, r1
 800933a:	334c      	adds	r3, #76	@ 0x4c
 800933c:	2204      	movs	r2, #4
 800933e:	701a      	strb	r2, [r3, #0]
      break;
 8009340:	e001      	b.n	8009346 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009342:	bf00      	nop
 8009344:	e000      	b.n	8009348 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009346:	bf00      	nop
  }
}
 8009348:	bf00      	nop
 800934a:	3728      	adds	r7, #40	@ 0x28
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800937c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0302 	and.w	r3, r3, #2
 8009384:	2b02      	cmp	r3, #2
 8009386:	d10b      	bne.n	80093a0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b01      	cmp	r3, #1
 8009390:	d102      	bne.n	8009398 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f00f ff96 	bl	80192c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f043 0302 	orr.w	r3, r3, #2
 800939e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	2b08      	cmp	r3, #8
 80093a8:	d132      	bne.n	8009410 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f043 0308 	orr.w	r3, r3, #8
 80093b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d126      	bne.n	800940a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7a5b      	ldrb	r3, [r3, #9]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d113      	bne.n	80093ec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80093ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093ce:	d106      	bne.n	80093de <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2102      	movs	r1, #2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f007 fb3c 	bl	8010a54 <USB_InitFSLSPClkSel>
 80093dc:	e011      	b.n	8009402 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2101      	movs	r1, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	f007 fb35 	bl	8010a54 <USB_InitFSLSPClkSel>
 80093ea:	e00a      	b.n	8009402 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	79db      	ldrb	r3, [r3, #7]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d106      	bne.n	8009402 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093fa:	461a      	mov	r2, r3
 80093fc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009400:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f00f ff8c 	bl	8019320 <HAL_HCD_PortEnabled_Callback>
 8009408:	e002      	b.n	8009410 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f00f ff96 	bl	801933c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b20      	cmp	r3, #32
 8009418:	d103      	bne.n	8009422 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f043 0320 	orr.w	r3, r3, #32
 8009420:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009428:	461a      	mov	r2, r3
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6013      	str	r3, [r2, #0]
}
 800942e:	bf00      	nop
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e08b      	b.n	8009562 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d106      	bne.n	8009464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7fa f9ee 	bl	8003840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2224      	movs	r2, #36	@ 0x24
 8009468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0201 	bic.w	r2, r2, #1
 800947a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d107      	bne.n	80094b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	e006      	b.n	80094c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80094be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d108      	bne.n	80094da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094d6:	605a      	str	r2, [r3, #4]
 80094d8:	e007      	b.n	80094ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80094e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6859      	ldr	r1, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	4b1d      	ldr	r3, [pc, #116]	@ (800956c <HAL_I2C_Init+0x134>)
 80094f6:	430b      	orrs	r3, r1
 80094f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691a      	ldr	r2, [r3, #16]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	69d9      	ldr	r1, [r3, #28]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1a      	ldr	r2, [r3, #32]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2220      	movs	r2, #32
 800954e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	02008000 	.word	0x02008000

08009570 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b20      	cmp	r3, #32
 8009584:	d138      	bne.n	80095f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800958c:	2b01      	cmp	r3, #1
 800958e:	d101      	bne.n	8009594 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009590:	2302      	movs	r3, #2
 8009592:	e032      	b.n	80095fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2224      	movs	r2, #36	@ 0x24
 80095a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0201 	bic.w	r2, r2, #1
 80095b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6819      	ldr	r1, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0201 	orr.w	r2, r2, #1
 80095e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e000      	b.n	80095fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80095f8:	2302      	movs	r3, #2
  }
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b20      	cmp	r3, #32
 800961a:	d139      	bne.n	8009690 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009622:	2b01      	cmp	r3, #1
 8009624:	d101      	bne.n	800962a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009626:	2302      	movs	r3, #2
 8009628:	e033      	b.n	8009692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2224      	movs	r2, #36	@ 0x24
 8009636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f022 0201 	bic.w	r2, r2, #1
 8009648:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009658:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0201 	orr.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2220      	movs	r2, #32
 8009680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	e000      	b.n	8009692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009690:	2302      	movs	r3, #2
  }
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e08f      	b.n	80097d0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7fa f963 	bl	8003990 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	699a      	ldr	r2, [r3, #24]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80096e0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6999      	ldr	r1, [r3, #24]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80096f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	041b      	lsls	r3, r3, #16
 800970c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6999      	ldr	r1, [r3, #24]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	430a      	orrs	r2, r1
 800971a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	041b      	lsls	r3, r3, #16
 8009722:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a19      	ldr	r1, [r3, #32]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	430a      	orrs	r2, r1
 8009730:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009736:	041b      	lsls	r3, r3, #16
 8009738:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	430a      	orrs	r2, r1
 8009746:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974c:	041b      	lsls	r3, r3, #16
 800974e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	430a      	orrs	r2, r1
 800975c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009764:	021b      	lsls	r3, r3, #8
 8009766:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800976e:	041b      	lsls	r3, r3, #16
 8009770:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0206 	orr.w	r2, r2, #6
 80097ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f042 0201 	orr.w	r2, r2, #1
 80097bc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d023      	beq.n	8009842 <HAL_LTDC_IRQHandler+0x6a>
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01e      	beq.n	8009842 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0204 	bic.w	r2, r2, #4
 8009812:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2204      	movs	r2, #4
 800981a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009822:	f043 0201 	orr.w	r2, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2204      	movs	r2, #4
 8009830:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f86f 	bl	8009920 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f003 0302 	and.w	r3, r3, #2
 8009848:	2b00      	cmp	r3, #0
 800984a:	d023      	beq.n	8009894 <HAL_LTDC_IRQHandler+0xbc>
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d01e      	beq.n	8009894 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0202 	bic.w	r2, r2, #2
 8009864:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2202      	movs	r2, #2
 800986c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009874:	f043 0202 	orr.w	r2, r3, #2
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2204      	movs	r2, #4
 8009882:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f846 	bl	8009920 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d01b      	beq.n	80098d6 <HAL_LTDC_IRQHandler+0xfe>
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d016      	beq.n	80098d6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0201 	bic.w	r2, r2, #1
 80098b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2201      	movs	r2, #1
 80098be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f82f 	bl	8009934 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f003 0308 	and.w	r3, r3, #8
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01b      	beq.n	8009918 <HAL_LTDC_IRQHandler+0x140>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d016      	beq.n	8009918 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f022 0208 	bic.w	r2, r2, #8
 80098f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2208      	movs	r2, #8
 8009900:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f818 	bl	8009948 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009918:	bf00      	nop
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800995c:	b5b0      	push	{r4, r5, r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <HAL_LTDC_ConfigLayer+0x1a>
 8009972:	2302      	movs	r3, #2
 8009974:	e02c      	b.n	80099d0 <HAL_LTDC_ConfigLayer+0x74>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2202      	movs	r2, #2
 8009982:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2134      	movs	r1, #52	@ 0x34
 800998c:	fb01 f303 	mul.w	r3, r1, r3
 8009990:	4413      	add	r3, r2
 8009992:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	4614      	mov	r4, r2
 800999a:	461d      	mov	r5, r3
 800999c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800999e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	68b9      	ldr	r1, [r7, #8]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f811 	bl	80099d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2201      	movs	r2, #1
 80099bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bdb0      	pop	{r4, r5, r7, pc}

080099d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80099d8:	b480      	push	{r7}
 80099da:	b089      	sub	sp, #36	@ 0x24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	0c1b      	lsrs	r3, r3, #16
 80099f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099f4:	4413      	add	r3, r2
 80099f6:	041b      	lsls	r3, r3, #16
 80099f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	01db      	lsls	r3, r3, #7
 8009a04:	4413      	add	r3, r2
 8009a06:	3384      	adds	r3, #132	@ 0x84
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	6812      	ldr	r2, [r2, #0]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	01d2      	lsls	r2, r2, #7
 8009a14:	440a      	add	r2, r1
 8009a16:	3284      	adds	r2, #132	@ 0x84
 8009a18:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009a1c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	0c1b      	lsrs	r3, r3, #16
 8009a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a2e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a30:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	01db      	lsls	r3, r3, #7
 8009a3c:	440b      	add	r3, r1
 8009a3e:	3384      	adds	r3, #132	@ 0x84
 8009a40:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009a46:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a56:	4413      	add	r3, r2
 8009a58:	041b      	lsls	r3, r3, #16
 8009a5a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	461a      	mov	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	01db      	lsls	r3, r3, #7
 8009a66:	4413      	add	r3, r2
 8009a68:	3384      	adds	r3, #132	@ 0x84
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	6812      	ldr	r2, [r2, #0]
 8009a70:	4611      	mov	r1, r2
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	01d2      	lsls	r2, r2, #7
 8009a76:	440a      	add	r2, r1
 8009a78:	3284      	adds	r2, #132	@ 0x84
 8009a7a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009a7e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a8e:	4413      	add	r3, r2
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4619      	mov	r1, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	01db      	lsls	r3, r3, #7
 8009a9c:	440b      	add	r3, r1
 8009a9e:	3384      	adds	r3, #132	@ 0x84
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	461a      	mov	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	01db      	lsls	r3, r3, #7
 8009ab2:	4413      	add	r3, r2
 8009ab4:	3384      	adds	r3, #132	@ 0x84
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	6812      	ldr	r2, [r2, #0]
 8009abc:	4611      	mov	r1, r2
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	01d2      	lsls	r2, r2, #7
 8009ac2:	440a      	add	r2, r1
 8009ac4:	3284      	adds	r2, #132	@ 0x84
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	01db      	lsls	r3, r3, #7
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3384      	adds	r3, #132	@ 0x84
 8009ada:	461a      	mov	r2, r3
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009ae8:	021b      	lsls	r3, r3, #8
 8009aea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	061b      	lsls	r3, r3, #24
 8009afc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b04:	461a      	mov	r2, r3
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4619      	mov	r1, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	01db      	lsls	r3, r3, #7
 8009b18:	440b      	add	r3, r1
 8009b1a:	3384      	adds	r3, #132	@ 0x84
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	01db      	lsls	r3, r3, #7
 8009b2e:	4413      	add	r3, r2
 8009b30:	3384      	adds	r3, #132	@ 0x84
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	6812      	ldr	r2, [r2, #0]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	01d2      	lsls	r2, r2, #7
 8009b3e:	440a      	add	r2, r1
 8009b40:	3284      	adds	r2, #132	@ 0x84
 8009b42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009b46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	01db      	lsls	r3, r3, #7
 8009b52:	4413      	add	r3, r2
 8009b54:	3384      	adds	r3, #132	@ 0x84
 8009b56:	461a      	mov	r2, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	01db      	lsls	r3, r3, #7
 8009b68:	4413      	add	r3, r2
 8009b6a:	3384      	adds	r3, #132	@ 0x84
 8009b6c:	69da      	ldr	r2, [r3, #28]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4619      	mov	r1, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	01db      	lsls	r3, r3, #7
 8009b78:	440b      	add	r3, r1
 8009b7a:	3384      	adds	r3, #132	@ 0x84
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4b4f      	ldr	r3, [pc, #316]	@ (8009cbc <LTDC_SetConfig+0x2e4>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	69da      	ldr	r2, [r3, #28]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	68f9      	ldr	r1, [r7, #12]
 8009b8e:	6809      	ldr	r1, [r1, #0]
 8009b90:	4608      	mov	r0, r1
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	01c9      	lsls	r1, r1, #7
 8009b96:	4401      	add	r1, r0
 8009b98:	3184      	adds	r1, #132	@ 0x84
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	01db      	lsls	r3, r3, #7
 8009ba8:	4413      	add	r3, r2
 8009baa:	3384      	adds	r3, #132	@ 0x84
 8009bac:	461a      	mov	r2, r3
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e01b      	b.n	8009bfa <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d102      	bne.n	8009bd0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	61fb      	str	r3, [r7, #28]
 8009bce:	e014      	b.n	8009bfa <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d00b      	beq.n	8009bf0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d007      	beq.n	8009bf0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d003      	beq.n	8009bf0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009bec:	2b07      	cmp	r3, #7
 8009bee:	d102      	bne.n	8009bf6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	61fb      	str	r3, [r7, #28]
 8009bf4:	e001      	b.n	8009bfa <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	01db      	lsls	r3, r3, #7
 8009c04:	4413      	add	r3, r2
 8009c06:	3384      	adds	r3, #132	@ 0x84
 8009c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	4611      	mov	r1, r2
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	01d2      	lsls	r2, r2, #7
 8009c14:	440a      	add	r2, r1
 8009c16:	3284      	adds	r2, #132	@ 0x84
 8009c18:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	fb02 f303 	mul.w	r3, r2, r3
 8009c28:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	6859      	ldr	r1, [r3, #4]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	1acb      	subs	r3, r1, r3
 8009c34:	69f9      	ldr	r1, [r7, #28]
 8009c36:	fb01 f303 	mul.w	r3, r1, r3
 8009c3a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009c3c:	68f9      	ldr	r1, [r7, #12]
 8009c3e:	6809      	ldr	r1, [r1, #0]
 8009c40:	4608      	mov	r0, r1
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	01c9      	lsls	r1, r1, #7
 8009c46:	4401      	add	r1, r0
 8009c48:	3184      	adds	r1, #132	@ 0x84
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	01db      	lsls	r3, r3, #7
 8009c58:	4413      	add	r3, r2
 8009c5a:	3384      	adds	r3, #132	@ 0x84
 8009c5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4619      	mov	r1, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	01db      	lsls	r3, r3, #7
 8009c68:	440b      	add	r3, r1
 8009c6a:	3384      	adds	r3, #132	@ 0x84
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4b14      	ldr	r3, [pc, #80]	@ (8009cc0 <LTDC_SetConfig+0x2e8>)
 8009c70:	4013      	ands	r3, r2
 8009c72:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	01db      	lsls	r3, r3, #7
 8009c7e:	4413      	add	r3, r2
 8009c80:	3384      	adds	r3, #132	@ 0x84
 8009c82:	461a      	mov	r2, r3
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	01db      	lsls	r3, r3, #7
 8009c94:	4413      	add	r3, r2
 8009c96:	3384      	adds	r3, #132	@ 0x84
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	01d2      	lsls	r2, r2, #7
 8009ca4:	440a      	add	r2, r1
 8009ca6:	3284      	adds	r2, #132	@ 0x84
 8009ca8:	f043 0301 	orr.w	r3, r3, #1
 8009cac:	6013      	str	r3, [r2, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3724      	adds	r7, #36	@ 0x24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	fffff8f8 	.word	0xfffff8f8
 8009cc0:	fffff800 	.word	0xfffff800

08009cc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cc8:	4b05      	ldr	r3, [pc, #20]	@ (8009ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a04      	ldr	r2, [pc, #16]	@ (8009ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cd2:	6013      	str	r3, [r2, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	40007000 	.word	0x40007000

08009ce4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009cee:	4b23      	ldr	r3, [pc, #140]	@ (8009d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf2:	4a22      	ldr	r2, [pc, #136]	@ (8009d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8009cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8009cfa:	4b20      	ldr	r3, [pc, #128]	@ (8009d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009d06:	4b1e      	ldr	r3, [pc, #120]	@ (8009d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8009d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d12:	f7fb f9d3 	bl	80050bc <HAL_GetTick>
 8009d16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009d18:	e009      	b.n	8009d2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009d1a:	f7fb f9cf 	bl	80050bc <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d28:	d901      	bls.n	8009d2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e022      	b.n	8009d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009d2e:	4b14      	ldr	r3, [pc, #80]	@ (8009d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d3a:	d1ee      	bne.n	8009d1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009d3c:	4b10      	ldr	r3, [pc, #64]	@ (8009d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a0f      	ldr	r2, [pc, #60]	@ (8009d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d48:	f7fb f9b8 	bl	80050bc <HAL_GetTick>
 8009d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009d4e:	e009      	b.n	8009d64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009d50:	f7fb f9b4 	bl	80050bc <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d5e:	d901      	bls.n	8009d64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e007      	b.n	8009d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009d64:	4b06      	ldr	r3, [pc, #24]	@ (8009d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d70:	d1ee      	bne.n	8009d50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	40023800 	.word	0x40023800
 8009d80:	40007000 	.word	0x40007000

08009d84 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009d8c:	f7fb f996 	bl	80050bc <HAL_GetTick>
 8009d90:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e067      	b.n	8009e6c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10b      	bne.n	8009dc0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7f9 feb5 	bl	8003b20 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009db6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f85e 	bl	8009e7c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	021a      	lsls	r2, r3, #8
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	2120      	movs	r1, #32
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f856 	bl	8009e98 <QSPI_WaitFlagStateUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009df0:	7afb      	ldrb	r3, [r7, #11]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d135      	bne.n	8009e62 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8009e74 <HAL_QSPI_Init+0xf0>)
 8009dfe:	4013      	ands	r3, r2
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6852      	ldr	r2, [r2, #4]
 8009e04:	0611      	lsls	r1, r2, #24
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	68d2      	ldr	r2, [r2, #12]
 8009e0a:	4311      	orrs	r1, r2
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	69d2      	ldr	r2, [r2, #28]
 8009e10:	4311      	orrs	r1, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	6a12      	ldr	r2, [r2, #32]
 8009e16:	4311      	orrs	r1, r2
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6812      	ldr	r2, [r2, #0]
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	4b14      	ldr	r3, [pc, #80]	@ (8009e78 <HAL_QSPI_Init+0xf4>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	6912      	ldr	r2, [r2, #16]
 8009e2e:	0411      	lsls	r1, r2, #16
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	6952      	ldr	r2, [r2, #20]
 8009e34:	4311      	orrs	r1, r2
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	6992      	ldr	r2, [r2, #24]
 8009e3a:	4311      	orrs	r1, r2
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	6812      	ldr	r2, [r2, #0]
 8009e40:	430b      	orrs	r3, r1
 8009e42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f042 0201 	orr.w	r2, r2, #1
 8009e52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	00ffff2f 	.word	0x00ffff2f
 8009e78:	ffe0f8fe 	.word	0xffe0f8fe

08009e7c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	603b      	str	r3, [r7, #0]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009ea8:	e01a      	b.n	8009ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb0:	d016      	beq.n	8009ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eb2:	f7fb f903 	bl	80050bc <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	69ba      	ldr	r2, [r7, #24]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d302      	bcc.n	8009ec8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10b      	bne.n	8009ee0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2204      	movs	r2, #4
 8009ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed4:	f043 0201 	orr.w	r2, r3, #1
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e00e      	b.n	8009efe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4013      	ands	r3, r2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bf14      	ite	ne
 8009eee:	2301      	movne	r3, #1
 8009ef0:	2300      	moveq	r3, #0
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d1d6      	bne.n	8009eaa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009f10:	2300      	movs	r3, #0
 8009f12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e291      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 8087 	beq.w	800a03a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f2c:	4b96      	ldr	r3, [pc, #600]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 030c 	and.w	r3, r3, #12
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d00c      	beq.n	8009f52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f38:	4b93      	ldr	r3, [pc, #588]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f003 030c 	and.w	r3, r3, #12
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d112      	bne.n	8009f6a <HAL_RCC_OscConfig+0x62>
 8009f44:	4b90      	ldr	r3, [pc, #576]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f50:	d10b      	bne.n	8009f6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f52:	4b8d      	ldr	r3, [pc, #564]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d06c      	beq.n	800a038 <HAL_RCC_OscConfig+0x130>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d168      	bne.n	800a038 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e26b      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f72:	d106      	bne.n	8009f82 <HAL_RCC_OscConfig+0x7a>
 8009f74:	4b84      	ldr	r3, [pc, #528]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a83      	ldr	r2, [pc, #524]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	e02e      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd8>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10c      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x9c>
 8009f8a:	4b7f      	ldr	r3, [pc, #508]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a7e      	ldr	r2, [pc, #504]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	4b7c      	ldr	r3, [pc, #496]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a7b      	ldr	r2, [pc, #492]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	e01d      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd8>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fac:	d10c      	bne.n	8009fc8 <HAL_RCC_OscConfig+0xc0>
 8009fae:	4b76      	ldr	r3, [pc, #472]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a75      	ldr	r2, [pc, #468]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	4b73      	ldr	r3, [pc, #460]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a72      	ldr	r2, [pc, #456]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	e00b      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd8>
 8009fc8:	4b6f      	ldr	r3, [pc, #444]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a6e      	ldr	r2, [pc, #440]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	4b6c      	ldr	r3, [pc, #432]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a6b      	ldr	r2, [pc, #428]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 8009fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d013      	beq.n	800a010 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe8:	f7fb f868 	bl	80050bc <HAL_GetTick>
 8009fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ff0:	f7fb f864 	bl	80050bc <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b64      	cmp	r3, #100	@ 0x64
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e21f      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a002:	4b61      	ldr	r3, [pc, #388]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0f0      	beq.n	8009ff0 <HAL_RCC_OscConfig+0xe8>
 800a00e:	e014      	b.n	800a03a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7fb f854 	bl	80050bc <HAL_GetTick>
 800a014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a018:	f7fb f850 	bl	80050bc <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b64      	cmp	r3, #100	@ 0x64
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e20b      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a02a:	4b57      	ldr	r3, [pc, #348]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f0      	bne.n	800a018 <HAL_RCC_OscConfig+0x110>
 800a036:	e000      	b.n	800a03a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d069      	beq.n	800a11a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a046:	4b50      	ldr	r3, [pc, #320]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f003 030c 	and.w	r3, r3, #12
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00b      	beq.n	800a06a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a052:	4b4d      	ldr	r3, [pc, #308]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 030c 	and.w	r3, r3, #12
 800a05a:	2b08      	cmp	r3, #8
 800a05c:	d11c      	bne.n	800a098 <HAL_RCC_OscConfig+0x190>
 800a05e:	4b4a      	ldr	r3, [pc, #296]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d116      	bne.n	800a098 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a06a:	4b47      	ldr	r3, [pc, #284]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d005      	beq.n	800a082 <HAL_RCC_OscConfig+0x17a>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d001      	beq.n	800a082 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e1df      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a082:	4b41      	ldr	r3, [pc, #260]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	493d      	ldr	r1, [pc, #244]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a092:	4313      	orrs	r3, r2
 800a094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a096:	e040      	b.n	800a11a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d023      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0a0:	4b39      	ldr	r3, [pc, #228]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a38      	ldr	r2, [pc, #224]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a0a6:	f043 0301 	orr.w	r3, r3, #1
 800a0aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ac:	f7fb f806 	bl	80050bc <HAL_GetTick>
 800a0b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0b2:	e008      	b.n	800a0c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0b4:	f7fb f802 	bl	80050bc <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d901      	bls.n	800a0c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e1bd      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0c6:	4b30      	ldr	r3, [pc, #192]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0f0      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0d2:	4b2d      	ldr	r3, [pc, #180]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	4929      	ldr	r1, [pc, #164]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	600b      	str	r3, [r1, #0]
 800a0e6:	e018      	b.n	800a11a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0e8:	4b27      	ldr	r3, [pc, #156]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a26      	ldr	r2, [pc, #152]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a0ee:	f023 0301 	bic.w	r3, r3, #1
 800a0f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f4:	f7fa ffe2 	bl	80050bc <HAL_GetTick>
 800a0f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0fa:	e008      	b.n	800a10e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0fc:	f7fa ffde 	bl	80050bc <HAL_GetTick>
 800a100:	4602      	mov	r2, r0
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	2b02      	cmp	r3, #2
 800a108:	d901      	bls.n	800a10e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e199      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a10e:	4b1e      	ldr	r3, [pc, #120]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 0302 	and.w	r3, r3, #2
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1f0      	bne.n	800a0fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0308 	and.w	r3, r3, #8
 800a122:	2b00      	cmp	r3, #0
 800a124:	d038      	beq.n	800a198 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d019      	beq.n	800a162 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a12e:	4b16      	ldr	r3, [pc, #88]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a132:	4a15      	ldr	r2, [pc, #84]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a134:	f043 0301 	orr.w	r3, r3, #1
 800a138:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a13a:	f7fa ffbf 	bl	80050bc <HAL_GetTick>
 800a13e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a140:	e008      	b.n	800a154 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a142:	f7fa ffbb 	bl	80050bc <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d901      	bls.n	800a154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e176      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a154:	4b0c      	ldr	r3, [pc, #48]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0f0      	beq.n	800a142 <HAL_RCC_OscConfig+0x23a>
 800a160:	e01a      	b.n	800a198 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a162:	4b09      	ldr	r3, [pc, #36]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a166:	4a08      	ldr	r2, [pc, #32]	@ (800a188 <HAL_RCC_OscConfig+0x280>)
 800a168:	f023 0301 	bic.w	r3, r3, #1
 800a16c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a16e:	f7fa ffa5 	bl	80050bc <HAL_GetTick>
 800a172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a174:	e00a      	b.n	800a18c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a176:	f7fa ffa1 	bl	80050bc <HAL_GetTick>
 800a17a:	4602      	mov	r2, r0
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	2b02      	cmp	r3, #2
 800a182:	d903      	bls.n	800a18c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	e15c      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
 800a188:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a18c:	4b91      	ldr	r3, [pc, #580]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a18e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1ee      	bne.n	800a176 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80a4 	beq.w	800a2ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1a6:	4b8b      	ldr	r3, [pc, #556]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10d      	bne.n	800a1ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1b2:	4b88      	ldr	r3, [pc, #544]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b6:	4a87      	ldr	r2, [pc, #540]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a1b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1bc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a1be:	4b85      	ldr	r3, [pc, #532]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1c6:	60bb      	str	r3, [r7, #8]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1ce:	4b82      	ldr	r3, [pc, #520]	@ (800a3d8 <HAL_RCC_OscConfig+0x4d0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d118      	bne.n	800a20c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a1da:	4b7f      	ldr	r3, [pc, #508]	@ (800a3d8 <HAL_RCC_OscConfig+0x4d0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a7e      	ldr	r2, [pc, #504]	@ (800a3d8 <HAL_RCC_OscConfig+0x4d0>)
 800a1e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1e6:	f7fa ff69 	bl	80050bc <HAL_GetTick>
 800a1ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1ec:	e008      	b.n	800a200 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1ee:	f7fa ff65 	bl	80050bc <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b64      	cmp	r3, #100	@ 0x64
 800a1fa:	d901      	bls.n	800a200 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e120      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a200:	4b75      	ldr	r3, [pc, #468]	@ (800a3d8 <HAL_RCC_OscConfig+0x4d0>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0f0      	beq.n	800a1ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d106      	bne.n	800a222 <HAL_RCC_OscConfig+0x31a>
 800a214:	4b6f      	ldr	r3, [pc, #444]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a218:	4a6e      	ldr	r2, [pc, #440]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a21a:	f043 0301 	orr.w	r3, r3, #1
 800a21e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a220:	e02d      	b.n	800a27e <HAL_RCC_OscConfig+0x376>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10c      	bne.n	800a244 <HAL_RCC_OscConfig+0x33c>
 800a22a:	4b6a      	ldr	r3, [pc, #424]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a22e:	4a69      	ldr	r2, [pc, #420]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a230:	f023 0301 	bic.w	r3, r3, #1
 800a234:	6713      	str	r3, [r2, #112]	@ 0x70
 800a236:	4b67      	ldr	r3, [pc, #412]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a23a:	4a66      	ldr	r2, [pc, #408]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a23c:	f023 0304 	bic.w	r3, r3, #4
 800a240:	6713      	str	r3, [r2, #112]	@ 0x70
 800a242:	e01c      	b.n	800a27e <HAL_RCC_OscConfig+0x376>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	2b05      	cmp	r3, #5
 800a24a:	d10c      	bne.n	800a266 <HAL_RCC_OscConfig+0x35e>
 800a24c:	4b61      	ldr	r3, [pc, #388]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a24e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a250:	4a60      	ldr	r2, [pc, #384]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a252:	f043 0304 	orr.w	r3, r3, #4
 800a256:	6713      	str	r3, [r2, #112]	@ 0x70
 800a258:	4b5e      	ldr	r3, [pc, #376]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a25c:	4a5d      	ldr	r2, [pc, #372]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a25e:	f043 0301 	orr.w	r3, r3, #1
 800a262:	6713      	str	r3, [r2, #112]	@ 0x70
 800a264:	e00b      	b.n	800a27e <HAL_RCC_OscConfig+0x376>
 800a266:	4b5b      	ldr	r3, [pc, #364]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a26a:	4a5a      	ldr	r2, [pc, #360]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	6713      	str	r3, [r2, #112]	@ 0x70
 800a272:	4b58      	ldr	r3, [pc, #352]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a276:	4a57      	ldr	r2, [pc, #348]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a278:	f023 0304 	bic.w	r3, r3, #4
 800a27c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d015      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a286:	f7fa ff19 	bl	80050bc <HAL_GetTick>
 800a28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a28c:	e00a      	b.n	800a2a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a28e:	f7fa ff15 	bl	80050bc <HAL_GetTick>
 800a292:	4602      	mov	r2, r0
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d901      	bls.n	800a2a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e0ce      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2a4:	4b4b      	ldr	r3, [pc, #300]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a2a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0ee      	beq.n	800a28e <HAL_RCC_OscConfig+0x386>
 800a2b0:	e014      	b.n	800a2dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2b2:	f7fa ff03 	bl	80050bc <HAL_GetTick>
 800a2b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2b8:	e00a      	b.n	800a2d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2ba:	f7fa feff 	bl	80050bc <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d901      	bls.n	800a2d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e0b8      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2d0:	4b40      	ldr	r3, [pc, #256]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a2d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1ee      	bne.n	800a2ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d105      	bne.n	800a2ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2e2:	4b3c      	ldr	r3, [pc, #240]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e6:	4a3b      	ldr	r2, [pc, #236]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a2e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 80a4 	beq.w	800a440 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2f8:	4b36      	ldr	r3, [pc, #216]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f003 030c 	and.w	r3, r3, #12
 800a300:	2b08      	cmp	r3, #8
 800a302:	d06b      	beq.n	800a3dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d149      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a30c:	4b31      	ldr	r3, [pc, #196]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a30      	ldr	r2, [pc, #192]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a318:	f7fa fed0 	bl	80050bc <HAL_GetTick>
 800a31c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a31e:	e008      	b.n	800a332 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a320:	f7fa fecc 	bl	80050bc <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d901      	bls.n	800a332 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e087      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a332:	4b28      	ldr	r3, [pc, #160]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1f0      	bne.n	800a320 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69da      	ldr	r2, [r3, #28]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	431a      	orrs	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34c:	019b      	lsls	r3, r3, #6
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a354:	085b      	lsrs	r3, r3, #1
 800a356:	3b01      	subs	r3, #1
 800a358:	041b      	lsls	r3, r3, #16
 800a35a:	431a      	orrs	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a360:	061b      	lsls	r3, r3, #24
 800a362:	4313      	orrs	r3, r2
 800a364:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a366:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a36a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a36c:	4b19      	ldr	r3, [pc, #100]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a18      	ldr	r2, [pc, #96]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a378:	f7fa fea0 	bl	80050bc <HAL_GetTick>
 800a37c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a37e:	e008      	b.n	800a392 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a380:	f7fa fe9c 	bl	80050bc <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d901      	bls.n	800a392 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e057      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a392:	4b10      	ldr	r3, [pc, #64]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0f0      	beq.n	800a380 <HAL_RCC_OscConfig+0x478>
 800a39e:	e04f      	b.n	800a440 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a0b      	ldr	r2, [pc, #44]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a3a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ac:	f7fa fe86 	bl	80050bc <HAL_GetTick>
 800a3b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3b2:	e008      	b.n	800a3c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3b4:	f7fa fe82 	bl	80050bc <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d901      	bls.n	800a3c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e03d      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3c6:	4b03      	ldr	r3, [pc, #12]	@ (800a3d4 <HAL_RCC_OscConfig+0x4cc>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1f0      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x4ac>
 800a3d2:	e035      	b.n	800a440 <HAL_RCC_OscConfig+0x538>
 800a3d4:	40023800 	.word	0x40023800
 800a3d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a3dc:	4b1b      	ldr	r3, [pc, #108]	@ (800a44c <HAL_RCC_OscConfig+0x544>)
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d028      	beq.n	800a43c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d121      	bne.n	800a43c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a402:	429a      	cmp	r2, r3
 800a404:	d11a      	bne.n	800a43c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a40c:	4013      	ands	r3, r2
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a412:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a414:	4293      	cmp	r3, r2
 800a416:	d111      	bne.n	800a43c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a422:	085b      	lsrs	r3, r3, #1
 800a424:	3b01      	subs	r3, #1
 800a426:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a428:	429a      	cmp	r2, r3
 800a42a:	d107      	bne.n	800a43c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a436:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a438:	429a      	cmp	r2, r3
 800a43a:	d001      	beq.n	800a440 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	40023800 	.word	0x40023800

0800a450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e0d0      	b.n	800a60a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a468:	4b6a      	ldr	r3, [pc, #424]	@ (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 030f 	and.w	r3, r3, #15
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	429a      	cmp	r2, r3
 800a474:	d910      	bls.n	800a498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a476:	4b67      	ldr	r3, [pc, #412]	@ (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f023 020f 	bic.w	r2, r3, #15
 800a47e:	4965      	ldr	r1, [pc, #404]	@ (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	4313      	orrs	r3, r2
 800a484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a486:	4b63      	ldr	r3, [pc, #396]	@ (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 030f 	and.w	r3, r3, #15
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d001      	beq.n	800a498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e0b8      	b.n	800a60a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d020      	beq.n	800a4e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d005      	beq.n	800a4bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4b0:	4b59      	ldr	r3, [pc, #356]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	4a58      	ldr	r2, [pc, #352]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a4b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a4ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 0308 	and.w	r3, r3, #8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4c8:	4b53      	ldr	r3, [pc, #332]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	4a52      	ldr	r2, [pc, #328]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a4d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4d4:	4b50      	ldr	r3, [pc, #320]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	494d      	ldr	r1, [pc, #308]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d040      	beq.n	800a574 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d107      	bne.n	800a50a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4fa:	4b47      	ldr	r3, [pc, #284]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d115      	bne.n	800a532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	e07f      	b.n	800a60a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d107      	bne.n	800a522 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a512:	4b41      	ldr	r3, [pc, #260]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d109      	bne.n	800a532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e073      	b.n	800a60a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a522:	4b3d      	ldr	r3, [pc, #244]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e06b      	b.n	800a60a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a532:	4b39      	ldr	r3, [pc, #228]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f023 0203 	bic.w	r2, r3, #3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	4936      	ldr	r1, [pc, #216]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a540:	4313      	orrs	r3, r2
 800a542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a544:	f7fa fdba 	bl	80050bc <HAL_GetTick>
 800a548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a54a:	e00a      	b.n	800a562 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a54c:	f7fa fdb6 	bl	80050bc <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d901      	bls.n	800a562 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e053      	b.n	800a60a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a562:	4b2d      	ldr	r3, [pc, #180]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 020c 	and.w	r2, r3, #12
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	429a      	cmp	r2, r3
 800a572:	d1eb      	bne.n	800a54c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a574:	4b27      	ldr	r3, [pc, #156]	@ (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 030f 	and.w	r3, r3, #15
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d210      	bcs.n	800a5a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a582:	4b24      	ldr	r3, [pc, #144]	@ (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f023 020f 	bic.w	r2, r3, #15
 800a58a:	4922      	ldr	r1, [pc, #136]	@ (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	4313      	orrs	r3, r2
 800a590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a592:	4b20      	ldr	r3, [pc, #128]	@ (800a614 <HAL_RCC_ClockConfig+0x1c4>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d001      	beq.n	800a5a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e032      	b.n	800a60a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0304 	and.w	r3, r3, #4
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d008      	beq.n	800a5c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5b0:	4b19      	ldr	r3, [pc, #100]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	4916      	ldr	r1, [pc, #88]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0308 	and.w	r3, r3, #8
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d009      	beq.n	800a5e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a5ce:	4b12      	ldr	r3, [pc, #72]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	490e      	ldr	r1, [pc, #56]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a5e2:	f000 f821 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a618 <HAL_RCC_ClockConfig+0x1c8>)
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	091b      	lsrs	r3, r3, #4
 800a5ee:	f003 030f 	and.w	r3, r3, #15
 800a5f2:	490a      	ldr	r1, [pc, #40]	@ (800a61c <HAL_RCC_ClockConfig+0x1cc>)
 800a5f4:	5ccb      	ldrb	r3, [r1, r3]
 800a5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fa:	4a09      	ldr	r2, [pc, #36]	@ (800a620 <HAL_RCC_ClockConfig+0x1d0>)
 800a5fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a5fe:	4b09      	ldr	r3, [pc, #36]	@ (800a624 <HAL_RCC_ClockConfig+0x1d4>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	f7f9 ff9a 	bl	800453c <HAL_InitTick>

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	40023c00 	.word	0x40023c00
 800a618:	40023800 	.word	0x40023800
 800a61c:	0801c188 	.word	0x0801c188
 800a620:	20000000 	.word	0x20000000
 800a624:	2000004c 	.word	0x2000004c

0800a628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a62c:	b090      	sub	sp, #64	@ 0x40
 800a62e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34
 800a634:	2300      	movs	r3, #0
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a638:	2300      	movs	r3, #0
 800a63a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a640:	4b59      	ldr	r3, [pc, #356]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	f003 030c 	and.w	r3, r3, #12
 800a648:	2b08      	cmp	r3, #8
 800a64a:	d00d      	beq.n	800a668 <HAL_RCC_GetSysClockFreq+0x40>
 800a64c:	2b08      	cmp	r3, #8
 800a64e:	f200 80a1 	bhi.w	800a794 <HAL_RCC_GetSysClockFreq+0x16c>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <HAL_RCC_GetSysClockFreq+0x34>
 800a656:	2b04      	cmp	r3, #4
 800a658:	d003      	beq.n	800a662 <HAL_RCC_GetSysClockFreq+0x3a>
 800a65a:	e09b      	b.n	800a794 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a65c:	4b53      	ldr	r3, [pc, #332]	@ (800a7ac <HAL_RCC_GetSysClockFreq+0x184>)
 800a65e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a660:	e09b      	b.n	800a79a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a662:	4b53      	ldr	r3, [pc, #332]	@ (800a7b0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a664:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a666:	e098      	b.n	800a79a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a668:	4b4f      	ldr	r3, [pc, #316]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a670:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a672:	4b4d      	ldr	r3, [pc, #308]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d028      	beq.n	800a6d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a67e:	4b4a      	ldr	r3, [pc, #296]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	099b      	lsrs	r3, r3, #6
 800a684:	2200      	movs	r2, #0
 800a686:	623b      	str	r3, [r7, #32]
 800a688:	627a      	str	r2, [r7, #36]	@ 0x24
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a690:	2100      	movs	r1, #0
 800a692:	4b47      	ldr	r3, [pc, #284]	@ (800a7b0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a694:	fb03 f201 	mul.w	r2, r3, r1
 800a698:	2300      	movs	r3, #0
 800a69a:	fb00 f303 	mul.w	r3, r0, r3
 800a69e:	4413      	add	r3, r2
 800a6a0:	4a43      	ldr	r2, [pc, #268]	@ (800a7b0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a6a2:	fba0 1202 	umull	r1, r2, r0, r2
 800a6a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6a8:	460a      	mov	r2, r1
 800a6aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a6ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6ae:	4413      	add	r3, r2
 800a6b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	61bb      	str	r3, [r7, #24]
 800a6b8:	61fa      	str	r2, [r7, #28]
 800a6ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a6c2:	f7f5 fe0d 	bl	80002e0 <__aeabi_uldivmod>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ce:	e053      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6d0:	4b35      	ldr	r3, [pc, #212]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	099b      	lsrs	r3, r3, #6
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	617a      	str	r2, [r7, #20]
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a6e2:	f04f 0b00 	mov.w	fp, #0
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	465b      	mov	r3, fp
 800a6ea:	f04f 0000 	mov.w	r0, #0
 800a6ee:	f04f 0100 	mov.w	r1, #0
 800a6f2:	0159      	lsls	r1, r3, #5
 800a6f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a6f8:	0150      	lsls	r0, r2, #5
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	ebb2 080a 	subs.w	r8, r2, sl
 800a702:	eb63 090b 	sbc.w	r9, r3, fp
 800a706:	f04f 0200 	mov.w	r2, #0
 800a70a:	f04f 0300 	mov.w	r3, #0
 800a70e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a71a:	ebb2 0408 	subs.w	r4, r2, r8
 800a71e:	eb63 0509 	sbc.w	r5, r3, r9
 800a722:	f04f 0200 	mov.w	r2, #0
 800a726:	f04f 0300 	mov.w	r3, #0
 800a72a:	00eb      	lsls	r3, r5, #3
 800a72c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a730:	00e2      	lsls	r2, r4, #3
 800a732:	4614      	mov	r4, r2
 800a734:	461d      	mov	r5, r3
 800a736:	eb14 030a 	adds.w	r3, r4, sl
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	eb45 030b 	adc.w	r3, r5, fp
 800a740:	607b      	str	r3, [r7, #4]
 800a742:	f04f 0200 	mov.w	r2, #0
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a74e:	4629      	mov	r1, r5
 800a750:	028b      	lsls	r3, r1, #10
 800a752:	4621      	mov	r1, r4
 800a754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a758:	4621      	mov	r1, r4
 800a75a:	028a      	lsls	r2, r1, #10
 800a75c:	4610      	mov	r0, r2
 800a75e:	4619      	mov	r1, r3
 800a760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a762:	2200      	movs	r2, #0
 800a764:	60bb      	str	r3, [r7, #8]
 800a766:	60fa      	str	r2, [r7, #12]
 800a768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a76c:	f7f5 fdb8 	bl	80002e0 <__aeabi_uldivmod>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4613      	mov	r3, r2
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a778:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	0c1b      	lsrs	r3, r3, #16
 800a77e:	f003 0303 	and.w	r3, r3, #3
 800a782:	3301      	adds	r3, #1
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a788:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a790:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a792:	e002      	b.n	800a79a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a794:	4b05      	ldr	r3, [pc, #20]	@ (800a7ac <HAL_RCC_GetSysClockFreq+0x184>)
 800a796:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3740      	adds	r7, #64	@ 0x40
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7a6:	bf00      	nop
 800a7a8:	40023800 	.word	0x40023800
 800a7ac:	00f42400 	.word	0x00f42400
 800a7b0:	017d7840 	.word	0x017d7840

0800a7b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7b8:	4b03      	ldr	r3, [pc, #12]	@ (800a7c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	20000000 	.word	0x20000000

0800a7cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a7d0:	f7ff fff0 	bl	800a7b4 <HAL_RCC_GetHCLKFreq>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	4b05      	ldr	r3, [pc, #20]	@ (800a7ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	0a9b      	lsrs	r3, r3, #10
 800a7dc:	f003 0307 	and.w	r3, r3, #7
 800a7e0:	4903      	ldr	r1, [pc, #12]	@ (800a7f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7e2:	5ccb      	ldrb	r3, [r1, r3]
 800a7e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	40023800 	.word	0x40023800
 800a7f0:	0801c198 	.word	0x0801c198

0800a7f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a7f8:	f7ff ffdc 	bl	800a7b4 <HAL_RCC_GetHCLKFreq>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	4b05      	ldr	r3, [pc, #20]	@ (800a814 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	0b5b      	lsrs	r3, r3, #13
 800a804:	f003 0307 	and.w	r3, r3, #7
 800a808:	4903      	ldr	r1, [pc, #12]	@ (800a818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a80a:	5ccb      	ldrb	r3, [r1, r3]
 800a80c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a810:	4618      	mov	r0, r3
 800a812:	bd80      	pop	{r7, pc}
 800a814:	40023800 	.word	0x40023800
 800a818:	0801c198 	.word	0x0801c198

0800a81c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	220f      	movs	r2, #15
 800a82a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a82c:	4b12      	ldr	r3, [pc, #72]	@ (800a878 <HAL_RCC_GetClockConfig+0x5c>)
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f003 0203 	and.w	r2, r3, #3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a838:	4b0f      	ldr	r3, [pc, #60]	@ (800a878 <HAL_RCC_GetClockConfig+0x5c>)
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a844:	4b0c      	ldr	r3, [pc, #48]	@ (800a878 <HAL_RCC_GetClockConfig+0x5c>)
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a850:	4b09      	ldr	r3, [pc, #36]	@ (800a878 <HAL_RCC_GetClockConfig+0x5c>)
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	08db      	lsrs	r3, r3, #3
 800a856:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a85e:	4b07      	ldr	r3, [pc, #28]	@ (800a87c <HAL_RCC_GetClockConfig+0x60>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 020f 	and.w	r2, r3, #15
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	601a      	str	r2, [r3, #0]
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	40023800 	.word	0x40023800
 800a87c:	40023c00 	.word	0x40023c00

0800a880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d012      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a8a8:	4b69      	ldr	r3, [pc, #420]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	4a68      	ldr	r2, [pc, #416]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a8b2:	6093      	str	r3, [r2, #8]
 800a8b4:	4b66      	ldr	r3, [pc, #408]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8bc:	4964      	ldr	r1, [pc, #400]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d017      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8da:	4b5d      	ldr	r3, [pc, #372]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8e8:	4959      	ldr	r1, [pc, #356]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8f8:	d101      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a906:	2301      	movs	r3, #1
 800a908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d017      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a916:	4b4e      	ldr	r3, [pc, #312]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a91c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a924:	494a      	ldr	r1, [pc, #296]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a926:	4313      	orrs	r3, r2
 800a928:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a934:	d101      	bne.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a936:	2301      	movs	r3, #1
 800a938:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a942:	2301      	movs	r3, #1
 800a944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a952:	2301      	movs	r3, #1
 800a954:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 808b 	beq.w	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a964:	4b3a      	ldr	r3, [pc, #232]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a968:	4a39      	ldr	r2, [pc, #228]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a96a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a96e:	6413      	str	r3, [r2, #64]	@ 0x40
 800a970:	4b37      	ldr	r3, [pc, #220]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a978:	60bb      	str	r3, [r7, #8]
 800a97a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a97c:	4b35      	ldr	r3, [pc, #212]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a34      	ldr	r2, [pc, #208]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a988:	f7fa fb98 	bl	80050bc <HAL_GetTick>
 800a98c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a990:	f7fa fb94 	bl	80050bc <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b64      	cmp	r3, #100	@ 0x64
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e357      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a9a2:	4b2c      	ldr	r3, [pc, #176]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0f0      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a9ae:	4b28      	ldr	r3, [pc, #160]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d035      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d02e      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9cc:	4b20      	ldr	r3, [pc, #128]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a9d6:	4b1e      	ldr	r3, [pc, #120]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9da:	4a1d      	ldr	r2, [pc, #116]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9e6:	4a1a      	ldr	r2, [pc, #104]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a9ee:	4a18      	ldr	r2, [pc, #96]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a9f4:	4b16      	ldr	r3, [pc, #88]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d114      	bne.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa00:	f7fa fb5c 	bl	80050bc <HAL_GetTick>
 800aa04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa06:	e00a      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa08:	f7fa fb58 	bl	80050bc <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e319      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa1e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0ee      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa36:	d111      	bne.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800aa38:	4b05      	ldr	r3, [pc, #20]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800aa44:	4b04      	ldr	r3, [pc, #16]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800aa46:	400b      	ands	r3, r1
 800aa48:	4901      	ldr	r1, [pc, #4]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	608b      	str	r3, [r1, #8]
 800aa4e:	e00b      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800aa50:	40023800 	.word	0x40023800
 800aa54:	40007000 	.word	0x40007000
 800aa58:	0ffffcff 	.word	0x0ffffcff
 800aa5c:	4baa      	ldr	r3, [pc, #680]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	4aa9      	ldr	r2, [pc, #676]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa62:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800aa66:	6093      	str	r3, [r2, #8]
 800aa68:	4ba7      	ldr	r3, [pc, #668]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa74:	49a4      	ldr	r1, [pc, #656]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa76:	4313      	orrs	r3, r2
 800aa78:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0310 	and.w	r3, r3, #16
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d010      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa86:	4ba0      	ldr	r3, [pc, #640]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa8c:	4a9e      	ldr	r2, [pc, #632]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800aa96:	4b9c      	ldr	r3, [pc, #624]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa98:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa0:	4999      	ldr	r1, [pc, #612]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00a      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aab4:	4b94      	ldr	r3, [pc, #592]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aac2:	4991      	ldr	r1, [pc, #580]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aac4:	4313      	orrs	r3, r2
 800aac6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00a      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aad6:	4b8c      	ldr	r3, [pc, #560]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aadc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aae4:	4988      	ldr	r1, [pc, #544]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aae6:	4313      	orrs	r3, r2
 800aae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00a      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aaf8:	4b83      	ldr	r3, [pc, #524]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aafe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab06:	4980      	ldr	r1, [pc, #512]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00a      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab1a:	4b7b      	ldr	r3, [pc, #492]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab28:	4977      	ldr	r1, [pc, #476]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00a      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab3c:	4b72      	ldr	r3, [pc, #456]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab42:	f023 0203 	bic.w	r2, r3, #3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab4a:	496f      	ldr	r1, [pc, #444]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab5e:	4b6a      	ldr	r3, [pc, #424]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab64:	f023 020c 	bic.w	r2, r3, #12
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab6c:	4966      	ldr	r1, [pc, #408]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00a      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab80:	4b61      	ldr	r3, [pc, #388]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab8e:	495e      	ldr	r1, [pc, #376]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aba2:	4b59      	ldr	r3, [pc, #356]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aba8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abb0:	4955      	ldr	r1, [pc, #340]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abb2:	4313      	orrs	r3, r2
 800abb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800abc4:	4b50      	ldr	r3, [pc, #320]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd2:	494d      	ldr	r1, [pc, #308]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abd4:	4313      	orrs	r3, r2
 800abd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800abe6:	4b48      	ldr	r3, [pc, #288]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abf4:	4944      	ldr	r1, [pc, #272]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00a      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ac08:	4b3f      	ldr	r3, [pc, #252]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac16:	493c      	ldr	r1, [pc, #240]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ac2a:	4b37      	ldr	r3, [pc, #220]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac38:	4933      	ldr	r1, [pc, #204]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00a      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac4c:	4b2e      	ldr	r3, [pc, #184]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac5a:	492b      	ldr	r1, [pc, #172]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d011      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ac6e:	4b26      	ldr	r3, [pc, #152]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac7c:	4922      	ldr	r1, [pc, #136]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac8c:	d101      	bne.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acae:	4b16      	ldr	r3, [pc, #88]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acbc:	4912      	ldr	r1, [pc, #72]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800acd0:	4b0d      	ldr	r3, [pc, #52]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acd6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ace0:	4909      	ldr	r1, [pc, #36]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d006      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 80d9 	beq.w	800aeae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800acfc:	4b02      	ldr	r3, [pc, #8]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a01      	ldr	r2, [pc, #4]	@ (800ad08 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad06:	e001      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800ad08:	40023800 	.word	0x40023800
 800ad0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad0e:	f7fa f9d5 	bl	80050bc <HAL_GetTick>
 800ad12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad14:	e008      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ad16:	f7fa f9d1 	bl	80050bc <HAL_GetTick>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	2b64      	cmp	r3, #100	@ 0x64
 800ad22:	d901      	bls.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e194      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad28:	4b6c      	ldr	r3, [pc, #432]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1f0      	bne.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d021      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d11d      	bne.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ad48:	4b64      	ldr	r3, [pc, #400]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad4e:	0c1b      	lsrs	r3, r3, #16
 800ad50:	f003 0303 	and.w	r3, r3, #3
 800ad54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad56:	4b61      	ldr	r3, [pc, #388]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad5c:	0e1b      	lsrs	r3, r3, #24
 800ad5e:	f003 030f 	and.w	r3, r3, #15
 800ad62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	019a      	lsls	r2, r3, #6
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	041b      	lsls	r3, r3, #16
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	061b      	lsls	r3, r3, #24
 800ad74:	431a      	orrs	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	071b      	lsls	r3, r3, #28
 800ad7c:	4957      	ldr	r1, [pc, #348]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad98:	d00a      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d02e      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800adae:	d129      	bne.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800adb0:	4b4a      	ldr	r3, [pc, #296]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adb6:	0c1b      	lsrs	r3, r3, #16
 800adb8:	f003 0303 	and.w	r3, r3, #3
 800adbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800adbe:	4b47      	ldr	r3, [pc, #284]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adc4:	0f1b      	lsrs	r3, r3, #28
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	019a      	lsls	r2, r3, #6
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	041b      	lsls	r3, r3, #16
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	061b      	lsls	r3, r3, #24
 800adde:	431a      	orrs	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	071b      	lsls	r3, r3, #28
 800ade4:	493d      	ldr	r1, [pc, #244]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800adec:	4b3b      	ldr	r3, [pc, #236]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adf2:	f023 021f 	bic.w	r2, r3, #31
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adfa:	3b01      	subs	r3, #1
 800adfc:	4937      	ldr	r1, [pc, #220]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adfe:	4313      	orrs	r3, r2
 800ae00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01d      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ae10:	4b32      	ldr	r3, [pc, #200]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae16:	0e1b      	lsrs	r3, r3, #24
 800ae18:	f003 030f 	and.w	r3, r3, #15
 800ae1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ae1e:	4b2f      	ldr	r3, [pc, #188]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae24:	0f1b      	lsrs	r3, r3, #28
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	019a      	lsls	r2, r3, #6
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	041b      	lsls	r3, r3, #16
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	061b      	lsls	r3, r3, #24
 800ae3e:	431a      	orrs	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	071b      	lsls	r3, r3, #28
 800ae44:	4925      	ldr	r1, [pc, #148]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d011      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	019a      	lsls	r2, r3, #6
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	041b      	lsls	r3, r3, #16
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	061b      	lsls	r3, r3, #24
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	071b      	lsls	r3, r3, #28
 800ae74:	4919      	ldr	r1, [pc, #100]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ae7c:	4b17      	ldr	r3, [pc, #92]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a16      	ldr	r2, [pc, #88]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae88:	f7fa f918 	bl	80050bc <HAL_GetTick>
 800ae8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ae8e:	e008      	b.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ae90:	f7fa f914 	bl	80050bc <HAL_GetTick>
 800ae94:	4602      	mov	r2, r0
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	2b64      	cmp	r3, #100	@ 0x64
 800ae9c:	d901      	bls.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	e0d7      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aea2:	4b0e      	ldr	r3, [pc, #56]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0f0      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	f040 80cd 	bne.w	800b050 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800aeb6:	4b09      	ldr	r3, [pc, #36]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a08      	ldr	r2, [pc, #32]	@ (800aedc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aec2:	f7fa f8fb 	bl	80050bc <HAL_GetTick>
 800aec6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aec8:	e00a      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aeca:	f7fa f8f7 	bl	80050bc <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	2b64      	cmp	r3, #100	@ 0x64
 800aed6:	d903      	bls.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e0ba      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800aedc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aee0:	4b5e      	ldr	r3, [pc, #376]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aeec:	d0ed      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d009      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d02e      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d12a      	bne.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800af16:	4b51      	ldr	r3, [pc, #324]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af1c:	0c1b      	lsrs	r3, r3, #16
 800af1e:	f003 0303 	and.w	r3, r3, #3
 800af22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af24:	4b4d      	ldr	r3, [pc, #308]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af2a:	0f1b      	lsrs	r3, r3, #28
 800af2c:	f003 0307 	and.w	r3, r3, #7
 800af30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	019a      	lsls	r2, r3, #6
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	041b      	lsls	r3, r3, #16
 800af3c:	431a      	orrs	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	061b      	lsls	r3, r3, #24
 800af44:	431a      	orrs	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	071b      	lsls	r3, r3, #28
 800af4a:	4944      	ldr	r1, [pc, #272]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af4c:	4313      	orrs	r3, r2
 800af4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800af52:	4b42      	ldr	r3, [pc, #264]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af60:	3b01      	subs	r3, #1
 800af62:	021b      	lsls	r3, r3, #8
 800af64:	493d      	ldr	r1, [pc, #244]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af66:	4313      	orrs	r3, r2
 800af68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d022      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af80:	d11d      	bne.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af82:	4b36      	ldr	r3, [pc, #216]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af88:	0e1b      	lsrs	r3, r3, #24
 800af8a:	f003 030f 	and.w	r3, r3, #15
 800af8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af90:	4b32      	ldr	r3, [pc, #200]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af96:	0f1b      	lsrs	r3, r3, #28
 800af98:	f003 0307 	and.w	r3, r3, #7
 800af9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	019a      	lsls	r2, r3, #6
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	041b      	lsls	r3, r3, #16
 800afaa:	431a      	orrs	r2, r3
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	061b      	lsls	r3, r3, #24
 800afb0:	431a      	orrs	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	071b      	lsls	r3, r3, #28
 800afb6:	4929      	ldr	r1, [pc, #164]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afb8:	4313      	orrs	r3, r2
 800afba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 0308 	and.w	r3, r3, #8
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d028      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800afca:	4b24      	ldr	r3, [pc, #144]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afd0:	0e1b      	lsrs	r3, r3, #24
 800afd2:	f003 030f 	and.w	r3, r3, #15
 800afd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800afd8:	4b20      	ldr	r3, [pc, #128]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afde:	0c1b      	lsrs	r3, r3, #16
 800afe0:	f003 0303 	and.w	r3, r3, #3
 800afe4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	019a      	lsls	r2, r3, #6
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	041b      	lsls	r3, r3, #16
 800aff0:	431a      	orrs	r2, r3
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	061b      	lsls	r3, r3, #24
 800aff6:	431a      	orrs	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	071b      	lsls	r3, r3, #28
 800affe:	4917      	ldr	r1, [pc, #92]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b000:	4313      	orrs	r3, r2
 800b002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b006:	4b15      	ldr	r3, [pc, #84]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b00c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b014:	4911      	ldr	r1, [pc, #68]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b016:	4313      	orrs	r3, r2
 800b018:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b01c:	4b0f      	ldr	r3, [pc, #60]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a0e      	ldr	r2, [pc, #56]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b028:	f7fa f848 	bl	80050bc <HAL_GetTick>
 800b02c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b02e:	e008      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b030:	f7fa f844 	bl	80050bc <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	2b64      	cmp	r3, #100	@ 0x64
 800b03c:	d901      	bls.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	e007      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b042:	4b06      	ldr	r3, [pc, #24]	@ (800b05c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b04a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b04e:	d1ef      	bne.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3720      	adds	r7, #32
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	40023800 	.word	0x40023800

0800b060 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b060:	b480      	push	{r7}
 800b062:	b087      	sub	sp, #28
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b07e:	f040 808d 	bne.w	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b082:	4b93      	ldr	r3, [pc, #588]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b088:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b090:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b098:	d07c      	beq.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0a0:	d87b      	bhi.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0ae:	d039      	beq.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b0b0:	e073      	b.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b0b2:	4b87      	ldr	r3, [pc, #540]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d108      	bne.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b0be:	4b84      	ldr	r3, [pc, #528]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0c6:	4a83      	ldr	r2, [pc, #524]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0cc:	613b      	str	r3, [r7, #16]
 800b0ce:	e007      	b.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b0d0:	4b7f      	ldr	r3, [pc, #508]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0d8:	4a7f      	ldr	r2, [pc, #508]	@ (800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0de:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b0e0:	4b7b      	ldr	r3, [pc, #492]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0e6:	0e1b      	lsrs	r3, r3, #24
 800b0e8:	f003 030f 	and.w	r3, r3, #15
 800b0ec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b0ee:	4b78      	ldr	r3, [pc, #480]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0f4:	099b      	lsrs	r3, r3, #6
 800b0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	fb03 f202 	mul.w	r2, r3, r2
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	fbb2 f3f3 	udiv	r3, r2, r3
 800b106:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b108:	4b71      	ldr	r3, [pc, #452]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b10a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b10e:	0a1b      	lsrs	r3, r3, #8
 800b110:	f003 031f 	and.w	r3, r3, #31
 800b114:	3301      	adds	r3, #1
 800b116:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b120:	617b      	str	r3, [r7, #20]
        break;
 800b122:	e03b      	b.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b124:	4b6a      	ldr	r3, [pc, #424]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d108      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b130:	4b67      	ldr	r3, [pc, #412]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b138:	4a66      	ldr	r2, [pc, #408]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13e:	613b      	str	r3, [r7, #16]
 800b140:	e007      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b142:	4b63      	ldr	r3, [pc, #396]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b14a:	4a63      	ldr	r2, [pc, #396]	@ (800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b14c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b150:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b152:	4b5f      	ldr	r3, [pc, #380]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b158:	0e1b      	lsrs	r3, r3, #24
 800b15a:	f003 030f 	and.w	r3, r3, #15
 800b15e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b160:	4b5b      	ldr	r3, [pc, #364]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b166:	099b      	lsrs	r3, r3, #6
 800b168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	fb03 f202 	mul.w	r2, r3, r2
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	fbb2 f3f3 	udiv	r3, r2, r3
 800b178:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b17a:	4b55      	ldr	r3, [pc, #340]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b180:	f003 031f 	and.w	r3, r3, #31
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b190:	617b      	str	r3, [r7, #20]
        break;
 800b192:	e003      	b.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b194:	4b51      	ldr	r3, [pc, #324]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b196:	617b      	str	r3, [r7, #20]
        break;
 800b198:	e000      	b.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b19a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1a2:	f040 808d 	bne.w	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b1a6:	4b4a      	ldr	r3, [pc, #296]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b1b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1bc:	d07c      	beq.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1c4:	d87b      	bhi.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d004      	beq.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1d2:	d039      	beq.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b1d4:	e073      	b.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b1d6:	4b3e      	ldr	r3, [pc, #248]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d108      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b1e2:	4b3b      	ldr	r3, [pc, #236]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1ea:	4a3a      	ldr	r2, [pc, #232]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f0:	613b      	str	r3, [r7, #16]
 800b1f2:	e007      	b.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b1f4:	4b36      	ldr	r3, [pc, #216]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1fc:	4a36      	ldr	r2, [pc, #216]	@ (800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b202:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b204:	4b32      	ldr	r3, [pc, #200]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b20a:	0e1b      	lsrs	r3, r3, #24
 800b20c:	f003 030f 	and.w	r3, r3, #15
 800b210:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b212:	4b2f      	ldr	r3, [pc, #188]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b218:	099b      	lsrs	r3, r3, #6
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	fb03 f202 	mul.w	r2, r3, r2
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	fbb2 f3f3 	udiv	r3, r2, r3
 800b22a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b22c:	4b28      	ldr	r3, [pc, #160]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b232:	0a1b      	lsrs	r3, r3, #8
 800b234:	f003 031f 	and.w	r3, r3, #31
 800b238:	3301      	adds	r3, #1
 800b23a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	fbb2 f3f3 	udiv	r3, r2, r3
 800b244:	617b      	str	r3, [r7, #20]
        break;
 800b246:	e03b      	b.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b248:	4b21      	ldr	r3, [pc, #132]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d108      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b254:	4b1e      	ldr	r3, [pc, #120]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b25c:	4a1d      	ldr	r2, [pc, #116]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	e007      	b.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b266:	4b1a      	ldr	r3, [pc, #104]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b26e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b270:	fbb2 f3f3 	udiv	r3, r2, r3
 800b274:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b276:	4b16      	ldr	r3, [pc, #88]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b27c:	0e1b      	lsrs	r3, r3, #24
 800b27e:	f003 030f 	and.w	r3, r3, #15
 800b282:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b284:	4b12      	ldr	r3, [pc, #72]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b28a:	099b      	lsrs	r3, r3, #6
 800b28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	fb03 f202 	mul.w	r2, r3, r2
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b29e:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2a4:	f003 031f 	and.w	r3, r3, #31
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b4:	617b      	str	r3, [r7, #20]
        break;
 800b2b6:	e003      	b.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2b8:	4b08      	ldr	r3, [pc, #32]	@ (800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b2ba:	617b      	str	r3, [r7, #20]
        break;
 800b2bc:	e000      	b.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b2be:	bf00      	nop
      }
    }
  }

  return frequency;
 800b2c0:	697b      	ldr	r3, [r7, #20]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	371c      	adds	r7, #28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	40023800 	.word	0x40023800
 800b2d4:	00f42400 	.word	0x00f42400
 800b2d8:	017d7840 	.word	0x017d7840
 800b2dc:	00bb8000 	.word	0x00bb8000

0800b2e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e071      	b.n	800b3d6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7f5b      	ldrb	r3, [r3, #29]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d105      	bne.n	800b308 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7f8 fc9c 	bl	8003c40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	f003 0310 	and.w	r3, r3, #16
 800b318:	2b10      	cmp	r3, #16
 800b31a:	d053      	beq.n	800b3c4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	22ca      	movs	r2, #202	@ 0xca
 800b322:	625a      	str	r2, [r3, #36]	@ 0x24
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2253      	movs	r2, #83	@ 0x53
 800b32a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fb75 	bl	800ba1c <RTC_EnterInitMode>
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d12a      	bne.n	800b392 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6899      	ldr	r1, [r3, #8]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	4b26      	ldr	r3, [pc, #152]	@ (800b3e0 <HAL_RTC_Init+0x100>)
 800b348:	400b      	ands	r3, r1
 800b34a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6899      	ldr	r1, [r3, #8]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685a      	ldr	r2, [r3, #4]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	431a      	orrs	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	431a      	orrs	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	430a      	orrs	r2, r1
 800b368:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	68d2      	ldr	r2, [r2, #12]
 800b372:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6919      	ldr	r1, [r3, #16]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	041a      	lsls	r2, r3, #16
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fb7e 	bl	800ba8a <RTC_ExitInitMode>
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d110      	bne.n	800b3ba <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f022 0208 	bic.w	r2, r2, #8
 800b3a6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	699a      	ldr	r2, [r3, #24]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	430a      	orrs	r2, r1
 800b3b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	22ff      	movs	r2, #255	@ 0xff
 800b3c0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b3c2:	e001      	b.n	800b3c8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d102      	bne.n	800b3d4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	ff8fffbf 	.word	0xff8fffbf

0800b3e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b3e4:	b590      	push	{r4, r7, lr}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	7f1b      	ldrb	r3, [r3, #28]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d101      	bne.n	800b400 <HAL_RTC_SetTime+0x1c>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	e085      	b.n	800b50c <HAL_RTC_SetTime+0x128>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2201      	movs	r2, #1
 800b404:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2202      	movs	r2, #2
 800b40a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d126      	bne.n	800b460 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2200      	movs	r2, #0
 800b424:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f000 fb52 	bl	800bad4 <RTC_ByteToBcd2>
 800b430:	4603      	mov	r3, r0
 800b432:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	785b      	ldrb	r3, [r3, #1]
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 fb4b 	bl	800bad4 <RTC_ByteToBcd2>
 800b43e:	4603      	mov	r3, r0
 800b440:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b442:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	789b      	ldrb	r3, [r3, #2]
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 fb43 	bl	800bad4 <RTC_ByteToBcd2>
 800b44e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b450:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	78db      	ldrb	r3, [r3, #3]
 800b458:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b45a:	4313      	orrs	r3, r2
 800b45c:	617b      	str	r3, [r7, #20]
 800b45e:	e018      	b.n	800b492 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2200      	movs	r2, #0
 800b472:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	785b      	ldrb	r3, [r3, #1]
 800b47e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b480:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b486:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	78db      	ldrb	r3, [r3, #3]
 800b48c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b48e:	4313      	orrs	r3, r2
 800b490:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	22ca      	movs	r2, #202	@ 0xca
 800b498:	625a      	str	r2, [r3, #36]	@ 0x24
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2253      	movs	r2, #83	@ 0x53
 800b4a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f000 faba 	bl	800ba1c <RTC_EnterInitMode>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b4ac:	7cfb      	ldrb	r3, [r7, #19]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d11e      	bne.n	800b4f0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	6979      	ldr	r1, [r7, #20]
 800b4b8:	4b16      	ldr	r3, [pc, #88]	@ (800b514 <HAL_RTC_SetTime+0x130>)
 800b4ba:	400b      	ands	r3, r1
 800b4bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689a      	ldr	r2, [r3, #8]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b4cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6899      	ldr	r1, [r3, #8]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	68da      	ldr	r2, [r3, #12]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f000 facf 	bl	800ba8a <RTC_ExitInitMode>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b4f0:	7cfb      	ldrb	r3, [r7, #19]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d102      	bne.n	800b4fc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	22ff      	movs	r2, #255	@ 0xff
 800b502:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	771a      	strb	r2, [r3, #28]

  return status;
 800b50a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	371c      	adds	r7, #28
 800b510:	46bd      	mov	sp, r7
 800b512:	bd90      	pop	{r4, r7, pc}
 800b514:	007f7f7f 	.word	0x007f7f7f

0800b518 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b524:	2300      	movs	r3, #0
 800b526:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	4b22      	ldr	r3, [pc, #136]	@ (800b5d0 <HAL_RTC_GetTime+0xb8>)
 800b548:	4013      	ands	r3, r2
 800b54a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	0c1b      	lsrs	r3, r3, #16
 800b550:	b2db      	uxtb	r3, r3
 800b552:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b556:	b2da      	uxtb	r2, r3
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	0a1b      	lsrs	r3, r3, #8
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b566:	b2da      	uxtb	r2, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b574:	b2da      	uxtb	r2, r3
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	0d9b      	lsrs	r3, r3, #22
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	b2da      	uxtb	r2, r3
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d11a      	bne.n	800b5c6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fabb 	bl	800bb10 <RTC_Bcd2ToByte>
 800b59a:	4603      	mov	r3, r0
 800b59c:	461a      	mov	r2, r3
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	785b      	ldrb	r3, [r3, #1]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fab2 	bl	800bb10 <RTC_Bcd2ToByte>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	789b      	ldrb	r3, [r3, #2]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 faa9 	bl	800bb10 <RTC_Bcd2ToByte>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	007f7f7f 	.word	0x007f7f7f

0800b5d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b5d4:	b590      	push	{r4, r7, lr}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	7f1b      	ldrb	r3, [r3, #28]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d101      	bne.n	800b5f0 <HAL_RTC_SetDate+0x1c>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	e06f      	b.n	800b6d0 <HAL_RTC_SetDate+0xfc>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10e      	bne.n	800b620 <HAL_RTC_SetDate+0x4c>
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	f003 0310 	and.w	r3, r3, #16
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d008      	beq.n	800b620 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	785b      	ldrb	r3, [r3, #1]
 800b612:	f023 0310 	bic.w	r3, r3, #16
 800b616:	b2db      	uxtb	r3, r3
 800b618:	330a      	adds	r3, #10
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d11c      	bne.n	800b660 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	78db      	ldrb	r3, [r3, #3]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 fa52 	bl	800bad4 <RTC_ByteToBcd2>
 800b630:	4603      	mov	r3, r0
 800b632:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	785b      	ldrb	r3, [r3, #1]
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 fa4b 	bl	800bad4 <RTC_ByteToBcd2>
 800b63e:	4603      	mov	r3, r0
 800b640:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b642:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	789b      	ldrb	r3, [r3, #2]
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 fa43 	bl	800bad4 <RTC_ByteToBcd2>
 800b64e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b650:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b65a:	4313      	orrs	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	e00e      	b.n	800b67e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	78db      	ldrb	r3, [r3, #3]
 800b664:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	785b      	ldrb	r3, [r3, #1]
 800b66a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b66c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b672:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b67a:	4313      	orrs	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	22ca      	movs	r2, #202	@ 0xca
 800b684:	625a      	str	r2, [r3, #36]	@ 0x24
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2253      	movs	r2, #83	@ 0x53
 800b68c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f000 f9c4 	bl	800ba1c <RTC_EnterInitMode>
 800b694:	4603      	mov	r3, r0
 800b696:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b698:	7cfb      	ldrb	r3, [r7, #19]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	6979      	ldr	r1, [r7, #20]
 800b6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d8 <HAL_RTC_SetDate+0x104>)
 800b6a6:	400b      	ands	r3, r1
 800b6a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 f9ed 	bl	800ba8a <RTC_ExitInitMode>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b6b4:	7cfb      	ldrb	r3, [r7, #19]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d102      	bne.n	800b6c0 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	22ff      	movs	r2, #255	@ 0xff
 800b6c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	771a      	strb	r2, [r3, #28]

  return status;
 800b6ce:	7cfb      	ldrb	r3, [r7, #19]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	371c      	adds	r7, #28
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd90      	pop	{r4, r7, pc}
 800b6d8:	00ffff3f 	.word	0x00ffff3f

0800b6dc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b086      	sub	sp, #24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685a      	ldr	r2, [r3, #4]
 800b6f2:	4b21      	ldr	r3, [pc, #132]	@ (800b778 <HAL_RTC_GetDate+0x9c>)
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	0c1b      	lsrs	r3, r3, #16
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	0a1b      	lsrs	r3, r3, #8
 800b706:	b2db      	uxtb	r3, r3
 800b708:	f003 031f 	and.w	r3, r3, #31
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	b2db      	uxtb	r3, r3
 800b716:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	0b5b      	lsrs	r3, r3, #13
 800b724:	b2db      	uxtb	r3, r3
 800b726:	f003 0307 	and.w	r3, r3, #7
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d11a      	bne.n	800b76c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	78db      	ldrb	r3, [r3, #3]
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 f9e8 	bl	800bb10 <RTC_Bcd2ToByte>
 800b740:	4603      	mov	r3, r0
 800b742:	461a      	mov	r2, r3
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	785b      	ldrb	r3, [r3, #1]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 f9df 	bl	800bb10 <RTC_Bcd2ToByte>
 800b752:	4603      	mov	r3, r0
 800b754:	461a      	mov	r2, r3
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	789b      	ldrb	r3, [r3, #2]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 f9d6 	bl	800bb10 <RTC_Bcd2ToByte>
 800b764:	4603      	mov	r3, r0
 800b766:	461a      	mov	r2, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	00ffff3f 	.word	0x00ffff3f

0800b77c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b77c:	b590      	push	{r4, r7, lr}
 800b77e:	b089      	sub	sp, #36	@ 0x24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b788:	2300      	movs	r3, #0
 800b78a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	7f1b      	ldrb	r3, [r3, #28]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d101      	bne.n	800b7a0 <HAL_RTC_SetAlarm+0x24>
 800b79c:	2302      	movs	r3, #2
 800b79e:	e113      	b.n	800b9c8 <HAL_RTC_SetAlarm+0x24c>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d137      	bne.n	800b822 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d102      	bne.n	800b7c6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 f982 	bl	800bad4 <RTC_ByteToBcd2>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	785b      	ldrb	r3, [r3, #1]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 f97b 	bl	800bad4 <RTC_ByteToBcd2>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b7e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	789b      	ldrb	r3, [r3, #2]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f000 f973 	bl	800bad4 <RTC_ByteToBcd2>
 800b7ee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b7f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	78db      	ldrb	r3, [r3, #3]
 800b7f8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b7fa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b804:	4618      	mov	r0, r3
 800b806:	f000 f965 	bl	800bad4 <RTC_ByteToBcd2>
 800b80a:	4603      	mov	r3, r0
 800b80c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b80e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b816:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b81c:	4313      	orrs	r3, r2
 800b81e:	61fb      	str	r3, [r7, #28]
 800b820:	e023      	b.n	800b86a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d102      	bne.n	800b836 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2200      	movs	r2, #0
 800b834:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	785b      	ldrb	r3, [r3, #1]
 800b840:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b842:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b848:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	78db      	ldrb	r3, [r3, #3]
 800b84e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b850:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b858:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b85a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b860:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b866:	4313      	orrs	r3, r2
 800b868:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b872:	4313      	orrs	r3, r2
 800b874:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	22ca      	movs	r2, #202	@ 0xca
 800b87c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2253      	movs	r2, #83	@ 0x53
 800b884:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b88a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b88e:	d148      	bne.n	800b922 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	689a      	ldr	r2, [r3, #8]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b89e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689a      	ldr	r2, [r3, #8]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b8ae:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b8c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b8c2:	f7f9 fbfb 	bl	80050bc <HAL_GetTick>
 800b8c6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b8c8:	e013      	b.n	800b8f2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8ca:	f7f9 fbf7 	bl	80050bc <HAL_GetTick>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8d8:	d90b      	bls.n	800b8f2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	22ff      	movs	r2, #255	@ 0xff
 800b8e0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2203      	movs	r2, #3
 800b8e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e06a      	b.n	800b9c8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d0e4      	beq.n	800b8ca <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689a      	ldr	r2, [r3, #8]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b91e:	609a      	str	r2, [r3, #8]
 800b920:	e047      	b.n	800b9b2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689a      	ldr	r2, [r3, #8]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b930:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	689a      	ldr	r2, [r3, #8]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b940:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b952:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b954:	f7f9 fbb2 	bl	80050bc <HAL_GetTick>
 800b958:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b95a:	e013      	b.n	800b984 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b95c:	f7f9 fbae 	bl	80050bc <HAL_GetTick>
 800b960:	4602      	mov	r2, r0
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b96a:	d90b      	bls.n	800b984 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	22ff      	movs	r2, #255	@ 0xff
 800b972:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2203      	movs	r2, #3
 800b978:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b980:	2303      	movs	r3, #3
 800b982:	e021      	b.n	800b9c8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d0e4      	beq.n	800b95c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	69fa      	ldr	r2, [r7, #28]
 800b998:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	689a      	ldr	r2, [r3, #8]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	22ff      	movs	r2, #255	@ 0xff
 800b9b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3724      	adds	r7, #36	@ 0x24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd90      	pop	{r4, r7, pc}

0800b9d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a0d      	ldr	r2, [pc, #52]	@ (800ba18 <HAL_RTC_WaitForSynchro+0x48>)
 800b9e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b9e4:	f7f9 fb6a 	bl	80050bc <HAL_GetTick>
 800b9e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b9ea:	e009      	b.n	800ba00 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b9ec:	f7f9 fb66 	bl	80050bc <HAL_GetTick>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9fa:	d901      	bls.n	800ba00 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e007      	b.n	800ba10 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	f003 0320 	and.w	r3, r3, #32
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0ee      	beq.n	800b9ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	0001ff5f 	.word	0x0001ff5f

0800ba1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d122      	bne.n	800ba80 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68da      	ldr	r2, [r3, #12]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ba48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba4a:	f7f9 fb37 	bl	80050bc <HAL_GetTick>
 800ba4e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ba50:	e00c      	b.n	800ba6c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba52:	f7f9 fb33 	bl	80050bc <HAL_GetTick>
 800ba56:	4602      	mov	r2, r0
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba60:	d904      	bls.n	800ba6c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2204      	movs	r2, #4
 800ba66:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d102      	bne.n	800ba80 <RTC_EnterInitMode+0x64>
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d1e8      	bne.n	800ba52 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68da      	ldr	r2, [r3, #12]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800baa4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f003 0320 	and.w	r3, r3, #32
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff ff8b 	bl	800b9d0 <HAL_RTC_WaitForSynchro>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d004      	beq.n	800baca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2204      	movs	r2, #4
 800bac4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800baca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bae2:	e005      	b.n	800baf0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3301      	adds	r3, #1
 800bae8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800baea:	79fb      	ldrb	r3, [r7, #7]
 800baec:	3b0a      	subs	r3, #10
 800baee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800baf0:	79fb      	ldrb	r3, [r7, #7]
 800baf2:	2b09      	cmp	r3, #9
 800baf4:	d8f6      	bhi.n	800bae4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	011b      	lsls	r3, r3, #4
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	b2db      	uxtb	r3, r3
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4603      	mov	r3, r0
 800bb18:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800bb1e:	79fb      	ldrb	r3, [r7, #7]
 800bb20:	091b      	lsrs	r3, r3, #4
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	461a      	mov	r2, r3
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	f003 030f 	and.w	r3, r3, #15
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	4413      	add	r3, r2
 800bb3e:	b2db      	uxtb	r3, r3
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	7f1b      	ldrb	r3, [r3, #28]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d101      	bne.n	800bb68 <HAL_RTCEx_SetTimeStamp+0x1c>
 800bb64:	2302      	movs	r3, #2
 800bb66:	e050      	b.n	800bc0a <HAL_RTCEx_SetTimeStamp+0xbe>
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2202      	movs	r2, #2
 800bb72:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f022 0206 	bic.w	r2, r2, #6
 800bb82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	430a      	orrs	r2, r1
 800bb92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689a      	ldr	r2, [r3, #8]
 800bb9a:	4b1f      	ldr	r3, [pc, #124]	@ (800bc18 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	22ca      	movs	r2, #202	@ 0xca
 800bbae:	625a      	str	r2, [r3, #36]	@ 0x24
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2253      	movs	r2, #83	@ 0x53
 800bbb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800bbd0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800bbe2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	689a      	ldr	r2, [r3, #8]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbf2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	22ff      	movs	r2, #255	@ 0xff
 800bbfa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	371c      	adds	r7, #28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	fffff7f7 	.word	0xfffff7f7

0800bc1c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e156      	b.n	800bee8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7f8 fc0a 	bl	8004468 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 f95b 	bl	800bf18 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d00c      	beq.n	800bc84 <HAL_SAI_Init+0x68>
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d80d      	bhi.n	800bc8a <HAL_SAI_Init+0x6e>
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <HAL_SAI_Init+0x5c>
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d003      	beq.n	800bc7e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800bc76:	e008      	b.n	800bc8a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61fb      	str	r3, [r7, #28]
      break;
 800bc7c:	e006      	b.n	800bc8c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bc7e:	2310      	movs	r3, #16
 800bc80:	61fb      	str	r3, [r7, #28]
      break;
 800bc82:	e003      	b.n	800bc8c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bc84:	2320      	movs	r3, #32
 800bc86:	61fb      	str	r3, [r7, #28]
      break;
 800bc88:	e000      	b.n	800bc8c <HAL_SAI_Init+0x70>
      break;
 800bc8a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d81e      	bhi.n	800bcd2 <HAL_SAI_Init+0xb6>
 800bc94:	a201      	add	r2, pc, #4	@ (adr r2, 800bc9c <HAL_SAI_Init+0x80>)
 800bc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9a:	bf00      	nop
 800bc9c:	0800bcad 	.word	0x0800bcad
 800bca0:	0800bcb3 	.word	0x0800bcb3
 800bca4:	0800bcbb 	.word	0x0800bcbb
 800bca8:	0800bcc3 	.word	0x0800bcc3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bcac:	2300      	movs	r3, #0
 800bcae:	617b      	str	r3, [r7, #20]
    }
    break;
 800bcb0:	e010      	b.n	800bcd4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bcb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcb6:	617b      	str	r3, [r7, #20]
    }
    break;
 800bcb8:	e00c      	b.n	800bcd4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bcba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcbe:	617b      	str	r3, [r7, #20]
    }
    break;
 800bcc0:	e008      	b.n	800bcd4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bcc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcc6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	f043 0301 	orr.w	r3, r3, #1
 800bcce:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bcd0:	e000      	b.n	800bcd4 <HAL_SAI_Init+0xb8>
    default:
      break;
 800bcd2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a85      	ldr	r2, [pc, #532]	@ (800bef0 <HAL_SAI_Init+0x2d4>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d004      	beq.n	800bce8 <HAL_SAI_Init+0xcc>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a84      	ldr	r2, [pc, #528]	@ (800bef4 <HAL_SAI_Init+0x2d8>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d103      	bne.n	800bcf0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bce8:	4a83      	ldr	r2, [pc, #524]	@ (800bef8 <HAL_SAI_Init+0x2dc>)
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	e002      	b.n	800bcf6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bcf0:	4a82      	ldr	r2, [pc, #520]	@ (800befc <HAL_SAI_Init+0x2e0>)
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d04c      	beq.n	800bd98 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a7a      	ldr	r2, [pc, #488]	@ (800bef0 <HAL_SAI_Init+0x2d4>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d004      	beq.n	800bd16 <HAL_SAI_Init+0xfa>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a78      	ldr	r2, [pc, #480]	@ (800bef4 <HAL_SAI_Init+0x2d8>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d104      	bne.n	800bd20 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bd16:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bd1a:	f7ff f9a1 	bl	800b060 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd1e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a76      	ldr	r2, [pc, #472]	@ (800bf00 <HAL_SAI_Init+0x2e4>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d004      	beq.n	800bd34 <HAL_SAI_Init+0x118>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a75      	ldr	r2, [pc, #468]	@ (800bf04 <HAL_SAI_Init+0x2e8>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d104      	bne.n	800bd3e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bd34:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bd38:	f7ff f992 	bl	800b060 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd3c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	4613      	mov	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	005b      	lsls	r3, r3, #1
 800bd48:	461a      	mov	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	025b      	lsls	r3, r3, #9
 800bd50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd54:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	4a6b      	ldr	r2, [pc, #428]	@ (800bf08 <HAL_SAI_Init+0x2ec>)
 800bd5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd5e:	08da      	lsrs	r2, r3, #3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bd64:	68f9      	ldr	r1, [r7, #12]
 800bd66:	4b68      	ldr	r3, [pc, #416]	@ (800bf08 <HAL_SAI_Init+0x2ec>)
 800bd68:	fba3 2301 	umull	r2, r3, r3, r1
 800bd6c:	08da      	lsrs	r2, r3, #3
 800bd6e:	4613      	mov	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	1aca      	subs	r2, r1, r3
 800bd78:	2a08      	cmp	r2, #8
 800bd7a:	d904      	bls.n	800bd86 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	1c5a      	adds	r2, r3, #1
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd8a:	2b04      	cmp	r3, #4
 800bd8c:	d104      	bne.n	800bd98 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	085a      	lsrs	r2, r3, #1
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <HAL_SAI_Init+0x18c>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d109      	bne.n	800bdbc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d101      	bne.n	800bdb4 <HAL_SAI_Init+0x198>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	e001      	b.n	800bdb8 <HAL_SAI_Init+0x19c>
 800bdb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdb8:	61bb      	str	r3, [r7, #24]
 800bdba:	e008      	b.n	800bdce <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d102      	bne.n	800bdca <HAL_SAI_Init+0x1ae>
 800bdc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdc8:	e000      	b.n	800bdcc <HAL_SAI_Init+0x1b0>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	6819      	ldr	r1, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	4b4c      	ldr	r3, [pc, #304]	@ (800bf0c <HAL_SAI_Init+0x2f0>)
 800bdda:	400b      	ands	r3, r1
 800bddc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6819      	ldr	r1, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdec:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdf2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800be06:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800be12:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	051b      	lsls	r3, r3, #20
 800be1a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	430a      	orrs	r2, r1
 800be22:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6859      	ldr	r1, [r3, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	4b38      	ldr	r3, [pc, #224]	@ (800bf10 <HAL_SAI_Init+0x2f4>)
 800be30:	400b      	ands	r3, r1
 800be32:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6859      	ldr	r1, [r3, #4]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699a      	ldr	r2, [r3, #24]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be42:	431a      	orrs	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be48:	431a      	orrs	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6899      	ldr	r1, [r3, #8]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	4b2d      	ldr	r3, [pc, #180]	@ (800bf14 <HAL_SAI_Init+0x2f8>)
 800be5e:	400b      	ands	r3, r1
 800be60:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6899      	ldr	r1, [r3, #8]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be6c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be72:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800be78:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800be7e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be84:	3b01      	subs	r3, #1
 800be86:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800be88:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	430a      	orrs	r2, r1
 800be90:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68d9      	ldr	r1, [r3, #12]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800bea0:	400b      	ands	r3, r1
 800bea2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68d9      	ldr	r1, [r3, #12]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800beb2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800beb8:	041b      	lsls	r3, r3, #16
 800beba:	431a      	orrs	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bec0:	3b01      	subs	r3, #1
 800bec2:	021b      	lsls	r3, r3, #8
 800bec4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	430a      	orrs	r2, r1
 800becc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	40015804 	.word	0x40015804
 800bef4:	40015824 	.word	0x40015824
 800bef8:	40015800 	.word	0x40015800
 800befc:	40015c00 	.word	0x40015c00
 800bf00:	40015c04 	.word	0x40015c04
 800bf04:	40015c24 	.word	0x40015c24
 800bf08:	cccccccd 	.word	0xcccccccd
 800bf0c:	ff05c010 	.word	0xff05c010
 800bf10:	ffff1ff0 	.word	0xffff1ff0
 800bf14:	fff88000 	.word	0xfff88000

0800bf18 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800bf20:	4b17      	ldr	r3, [pc, #92]	@ (800bf80 <SAI_Disable+0x68>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a17      	ldr	r2, [pc, #92]	@ (800bf84 <SAI_Disable+0x6c>)
 800bf26:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2a:	0b1b      	lsrs	r3, r3, #12
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bf42:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	1e5a      	subs	r2, r3, #1
 800bf48:	60fa      	str	r2, [r7, #12]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10a      	bne.n	800bf64 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	72fb      	strb	r3, [r7, #11]
      break;
 800bf62:	e006      	b.n	800bf72 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e8      	bne.n	800bf44 <SAI_Disable+0x2c>

  return status;
 800bf72:	7afb      	ldrb	r3, [r7, #11]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	20000000 	.word	0x20000000
 800bf84:	95cbec1b 	.word	0x95cbec1b

0800bf88 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e022      	b.n	800bfe0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d105      	bne.n	800bfb2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7f7 fe75 	bl	8003c9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2203      	movs	r2, #3
 800bfb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f814 	bl	800bfe8 <HAL_SD_InitCard>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e00a      	b.n	800bfe0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bfe8:	b5b0      	push	{r4, r5, r7, lr}
 800bfea:	b08e      	sub	sp, #56	@ 0x38
 800bfec:	af04      	add	r7, sp, #16
 800bfee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bff0:	2300      	movs	r3, #0
 800bff2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800bff4:	2300      	movs	r3, #0
 800bff6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bff8:	2300      	movs	r3, #0
 800bffa:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bffc:	2300      	movs	r3, #0
 800bffe:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c000:	2300      	movs	r3, #0
 800c002:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c004:	2376      	movs	r3, #118	@ 0x76
 800c006:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681d      	ldr	r5, [r3, #0]
 800c00c:	466c      	mov	r4, sp
 800c00e:	f107 0318 	add.w	r3, r7, #24
 800c012:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c01a:	f107 030c 	add.w	r3, r7, #12
 800c01e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c020:	4628      	mov	r0, r5
 800c022:	f003 fd13 	bl	800fa4c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c034:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f003 fd32 	bl	800faa4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c04e:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c050:	2002      	movs	r0, #2
 800c052:	f7f9 f83f 	bl	80050d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fd76 	bl	800cb48 <SD_PowerON>
 800c05c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00b      	beq.n	800c07c <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c072:	431a      	orrs	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e02e      	b.n	800c0da <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fc95 	bl	800c9ac <SD_InitCard>
 800c082:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00b      	beq.n	800c0a2 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c098:	431a      	orrs	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e01b      	b.n	800c0da <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f003 fd8c 	bl	800fbc8 <SDMMC_CmdBlockLength>
 800c0b0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00f      	beq.n	800c0d8 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a09      	ldr	r2, [pc, #36]	@ (800c0e4 <HAL_SD_InitCard+0xfc>)
 800c0be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e000      	b.n	800c0da <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3728      	adds	r7, #40	@ 0x28
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	004005ff 	.word	0x004005ff

0800c0e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b08c      	sub	sp, #48	@ 0x30
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
 800c0f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d107      	bne.n	800c110 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c104:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	e0c3      	b.n	800c298 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c116:	b2db      	uxtb	r3, r3
 800c118:	2b01      	cmp	r3, #1
 800c11a:	f040 80bc 	bne.w	800c296 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	441a      	add	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c12e:	429a      	cmp	r2, r3
 800c130:	d907      	bls.n	800c142 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c136:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e0aa      	b.n	800c298 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2203      	movs	r2, #3
 800c146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2200      	movs	r2, #0
 800c150:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c160:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c166:	4a4e      	ldr	r2, [pc, #312]	@ (800c2a0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c168:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16e:	4a4d      	ldr	r2, [pc, #308]	@ (800c2a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c170:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c176:	2200      	movs	r2, #0
 800c178:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c17e:	2200      	movs	r2, #0
 800c180:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	430a      	orrs	r2, r1
 800c19c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3380      	adds	r3, #128	@ 0x80
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	025b      	lsls	r3, r3, #9
 800c1b0:	089b      	lsrs	r3, r3, #2
 800c1b2:	f7f9 fda5 	bl	8005d00 <HAL_DMA_Start_IT>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d017      	beq.n	800c1ec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800c1ca:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a35      	ldr	r2, [pc, #212]	@ (800c2a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c1d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e055      	b.n	800c298 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0208 	orr.w	r2, r2, #8
 800c1fa:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c200:	2b01      	cmp	r3, #1
 800c202:	d002      	beq.n	800c20a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800c204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c206:	025b      	lsls	r3, r3, #9
 800c208:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c20a:	f04f 33ff 	mov.w	r3, #4294967295
 800c20e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	025b      	lsls	r3, r3, #9
 800c214:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c216:	2390      	movs	r3, #144	@ 0x90
 800c218:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c21a:	2302      	movs	r3, #2
 800c21c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c21e:	2300      	movs	r3, #0
 800c220:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c222:	2301      	movs	r3, #1
 800c224:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f107 0210 	add.w	r2, r7, #16
 800c22e:	4611      	mov	r1, r2
 800c230:	4618      	mov	r0, r3
 800c232:	f003 fc9d 	bl	800fb70 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d90a      	bls.n	800c252 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2282      	movs	r2, #130	@ 0x82
 800c240:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c248:	4618      	mov	r0, r3
 800c24a:	f003 fd01 	bl	800fc50 <SDMMC_CmdReadMultiBlock>
 800c24e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c250:	e009      	b.n	800c266 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2281      	movs	r2, #129	@ 0x81
 800c256:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c25e:	4618      	mov	r0, r3
 800c260:	f003 fcd4 	bl	800fc0c <SDMMC_CmdReadSingleBlock>
 800c264:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d012      	beq.n	800c292 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a0d      	ldr	r2, [pc, #52]	@ (800c2a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c272:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c27a:	431a      	orrs	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e002      	b.n	800c298 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	e000      	b.n	800c298 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800c296:	2302      	movs	r3, #2
  }
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3730      	adds	r7, #48	@ 0x30
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	0800c897 	.word	0x0800c897
 800c2a4:	0800c909 	.word	0x0800c909
 800c2a8:	004005ff 	.word	0x004005ff

0800c2ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b08c      	sub	sp, #48	@ 0x30
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
 800c2b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d107      	bne.n	800c2d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e0c6      	b.n	800c462 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	f040 80bf 	bne.w	800c460 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c2e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	441a      	add	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d907      	bls.n	800c306 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2fa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	e0ad      	b.n	800c462 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2203      	movs	r2, #3
 800c30a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f042 021a 	orr.w	r2, r2, #26
 800c324:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c32a:	4a50      	ldr	r2, [pc, #320]	@ (800c46c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c32c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c332:	4a4f      	ldr	r2, [pc, #316]	@ (800c470 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c334:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c33a:	2200      	movs	r2, #0
 800c33c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c342:	2b01      	cmp	r3, #1
 800c344:	d002      	beq.n	800c34c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c348:	025b      	lsls	r3, r3, #9
 800c34a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d90a      	bls.n	800c368 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	22a0      	movs	r2, #160	@ 0xa0
 800c356:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c35e:	4618      	mov	r0, r3
 800c360:	f003 fcba 	bl	800fcd8 <SDMMC_CmdWriteMultiBlock>
 800c364:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c366:	e009      	b.n	800c37c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2290      	movs	r2, #144	@ 0x90
 800c36c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c374:	4618      	mov	r0, r3
 800c376:	f003 fc8d 	bl	800fc94 <SDMMC_CmdWriteSingleBlock>
 800c37a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d012      	beq.n	800c3a8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a3b      	ldr	r2, [pc, #236]	@ (800c474 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c388:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c390:	431a      	orrs	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e05c      	b.n	800c462 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f042 0208 	orr.w	r2, r2, #8
 800c3b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3bc:	2240      	movs	r2, #64	@ 0x40
 800c3be:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	430a      	orrs	r2, r1
 800c3da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	3380      	adds	r3, #128	@ 0x80
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	025b      	lsls	r3, r3, #9
 800c3ee:	089b      	lsrs	r3, r3, #2
 800c3f0:	f7f9 fc86 	bl	8005d00 <HAL_DMA_Start_IT>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d01a      	beq.n	800c430 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f022 021a 	bic.w	r2, r2, #26
 800c408:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a19      	ldr	r2, [pc, #100]	@ (800c474 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c410:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c416:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	e018      	b.n	800c462 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c430:	f04f 33ff 	mov.w	r3, #4294967295
 800c434:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	025b      	lsls	r3, r3, #9
 800c43a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c43c:	2390      	movs	r3, #144	@ 0x90
 800c43e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c440:	2300      	movs	r3, #0
 800c442:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c444:	2300      	movs	r3, #0
 800c446:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c448:	2301      	movs	r3, #1
 800c44a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f107 0210 	add.w	r2, r7, #16
 800c454:	4611      	mov	r1, r2
 800c456:	4618      	mov	r0, r3
 800c458:	f003 fb8a 	bl	800fb70 <SDMMC_ConfigData>

      return HAL_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e000      	b.n	800c462 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c460:	2302      	movs	r3, #2
  }
}
 800c462:	4618      	mov	r0, r3
 800c464:	3730      	adds	r7, #48	@ 0x30
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	0800c86d 	.word	0x0800c86d
 800c470:	0800c909 	.word	0x0800c909
 800c474:	004005ff 	.word	0x004005ff

0800c478 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c49a:	0f9b      	lsrs	r3, r3, #30
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4a6:	0e9b      	lsrs	r3, r3, #26
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	f003 030f 	and.w	r3, r3, #15
 800c4ae:	b2da      	uxtb	r2, r3
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4b8:	0e1b      	lsrs	r3, r3, #24
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	f003 0303 	and.w	r3, r3, #3
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4ca:	0c1b      	lsrs	r3, r3, #16
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4d6:	0a1b      	lsrs	r3, r3, #8
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4ec:	0d1b      	lsrs	r3, r3, #20
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4f8:	0c1b      	lsrs	r3, r3, #16
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	f003 030f 	and.w	r3, r3, #15
 800c500:	b2da      	uxtb	r2, r3
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c50a:	0bdb      	lsrs	r3, r3, #15
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	f003 0301 	and.w	r3, r3, #1
 800c512:	b2da      	uxtb	r2, r3
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c51c:	0b9b      	lsrs	r3, r3, #14
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	b2da      	uxtb	r2, r3
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c52e:	0b5b      	lsrs	r3, r3, #13
 800c530:	b2db      	uxtb	r3, r3
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	b2da      	uxtb	r2, r3
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c540:	0b1b      	lsrs	r3, r3, #12
 800c542:	b2db      	uxtb	r3, r3
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2200      	movs	r2, #0
 800c552:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d163      	bne.n	800c624 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c560:	009a      	lsls	r2, r3, #2
 800c562:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c566:	4013      	ands	r3, r2
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c56c:	0f92      	lsrs	r2, r2, #30
 800c56e:	431a      	orrs	r2, r3
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c578:	0edb      	lsrs	r3, r3, #27
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	f003 0307 	and.w	r3, r3, #7
 800c580:	b2da      	uxtb	r2, r3
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c58a:	0e1b      	lsrs	r3, r3, #24
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	f003 0307 	and.w	r3, r3, #7
 800c592:	b2da      	uxtb	r2, r3
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c59c:	0d5b      	lsrs	r3, r3, #21
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	f003 0307 	and.w	r3, r3, #7
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5ae:	0c9b      	lsrs	r3, r3, #18
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	f003 0307 	and.w	r3, r3, #7
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5c0:	0bdb      	lsrs	r3, r3, #15
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	f003 0307 	and.w	r3, r3, #7
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	7e1b      	ldrb	r3, [r3, #24]
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	f003 0307 	and.w	r3, r3, #7
 800c5e2:	3302      	adds	r3, #2
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c5ee:	fb03 f202 	mul.w	r2, r3, r2
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	7a1b      	ldrb	r3, [r3, #8]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 030f 	and.w	r3, r3, #15
 800c600:	2201      	movs	r2, #1
 800c602:	409a      	lsls	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800c610:	0a52      	lsrs	r2, r2, #9
 800c612:	fb03 f202 	mul.w	r2, r3, r2
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c620:	661a      	str	r2, [r3, #96]	@ 0x60
 800c622:	e031      	b.n	800c688 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d11d      	bne.n	800c668 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c630:	041b      	lsls	r3, r3, #16
 800c632:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c63a:	0c1b      	lsrs	r3, r3, #16
 800c63c:	431a      	orrs	r2, r3
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	3301      	adds	r3, #1
 800c648:	029a      	lsls	r2, r3, #10
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c65c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	661a      	str	r2, [r3, #96]	@ 0x60
 800c666:	e00f      	b.n	800c688 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a58      	ldr	r2, [pc, #352]	@ (800c7d0 <HAL_SD_GetCardCSD+0x344>)
 800c66e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c674:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	e09d      	b.n	800c7c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c68c:	0b9b      	lsrs	r3, r3, #14
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	f003 0301 	and.w	r3, r3, #1
 800c694:	b2da      	uxtb	r2, r3
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c69e:	09db      	lsrs	r3, r3, #7
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6c0:	0fdb      	lsrs	r3, r3, #31
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6cc:	0f5b      	lsrs	r3, r3, #29
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6de:	0e9b      	lsrs	r3, r3, #26
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	b2da      	uxtb	r2, r3
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6f0:	0d9b      	lsrs	r3, r3, #22
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	f003 030f 	and.w	r3, r3, #15
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c702:	0d5b      	lsrs	r3, r3, #21
 800c704:	b2db      	uxtb	r3, r3
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2200      	movs	r2, #0
 800c716:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c71e:	0c1b      	lsrs	r3, r3, #16
 800c720:	b2db      	uxtb	r3, r3
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	b2da      	uxtb	r2, r3
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c732:	0bdb      	lsrs	r3, r3, #15
 800c734:	b2db      	uxtb	r3, r3
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c746:	0b9b      	lsrs	r3, r3, #14
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c75a:	0b5b      	lsrs	r3, r3, #13
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	f003 0301 	and.w	r3, r3, #1
 800c762:	b2da      	uxtb	r2, r3
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c76e:	0b1b      	lsrs	r3, r3, #12
 800c770:	b2db      	uxtb	r3, r3
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	b2da      	uxtb	r2, r3
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c782:	0a9b      	lsrs	r3, r3, #10
 800c784:	b2db      	uxtb	r3, r3
 800c786:	f003 0303 	and.w	r3, r3, #3
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c796:	0a1b      	lsrs	r3, r3, #8
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	f003 0303 	and.w	r3, r3, #3
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7aa:	085b      	lsrs	r3, r3, #1
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	004005ff 	.word	0x004005ff

0800c7d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c838:	f107 030c 	add.w	r3, r7, #12
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fa10 	bl	800cc64 <SD_SendStatus>
 800c844:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d005      	beq.n	800c858 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	431a      	orrs	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	0a5b      	lsrs	r3, r3, #9
 800c85c:	f003 030f 	and.w	r3, r3, #15
 800c860:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c862:	693b      	ldr	r3, [r7, #16]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c878:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c888:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c88a:	bf00      	nop
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b084      	sub	sp, #16
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8a8:	2b82      	cmp	r3, #130	@ 0x82
 800c8aa:	d111      	bne.n	800c8d0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f003 fa33 	bl	800fd1c <SDMMC_CmdStopTransfer>
 800c8b6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d008      	beq.n	800c8d0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	431a      	orrs	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f7ff fdd4 	bl	800c478 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f022 0208 	bic.w	r2, r2, #8
 800c8de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c8e8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f004 ff85 	bl	8011808 <HAL_SD_RxCpltCallback>
#endif
}
 800c8fe:	bf00      	nop
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
	...

0800c908 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c914:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7f9 fc6e 	bl	80061f8 <HAL_DMA_GetError>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d03e      	beq.n	800c9a0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c928:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c92e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c930:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d002      	beq.n	800c93e <SD_DMAError+0x36>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d12d      	bne.n	800c99a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a19      	ldr	r2, [pc, #100]	@ (800c9a8 <SD_DMAError+0xa0>)
 800c944:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c954:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c95a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c962:	6978      	ldr	r0, [r7, #20]
 800c964:	f7ff ff62 	bl	800c82c <HAL_SD_GetCardState>
 800c968:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b06      	cmp	r3, #6
 800c96e:	d002      	beq.n	800c976 <SD_DMAError+0x6e>
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	2b05      	cmp	r3, #5
 800c974:	d10a      	bne.n	800c98c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f003 f9ce 	bl	800fd1c <SDMMC_CmdStopTransfer>
 800c980:	4602      	mov	r2, r0
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c986:	431a      	orrs	r2, r3
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2200      	movs	r2, #0
 800c998:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c99a:	6978      	ldr	r0, [r7, #20]
 800c99c:	f7ff fd6c 	bl	800c478 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c9a0:	bf00      	nop
 800c9a2:	3718      	adds	r7, #24
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	004005ff 	.word	0x004005ff

0800c9ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c9ac:	b5b0      	push	{r4, r5, r7, lr}
 800c9ae:	b094      	sub	sp, #80	@ 0x50
 800c9b0:	af04      	add	r7, sp, #16
 800c9b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f003 f87f 	bl	800fac0 <SDMMC_GetPowerState>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d102      	bne.n	800c9ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c9c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c9cc:	e0b8      	b.n	800cb40 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9d2:	2b03      	cmp	r3, #3
 800c9d4:	d02f      	beq.n	800ca36 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f003 fa66 	bl	800feac <SDMMC_CmdSendCID>
 800c9e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d001      	beq.n	800c9ec <SD_InitCard+0x40>
    {
      return errorstate;
 800c9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ea:	e0a9      	b.n	800cb40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f003 f8a9 	bl	800fb4a <SDMMC_GetResponse>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2104      	movs	r1, #4
 800ca04:	4618      	mov	r0, r3
 800ca06:	f003 f8a0 	bl	800fb4a <SDMMC_GetResponse>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2108      	movs	r1, #8
 800ca16:	4618      	mov	r0, r3
 800ca18:	f003 f897 	bl	800fb4a <SDMMC_GetResponse>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	210c      	movs	r1, #12
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f003 f88e 	bl	800fb4a <SDMMC_GetResponse>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d00d      	beq.n	800ca5a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f107 020e 	add.w	r2, r7, #14
 800ca46:	4611      	mov	r1, r2
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f003 fa6c 	bl	800ff26 <SDMMC_CmdSetRelAdd>
 800ca4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <SD_InitCard+0xae>
    {
      return errorstate;
 800ca56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca58:	e072      	b.n	800cb40 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d036      	beq.n	800cad0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ca62:	89fb      	ldrh	r3, [r7, #14]
 800ca64:	461a      	mov	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca72:	041b      	lsls	r3, r3, #16
 800ca74:	4619      	mov	r1, r3
 800ca76:	4610      	mov	r0, r2
 800ca78:	f003 fa36 	bl	800fee8 <SDMMC_CmdSendCSD>
 800ca7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ca84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca86:	e05b      	b.n	800cb40 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f003 f85b 	bl	800fb4a <SDMMC_GetResponse>
 800ca94:	4602      	mov	r2, r0
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2104      	movs	r1, #4
 800caa0:	4618      	mov	r0, r3
 800caa2:	f003 f852 	bl	800fb4a <SDMMC_GetResponse>
 800caa6:	4602      	mov	r2, r0
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2108      	movs	r1, #8
 800cab2:	4618      	mov	r0, r3
 800cab4:	f003 f849 	bl	800fb4a <SDMMC_GetResponse>
 800cab8:	4602      	mov	r2, r0
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	210c      	movs	r1, #12
 800cac4:	4618      	mov	r0, r3
 800cac6:	f003 f840 	bl	800fb4a <SDMMC_GetResponse>
 800caca:	4602      	mov	r2, r0
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2104      	movs	r1, #4
 800cad6:	4618      	mov	r0, r3
 800cad8:	f003 f837 	bl	800fb4a <SDMMC_GetResponse>
 800cadc:	4603      	mov	r3, r0
 800cade:	0d1a      	lsrs	r2, r3, #20
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cae4:	f107 0310 	add.w	r3, r7, #16
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff fcce 	bl	800c48c <HAL_SD_GetCardCSD>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d002      	beq.n	800cafc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800caf6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cafa:	e021      	b.n	800cb40 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6819      	ldr	r1, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb04:	041b      	lsls	r3, r3, #16
 800cb06:	2200      	movs	r2, #0
 800cb08:	461c      	mov	r4, r3
 800cb0a:	4615      	mov	r5, r2
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	462b      	mov	r3, r5
 800cb10:	4608      	mov	r0, r1
 800cb12:	f003 f925 	bl	800fd60 <SDMMC_CmdSelDesel>
 800cb16:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <SD_InitCard+0x176>
  {
    return errorstate;
 800cb1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb20:	e00e      	b.n	800cb40 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681d      	ldr	r5, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	466c      	mov	r4, sp
 800cb2a:	f103 0210 	add.w	r2, r3, #16
 800cb2e:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb34:	3304      	adds	r3, #4
 800cb36:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb38:	4628      	mov	r0, r5
 800cb3a:	f002 ff87 	bl	800fa4c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3740      	adds	r7, #64	@ 0x40
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bdb0      	pop	{r4, r5, r7, pc}

0800cb48 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb50:	2300      	movs	r3, #0
 800cb52:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cb54:	2300      	movs	r3, #0
 800cb56:	617b      	str	r3, [r7, #20]
 800cb58:	2300      	movs	r3, #0
 800cb5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f003 f920 	bl	800fda6 <SDMMC_CmdGoIdleState>
 800cb66:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	e072      	b.n	800cc58 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f003 f933 	bl	800fde2 <SDMMC_CmdOperCond>
 800cb7c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00d      	beq.n	800cba0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f003 f909 	bl	800fda6 <SDMMC_CmdGoIdleState>
 800cb94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d004      	beq.n	800cba6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	e05b      	b.n	800cc58 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d137      	bne.n	800cc1e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f003 f933 	bl	800fe20 <SDMMC_CmdAppCommand>
 800cbba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d02d      	beq.n	800cc1e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbc2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cbc6:	e047      	b.n	800cc58 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2100      	movs	r1, #0
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f003 f926 	bl	800fe20 <SDMMC_CmdAppCommand>
 800cbd4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <SD_PowerON+0x98>
    {
      return errorstate;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	e03b      	b.n	800cc58 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	491e      	ldr	r1, [pc, #120]	@ (800cc60 <SD_PowerON+0x118>)
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f003 f93c 	bl	800fe64 <SDMMC_CmdAppOperCommand>
 800cbec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbf4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cbf8:	e02e      	b.n	800cc58 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2100      	movs	r1, #0
 800cc00:	4618      	mov	r0, r3
 800cc02:	f002 ffa2 	bl	800fb4a <SDMMC_GetResponse>
 800cc06:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	0fdb      	lsrs	r3, r3, #31
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d101      	bne.n	800cc14 <SD_PowerON+0xcc>
 800cc10:	2301      	movs	r3, #1
 800cc12:	e000      	b.n	800cc16 <SD_PowerON+0xce>
 800cc14:	2300      	movs	r3, #0
 800cc16:	613b      	str	r3, [r7, #16]

    count++;
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d802      	bhi.n	800cc2e <SD_PowerON+0xe6>
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0cc      	beq.n	800cbc8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d902      	bls.n	800cc3e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cc38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cc3c:	e00c      	b.n	800cc58 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d003      	beq.n	800cc50 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	645a      	str	r2, [r3, #68]	@ 0x44
 800cc4e:	e002      	b.n	800cc56 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3718      	adds	r7, #24
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	c1100000 	.word	0xc1100000

0800cc64 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d102      	bne.n	800cc7a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cc74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc78:	e018      	b.n	800ccac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc82:	041b      	lsls	r3, r3, #16
 800cc84:	4619      	mov	r1, r3
 800cc86:	4610      	mov	r0, r2
 800cc88:	f003 f96e 	bl	800ff68 <SDMMC_CmdSendStatus>
 800cc8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	e009      	b.n	800ccac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f002 ff53 	bl	800fb4a <SDMMC_GetResponse>
 800cca4:	4602      	mov	r2, r0
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e025      	b.n	800cd14 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d106      	bne.n	800cce2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7f7 fbb9 	bl	8004454 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2202      	movs	r2, #2
 800cce6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	3304      	adds	r3, #4
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	4610      	mov	r0, r2
 800ccf6:	f002 fde3 	bl	800f8c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6818      	ldr	r0, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	461a      	mov	r2, r3
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	f002 fe37 	bl	800f978 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d101      	bne.n	800cd2e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e04c      	b.n	800cdc8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d106      	bne.n	800cd48 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7f7 f80c 	bl	8003d60 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f022 0203 	bic.w	r2, r2, #3
 800cd5e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	4b19      	ldr	r3, [pc, #100]	@ (800cdd0 <HAL_SPDIFRX_Init+0xb4>)
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800cd78:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800cd7e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800cd84:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800cd8a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800cd90:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800cd96:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800cd9c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800cda2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800cda8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	fff88407 	.word	0xfff88407

0800cdd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e09d      	b.n	800cf22 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d108      	bne.n	800ce00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cdf6:	d009      	beq.n	800ce0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	61da      	str	r2, [r3, #28]
 800cdfe:	e005      	b.n	800ce0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7f6 fffe 	bl	8003e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2202      	movs	r2, #2
 800ce30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce4c:	d902      	bls.n	800ce54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	e002      	b.n	800ce5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ce54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ce62:	d007      	beq.n	800ce74 <HAL_SPI_Init+0xa0>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce6c:	d002      	beq.n	800ce74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ce84:	431a      	orrs	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	f003 0302 	and.w	r3, r3, #2
 800ce8e:	431a      	orrs	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	695b      	ldr	r3, [r3, #20]
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	431a      	orrs	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	699b      	ldr	r3, [r3, #24]
 800ce9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cea2:	431a      	orrs	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	69db      	ldr	r3, [r3, #28]
 800cea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ceac:	431a      	orrs	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a1b      	ldr	r3, [r3, #32]
 800ceb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ceb6:	ea42 0103 	orr.w	r1, r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cebe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	430a      	orrs	r2, r1
 800cec8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	0c1b      	lsrs	r3, r3, #16
 800ced0:	f003 0204 	and.w	r2, r3, #4
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced8:	f003 0310 	and.w	r3, r3, #16
 800cedc:	431a      	orrs	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cee2:	f003 0308 	and.w	r3, r3, #8
 800cee6:	431a      	orrs	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cef0:	ea42 0103 	orr.w	r1, r2, r3
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	430a      	orrs	r2, r1
 800cf00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	69da      	ldr	r2, [r3, #28]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cf10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d101      	bne.n	800cf3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e049      	b.n	800cfd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d106      	bne.n	800cf56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7f6 ffcb 	bl	8003eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2202      	movs	r2, #2
 800cf5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3304      	adds	r3, #4
 800cf66:	4619      	mov	r1, r3
 800cf68:	4610      	mov	r0, r2
 800cf6a:	f000 fc11 	bl	800d790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d001      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e054      	b.n	800d09a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2202      	movs	r2, #2
 800cff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68da      	ldr	r2, [r3, #12]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f042 0201 	orr.w	r2, r2, #1
 800d006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a26      	ldr	r2, [pc, #152]	@ (800d0a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d022      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d01a:	d01d      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a22      	ldr	r2, [pc, #136]	@ (800d0ac <HAL_TIM_Base_Start_IT+0xd4>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d018      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a21      	ldr	r2, [pc, #132]	@ (800d0b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d013      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a1f      	ldr	r2, [pc, #124]	@ (800d0b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d00e      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a1e      	ldr	r2, [pc, #120]	@ (800d0b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d009      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a1c      	ldr	r2, [pc, #112]	@ (800d0bc <HAL_TIM_Base_Start_IT+0xe4>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d004      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a1b      	ldr	r2, [pc, #108]	@ (800d0c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d115      	bne.n	800d084 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	689a      	ldr	r2, [r3, #8]
 800d05e:	4b19      	ldr	r3, [pc, #100]	@ (800d0c4 <HAL_TIM_Base_Start_IT+0xec>)
 800d060:	4013      	ands	r3, r2
 800d062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b06      	cmp	r3, #6
 800d068:	d015      	beq.n	800d096 <HAL_TIM_Base_Start_IT+0xbe>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d070:	d011      	beq.n	800d096 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f042 0201 	orr.w	r2, r2, #1
 800d080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d082:	e008      	b.n	800d096 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f042 0201 	orr.w	r2, r2, #1
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e000      	b.n	800d098 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3714      	adds	r7, #20
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	40010000 	.word	0x40010000
 800d0ac:	40000400 	.word	0x40000400
 800d0b0:	40000800 	.word	0x40000800
 800d0b4:	40000c00 	.word	0x40000c00
 800d0b8:	40010400 	.word	0x40010400
 800d0bc:	40014000 	.word	0x40014000
 800d0c0:	40001800 	.word	0x40001800
 800d0c4:	00010007 	.word	0x00010007

0800d0c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e049      	b.n	800d16e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d106      	bne.n	800d0f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7f6 ff6a 	bl	8003fc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	3304      	adds	r3, #4
 800d104:	4619      	mov	r1, r3
 800d106:	4610      	mov	r0, r2
 800d108:	f000 fb42 	bl	800d790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	f003 0302 	and.w	r3, r3, #2
 800d194:	2b00      	cmp	r3, #0
 800d196:	d020      	beq.n	800d1da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f003 0302 	and.w	r3, r3, #2
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d01b      	beq.n	800d1da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f06f 0202 	mvn.w	r2, #2
 800d1aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	f003 0303 	and.w	r3, r3, #3
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 fac7 	bl	800d754 <HAL_TIM_IC_CaptureCallback>
 800d1c6:	e005      	b.n	800d1d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fab9 	bl	800d740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 faca 	bl	800d768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	f003 0304 	and.w	r3, r3, #4
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d020      	beq.n	800d226 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f003 0304 	and.w	r3, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d01b      	beq.n	800d226 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f06f 0204 	mvn.w	r2, #4
 800d1f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d003      	beq.n	800d214 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 faa1 	bl	800d754 <HAL_TIM_IC_CaptureCallback>
 800d212:	e005      	b.n	800d220 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fa93 	bl	800d740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 faa4 	bl	800d768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	f003 0308 	and.w	r3, r3, #8
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d020      	beq.n	800d272 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f003 0308 	and.w	r3, r3, #8
 800d236:	2b00      	cmp	r3, #0
 800d238:	d01b      	beq.n	800d272 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f06f 0208 	mvn.w	r2, #8
 800d242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2204      	movs	r2, #4
 800d248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	69db      	ldr	r3, [r3, #28]
 800d250:	f003 0303 	and.w	r3, r3, #3
 800d254:	2b00      	cmp	r3, #0
 800d256:	d003      	beq.n	800d260 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 fa7b 	bl	800d754 <HAL_TIM_IC_CaptureCallback>
 800d25e:	e005      	b.n	800d26c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fa6d 	bl	800d740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 fa7e 	bl	800d768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	f003 0310 	and.w	r3, r3, #16
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d020      	beq.n	800d2be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f003 0310 	and.w	r3, r3, #16
 800d282:	2b00      	cmp	r3, #0
 800d284:	d01b      	beq.n	800d2be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f06f 0210 	mvn.w	r2, #16
 800d28e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2208      	movs	r2, #8
 800d294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69db      	ldr	r3, [r3, #28]
 800d29c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d003      	beq.n	800d2ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fa55 	bl	800d754 <HAL_TIM_IC_CaptureCallback>
 800d2aa:	e005      	b.n	800d2b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f000 fa47 	bl	800d740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 fa58 	bl	800d768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00c      	beq.n	800d2e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d007      	beq.n	800d2e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f06f 0201 	mvn.w	r2, #1
 800d2da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7f6 f819 	bl	8003314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d104      	bne.n	800d2f6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00c      	beq.n	800d310 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d007      	beq.n	800d310 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 fef4 	bl	800e0f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00c      	beq.n	800d334 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d320:	2b00      	cmp	r3, #0
 800d322:	d007      	beq.n	800d334 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d32c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 feec 	bl	800e10c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00c      	beq.n	800d358 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d344:	2b00      	cmp	r3, #0
 800d346:	d007      	beq.n	800d358 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fa12 	bl	800d77c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	f003 0320 	and.w	r3, r3, #32
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00c      	beq.n	800d37c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f003 0320 	and.w	r3, r3, #32
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d007      	beq.n	800d37c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f06f 0220 	mvn.w	r2, #32
 800d374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 feb4 	bl	800e0e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d37c:	bf00      	nop
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d101      	bne.n	800d3a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d39e:	2302      	movs	r3, #2
 800d3a0:	e0ff      	b.n	800d5a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b14      	cmp	r3, #20
 800d3ae:	f200 80f0 	bhi.w	800d592 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d3b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b8:	0800d40d 	.word	0x0800d40d
 800d3bc:	0800d593 	.word	0x0800d593
 800d3c0:	0800d593 	.word	0x0800d593
 800d3c4:	0800d593 	.word	0x0800d593
 800d3c8:	0800d44d 	.word	0x0800d44d
 800d3cc:	0800d593 	.word	0x0800d593
 800d3d0:	0800d593 	.word	0x0800d593
 800d3d4:	0800d593 	.word	0x0800d593
 800d3d8:	0800d48f 	.word	0x0800d48f
 800d3dc:	0800d593 	.word	0x0800d593
 800d3e0:	0800d593 	.word	0x0800d593
 800d3e4:	0800d593 	.word	0x0800d593
 800d3e8:	0800d4cf 	.word	0x0800d4cf
 800d3ec:	0800d593 	.word	0x0800d593
 800d3f0:	0800d593 	.word	0x0800d593
 800d3f4:	0800d593 	.word	0x0800d593
 800d3f8:	0800d511 	.word	0x0800d511
 800d3fc:	0800d593 	.word	0x0800d593
 800d400:	0800d593 	.word	0x0800d593
 800d404:	0800d593 	.word	0x0800d593
 800d408:	0800d551 	.word	0x0800d551
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68b9      	ldr	r1, [r7, #8]
 800d412:	4618      	mov	r0, r3
 800d414:	f000 fa62 	bl	800d8dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	699a      	ldr	r2, [r3, #24]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f042 0208 	orr.w	r2, r2, #8
 800d426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	699a      	ldr	r2, [r3, #24]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f022 0204 	bic.w	r2, r2, #4
 800d436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6999      	ldr	r1, [r3, #24]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	691a      	ldr	r2, [r3, #16]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	430a      	orrs	r2, r1
 800d448:	619a      	str	r2, [r3, #24]
      break;
 800d44a:	e0a5      	b.n	800d598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	68b9      	ldr	r1, [r7, #8]
 800d452:	4618      	mov	r0, r3
 800d454:	f000 fab4 	bl	800d9c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	699a      	ldr	r2, [r3, #24]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	699a      	ldr	r2, [r3, #24]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6999      	ldr	r1, [r3, #24]
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	691b      	ldr	r3, [r3, #16]
 800d482:	021a      	lsls	r2, r3, #8
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	430a      	orrs	r2, r1
 800d48a:	619a      	str	r2, [r3, #24]
      break;
 800d48c:	e084      	b.n	800d598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	68b9      	ldr	r1, [r7, #8]
 800d494:	4618      	mov	r0, r3
 800d496:	f000 fb0b 	bl	800dab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	69da      	ldr	r2, [r3, #28]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f042 0208 	orr.w	r2, r2, #8
 800d4a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	69da      	ldr	r2, [r3, #28]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f022 0204 	bic.w	r2, r2, #4
 800d4b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	69d9      	ldr	r1, [r3, #28]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	691a      	ldr	r2, [r3, #16]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	430a      	orrs	r2, r1
 800d4ca:	61da      	str	r2, [r3, #28]
      break;
 800d4cc:	e064      	b.n	800d598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68b9      	ldr	r1, [r7, #8]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f000 fb61 	bl	800db9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	69da      	ldr	r2, [r3, #28]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d4e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	69da      	ldr	r2, [r3, #28]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d4f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	69d9      	ldr	r1, [r3, #28]
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	021a      	lsls	r2, r3, #8
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	61da      	str	r2, [r3, #28]
      break;
 800d50e:	e043      	b.n	800d598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68b9      	ldr	r1, [r7, #8]
 800d516:	4618      	mov	r0, r3
 800d518:	f000 fb98 	bl	800dc4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f042 0208 	orr.w	r2, r2, #8
 800d52a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f022 0204 	bic.w	r2, r2, #4
 800d53a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	691a      	ldr	r2, [r3, #16]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	430a      	orrs	r2, r1
 800d54c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d54e:	e023      	b.n	800d598 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68b9      	ldr	r1, [r7, #8]
 800d556:	4618      	mov	r0, r3
 800d558:	f000 fbca 	bl	800dcf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d56a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d57a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	021a      	lsls	r2, r3, #8
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	430a      	orrs	r2, r1
 800d58e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d590:	e002      	b.n	800d598 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	75fb      	strb	r3, [r7, #23]
      break;
 800d596:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop

0800d5ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d101      	bne.n	800d5c8 <HAL_TIM_ConfigClockSource+0x1c>
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	e0b4      	b.n	800d732 <HAL_TIM_ConfigClockSource+0x186>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2202      	movs	r2, #2
 800d5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	4b56      	ldr	r3, [pc, #344]	@ (800d73c <HAL_TIM_ConfigClockSource+0x190>)
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d5ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d600:	d03e      	beq.n	800d680 <HAL_TIM_ConfigClockSource+0xd4>
 800d602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d606:	f200 8087 	bhi.w	800d718 <HAL_TIM_ConfigClockSource+0x16c>
 800d60a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d60e:	f000 8086 	beq.w	800d71e <HAL_TIM_ConfigClockSource+0x172>
 800d612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d616:	d87f      	bhi.n	800d718 <HAL_TIM_ConfigClockSource+0x16c>
 800d618:	2b70      	cmp	r3, #112	@ 0x70
 800d61a:	d01a      	beq.n	800d652 <HAL_TIM_ConfigClockSource+0xa6>
 800d61c:	2b70      	cmp	r3, #112	@ 0x70
 800d61e:	d87b      	bhi.n	800d718 <HAL_TIM_ConfigClockSource+0x16c>
 800d620:	2b60      	cmp	r3, #96	@ 0x60
 800d622:	d050      	beq.n	800d6c6 <HAL_TIM_ConfigClockSource+0x11a>
 800d624:	2b60      	cmp	r3, #96	@ 0x60
 800d626:	d877      	bhi.n	800d718 <HAL_TIM_ConfigClockSource+0x16c>
 800d628:	2b50      	cmp	r3, #80	@ 0x50
 800d62a:	d03c      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0xfa>
 800d62c:	2b50      	cmp	r3, #80	@ 0x50
 800d62e:	d873      	bhi.n	800d718 <HAL_TIM_ConfigClockSource+0x16c>
 800d630:	2b40      	cmp	r3, #64	@ 0x40
 800d632:	d058      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x13a>
 800d634:	2b40      	cmp	r3, #64	@ 0x40
 800d636:	d86f      	bhi.n	800d718 <HAL_TIM_ConfigClockSource+0x16c>
 800d638:	2b30      	cmp	r3, #48	@ 0x30
 800d63a:	d064      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x15a>
 800d63c:	2b30      	cmp	r3, #48	@ 0x30
 800d63e:	d86b      	bhi.n	800d718 <HAL_TIM_ConfigClockSource+0x16c>
 800d640:	2b20      	cmp	r3, #32
 800d642:	d060      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x15a>
 800d644:	2b20      	cmp	r3, #32
 800d646:	d867      	bhi.n	800d718 <HAL_TIM_ConfigClockSource+0x16c>
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d05c      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x15a>
 800d64c:	2b10      	cmp	r3, #16
 800d64e:	d05a      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x15a>
 800d650:	e062      	b.n	800d718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d662:	f000 fc13 	bl	800de8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	609a      	str	r2, [r3, #8]
      break;
 800d67e:	e04f      	b.n	800d720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d690:	f000 fbfc 	bl	800de8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	689a      	ldr	r2, [r3, #8]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d6a2:	609a      	str	r2, [r3, #8]
      break;
 800d6a4:	e03c      	b.n	800d720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f000 fb70 	bl	800dd98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2150      	movs	r1, #80	@ 0x50
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 fbc9 	bl	800de56 <TIM_ITRx_SetConfig>
      break;
 800d6c4:	e02c      	b.n	800d720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f000 fb8f 	bl	800ddf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2160      	movs	r1, #96	@ 0x60
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 fbb9 	bl	800de56 <TIM_ITRx_SetConfig>
      break;
 800d6e4:	e01c      	b.n	800d720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	f000 fb50 	bl	800dd98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2140      	movs	r1, #64	@ 0x40
 800d6fe:	4618      	mov	r0, r3
 800d700:	f000 fba9 	bl	800de56 <TIM_ITRx_SetConfig>
      break;
 800d704:	e00c      	b.n	800d720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4619      	mov	r1, r3
 800d710:	4610      	mov	r0, r2
 800d712:	f000 fba0 	bl	800de56 <TIM_ITRx_SetConfig>
      break;
 800d716:	e003      	b.n	800d720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d718:	2301      	movs	r3, #1
 800d71a:	73fb      	strb	r3, [r7, #15]
      break;
 800d71c:	e000      	b.n	800d720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d71e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2201      	movs	r2, #1
 800d724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2200      	movs	r2, #0
 800d72c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d730:	7bfb      	ldrb	r3, [r7, #15]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	fffeff88 	.word	0xfffeff88

0800d740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a43      	ldr	r2, [pc, #268]	@ (800d8b0 <TIM_Base_SetConfig+0x120>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d013      	beq.n	800d7d0 <TIM_Base_SetConfig+0x40>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ae:	d00f      	beq.n	800d7d0 <TIM_Base_SetConfig+0x40>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4a40      	ldr	r2, [pc, #256]	@ (800d8b4 <TIM_Base_SetConfig+0x124>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d00b      	beq.n	800d7d0 <TIM_Base_SetConfig+0x40>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a3f      	ldr	r2, [pc, #252]	@ (800d8b8 <TIM_Base_SetConfig+0x128>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d007      	beq.n	800d7d0 <TIM_Base_SetConfig+0x40>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4a3e      	ldr	r2, [pc, #248]	@ (800d8bc <TIM_Base_SetConfig+0x12c>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d003      	beq.n	800d7d0 <TIM_Base_SetConfig+0x40>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a3d      	ldr	r2, [pc, #244]	@ (800d8c0 <TIM_Base_SetConfig+0x130>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d108      	bne.n	800d7e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4a32      	ldr	r2, [pc, #200]	@ (800d8b0 <TIM_Base_SetConfig+0x120>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d02b      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7f0:	d027      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a2f      	ldr	r2, [pc, #188]	@ (800d8b4 <TIM_Base_SetConfig+0x124>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d023      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a2e      	ldr	r2, [pc, #184]	@ (800d8b8 <TIM_Base_SetConfig+0x128>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d01f      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a2d      	ldr	r2, [pc, #180]	@ (800d8bc <TIM_Base_SetConfig+0x12c>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d01b      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a2c      	ldr	r2, [pc, #176]	@ (800d8c0 <TIM_Base_SetConfig+0x130>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d017      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a2b      	ldr	r2, [pc, #172]	@ (800d8c4 <TIM_Base_SetConfig+0x134>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d013      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a2a      	ldr	r2, [pc, #168]	@ (800d8c8 <TIM_Base_SetConfig+0x138>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d00f      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4a29      	ldr	r2, [pc, #164]	@ (800d8cc <TIM_Base_SetConfig+0x13c>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d00b      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4a28      	ldr	r2, [pc, #160]	@ (800d8d0 <TIM_Base_SetConfig+0x140>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d007      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4a27      	ldr	r2, [pc, #156]	@ (800d8d4 <TIM_Base_SetConfig+0x144>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d003      	beq.n	800d842 <TIM_Base_SetConfig+0xb2>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4a26      	ldr	r2, [pc, #152]	@ (800d8d8 <TIM_Base_SetConfig+0x148>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d108      	bne.n	800d854 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	4313      	orrs	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	695b      	ldr	r3, [r3, #20]
 800d85e:	4313      	orrs	r3, r2
 800d860:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	689a      	ldr	r2, [r3, #8]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a0e      	ldr	r2, [pc, #56]	@ (800d8b0 <TIM_Base_SetConfig+0x120>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d003      	beq.n	800d882 <TIM_Base_SetConfig+0xf2>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a10      	ldr	r2, [pc, #64]	@ (800d8c0 <TIM_Base_SetConfig+0x130>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d103      	bne.n	800d88a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	691a      	ldr	r2, [r3, #16]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f043 0204 	orr.w	r2, r3, #4
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	601a      	str	r2, [r3, #0]
}
 800d8a2:	bf00      	nop
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	40010000 	.word	0x40010000
 800d8b4:	40000400 	.word	0x40000400
 800d8b8:	40000800 	.word	0x40000800
 800d8bc:	40000c00 	.word	0x40000c00
 800d8c0:	40010400 	.word	0x40010400
 800d8c4:	40014000 	.word	0x40014000
 800d8c8:	40014400 	.word	0x40014400
 800d8cc:	40014800 	.word	0x40014800
 800d8d0:	40001800 	.word	0x40001800
 800d8d4:	40001c00 	.word	0x40001c00
 800d8d8:	40002000 	.word	0x40002000

0800d8dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b087      	sub	sp, #28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a1b      	ldr	r3, [r3, #32]
 800d8f0:	f023 0201 	bic.w	r2, r3, #1
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	4b2b      	ldr	r3, [pc, #172]	@ (800d9b4 <TIM_OC1_SetConfig+0xd8>)
 800d908:	4013      	ands	r3, r2
 800d90a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f023 0303 	bic.w	r3, r3, #3
 800d912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f023 0302 	bic.w	r3, r3, #2
 800d924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a21      	ldr	r2, [pc, #132]	@ (800d9b8 <TIM_OC1_SetConfig+0xdc>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d003      	beq.n	800d940 <TIM_OC1_SetConfig+0x64>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a20      	ldr	r2, [pc, #128]	@ (800d9bc <TIM_OC1_SetConfig+0xe0>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d10c      	bne.n	800d95a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	f023 0308 	bic.w	r3, r3, #8
 800d946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	697a      	ldr	r2, [r7, #20]
 800d94e:	4313      	orrs	r3, r2
 800d950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f023 0304 	bic.w	r3, r3, #4
 800d958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4a16      	ldr	r2, [pc, #88]	@ (800d9b8 <TIM_OC1_SetConfig+0xdc>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d003      	beq.n	800d96a <TIM_OC1_SetConfig+0x8e>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4a15      	ldr	r2, [pc, #84]	@ (800d9bc <TIM_OC1_SetConfig+0xe0>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d111      	bne.n	800d98e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	695b      	ldr	r3, [r3, #20]
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	4313      	orrs	r3, r2
 800d982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	693a      	ldr	r2, [r7, #16]
 800d992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	621a      	str	r2, [r3, #32]
}
 800d9a8:	bf00      	nop
 800d9aa:	371c      	adds	r7, #28
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	fffeff8f 	.word	0xfffeff8f
 800d9b8:	40010000 	.word	0x40010000
 800d9bc:	40010400 	.word	0x40010400

0800d9c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b087      	sub	sp, #28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a1b      	ldr	r3, [r3, #32]
 800d9ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a1b      	ldr	r3, [r3, #32]
 800d9d4:	f023 0210 	bic.w	r2, r3, #16
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	699b      	ldr	r3, [r3, #24]
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	4b2e      	ldr	r3, [pc, #184]	@ (800daa4 <TIM_OC2_SetConfig+0xe4>)
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	021b      	lsls	r3, r3, #8
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	4313      	orrs	r3, r2
 800da02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f023 0320 	bic.w	r3, r3, #32
 800da0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	011b      	lsls	r3, r3, #4
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	4313      	orrs	r3, r2
 800da16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a23      	ldr	r2, [pc, #140]	@ (800daa8 <TIM_OC2_SetConfig+0xe8>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d003      	beq.n	800da28 <TIM_OC2_SetConfig+0x68>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a22      	ldr	r2, [pc, #136]	@ (800daac <TIM_OC2_SetConfig+0xec>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d10d      	bne.n	800da44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	011b      	lsls	r3, r3, #4
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	4313      	orrs	r3, r2
 800da3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a18      	ldr	r2, [pc, #96]	@ (800daa8 <TIM_OC2_SetConfig+0xe8>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d003      	beq.n	800da54 <TIM_OC2_SetConfig+0x94>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a17      	ldr	r2, [pc, #92]	@ (800daac <TIM_OC2_SetConfig+0xec>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d113      	bne.n	800da7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800da5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800da62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	695b      	ldr	r3, [r3, #20]
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	693a      	ldr	r2, [r7, #16]
 800da6c:	4313      	orrs	r3, r2
 800da6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	693a      	ldr	r2, [r7, #16]
 800da78:	4313      	orrs	r3, r2
 800da7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	685a      	ldr	r2, [r3, #4]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	697a      	ldr	r2, [r7, #20]
 800da94:	621a      	str	r2, [r3, #32]
}
 800da96:	bf00      	nop
 800da98:	371c      	adds	r7, #28
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	feff8fff 	.word	0xfeff8fff
 800daa8:	40010000 	.word	0x40010000
 800daac:	40010400 	.word	0x40010400

0800dab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b087      	sub	sp, #28
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a1b      	ldr	r3, [r3, #32]
 800dac4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	4b2d      	ldr	r3, [pc, #180]	@ (800db90 <TIM_OC3_SetConfig+0xe0>)
 800dadc:	4013      	ands	r3, r2
 800dade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f023 0303 	bic.w	r3, r3, #3
 800dae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800daf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	021b      	lsls	r3, r3, #8
 800db00:	697a      	ldr	r2, [r7, #20]
 800db02:	4313      	orrs	r3, r2
 800db04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a22      	ldr	r2, [pc, #136]	@ (800db94 <TIM_OC3_SetConfig+0xe4>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d003      	beq.n	800db16 <TIM_OC3_SetConfig+0x66>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a21      	ldr	r2, [pc, #132]	@ (800db98 <TIM_OC3_SetConfig+0xe8>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d10d      	bne.n	800db32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800db1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	021b      	lsls	r3, r3, #8
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	4313      	orrs	r3, r2
 800db28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800db30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4a17      	ldr	r2, [pc, #92]	@ (800db94 <TIM_OC3_SetConfig+0xe4>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d003      	beq.n	800db42 <TIM_OC3_SetConfig+0x92>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4a16      	ldr	r2, [pc, #88]	@ (800db98 <TIM_OC3_SetConfig+0xe8>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d113      	bne.n	800db6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800db50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	011b      	lsls	r3, r3, #4
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	011b      	lsls	r3, r3, #4
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	4313      	orrs	r3, r2
 800db68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	693a      	ldr	r2, [r7, #16]
 800db6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	685a      	ldr	r2, [r3, #4]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	697a      	ldr	r2, [r7, #20]
 800db82:	621a      	str	r2, [r3, #32]
}
 800db84:	bf00      	nop
 800db86:	371c      	adds	r7, #28
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr
 800db90:	fffeff8f 	.word	0xfffeff8f
 800db94:	40010000 	.word	0x40010000
 800db98:	40010400 	.word	0x40010400

0800db9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b087      	sub	sp, #28
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a1b      	ldr	r3, [r3, #32]
 800dbaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a1b      	ldr	r3, [r3, #32]
 800dbb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	69db      	ldr	r3, [r3, #28]
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	4b1e      	ldr	r3, [pc, #120]	@ (800dc40 <TIM_OC4_SetConfig+0xa4>)
 800dbc8:	4013      	ands	r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dbd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	021b      	lsls	r3, r3, #8
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dbe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	031b      	lsls	r3, r3, #12
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a13      	ldr	r2, [pc, #76]	@ (800dc44 <TIM_OC4_SetConfig+0xa8>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d003      	beq.n	800dc04 <TIM_OC4_SetConfig+0x68>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a12      	ldr	r2, [pc, #72]	@ (800dc48 <TIM_OC4_SetConfig+0xac>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d109      	bne.n	800dc18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dc0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	695b      	ldr	r3, [r3, #20]
 800dc10:	019b      	lsls	r3, r3, #6
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	697a      	ldr	r2, [r7, #20]
 800dc1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	685a      	ldr	r2, [r3, #4]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	693a      	ldr	r2, [r7, #16]
 800dc30:	621a      	str	r2, [r3, #32]
}
 800dc32:	bf00      	nop
 800dc34:	371c      	adds	r7, #28
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	feff8fff 	.word	0xfeff8fff
 800dc44:	40010000 	.word	0x40010000
 800dc48:	40010400 	.word	0x40010400

0800dc4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b087      	sub	sp, #28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a1b      	ldr	r3, [r3, #32]
 800dc5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	4b1b      	ldr	r3, [pc, #108]	@ (800dce4 <TIM_OC5_SetConfig+0x98>)
 800dc78:	4013      	ands	r3, r2
 800dc7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	4313      	orrs	r3, r2
 800dc84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dc8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	041b      	lsls	r3, r3, #16
 800dc94:	693a      	ldr	r2, [r7, #16]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4a12      	ldr	r2, [pc, #72]	@ (800dce8 <TIM_OC5_SetConfig+0x9c>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d003      	beq.n	800dcaa <TIM_OC5_SetConfig+0x5e>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4a11      	ldr	r2, [pc, #68]	@ (800dcec <TIM_OC5_SetConfig+0xa0>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d109      	bne.n	800dcbe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dcb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	695b      	ldr	r3, [r3, #20]
 800dcb6:	021b      	lsls	r3, r3, #8
 800dcb8:	697a      	ldr	r2, [r7, #20]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	697a      	ldr	r2, [r7, #20]
 800dcc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	685a      	ldr	r2, [r3, #4]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	621a      	str	r2, [r3, #32]
}
 800dcd8:	bf00      	nop
 800dcda:	371c      	adds	r7, #28
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	fffeff8f 	.word	0xfffeff8f
 800dce8:	40010000 	.word	0x40010000
 800dcec:	40010400 	.word	0x40010400

0800dcf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a1b      	ldr	r3, [r3, #32]
 800dcfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	4b1c      	ldr	r3, [pc, #112]	@ (800dd8c <TIM_OC6_SetConfig+0x9c>)
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	021b      	lsls	r3, r3, #8
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dd32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	051b      	lsls	r3, r3, #20
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a13      	ldr	r2, [pc, #76]	@ (800dd90 <TIM_OC6_SetConfig+0xa0>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d003      	beq.n	800dd50 <TIM_OC6_SetConfig+0x60>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a12      	ldr	r2, [pc, #72]	@ (800dd94 <TIM_OC6_SetConfig+0xa4>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d109      	bne.n	800dd64 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dd56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	695b      	ldr	r3, [r3, #20]
 800dd5c:	029b      	lsls	r3, r3, #10
 800dd5e:	697a      	ldr	r2, [r7, #20]
 800dd60:	4313      	orrs	r3, r2
 800dd62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	697a      	ldr	r2, [r7, #20]
 800dd68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	621a      	str	r2, [r3, #32]
}
 800dd7e:	bf00      	nop
 800dd80:	371c      	adds	r7, #28
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr
 800dd8a:	bf00      	nop
 800dd8c:	feff8fff 	.word	0xfeff8fff
 800dd90:	40010000 	.word	0x40010000
 800dd94:	40010400 	.word	0x40010400

0800dd98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b087      	sub	sp, #28
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	f023 0201 	bic.w	r2, r3, #1
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	699b      	ldr	r3, [r3, #24]
 800ddba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ddc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	011b      	lsls	r3, r3, #4
 800ddc8:	693a      	ldr	r2, [r7, #16]
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f023 030a 	bic.w	r3, r3, #10
 800ddd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	4313      	orrs	r3, r2
 800dddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	693a      	ldr	r2, [r7, #16]
 800dde2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	697a      	ldr	r2, [r7, #20]
 800dde8:	621a      	str	r2, [r3, #32]
}
 800ddea:	bf00      	nop
 800ddec:	371c      	adds	r7, #28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr

0800ddf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b087      	sub	sp, #28
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	60f8      	str	r0, [r7, #12]
 800ddfe:	60b9      	str	r1, [r7, #8]
 800de00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6a1b      	ldr	r3, [r3, #32]
 800de0c:	f023 0210 	bic.w	r2, r3, #16
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800de20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	031b      	lsls	r3, r3, #12
 800de26:	693a      	ldr	r2, [r7, #16]
 800de28:	4313      	orrs	r3, r2
 800de2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800de32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	011b      	lsls	r3, r3, #4
 800de38:	697a      	ldr	r2, [r7, #20]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	697a      	ldr	r2, [r7, #20]
 800de48:	621a      	str	r2, [r3, #32]
}
 800de4a:	bf00      	nop
 800de4c:	371c      	adds	r7, #28
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de56:	b480      	push	{r7}
 800de58:	b085      	sub	sp, #20
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
 800de5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4313      	orrs	r3, r2
 800de74:	f043 0307 	orr.w	r3, r3, #7
 800de78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	609a      	str	r2, [r3, #8]
}
 800de80:	bf00      	nop
 800de82:	3714      	adds	r7, #20
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b087      	sub	sp, #28
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
 800de98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	021a      	lsls	r2, r3, #8
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	431a      	orrs	r2, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	697a      	ldr	r2, [r7, #20]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	697a      	ldr	r2, [r7, #20]
 800debe:	609a      	str	r2, [r3, #8]
}
 800dec0:	bf00      	nop
 800dec2:	371c      	adds	r7, #28
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d101      	bne.n	800dee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dee0:	2302      	movs	r3, #2
 800dee2:	e06d      	b.n	800dfc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2202      	movs	r2, #2
 800def0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	689b      	ldr	r3, [r3, #8]
 800df02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a30      	ldr	r2, [pc, #192]	@ (800dfcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d004      	beq.n	800df18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a2f      	ldr	r2, [pc, #188]	@ (800dfd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d108      	bne.n	800df2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800df1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	4313      	orrs	r3, r2
 800df28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	4313      	orrs	r3, r2
 800df3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a20      	ldr	r2, [pc, #128]	@ (800dfcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d022      	beq.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df56:	d01d      	beq.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a1d      	ldr	r2, [pc, #116]	@ (800dfd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d018      	beq.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a1c      	ldr	r2, [pc, #112]	@ (800dfd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d013      	beq.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a1a      	ldr	r2, [pc, #104]	@ (800dfdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d00e      	beq.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a15      	ldr	r2, [pc, #84]	@ (800dfd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d009      	beq.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a16      	ldr	r2, [pc, #88]	@ (800dfe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d004      	beq.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a15      	ldr	r2, [pc, #84]	@ (800dfe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d10c      	bne.n	800dfae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	68ba      	ldr	r2, [r7, #8]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3714      	adds	r7, #20
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	40010000 	.word	0x40010000
 800dfd0:	40010400 	.word	0x40010400
 800dfd4:	40000400 	.word	0x40000400
 800dfd8:	40000800 	.word	0x40000800
 800dfdc:	40000c00 	.word	0x40000c00
 800dfe0:	40014000 	.word	0x40014000
 800dfe4:	40001800 	.word	0x40001800

0800dfe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dff2:	2300      	movs	r3, #0
 800dff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d101      	bne.n	800e004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e000:	2302      	movs	r3, #2
 800e002:	e065      	b.n	800e0d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	4313      	orrs	r3, r2
 800e018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	4313      	orrs	r3, r2
 800e026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	4313      	orrs	r3, r2
 800e034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4313      	orrs	r3, r2
 800e042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	4313      	orrs	r3, r2
 800e050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	695b      	ldr	r3, [r3, #20]
 800e05c:	4313      	orrs	r3, r2
 800e05e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e06a:	4313      	orrs	r3, r2
 800e06c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	699b      	ldr	r3, [r3, #24]
 800e078:	041b      	lsls	r3, r3, #16
 800e07a:	4313      	orrs	r3, r2
 800e07c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a16      	ldr	r2, [pc, #88]	@ (800e0dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d004      	beq.n	800e092 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a14      	ldr	r2, [pc, #80]	@ (800e0e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d115      	bne.n	800e0be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e09c:	051b      	lsls	r3, r3, #20
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	69db      	ldr	r3, [r3, #28]
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	6a1b      	ldr	r3, [r3, #32]
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	68fa      	ldr	r2, [r7, #12]
 800e0c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3714      	adds	r7, #20
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr
 800e0dc:	40010000 	.word	0x40010000
 800e0e0:	40010400 	.word	0x40010400

0800e0e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0ec:	bf00      	nop
 800e0ee:	370c      	adds	r7, #12
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr

0800e0f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e114:	bf00      	nop
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	e040      	b.n	800e1b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d106      	bne.n	800e148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7f6 f82e 	bl	80041a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2224      	movs	r2, #36	@ 0x24
 800e14c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f022 0201 	bic.w	r2, r2, #1
 800e15c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e162:	2b00      	cmp	r3, #0
 800e164:	d002      	beq.n	800e16c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 ffb6 	bl	800f0d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 fd4f 	bl	800ec10 <UART_SetConfig>
 800e172:	4603      	mov	r3, r0
 800e174:	2b01      	cmp	r3, #1
 800e176:	d101      	bne.n	800e17c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	e01b      	b.n	800e1b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e18a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	689a      	ldr	r2, [r3, #8]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e19a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f042 0201 	orr.w	r2, r2, #1
 800e1aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f001 f835 	bl	800f21c <UART_CheckIdleState>
 800e1b2:	4603      	mov	r3, r0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08a      	sub	sp, #40	@ 0x28
 800e1c0:	af02      	add	r7, sp, #8
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	603b      	str	r3, [r7, #0]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1d0:	2b20      	cmp	r3, #32
 800e1d2:	d177      	bne.n	800e2c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <HAL_UART_Transmit+0x24>
 800e1da:	88fb      	ldrh	r3, [r7, #6]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e070      	b.n	800e2c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2221      	movs	r2, #33	@ 0x21
 800e1f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e1f2:	f7f6 ff63 	bl	80050bc <HAL_GetTick>
 800e1f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	88fa      	ldrh	r2, [r7, #6]
 800e1fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	88fa      	ldrh	r2, [r7, #6]
 800e204:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e210:	d108      	bne.n	800e224 <HAL_UART_Transmit+0x68>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d104      	bne.n	800e224 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e21a:	2300      	movs	r3, #0
 800e21c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	61bb      	str	r3, [r7, #24]
 800e222:	e003      	b.n	800e22c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e228:	2300      	movs	r3, #0
 800e22a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e22c:	e02f      	b.n	800e28e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	2200      	movs	r2, #0
 800e236:	2180      	movs	r1, #128	@ 0x80
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f001 f846 	bl	800f2ca <UART_WaitOnFlagUntilTimeout>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d004      	beq.n	800e24e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2220      	movs	r2, #32
 800e248:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e24a:	2303      	movs	r3, #3
 800e24c:	e03b      	b.n	800e2c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10b      	bne.n	800e26c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	461a      	mov	r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e262:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	3302      	adds	r3, #2
 800e268:	61bb      	str	r3, [r7, #24]
 800e26a:	e007      	b.n	800e27c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	781a      	ldrb	r2, [r3, #0]
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	3301      	adds	r3, #1
 800e27a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e282:	b29b      	uxth	r3, r3
 800e284:	3b01      	subs	r3, #1
 800e286:	b29a      	uxth	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e294:	b29b      	uxth	r3, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1c9      	bne.n	800e22e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	2140      	movs	r1, #64	@ 0x40
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f001 f810 	bl	800f2ca <UART_WaitOnFlagUntilTimeout>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d004      	beq.n	800e2ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	e005      	b.n	800e2c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2220      	movs	r2, #32
 800e2be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	e000      	b.n	800e2c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e2c4:	2302      	movs	r3, #2
  }
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3720      	adds	r7, #32
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b08a      	sub	sp, #40	@ 0x28
 800e2d2:	af02      	add	r7, sp, #8
 800e2d4:	60f8      	str	r0, [r7, #12]
 800e2d6:	60b9      	str	r1, [r7, #8]
 800e2d8:	603b      	str	r3, [r7, #0]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2e4:	2b20      	cmp	r3, #32
 800e2e6:	f040 80b5 	bne.w	800e454 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d002      	beq.n	800e2f6 <HAL_UART_Receive+0x28>
 800e2f0:	88fb      	ldrh	r3, [r7, #6]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d101      	bne.n	800e2fa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e0ad      	b.n	800e456 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2222      	movs	r2, #34	@ 0x22
 800e306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2200      	movs	r2, #0
 800e30e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e310:	f7f6 fed4 	bl	80050bc <HAL_GetTick>
 800e314:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	88fa      	ldrh	r2, [r7, #6]
 800e31a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	88fa      	ldrh	r2, [r7, #6]
 800e322:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e32e:	d10e      	bne.n	800e34e <HAL_UART_Receive+0x80>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d105      	bne.n	800e344 <HAL_UART_Receive+0x76>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e33e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e342:	e02d      	b.n	800e3a0 <HAL_UART_Receive+0xd2>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	22ff      	movs	r2, #255	@ 0xff
 800e348:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e34c:	e028      	b.n	800e3a0 <HAL_UART_Receive+0xd2>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d10d      	bne.n	800e372 <HAL_UART_Receive+0xa4>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	691b      	ldr	r3, [r3, #16]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d104      	bne.n	800e368 <HAL_UART_Receive+0x9a>
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	22ff      	movs	r2, #255	@ 0xff
 800e362:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e366:	e01b      	b.n	800e3a0 <HAL_UART_Receive+0xd2>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	227f      	movs	r2, #127	@ 0x7f
 800e36c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e370:	e016      	b.n	800e3a0 <HAL_UART_Receive+0xd2>
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e37a:	d10d      	bne.n	800e398 <HAL_UART_Receive+0xca>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d104      	bne.n	800e38e <HAL_UART_Receive+0xc0>
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	227f      	movs	r2, #127	@ 0x7f
 800e388:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e38c:	e008      	b.n	800e3a0 <HAL_UART_Receive+0xd2>
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	223f      	movs	r2, #63	@ 0x3f
 800e392:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e396:	e003      	b.n	800e3a0 <HAL_UART_Receive+0xd2>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e3a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3b0:	d108      	bne.n	800e3c4 <HAL_UART_Receive+0xf6>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d104      	bne.n	800e3c4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	61bb      	str	r3, [r7, #24]
 800e3c2:	e003      	b.n	800e3cc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e3cc:	e036      	b.n	800e43c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	2120      	movs	r1, #32
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f000 ff76 	bl	800f2ca <UART_WaitOnFlagUntilTimeout>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d005      	beq.n	800e3f0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2220      	movs	r2, #32
 800e3e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	e032      	b.n	800e456 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10c      	bne.n	800e410 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	8a7b      	ldrh	r3, [r7, #18]
 800e400:	4013      	ands	r3, r2
 800e402:	b29a      	uxth	r2, r3
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	3302      	adds	r3, #2
 800e40c:	61bb      	str	r3, [r7, #24]
 800e40e:	e00c      	b.n	800e42a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e416:	b2da      	uxtb	r2, r3
 800e418:	8a7b      	ldrh	r3, [r7, #18]
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	4013      	ands	r3, r2
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	3301      	adds	r3, #1
 800e428:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e430:	b29b      	uxth	r3, r3
 800e432:	3b01      	subs	r3, #1
 800e434:	b29a      	uxth	r2, r3
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e442:	b29b      	uxth	r3, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	d1c2      	bne.n	800e3ce <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2220      	movs	r2, #32
 800e44c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800e450:	2300      	movs	r3, #0
 800e452:	e000      	b.n	800e456 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e454:	2302      	movs	r3, #2
  }
}
 800e456:	4618      	mov	r0, r3
 800e458:	3720      	adds	r7, #32
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b08a      	sub	sp, #40	@ 0x28
 800e462:	af00      	add	r7, sp, #0
 800e464:	60f8      	str	r0, [r7, #12]
 800e466:	60b9      	str	r1, [r7, #8]
 800e468:	4613      	mov	r3, r2
 800e46a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e472:	2b20      	cmp	r3, #32
 800e474:	d132      	bne.n	800e4dc <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d002      	beq.n	800e482 <HAL_UART_Receive_DMA+0x24>
 800e47c:	88fb      	ldrh	r3, [r7, #6]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d101      	bne.n	800e486 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e482:	2301      	movs	r3, #1
 800e484:	e02b      	b.n	800e4de <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e496:	2b00      	cmp	r3, #0
 800e498:	d018      	beq.n	800e4cc <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	e853 3f00 	ldrex	r3, [r3]
 800e4a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b8:	623b      	str	r3, [r7, #32]
 800e4ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4bc:	69f9      	ldr	r1, [r7, #28]
 800e4be:	6a3a      	ldr	r2, [r7, #32]
 800e4c0:	e841 2300 	strex	r3, r2, [r1]
 800e4c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1e6      	bne.n	800e49a <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e4cc:	88fb      	ldrh	r3, [r7, #6]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	68b9      	ldr	r1, [r7, #8]
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f000 ff66 	bl	800f3a4 <UART_Start_Receive_DMA>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	e000      	b.n	800e4de <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e4dc:	2302      	movs	r3, #2
  }
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3728      	adds	r7, #40	@ 0x28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b090      	sub	sp, #64	@ 0x40
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e506:	2b80      	cmp	r3, #128	@ 0x80
 800e508:	d139      	bne.n	800e57e <HAL_UART_DMAStop+0x98>
 800e50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e50c:	2b21      	cmp	r3, #33	@ 0x21
 800e50e:	d136      	bne.n	800e57e <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3308      	adds	r3, #8
 800e516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	e853 3f00 	ldrex	r3, [r3]
 800e51e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e526:	637b      	str	r3, [r7, #52]	@ 0x34
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	3308      	adds	r3, #8
 800e52e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e538:	e841 2300 	strex	r3, r2, [r1]
 800e53c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1e5      	bne.n	800e510 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d015      	beq.n	800e578 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e550:	4618      	mov	r0, r3
 800e552:	f7f7 fc35 	bl	8005dc0 <HAL_DMA_Abort>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00d      	beq.n	800e578 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e560:	4618      	mov	r0, r3
 800e562:	f7f7 fe49 	bl	80061f8 <HAL_DMA_GetError>
 800e566:	4603      	mov	r3, r0
 800e568:	2b20      	cmp	r3, #32
 800e56a:	d105      	bne.n	800e578 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2210      	movs	r2, #16
 800e570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e574:	2303      	movs	r3, #3
 800e576:	e044      	b.n	800e602 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 ffb3 	bl	800f4e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e588:	2b40      	cmp	r3, #64	@ 0x40
 800e58a:	d139      	bne.n	800e600 <HAL_UART_DMAStop+0x11a>
 800e58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e58e:	2b22      	cmp	r3, #34	@ 0x22
 800e590:	d136      	bne.n	800e600 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	3308      	adds	r3, #8
 800e598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	e853 3f00 	ldrex	r3, [r3]
 800e5a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5b2:	61ba      	str	r2, [r7, #24]
 800e5b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b6:	6979      	ldr	r1, [r7, #20]
 800e5b8:	69ba      	ldr	r2, [r7, #24]
 800e5ba:	e841 2300 	strex	r3, r2, [r1]
 800e5be:	613b      	str	r3, [r7, #16]
   return(result);
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1e5      	bne.n	800e592 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d015      	beq.n	800e5fa <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7f7 fbf4 	bl	8005dc0 <HAL_DMA_Abort>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00d      	beq.n	800e5fa <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7f7 fe08 	bl	80061f8 <HAL_DMA_GetError>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b20      	cmp	r3, #32
 800e5ec:	d105      	bne.n	800e5fa <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2210      	movs	r2, #16
 800e5f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e5f6:	2303      	movs	r3, #3
 800e5f8:	e003      	b.n	800e602 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 ff98 	bl	800f530 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3740      	adds	r7, #64	@ 0x40
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b0ba      	sub	sp, #232	@ 0xe8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	69db      	ldr	r3, [r3, #28]
 800e61a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e636:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e63a:	4013      	ands	r3, r2
 800e63c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e644:	2b00      	cmp	r3, #0
 800e646:	d115      	bne.n	800e674 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e64c:	f003 0320 	and.w	r3, r3, #32
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00f      	beq.n	800e674 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e658:	f003 0320 	and.w	r3, r3, #32
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d009      	beq.n	800e674 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e664:	2b00      	cmp	r3, #0
 800e666:	f000 82b1 	beq.w	800ebcc <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	4798      	blx	r3
      }
      return;
 800e672:	e2ab      	b.n	800ebcc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 8117 	beq.w	800e8ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e67e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	2b00      	cmp	r3, #0
 800e688:	d106      	bne.n	800e698 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e68a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e68e:	4b85      	ldr	r3, [pc, #532]	@ (800e8a4 <HAL_UART_IRQHandler+0x298>)
 800e690:	4013      	ands	r3, r2
 800e692:	2b00      	cmp	r3, #0
 800e694:	f000 810a 	beq.w	800e8ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e69c:	f003 0301 	and.w	r3, r3, #1
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d011      	beq.n	800e6c8 <HAL_UART_IRQHandler+0xbc>
 800e6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00b      	beq.n	800e6c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6be:	f043 0201 	orr.w	r2, r3, #1
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6cc:	f003 0302 	and.w	r3, r3, #2
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d011      	beq.n	800e6f8 <HAL_UART_IRQHandler+0xec>
 800e6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6d8:	f003 0301 	and.w	r3, r3, #1
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00b      	beq.n	800e6f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2202      	movs	r2, #2
 800e6e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6ee:	f043 0204 	orr.w	r2, r3, #4
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6fc:	f003 0304 	and.w	r3, r3, #4
 800e700:	2b00      	cmp	r3, #0
 800e702:	d011      	beq.n	800e728 <HAL_UART_IRQHandler+0x11c>
 800e704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e708:	f003 0301 	and.w	r3, r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00b      	beq.n	800e728 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2204      	movs	r2, #4
 800e716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e71e:	f043 0202 	orr.w	r2, r3, #2
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e72c:	f003 0308 	and.w	r3, r3, #8
 800e730:	2b00      	cmp	r3, #0
 800e732:	d017      	beq.n	800e764 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e738:	f003 0320 	and.w	r3, r3, #32
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d105      	bne.n	800e74c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e744:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00b      	beq.n	800e764 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2208      	movs	r2, #8
 800e752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e75a:	f043 0208 	orr.w	r2, r3, #8
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d012      	beq.n	800e796 <HAL_UART_IRQHandler+0x18a>
 800e770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e774:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d00c      	beq.n	800e796 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e78c:	f043 0220 	orr.w	r2, r3, #32
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 8217 	beq.w	800ebd0 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7a6:	f003 0320 	and.w	r3, r3, #32
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00d      	beq.n	800e7ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7b2:	f003 0320 	and.w	r3, r3, #32
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d007      	beq.n	800e7ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d003      	beq.n	800e7ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7de:	2b40      	cmp	r3, #64	@ 0x40
 800e7e0:	d005      	beq.n	800e7ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d04f      	beq.n	800e88e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f000 fe9e 	bl	800f530 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	689b      	ldr	r3, [r3, #8]
 800e7fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7fe:	2b40      	cmp	r3, #64	@ 0x40
 800e800:	d141      	bne.n	800e886 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3308      	adds	r3, #8
 800e808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e81c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3308      	adds	r3, #8
 800e82a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e82e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e832:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e83a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e83e:	e841 2300 	strex	r3, r2, [r1]
 800e842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1d9      	bne.n	800e802 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e852:	2b00      	cmp	r3, #0
 800e854:	d013      	beq.n	800e87e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e85a:	4a13      	ldr	r2, [pc, #76]	@ (800e8a8 <HAL_UART_IRQHandler+0x29c>)
 800e85c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e862:	4618      	mov	r0, r3
 800e864:	f7f7 fb1c 	bl	8005ea0 <HAL_DMA_Abort_IT>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d017      	beq.n	800e89e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e878:	4610      	mov	r0, r2
 800e87a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e87c:	e00f      	b.n	800e89e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7f2 fd82 	bl	8001388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e884:	e00b      	b.n	800e89e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7f2 fd7e 	bl	8001388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e88c:	e007      	b.n	800e89e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7f2 fd7a 	bl	8001388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e89c:	e198      	b.n	800ebd0 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e89e:	bf00      	nop
    return;
 800e8a0:	e196      	b.n	800ebd0 <HAL_UART_IRQHandler+0x5c4>
 800e8a2:	bf00      	nop
 800e8a4:	04000120 	.word	0x04000120
 800e8a8:	0800f847 	.word	0x0800f847

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	f040 8166 	bne.w	800eb82 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e8b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8ba:	f003 0310 	and.w	r3, r3, #16
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f000 815f 	beq.w	800eb82 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e8c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8c8:	f003 0310 	and.w	r3, r3, #16
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f000 8158 	beq.w	800eb82 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2210      	movs	r2, #16
 800e8d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	689b      	ldr	r3, [r3, #8]
 800e8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8e4:	2b40      	cmp	r3, #64	@ 0x40
 800e8e6:	f040 80d0 	bne.w	800ea8a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e8f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f000 80ab 	beq.w	800ea56 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e90a:	429a      	cmp	r2, r3
 800e90c:	f080 80a3 	bcs.w	800ea56 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e916:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e91e:	69db      	ldr	r3, [r3, #28]
 800e920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e924:	f000 8086 	beq.w	800ea34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e930:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e934:	e853 3f00 	ldrex	r3, [r3]
 800e938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e93c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	461a      	mov	r2, r3
 800e94e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e956:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e95e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e962:	e841 2300 	strex	r3, r2, [r1]
 800e966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e96a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1da      	bne.n	800e928 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	3308      	adds	r3, #8
 800e978:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e97c:	e853 3f00 	ldrex	r3, [r3]
 800e980:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e984:	f023 0301 	bic.w	r3, r3, #1
 800e988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	3308      	adds	r3, #8
 800e992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e996:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e99a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e99e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e9a2:	e841 2300 	strex	r3, r2, [r1]
 800e9a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e9a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1e1      	bne.n	800e972 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3308      	adds	r3, #8
 800e9b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9b8:	e853 3f00 	ldrex	r3, [r3]
 800e9bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e9be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	3308      	adds	r3, #8
 800e9ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e9d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e9d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e9d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9da:	e841 2300 	strex	r3, r2, [r1]
 800e9de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e9e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d1e3      	bne.n	800e9ae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2220      	movs	r2, #32
 800e9ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9fc:	e853 3f00 	ldrex	r3, [r3]
 800ea00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ea02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea04:	f023 0310 	bic.w	r3, r3, #16
 800ea08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	461a      	mov	r2, r3
 800ea12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea1e:	e841 2300 	strex	r3, r2, [r1]
 800ea22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1e4      	bne.n	800e9f4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7f7 f9c6 	bl	8005dc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2202      	movs	r2, #2
 800ea38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 f8d2 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ea54:	e0be      	b.n	800ebd4 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ea60:	429a      	cmp	r2, r3
 800ea62:	f040 80b7 	bne.w	800ebd4 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea6a:	69db      	ldr	r3, [r3, #28]
 800ea6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea70:	f040 80b0 	bne.w	800ebd4 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2202      	movs	r2, #2
 800ea78:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f8b8 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
      return;
 800ea88:	e0a4      	b.n	800ebd4 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	f000 8096 	beq.w	800ebd8 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800eaac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f000 8091 	beq.w	800ebd8 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eabe:	e853 3f00 	ldrex	r3, [r3]
 800eac2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eaca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	461a      	mov	r2, r3
 800ead4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ead8:	647b      	str	r3, [r7, #68]	@ 0x44
 800eada:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eadc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eae0:	e841 2300 	strex	r3, r2, [r1]
 800eae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1e4      	bne.n	800eab6 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	3308      	adds	r3, #8
 800eaf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf6:	e853 3f00 	ldrex	r3, [r3]
 800eafa:	623b      	str	r3, [r7, #32]
   return(result);
 800eafc:	6a3b      	ldr	r3, [r7, #32]
 800eafe:	f023 0301 	bic.w	r3, r3, #1
 800eb02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3308      	adds	r3, #8
 800eb0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800eb10:	633a      	str	r2, [r7, #48]	@ 0x30
 800eb12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb18:	e841 2300 	strex	r3, r2, [r1]
 800eb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1e3      	bne.n	800eaec <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2220      	movs	r2, #32
 800eb28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	e853 3f00 	ldrex	r3, [r3]
 800eb44:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f023 0310 	bic.w	r3, r3, #16
 800eb4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	461a      	mov	r2, r3
 800eb56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eb5a:	61fb      	str	r3, [r7, #28]
 800eb5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5e:	69b9      	ldr	r1, [r7, #24]
 800eb60:	69fa      	ldr	r2, [r7, #28]
 800eb62:	e841 2300 	strex	r3, r2, [r1]
 800eb66:	617b      	str	r3, [r7, #20]
   return(result);
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d1e4      	bne.n	800eb38 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2202      	movs	r2, #2
 800eb72:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb78:	4619      	mov	r1, r3
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 f83c 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb80:	e02a      	b.n	800ebd8 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800eb82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d00e      	beq.n	800ebac <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800eb8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d008      	beq.n	800ebac <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d01c      	beq.n	800ebdc <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	4798      	blx	r3
    }
    return;
 800ebaa:	e017      	b.n	800ebdc <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ebac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d012      	beq.n	800ebde <HAL_UART_IRQHandler+0x5d2>
 800ebb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00c      	beq.n	800ebde <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 fe50 	bl	800f86a <UART_EndTransmit_IT>
    return;
 800ebca:	e008      	b.n	800ebde <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebcc:	bf00      	nop
 800ebce:	e006      	b.n	800ebde <HAL_UART_IRQHandler+0x5d2>
    return;
 800ebd0:	bf00      	nop
 800ebd2:	e004      	b.n	800ebde <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebd4:	bf00      	nop
 800ebd6:	e002      	b.n	800ebde <HAL_UART_IRQHandler+0x5d2>
      return;
 800ebd8:	bf00      	nop
 800ebda:	e000      	b.n	800ebde <HAL_UART_IRQHandler+0x5d2>
    return;
 800ebdc:	bf00      	nop
  }

}
 800ebde:	37e8      	adds	r7, #232	@ 0xe8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ec04:	bf00      	nop
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b088      	sub	sp, #32
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	689a      	ldr	r2, [r3, #8]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	431a      	orrs	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	695b      	ldr	r3, [r3, #20]
 800ec2a:	431a      	orrs	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	69db      	ldr	r3, [r3, #28]
 800ec30:	4313      	orrs	r3, r2
 800ec32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	4ba6      	ldr	r3, [pc, #664]	@ (800eed4 <UART_SetConfig+0x2c4>)
 800ec3c:	4013      	ands	r3, r2
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	6812      	ldr	r2, [r2, #0]
 800ec42:	6979      	ldr	r1, [r7, #20]
 800ec44:	430b      	orrs	r3, r1
 800ec46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	68da      	ldr	r2, [r3, #12]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	430a      	orrs	r2, r1
 800ec5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	699b      	ldr	r3, [r3, #24]
 800ec62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6a1b      	ldr	r3, [r3, #32]
 800ec68:	697a      	ldr	r2, [r7, #20]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	697a      	ldr	r2, [r7, #20]
 800ec7e:	430a      	orrs	r2, r1
 800ec80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4a94      	ldr	r2, [pc, #592]	@ (800eed8 <UART_SetConfig+0x2c8>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d120      	bne.n	800ecce <UART_SetConfig+0xbe>
 800ec8c:	4b93      	ldr	r3, [pc, #588]	@ (800eedc <UART_SetConfig+0x2cc>)
 800ec8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec92:	f003 0303 	and.w	r3, r3, #3
 800ec96:	2b03      	cmp	r3, #3
 800ec98:	d816      	bhi.n	800ecc8 <UART_SetConfig+0xb8>
 800ec9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eca0 <UART_SetConfig+0x90>)
 800ec9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca0:	0800ecb1 	.word	0x0800ecb1
 800eca4:	0800ecbd 	.word	0x0800ecbd
 800eca8:	0800ecb7 	.word	0x0800ecb7
 800ecac:	0800ecc3 	.word	0x0800ecc3
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	77fb      	strb	r3, [r7, #31]
 800ecb4:	e150      	b.n	800ef58 <UART_SetConfig+0x348>
 800ecb6:	2302      	movs	r3, #2
 800ecb8:	77fb      	strb	r3, [r7, #31]
 800ecba:	e14d      	b.n	800ef58 <UART_SetConfig+0x348>
 800ecbc:	2304      	movs	r3, #4
 800ecbe:	77fb      	strb	r3, [r7, #31]
 800ecc0:	e14a      	b.n	800ef58 <UART_SetConfig+0x348>
 800ecc2:	2308      	movs	r3, #8
 800ecc4:	77fb      	strb	r3, [r7, #31]
 800ecc6:	e147      	b.n	800ef58 <UART_SetConfig+0x348>
 800ecc8:	2310      	movs	r3, #16
 800ecca:	77fb      	strb	r3, [r7, #31]
 800eccc:	e144      	b.n	800ef58 <UART_SetConfig+0x348>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a83      	ldr	r2, [pc, #524]	@ (800eee0 <UART_SetConfig+0x2d0>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d132      	bne.n	800ed3e <UART_SetConfig+0x12e>
 800ecd8:	4b80      	ldr	r3, [pc, #512]	@ (800eedc <UART_SetConfig+0x2cc>)
 800ecda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecde:	f003 030c 	and.w	r3, r3, #12
 800ece2:	2b0c      	cmp	r3, #12
 800ece4:	d828      	bhi.n	800ed38 <UART_SetConfig+0x128>
 800ece6:	a201      	add	r2, pc, #4	@ (adr r2, 800ecec <UART_SetConfig+0xdc>)
 800ece8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecec:	0800ed21 	.word	0x0800ed21
 800ecf0:	0800ed39 	.word	0x0800ed39
 800ecf4:	0800ed39 	.word	0x0800ed39
 800ecf8:	0800ed39 	.word	0x0800ed39
 800ecfc:	0800ed2d 	.word	0x0800ed2d
 800ed00:	0800ed39 	.word	0x0800ed39
 800ed04:	0800ed39 	.word	0x0800ed39
 800ed08:	0800ed39 	.word	0x0800ed39
 800ed0c:	0800ed27 	.word	0x0800ed27
 800ed10:	0800ed39 	.word	0x0800ed39
 800ed14:	0800ed39 	.word	0x0800ed39
 800ed18:	0800ed39 	.word	0x0800ed39
 800ed1c:	0800ed33 	.word	0x0800ed33
 800ed20:	2300      	movs	r3, #0
 800ed22:	77fb      	strb	r3, [r7, #31]
 800ed24:	e118      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed26:	2302      	movs	r3, #2
 800ed28:	77fb      	strb	r3, [r7, #31]
 800ed2a:	e115      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed2c:	2304      	movs	r3, #4
 800ed2e:	77fb      	strb	r3, [r7, #31]
 800ed30:	e112      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed32:	2308      	movs	r3, #8
 800ed34:	77fb      	strb	r3, [r7, #31]
 800ed36:	e10f      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed38:	2310      	movs	r3, #16
 800ed3a:	77fb      	strb	r3, [r7, #31]
 800ed3c:	e10c      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4a68      	ldr	r2, [pc, #416]	@ (800eee4 <UART_SetConfig+0x2d4>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d120      	bne.n	800ed8a <UART_SetConfig+0x17a>
 800ed48:	4b64      	ldr	r3, [pc, #400]	@ (800eedc <UART_SetConfig+0x2cc>)
 800ed4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ed52:	2b30      	cmp	r3, #48	@ 0x30
 800ed54:	d013      	beq.n	800ed7e <UART_SetConfig+0x16e>
 800ed56:	2b30      	cmp	r3, #48	@ 0x30
 800ed58:	d814      	bhi.n	800ed84 <UART_SetConfig+0x174>
 800ed5a:	2b20      	cmp	r3, #32
 800ed5c:	d009      	beq.n	800ed72 <UART_SetConfig+0x162>
 800ed5e:	2b20      	cmp	r3, #32
 800ed60:	d810      	bhi.n	800ed84 <UART_SetConfig+0x174>
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d002      	beq.n	800ed6c <UART_SetConfig+0x15c>
 800ed66:	2b10      	cmp	r3, #16
 800ed68:	d006      	beq.n	800ed78 <UART_SetConfig+0x168>
 800ed6a:	e00b      	b.n	800ed84 <UART_SetConfig+0x174>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	77fb      	strb	r3, [r7, #31]
 800ed70:	e0f2      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed72:	2302      	movs	r3, #2
 800ed74:	77fb      	strb	r3, [r7, #31]
 800ed76:	e0ef      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed78:	2304      	movs	r3, #4
 800ed7a:	77fb      	strb	r3, [r7, #31]
 800ed7c:	e0ec      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed7e:	2308      	movs	r3, #8
 800ed80:	77fb      	strb	r3, [r7, #31]
 800ed82:	e0e9      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed84:	2310      	movs	r3, #16
 800ed86:	77fb      	strb	r3, [r7, #31]
 800ed88:	e0e6      	b.n	800ef58 <UART_SetConfig+0x348>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a56      	ldr	r2, [pc, #344]	@ (800eee8 <UART_SetConfig+0x2d8>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d120      	bne.n	800edd6 <UART_SetConfig+0x1c6>
 800ed94:	4b51      	ldr	r3, [pc, #324]	@ (800eedc <UART_SetConfig+0x2cc>)
 800ed96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ed9e:	2bc0      	cmp	r3, #192	@ 0xc0
 800eda0:	d013      	beq.n	800edca <UART_SetConfig+0x1ba>
 800eda2:	2bc0      	cmp	r3, #192	@ 0xc0
 800eda4:	d814      	bhi.n	800edd0 <UART_SetConfig+0x1c0>
 800eda6:	2b80      	cmp	r3, #128	@ 0x80
 800eda8:	d009      	beq.n	800edbe <UART_SetConfig+0x1ae>
 800edaa:	2b80      	cmp	r3, #128	@ 0x80
 800edac:	d810      	bhi.n	800edd0 <UART_SetConfig+0x1c0>
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d002      	beq.n	800edb8 <UART_SetConfig+0x1a8>
 800edb2:	2b40      	cmp	r3, #64	@ 0x40
 800edb4:	d006      	beq.n	800edc4 <UART_SetConfig+0x1b4>
 800edb6:	e00b      	b.n	800edd0 <UART_SetConfig+0x1c0>
 800edb8:	2300      	movs	r3, #0
 800edba:	77fb      	strb	r3, [r7, #31]
 800edbc:	e0cc      	b.n	800ef58 <UART_SetConfig+0x348>
 800edbe:	2302      	movs	r3, #2
 800edc0:	77fb      	strb	r3, [r7, #31]
 800edc2:	e0c9      	b.n	800ef58 <UART_SetConfig+0x348>
 800edc4:	2304      	movs	r3, #4
 800edc6:	77fb      	strb	r3, [r7, #31]
 800edc8:	e0c6      	b.n	800ef58 <UART_SetConfig+0x348>
 800edca:	2308      	movs	r3, #8
 800edcc:	77fb      	strb	r3, [r7, #31]
 800edce:	e0c3      	b.n	800ef58 <UART_SetConfig+0x348>
 800edd0:	2310      	movs	r3, #16
 800edd2:	77fb      	strb	r3, [r7, #31]
 800edd4:	e0c0      	b.n	800ef58 <UART_SetConfig+0x348>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a44      	ldr	r2, [pc, #272]	@ (800eeec <UART_SetConfig+0x2dc>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d125      	bne.n	800ee2c <UART_SetConfig+0x21c>
 800ede0:	4b3e      	ldr	r3, [pc, #248]	@ (800eedc <UART_SetConfig+0x2cc>)
 800ede2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ede6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800edea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800edee:	d017      	beq.n	800ee20 <UART_SetConfig+0x210>
 800edf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800edf4:	d817      	bhi.n	800ee26 <UART_SetConfig+0x216>
 800edf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800edfa:	d00b      	beq.n	800ee14 <UART_SetConfig+0x204>
 800edfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee00:	d811      	bhi.n	800ee26 <UART_SetConfig+0x216>
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d003      	beq.n	800ee0e <UART_SetConfig+0x1fe>
 800ee06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee0a:	d006      	beq.n	800ee1a <UART_SetConfig+0x20a>
 800ee0c:	e00b      	b.n	800ee26 <UART_SetConfig+0x216>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	77fb      	strb	r3, [r7, #31]
 800ee12:	e0a1      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee14:	2302      	movs	r3, #2
 800ee16:	77fb      	strb	r3, [r7, #31]
 800ee18:	e09e      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee1a:	2304      	movs	r3, #4
 800ee1c:	77fb      	strb	r3, [r7, #31]
 800ee1e:	e09b      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee20:	2308      	movs	r3, #8
 800ee22:	77fb      	strb	r3, [r7, #31]
 800ee24:	e098      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee26:	2310      	movs	r3, #16
 800ee28:	77fb      	strb	r3, [r7, #31]
 800ee2a:	e095      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a2f      	ldr	r2, [pc, #188]	@ (800eef0 <UART_SetConfig+0x2e0>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d125      	bne.n	800ee82 <UART_SetConfig+0x272>
 800ee36:	4b29      	ldr	r3, [pc, #164]	@ (800eedc <UART_SetConfig+0x2cc>)
 800ee38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ee40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee44:	d017      	beq.n	800ee76 <UART_SetConfig+0x266>
 800ee46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee4a:	d817      	bhi.n	800ee7c <UART_SetConfig+0x26c>
 800ee4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee50:	d00b      	beq.n	800ee6a <UART_SetConfig+0x25a>
 800ee52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee56:	d811      	bhi.n	800ee7c <UART_SetConfig+0x26c>
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d003      	beq.n	800ee64 <UART_SetConfig+0x254>
 800ee5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee60:	d006      	beq.n	800ee70 <UART_SetConfig+0x260>
 800ee62:	e00b      	b.n	800ee7c <UART_SetConfig+0x26c>
 800ee64:	2301      	movs	r3, #1
 800ee66:	77fb      	strb	r3, [r7, #31]
 800ee68:	e076      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee6a:	2302      	movs	r3, #2
 800ee6c:	77fb      	strb	r3, [r7, #31]
 800ee6e:	e073      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee70:	2304      	movs	r3, #4
 800ee72:	77fb      	strb	r3, [r7, #31]
 800ee74:	e070      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee76:	2308      	movs	r3, #8
 800ee78:	77fb      	strb	r3, [r7, #31]
 800ee7a:	e06d      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee7c:	2310      	movs	r3, #16
 800ee7e:	77fb      	strb	r3, [r7, #31]
 800ee80:	e06a      	b.n	800ef58 <UART_SetConfig+0x348>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a1b      	ldr	r2, [pc, #108]	@ (800eef4 <UART_SetConfig+0x2e4>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d138      	bne.n	800eefe <UART_SetConfig+0x2ee>
 800ee8c:	4b13      	ldr	r3, [pc, #76]	@ (800eedc <UART_SetConfig+0x2cc>)
 800ee8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ee96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ee9a:	d017      	beq.n	800eecc <UART_SetConfig+0x2bc>
 800ee9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eea0:	d82a      	bhi.n	800eef8 <UART_SetConfig+0x2e8>
 800eea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eea6:	d00b      	beq.n	800eec0 <UART_SetConfig+0x2b0>
 800eea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eeac:	d824      	bhi.n	800eef8 <UART_SetConfig+0x2e8>
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <UART_SetConfig+0x2aa>
 800eeb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eeb6:	d006      	beq.n	800eec6 <UART_SetConfig+0x2b6>
 800eeb8:	e01e      	b.n	800eef8 <UART_SetConfig+0x2e8>
 800eeba:	2300      	movs	r3, #0
 800eebc:	77fb      	strb	r3, [r7, #31]
 800eebe:	e04b      	b.n	800ef58 <UART_SetConfig+0x348>
 800eec0:	2302      	movs	r3, #2
 800eec2:	77fb      	strb	r3, [r7, #31]
 800eec4:	e048      	b.n	800ef58 <UART_SetConfig+0x348>
 800eec6:	2304      	movs	r3, #4
 800eec8:	77fb      	strb	r3, [r7, #31]
 800eeca:	e045      	b.n	800ef58 <UART_SetConfig+0x348>
 800eecc:	2308      	movs	r3, #8
 800eece:	77fb      	strb	r3, [r7, #31]
 800eed0:	e042      	b.n	800ef58 <UART_SetConfig+0x348>
 800eed2:	bf00      	nop
 800eed4:	efff69f3 	.word	0xefff69f3
 800eed8:	40011000 	.word	0x40011000
 800eedc:	40023800 	.word	0x40023800
 800eee0:	40004400 	.word	0x40004400
 800eee4:	40004800 	.word	0x40004800
 800eee8:	40004c00 	.word	0x40004c00
 800eeec:	40005000 	.word	0x40005000
 800eef0:	40011400 	.word	0x40011400
 800eef4:	40007800 	.word	0x40007800
 800eef8:	2310      	movs	r3, #16
 800eefa:	77fb      	strb	r3, [r7, #31]
 800eefc:	e02c      	b.n	800ef58 <UART_SetConfig+0x348>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4a72      	ldr	r2, [pc, #456]	@ (800f0cc <UART_SetConfig+0x4bc>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d125      	bne.n	800ef54 <UART_SetConfig+0x344>
 800ef08:	4b71      	ldr	r3, [pc, #452]	@ (800f0d0 <UART_SetConfig+0x4c0>)
 800ef0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ef12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ef16:	d017      	beq.n	800ef48 <UART_SetConfig+0x338>
 800ef18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ef1c:	d817      	bhi.n	800ef4e <UART_SetConfig+0x33e>
 800ef1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef22:	d00b      	beq.n	800ef3c <UART_SetConfig+0x32c>
 800ef24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef28:	d811      	bhi.n	800ef4e <UART_SetConfig+0x33e>
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d003      	beq.n	800ef36 <UART_SetConfig+0x326>
 800ef2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ef32:	d006      	beq.n	800ef42 <UART_SetConfig+0x332>
 800ef34:	e00b      	b.n	800ef4e <UART_SetConfig+0x33e>
 800ef36:	2300      	movs	r3, #0
 800ef38:	77fb      	strb	r3, [r7, #31]
 800ef3a:	e00d      	b.n	800ef58 <UART_SetConfig+0x348>
 800ef3c:	2302      	movs	r3, #2
 800ef3e:	77fb      	strb	r3, [r7, #31]
 800ef40:	e00a      	b.n	800ef58 <UART_SetConfig+0x348>
 800ef42:	2304      	movs	r3, #4
 800ef44:	77fb      	strb	r3, [r7, #31]
 800ef46:	e007      	b.n	800ef58 <UART_SetConfig+0x348>
 800ef48:	2308      	movs	r3, #8
 800ef4a:	77fb      	strb	r3, [r7, #31]
 800ef4c:	e004      	b.n	800ef58 <UART_SetConfig+0x348>
 800ef4e:	2310      	movs	r3, #16
 800ef50:	77fb      	strb	r3, [r7, #31]
 800ef52:	e001      	b.n	800ef58 <UART_SetConfig+0x348>
 800ef54:	2310      	movs	r3, #16
 800ef56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	69db      	ldr	r3, [r3, #28]
 800ef5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef60:	d15b      	bne.n	800f01a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ef62:	7ffb      	ldrb	r3, [r7, #31]
 800ef64:	2b08      	cmp	r3, #8
 800ef66:	d828      	bhi.n	800efba <UART_SetConfig+0x3aa>
 800ef68:	a201      	add	r2, pc, #4	@ (adr r2, 800ef70 <UART_SetConfig+0x360>)
 800ef6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef6e:	bf00      	nop
 800ef70:	0800ef95 	.word	0x0800ef95
 800ef74:	0800ef9d 	.word	0x0800ef9d
 800ef78:	0800efa5 	.word	0x0800efa5
 800ef7c:	0800efbb 	.word	0x0800efbb
 800ef80:	0800efab 	.word	0x0800efab
 800ef84:	0800efbb 	.word	0x0800efbb
 800ef88:	0800efbb 	.word	0x0800efbb
 800ef8c:	0800efbb 	.word	0x0800efbb
 800ef90:	0800efb3 	.word	0x0800efb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef94:	f7fb fc1a 	bl	800a7cc <HAL_RCC_GetPCLK1Freq>
 800ef98:	61b8      	str	r0, [r7, #24]
        break;
 800ef9a:	e013      	b.n	800efc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef9c:	f7fb fc2a 	bl	800a7f4 <HAL_RCC_GetPCLK2Freq>
 800efa0:	61b8      	str	r0, [r7, #24]
        break;
 800efa2:	e00f      	b.n	800efc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800efa4:	4b4b      	ldr	r3, [pc, #300]	@ (800f0d4 <UART_SetConfig+0x4c4>)
 800efa6:	61bb      	str	r3, [r7, #24]
        break;
 800efa8:	e00c      	b.n	800efc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800efaa:	f7fb fb3d 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 800efae:	61b8      	str	r0, [r7, #24]
        break;
 800efb0:	e008      	b.n	800efc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800efb6:	61bb      	str	r3, [r7, #24]
        break;
 800efb8:	e004      	b.n	800efc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800efba:	2300      	movs	r3, #0
 800efbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800efbe:	2301      	movs	r3, #1
 800efc0:	77bb      	strb	r3, [r7, #30]
        break;
 800efc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d074      	beq.n	800f0b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	005a      	lsls	r2, r3, #1
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	085b      	lsrs	r3, r3, #1
 800efd4:	441a      	add	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	fbb2 f3f3 	udiv	r3, r2, r3
 800efde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	2b0f      	cmp	r3, #15
 800efe4:	d916      	bls.n	800f014 <UART_SetConfig+0x404>
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efec:	d212      	bcs.n	800f014 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	f023 030f 	bic.w	r3, r3, #15
 800eff6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	085b      	lsrs	r3, r3, #1
 800effc:	b29b      	uxth	r3, r3
 800effe:	f003 0307 	and.w	r3, r3, #7
 800f002:	b29a      	uxth	r2, r3
 800f004:	89fb      	ldrh	r3, [r7, #14]
 800f006:	4313      	orrs	r3, r2
 800f008:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	89fa      	ldrh	r2, [r7, #14]
 800f010:	60da      	str	r2, [r3, #12]
 800f012:	e04f      	b.n	800f0b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f014:	2301      	movs	r3, #1
 800f016:	77bb      	strb	r3, [r7, #30]
 800f018:	e04c      	b.n	800f0b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f01a:	7ffb      	ldrb	r3, [r7, #31]
 800f01c:	2b08      	cmp	r3, #8
 800f01e:	d828      	bhi.n	800f072 <UART_SetConfig+0x462>
 800f020:	a201      	add	r2, pc, #4	@ (adr r2, 800f028 <UART_SetConfig+0x418>)
 800f022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f026:	bf00      	nop
 800f028:	0800f04d 	.word	0x0800f04d
 800f02c:	0800f055 	.word	0x0800f055
 800f030:	0800f05d 	.word	0x0800f05d
 800f034:	0800f073 	.word	0x0800f073
 800f038:	0800f063 	.word	0x0800f063
 800f03c:	0800f073 	.word	0x0800f073
 800f040:	0800f073 	.word	0x0800f073
 800f044:	0800f073 	.word	0x0800f073
 800f048:	0800f06b 	.word	0x0800f06b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f04c:	f7fb fbbe 	bl	800a7cc <HAL_RCC_GetPCLK1Freq>
 800f050:	61b8      	str	r0, [r7, #24]
        break;
 800f052:	e013      	b.n	800f07c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f054:	f7fb fbce 	bl	800a7f4 <HAL_RCC_GetPCLK2Freq>
 800f058:	61b8      	str	r0, [r7, #24]
        break;
 800f05a:	e00f      	b.n	800f07c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f05c:	4b1d      	ldr	r3, [pc, #116]	@ (800f0d4 <UART_SetConfig+0x4c4>)
 800f05e:	61bb      	str	r3, [r7, #24]
        break;
 800f060:	e00c      	b.n	800f07c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f062:	f7fb fae1 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 800f066:	61b8      	str	r0, [r7, #24]
        break;
 800f068:	e008      	b.n	800f07c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f06a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f06e:	61bb      	str	r3, [r7, #24]
        break;
 800f070:	e004      	b.n	800f07c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f072:	2300      	movs	r3, #0
 800f074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f076:	2301      	movs	r3, #1
 800f078:	77bb      	strb	r3, [r7, #30]
        break;
 800f07a:	bf00      	nop
    }

    if (pclk != 0U)
 800f07c:	69bb      	ldr	r3, [r7, #24]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d018      	beq.n	800f0b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	085a      	lsrs	r2, r3, #1
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	441a      	add	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	fbb2 f3f3 	udiv	r3, r2, r3
 800f094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	2b0f      	cmp	r3, #15
 800f09a:	d909      	bls.n	800f0b0 <UART_SetConfig+0x4a0>
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0a2:	d205      	bcs.n	800f0b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	60da      	str	r2, [r3, #12]
 800f0ae:	e001      	b.n	800f0b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f0c0:	7fbb      	ldrb	r3, [r7, #30]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3720      	adds	r7, #32
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	40007c00 	.word	0x40007c00
 800f0d0:	40023800 	.word	0x40023800
 800f0d4:	00f42400 	.word	0x00f42400

0800f0d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b083      	sub	sp, #12
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0e4:	f003 0308 	and.w	r3, r3, #8
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00a      	beq.n	800f102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	430a      	orrs	r2, r1
 800f100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f106:	f003 0301 	and.w	r3, r3, #1
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00a      	beq.n	800f124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	430a      	orrs	r2, r1
 800f122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f128:	f003 0302 	and.w	r3, r3, #2
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00a      	beq.n	800f146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f14a:	f003 0304 	and.w	r3, r3, #4
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00a      	beq.n	800f168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	430a      	orrs	r2, r1
 800f166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f16c:	f003 0310 	and.w	r3, r3, #16
 800f170:	2b00      	cmp	r3, #0
 800f172:	d00a      	beq.n	800f18a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	430a      	orrs	r2, r1
 800f188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f18e:	f003 0320 	and.w	r3, r3, #32
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00a      	beq.n	800f1ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	430a      	orrs	r2, r1
 800f1aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d01a      	beq.n	800f1ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	430a      	orrs	r2, r1
 800f1cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1d6:	d10a      	bne.n	800f1ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	430a      	orrs	r2, r1
 800f1ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00a      	beq.n	800f210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	430a      	orrs	r2, r1
 800f20e:	605a      	str	r2, [r3, #4]
  }
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b08c      	sub	sp, #48	@ 0x30
 800f220:	af02      	add	r7, sp, #8
 800f222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f22c:	f7f5 ff46 	bl	80050bc <HAL_GetTick>
 800f230:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f003 0308 	and.w	r3, r3, #8
 800f23c:	2b08      	cmp	r3, #8
 800f23e:	d12e      	bne.n	800f29e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f240:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f248:	2200      	movs	r2, #0
 800f24a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 f83b 	bl	800f2ca <UART_WaitOnFlagUntilTimeout>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d021      	beq.n	800f29e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	e853 3f00 	ldrex	r3, [r3]
 800f266:	60fb      	str	r3, [r7, #12]
   return(result);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f26e:	623b      	str	r3, [r7, #32]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	461a      	mov	r2, r3
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	61fb      	str	r3, [r7, #28]
 800f27a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f27c:	69b9      	ldr	r1, [r7, #24]
 800f27e:	69fa      	ldr	r2, [r7, #28]
 800f280:	e841 2300 	strex	r3, r2, [r1]
 800f284:	617b      	str	r3, [r7, #20]
   return(result);
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1e6      	bne.n	800f25a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2220      	movs	r2, #32
 800f290:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f29a:	2303      	movs	r3, #3
 800f29c:	e011      	b.n	800f2c2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2220      	movs	r2, #32
 800f2a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2220      	movs	r2, #32
 800f2a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3728      	adds	r7, #40	@ 0x28
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b084      	sub	sp, #16
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	60f8      	str	r0, [r7, #12]
 800f2d2:	60b9      	str	r1, [r7, #8]
 800f2d4:	603b      	str	r3, [r7, #0]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2da:	e04f      	b.n	800f37c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e2:	d04b      	beq.n	800f37c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2e4:	f7f5 feea 	bl	80050bc <HAL_GetTick>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	69ba      	ldr	r2, [r7, #24]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d302      	bcc.n	800f2fa <UART_WaitOnFlagUntilTimeout+0x30>
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d101      	bne.n	800f2fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f2fa:	2303      	movs	r3, #3
 800f2fc:	e04e      	b.n	800f39c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f003 0304 	and.w	r3, r3, #4
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d037      	beq.n	800f37c <UART_WaitOnFlagUntilTimeout+0xb2>
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	2b80      	cmp	r3, #128	@ 0x80
 800f310:	d034      	beq.n	800f37c <UART_WaitOnFlagUntilTimeout+0xb2>
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	2b40      	cmp	r3, #64	@ 0x40
 800f316:	d031      	beq.n	800f37c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	69db      	ldr	r3, [r3, #28]
 800f31e:	f003 0308 	and.w	r3, r3, #8
 800f322:	2b08      	cmp	r3, #8
 800f324:	d110      	bne.n	800f348 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2208      	movs	r2, #8
 800f32c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f000 f8fe 	bl	800f530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2208      	movs	r2, #8
 800f338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2200      	movs	r2, #0
 800f340:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f344:	2301      	movs	r3, #1
 800f346:	e029      	b.n	800f39c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	69db      	ldr	r3, [r3, #28]
 800f34e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f356:	d111      	bne.n	800f37c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f360:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f000 f8e4 	bl	800f530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2220      	movs	r2, #32
 800f36c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f378:	2303      	movs	r3, #3
 800f37a:	e00f      	b.n	800f39c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	69da      	ldr	r2, [r3, #28]
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	4013      	ands	r3, r2
 800f386:	68ba      	ldr	r2, [r7, #8]
 800f388:	429a      	cmp	r2, r3
 800f38a:	bf0c      	ite	eq
 800f38c:	2301      	moveq	r3, #1
 800f38e:	2300      	movne	r3, #0
 800f390:	b2db      	uxtb	r3, r3
 800f392:	461a      	mov	r2, r3
 800f394:	79fb      	ldrb	r3, [r7, #7]
 800f396:	429a      	cmp	r2, r3
 800f398:	d0a0      	beq.n	800f2dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f39a:	2300      	movs	r3, #0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b096      	sub	sp, #88	@ 0x58
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	88fa      	ldrh	r2, [r7, #6]
 800f3bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2222      	movs	r2, #34	@ 0x22
 800f3cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d028      	beq.n	800f42a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3dc:	4a3e      	ldr	r2, [pc, #248]	@ (800f4d8 <UART_Start_Receive_DMA+0x134>)
 800f3de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3e4:	4a3d      	ldr	r2, [pc, #244]	@ (800f4dc <UART_Start_Receive_DMA+0x138>)
 800f3e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3ec:	4a3c      	ldr	r2, [pc, #240]	@ (800f4e0 <UART_Start_Receive_DMA+0x13c>)
 800f3ee:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3324      	adds	r3, #36	@ 0x24
 800f402:	4619      	mov	r1, r3
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f408:	461a      	mov	r2, r3
 800f40a:	88fb      	ldrh	r3, [r7, #6]
 800f40c:	f7f6 fc78 	bl	8005d00 <HAL_DMA_Start_IT>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d009      	beq.n	800f42a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2210      	movs	r2, #16
 800f41a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2220      	movs	r2, #32
 800f422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f426:	2301      	movs	r3, #1
 800f428:	e051      	b.n	800f4ce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	691b      	ldr	r3, [r3, #16]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d018      	beq.n	800f464 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f43a:	e853 3f00 	ldrex	r3, [r3]
 800f43e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f446:	657b      	str	r3, [r7, #84]	@ 0x54
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	461a      	mov	r2, r3
 800f44e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f450:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f452:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f454:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f458:	e841 2300 	strex	r3, r2, [r1]
 800f45c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f45e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1e6      	bne.n	800f432 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	3308      	adds	r3, #8
 800f46a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f46e:	e853 3f00 	ldrex	r3, [r3]
 800f472:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f476:	f043 0301 	orr.w	r3, r3, #1
 800f47a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	3308      	adds	r3, #8
 800f482:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f484:	637a      	str	r2, [r7, #52]	@ 0x34
 800f486:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f488:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f48a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f48c:	e841 2300 	strex	r3, r2, [r1]
 800f490:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1e5      	bne.n	800f464 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	3308      	adds	r3, #8
 800f49e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	e853 3f00 	ldrex	r3, [r3]
 800f4a6:	613b      	str	r3, [r7, #16]
   return(result);
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	3308      	adds	r3, #8
 800f4b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f4b8:	623a      	str	r2, [r7, #32]
 800f4ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4bc:	69f9      	ldr	r1, [r7, #28]
 800f4be:	6a3a      	ldr	r2, [r7, #32]
 800f4c0:	e841 2300 	strex	r3, r2, [r1]
 800f4c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1e5      	bne.n	800f498 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3758      	adds	r7, #88	@ 0x58
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	0800f5f9 	.word	0x0800f5f9
 800f4dc:	0800f757 	.word	0x0800f757
 800f4e0:	0800f7c9 	.word	0x0800f7c9

0800f4e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b089      	sub	sp, #36	@ 0x24
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	e853 3f00 	ldrex	r3, [r3]
 800f4f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f500:	61fb      	str	r3, [r7, #28]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	461a      	mov	r2, r3
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	61bb      	str	r3, [r7, #24]
 800f50c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50e:	6979      	ldr	r1, [r7, #20]
 800f510:	69ba      	ldr	r2, [r7, #24]
 800f512:	e841 2300 	strex	r3, r2, [r1]
 800f516:	613b      	str	r3, [r7, #16]
   return(result);
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1e6      	bne.n	800f4ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2220      	movs	r2, #32
 800f522:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f524:	bf00      	nop
 800f526:	3724      	adds	r7, #36	@ 0x24
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f530:	b480      	push	{r7}
 800f532:	b095      	sub	sp, #84	@ 0x54
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f540:	e853 3f00 	ldrex	r3, [r3]
 800f544:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f54c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	461a      	mov	r2, r3
 800f554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f556:	643b      	str	r3, [r7, #64]	@ 0x40
 800f558:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f55a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f55c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f55e:	e841 2300 	strex	r3, r2, [r1]
 800f562:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1e6      	bne.n	800f538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	3308      	adds	r3, #8
 800f570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f572:	6a3b      	ldr	r3, [r7, #32]
 800f574:	e853 3f00 	ldrex	r3, [r3]
 800f578:	61fb      	str	r3, [r7, #28]
   return(result);
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	f023 0301 	bic.w	r3, r3, #1
 800f580:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	3308      	adds	r3, #8
 800f588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f58a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f58c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f58e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f592:	e841 2300 	strex	r3, r2, [r1]
 800f596:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1e5      	bne.n	800f56a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d118      	bne.n	800f5d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	e853 3f00 	ldrex	r3, [r3]
 800f5b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	f023 0310 	bic.w	r3, r3, #16
 800f5ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5c4:	61bb      	str	r3, [r7, #24]
 800f5c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c8:	6979      	ldr	r1, [r7, #20]
 800f5ca:	69ba      	ldr	r2, [r7, #24]
 800f5cc:	e841 2300 	strex	r3, r2, [r1]
 800f5d0:	613b      	str	r3, [r7, #16]
   return(result);
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d1e6      	bne.n	800f5a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2220      	movs	r2, #32
 800f5dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f5ec:	bf00      	nop
 800f5ee:	3754      	adds	r7, #84	@ 0x54
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b09c      	sub	sp, #112	@ 0x70
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f604:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	69db      	ldr	r3, [r3, #28]
 800f60a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f60e:	d071      	beq.n	800f6f4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f612:	2200      	movs	r2, #0
 800f614:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f61e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f620:	e853 3f00 	ldrex	r3, [r3]
 800f624:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f62c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f62e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	461a      	mov	r2, r3
 800f634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f636:	657b      	str	r3, [r7, #84]	@ 0x54
 800f638:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f63c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f63e:	e841 2300 	strex	r3, r2, [r1]
 800f642:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f646:	2b00      	cmp	r3, #0
 800f648:	d1e6      	bne.n	800f618 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3308      	adds	r3, #8
 800f650:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f654:	e853 3f00 	ldrex	r3, [r3]
 800f658:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f65c:	f023 0301 	bic.w	r3, r3, #1
 800f660:	667b      	str	r3, [r7, #100]	@ 0x64
 800f662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	3308      	adds	r3, #8
 800f668:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f66a:	643a      	str	r2, [r7, #64]	@ 0x40
 800f66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f66e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f672:	e841 2300 	strex	r3, r2, [r1]
 800f676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1e5      	bne.n	800f64a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	3308      	adds	r3, #8
 800f684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	e853 3f00 	ldrex	r3, [r3]
 800f68c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f694:	663b      	str	r3, [r7, #96]	@ 0x60
 800f696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	3308      	adds	r3, #8
 800f69c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f69e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6a6:	e841 2300 	strex	r3, r2, [r1]
 800f6aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d1e5      	bne.n	800f67e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f6b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6b4:	2220      	movs	r2, #32
 800f6b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d118      	bne.n	800f6f4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	e853 3f00 	ldrex	r3, [r3]
 800f6ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	f023 0310 	bic.w	r3, r3, #16
 800f6d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f6d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	461a      	mov	r2, r3
 800f6de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6e0:	61bb      	str	r3, [r7, #24]
 800f6e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e4:	6979      	ldr	r1, [r7, #20]
 800f6e6:	69ba      	ldr	r2, [r7, #24]
 800f6e8:	e841 2300 	strex	r3, r2, [r1]
 800f6ec:	613b      	str	r3, [r7, #16]
   return(result);
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d1e6      	bne.n	800f6c2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d122      	bne.n	800f748 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800f702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f704:	2200      	movs	r2, #0
 800f706:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800f714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f716:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f71a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f71e:	429a      	cmp	r2, r3
 800f720:	d204      	bcs.n	800f72c <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f724:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f728:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f72c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f72e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f738:	b29b      	uxth	r3, r3
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	4619      	mov	r1, r3
 800f740:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f742:	f7ff fa59 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f746:	e002      	b.n	800f74e <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800f748:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f74a:	f7f1 fde3 	bl	8001314 <HAL_UART_RxCpltCallback>
}
 800f74e:	bf00      	nop
 800f750:	3770      	adds	r7, #112	@ 0x70
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f756:	b580      	push	{r7, lr}
 800f758:	b084      	sub	sp, #16
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f762:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2201      	movs	r2, #1
 800f768:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d123      	bne.n	800f7ba <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f778:	085b      	lsrs	r3, r3, #1
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f790:	897a      	ldrh	r2, [r7, #10]
 800f792:	429a      	cmp	r2, r3
 800f794:	d803      	bhi.n	800f79e <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	897a      	ldrh	r2, [r7, #10]
 800f79a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	1ad3      	subs	r3, r2, r3
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f7ff fa20 	bl	800ebf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f7b8:	e002      	b.n	800f7c0 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800f7ba:	68f8      	ldr	r0, [r7, #12]
 800f7bc:	f7f1 fdce 	bl	800135c <HAL_UART_RxHalfCpltCallback>
}
 800f7c0:	bf00      	nop
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7ee:	2b80      	cmp	r3, #128	@ 0x80
 800f7f0:	d109      	bne.n	800f806 <UART_DMAError+0x3e>
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	2b21      	cmp	r3, #33	@ 0x21
 800f7f6:	d106      	bne.n	800f806 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f800:	6978      	ldr	r0, [r7, #20]
 800f802:	f7ff fe6f 	bl	800f4e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f810:	2b40      	cmp	r3, #64	@ 0x40
 800f812:	d109      	bne.n	800f828 <UART_DMAError+0x60>
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2b22      	cmp	r3, #34	@ 0x22
 800f818:	d106      	bne.n	800f828 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f822:	6978      	ldr	r0, [r7, #20]
 800f824:	f7ff fe84 	bl	800f530 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f82e:	f043 0210 	orr.w	r2, r3, #16
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f838:	6978      	ldr	r0, [r7, #20]
 800f83a:	f7f1 fda5 	bl	8001388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f83e:	bf00      	nop
 800f840:	3718      	adds	r7, #24
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b084      	sub	sp, #16
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2200      	movs	r2, #0
 800f858:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f7f1 fd93 	bl	8001388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f862:	bf00      	nop
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b088      	sub	sp, #32
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	e853 3f00 	ldrex	r3, [r3]
 800f87e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f886:	61fb      	str	r3, [r7, #28]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	461a      	mov	r2, r3
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	61bb      	str	r3, [r7, #24]
 800f892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f894:	6979      	ldr	r1, [r7, #20]
 800f896:	69ba      	ldr	r2, [r7, #24]
 800f898:	e841 2300 	strex	r3, r2, [r1]
 800f89c:	613b      	str	r3, [r7, #16]
   return(result);
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d1e6      	bne.n	800f872 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2220      	movs	r2, #32
 800f8a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7ff f997 	bl	800ebe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8b6:	bf00      	nop
 800f8b8:	3720      	adds	r7, #32
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
	...

0800f8c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d121      	bne.n	800f916 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	4b27      	ldr	r3, [pc, #156]	@ (800f974 <FMC_SDRAM_Init+0xb4>)
 800f8d8:	4013      	ands	r3, r2
 800f8da:	683a      	ldr	r2, [r7, #0]
 800f8dc:	6851      	ldr	r1, [r2, #4]
 800f8de:	683a      	ldr	r2, [r7, #0]
 800f8e0:	6892      	ldr	r2, [r2, #8]
 800f8e2:	4311      	orrs	r1, r2
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	68d2      	ldr	r2, [r2, #12]
 800f8e8:	4311      	orrs	r1, r2
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	6912      	ldr	r2, [r2, #16]
 800f8ee:	4311      	orrs	r1, r2
 800f8f0:	683a      	ldr	r2, [r7, #0]
 800f8f2:	6952      	ldr	r2, [r2, #20]
 800f8f4:	4311      	orrs	r1, r2
 800f8f6:	683a      	ldr	r2, [r7, #0]
 800f8f8:	6992      	ldr	r2, [r2, #24]
 800f8fa:	4311      	orrs	r1, r2
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	69d2      	ldr	r2, [r2, #28]
 800f900:	4311      	orrs	r1, r2
 800f902:	683a      	ldr	r2, [r7, #0]
 800f904:	6a12      	ldr	r2, [r2, #32]
 800f906:	4311      	orrs	r1, r2
 800f908:	683a      	ldr	r2, [r7, #0]
 800f90a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f90c:	430a      	orrs	r2, r1
 800f90e:	431a      	orrs	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	e026      	b.n	800f964 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	69d9      	ldr	r1, [r3, #28]
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	6a1b      	ldr	r3, [r3, #32]
 800f926:	4319      	orrs	r1, r3
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f92c:	430b      	orrs	r3, r1
 800f92e:	431a      	orrs	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	685a      	ldr	r2, [r3, #4]
 800f938:	4b0e      	ldr	r3, [pc, #56]	@ (800f974 <FMC_SDRAM_Init+0xb4>)
 800f93a:	4013      	ands	r3, r2
 800f93c:	683a      	ldr	r2, [r7, #0]
 800f93e:	6851      	ldr	r1, [r2, #4]
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	6892      	ldr	r2, [r2, #8]
 800f944:	4311      	orrs	r1, r2
 800f946:	683a      	ldr	r2, [r7, #0]
 800f948:	68d2      	ldr	r2, [r2, #12]
 800f94a:	4311      	orrs	r1, r2
 800f94c:	683a      	ldr	r2, [r7, #0]
 800f94e:	6912      	ldr	r2, [r2, #16]
 800f950:	4311      	orrs	r1, r2
 800f952:	683a      	ldr	r2, [r7, #0]
 800f954:	6952      	ldr	r2, [r2, #20]
 800f956:	4311      	orrs	r1, r2
 800f958:	683a      	ldr	r2, [r7, #0]
 800f95a:	6992      	ldr	r2, [r2, #24]
 800f95c:	430a      	orrs	r2, r1
 800f95e:	431a      	orrs	r2, r3
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	ffff8000 	.word	0xffff8000

0800f978 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f978:	b480      	push	{r7}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d128      	bne.n	800f9dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	689b      	ldr	r3, [r3, #8]
 800f98e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	1e59      	subs	r1, r3, #1
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	011b      	lsls	r3, r3, #4
 800f9a0:	4319      	orrs	r1, r3
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	021b      	lsls	r3, r3, #8
 800f9aa:	4319      	orrs	r1, r3
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	031b      	lsls	r3, r3, #12
 800f9b4:	4319      	orrs	r1, r3
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	041b      	lsls	r3, r3, #16
 800f9be:	4319      	orrs	r1, r3
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	695b      	ldr	r3, [r3, #20]
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	051b      	lsls	r3, r3, #20
 800f9c8:	4319      	orrs	r1, r3
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	699b      	ldr	r3, [r3, #24]
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	061b      	lsls	r3, r3, #24
 800f9d2:	430b      	orrs	r3, r1
 800f9d4:	431a      	orrs	r2, r3
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	609a      	str	r2, [r3, #8]
 800f9da:	e02d      	b.n	800fa38 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	689a      	ldr	r2, [r3, #8]
 800f9e0:	4b19      	ldr	r3, [pc, #100]	@ (800fa48 <FMC_SDRAM_Timing_Init+0xd0>)
 800f9e2:	4013      	ands	r3, r2
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	68d2      	ldr	r2, [r2, #12]
 800f9e8:	3a01      	subs	r2, #1
 800f9ea:	0311      	lsls	r1, r2, #12
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	6952      	ldr	r2, [r2, #20]
 800f9f0:	3a01      	subs	r2, #1
 800f9f2:	0512      	lsls	r2, r2, #20
 800f9f4:	430a      	orrs	r2, r1
 800f9f6:	431a      	orrs	r2, r3
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	1e59      	subs	r1, r3, #1
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	011b      	lsls	r3, r3, #4
 800fa12:	4319      	orrs	r1, r3
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	021b      	lsls	r3, r3, #8
 800fa1c:	4319      	orrs	r1, r3
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	691b      	ldr	r3, [r3, #16]
 800fa22:	3b01      	subs	r3, #1
 800fa24:	041b      	lsls	r3, r3, #16
 800fa26:	4319      	orrs	r1, r3
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	699b      	ldr	r3, [r3, #24]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	061b      	lsls	r3, r3, #24
 800fa30:	430b      	orrs	r3, r1
 800fa32:	431a      	orrs	r2, r3
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	ff0f0fff 	.word	0xff0f0fff

0800fa4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fa4c:	b084      	sub	sp, #16
 800fa4e:	b480      	push	{r7}
 800fa50:	b085      	sub	sp, #20
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
 800fa56:	f107 001c 	add.w	r0, r7, #28
 800fa5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fa62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fa64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fa66:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800fa6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fa6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800fa6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fa70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800fa72:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fa74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800fa76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fa78:	68fa      	ldr	r2, [r7, #12]
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	4b07      	ldr	r3, [pc, #28]	@ (800faa0 <SDMMC_Init+0x54>)
 800fa84:	4013      	ands	r3, r2
 800fa86:	68fa      	ldr	r2, [r7, #12]
 800fa88:	431a      	orrs	r2, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fa8e:	2300      	movs	r3, #0
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3714      	adds	r7, #20
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	b004      	add	sp, #16
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	ffff8100 	.word	0xffff8100

0800faa4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2203      	movs	r2, #3
 800fab0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fab2:	2300      	movs	r3, #0
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	f003 0303 	and.w	r3, r3, #3
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	370c      	adds	r7, #12
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fadc:	b480      	push	{r7}
 800fade:	b085      	sub	sp, #20
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fae6:	2300      	movs	r3, #0
 800fae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fafa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fb00:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fb06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	68da      	ldr	r2, [r3, #12]
 800fb12:	4b06      	ldr	r3, [pc, #24]	@ (800fb2c <SDMMC_SendCommand+0x50>)
 800fb14:	4013      	ands	r3, r2
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	431a      	orrs	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3714      	adds	r7, #20
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	fffff000 	.word	0xfffff000

0800fb30 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	691b      	ldr	r3, [r3, #16]
 800fb3c:	b2db      	uxtb	r3, r3
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	370c      	adds	r7, #12
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr

0800fb4a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fb4a:	b480      	push	{r7}
 800fb4c:	b085      	sub	sp, #20
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
 800fb52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	3314      	adds	r3, #20
 800fb58:	461a      	mov	r2, r3
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
}  
 800fb64:	4618      	mov	r0, r3
 800fb66:	3714      	adds	r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	685a      	ldr	r2, [r3, #4]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fb96:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fb9c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fba2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbae:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	431a      	orrs	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fbba:	2300      	movs	r3, #0

}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fbd6:	2310      	movs	r3, #16
 800fbd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbda:	2340      	movs	r3, #64	@ 0x40
 800fbdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbe8:	f107 0308 	add.w	r3, r7, #8
 800fbec:	4619      	mov	r1, r3
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f7ff ff74 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fbf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbf8:	2110      	movs	r1, #16
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f9d6 	bl	800ffac <SDMMC_GetCmdResp1>
 800fc00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc02:	69fb      	ldr	r3, [r7, #28]
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3720      	adds	r7, #32
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b088      	sub	sp, #32
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fc1a:	2311      	movs	r3, #17
 800fc1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc1e:	2340      	movs	r3, #64	@ 0x40
 800fc20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc22:	2300      	movs	r3, #0
 800fc24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc2c:	f107 0308 	add.w	r3, r7, #8
 800fc30:	4619      	mov	r1, r3
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7ff ff52 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fc38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc3c:	2111      	movs	r1, #17
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f9b4 	bl	800ffac <SDMMC_GetCmdResp1>
 800fc44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc46:	69fb      	ldr	r3, [r7, #28]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3720      	adds	r7, #32
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b088      	sub	sp, #32
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fc5e:	2312      	movs	r3, #18
 800fc60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc62:	2340      	movs	r3, #64	@ 0x40
 800fc64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc66:	2300      	movs	r3, #0
 800fc68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc70:	f107 0308 	add.w	r3, r7, #8
 800fc74:	4619      	mov	r1, r3
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f7ff ff30 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fc7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc80:	2112      	movs	r1, #18
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 f992 	bl	800ffac <SDMMC_GetCmdResp1>
 800fc88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc8a:	69fb      	ldr	r3, [r7, #28]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3720      	adds	r7, #32
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b088      	sub	sp, #32
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fca2:	2318      	movs	r3, #24
 800fca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fca6:	2340      	movs	r3, #64	@ 0x40
 800fca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcb4:	f107 0308 	add.w	r3, r7, #8
 800fcb8:	4619      	mov	r1, r3
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f7ff ff0e 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fcc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcc4:	2118      	movs	r1, #24
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f970 	bl	800ffac <SDMMC_GetCmdResp1>
 800fccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcce:	69fb      	ldr	r3, [r7, #28]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3720      	adds	r7, #32
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b088      	sub	sp, #32
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fce6:	2319      	movs	r3, #25
 800fce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcea:	2340      	movs	r3, #64	@ 0x40
 800fcec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcf8:	f107 0308 	add.w	r3, r7, #8
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f7ff feec 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fd04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd08:	2119      	movs	r1, #25
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 f94e 	bl	800ffac <SDMMC_GetCmdResp1>
 800fd10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd12:	69fb      	ldr	r3, [r7, #28]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3720      	adds	r7, #32
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b088      	sub	sp, #32
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fd24:	2300      	movs	r3, #0
 800fd26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fd28:	230c      	movs	r3, #12
 800fd2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd2c:	2340      	movs	r3, #64	@ 0x40
 800fd2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd30:	2300      	movs	r3, #0
 800fd32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd3a:	f107 0308 	add.w	r3, r7, #8
 800fd3e:	4619      	mov	r1, r3
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7ff fecb 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fd46:	4a05      	ldr	r2, [pc, #20]	@ (800fd5c <SDMMC_CmdStopTransfer+0x40>)
 800fd48:	210c      	movs	r1, #12
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 f92e 	bl	800ffac <SDMMC_GetCmdResp1>
 800fd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd52:	69fb      	ldr	r3, [r7, #28]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3720      	adds	r7, #32
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	05f5e100 	.word	0x05f5e100

0800fd60 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08a      	sub	sp, #40	@ 0x28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fd70:	2307      	movs	r3, #7
 800fd72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd74:	2340      	movs	r3, #64	@ 0x40
 800fd76:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd80:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd82:	f107 0310 	add.w	r3, r7, #16
 800fd86:	4619      	mov	r1, r3
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f7ff fea7 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fd8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd92:	2107      	movs	r1, #7
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f000 f909 	bl	800ffac <SDMMC_GetCmdResp1>
 800fd9a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3728      	adds	r7, #40	@ 0x28
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fda6:	b580      	push	{r7, lr}
 800fda8:	b088      	sub	sp, #32
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fdc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdc4:	f107 0308 	add.w	r3, r7, #8
 800fdc8:	4619      	mov	r1, r3
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7ff fe86 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fb23 	bl	801041c <SDMMC_GetCmdError>
 800fdd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdd8:	69fb      	ldr	r3, [r7, #28]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3720      	adds	r7, #32
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b088      	sub	sp, #32
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fdea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fdee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fdf0:	2308      	movs	r3, #8
 800fdf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdf4:	2340      	movs	r3, #64	@ 0x40
 800fdf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe02:	f107 0308 	add.w	r3, r7, #8
 800fe06:	4619      	mov	r1, r3
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7ff fe67 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 fab6 	bl	8010380 <SDMMC_GetCmdResp7>
 800fe14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe16:	69fb      	ldr	r3, [r7, #28]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3720      	adds	r7, #32
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b088      	sub	sp, #32
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fe2e:	2337      	movs	r3, #55	@ 0x37
 800fe30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe32:	2340      	movs	r3, #64	@ 0x40
 800fe34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe36:	2300      	movs	r3, #0
 800fe38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe40:	f107 0308 	add.w	r3, r7, #8
 800fe44:	4619      	mov	r1, r3
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7ff fe48 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fe4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe50:	2137      	movs	r1, #55	@ 0x37
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 f8aa 	bl	800ffac <SDMMC_GetCmdResp1>
 800fe58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe5a:	69fb      	ldr	r3, [r7, #28]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3720      	adds	r7, #32
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b088      	sub	sp, #32
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fe6e:	683a      	ldr	r2, [r7, #0]
 800fe70:	4b0d      	ldr	r3, [pc, #52]	@ (800fea8 <SDMMC_CmdAppOperCommand+0x44>)
 800fe72:	4313      	orrs	r3, r2
 800fe74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fe76:	2329      	movs	r3, #41	@ 0x29
 800fe78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe7a:	2340      	movs	r3, #64	@ 0x40
 800fe7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe88:	f107 0308 	add.w	r3, r7, #8
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff fe24 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 f9bf 	bl	8010218 <SDMMC_GetCmdResp3>
 800fe9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe9c:	69fb      	ldr	r3, [r7, #28]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3720      	adds	r7, #32
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	80100000 	.word	0x80100000

0800feac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b088      	sub	sp, #32
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800feb4:	2300      	movs	r3, #0
 800feb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800feb8:	2302      	movs	r3, #2
 800feba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800febc:	23c0      	movs	r3, #192	@ 0xc0
 800febe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fec0:	2300      	movs	r3, #0
 800fec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800feca:	f107 0308 	add.w	r3, r7, #8
 800fece:	4619      	mov	r1, r3
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7ff fe03 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 f956 	bl	8010188 <SDMMC_GetCmdResp2>
 800fedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fede:	69fb      	ldr	r3, [r7, #28]
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3720      	adds	r7, #32
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b088      	sub	sp, #32
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fef6:	2309      	movs	r3, #9
 800fef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fefa:	23c0      	movs	r3, #192	@ 0xc0
 800fefc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fefe:	2300      	movs	r3, #0
 800ff00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff08:	f107 0308 	add.w	r3, r7, #8
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff fde4 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 f937 	bl	8010188 <SDMMC_GetCmdResp2>
 800ff1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff1c:	69fb      	ldr	r3, [r7, #28]
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3720      	adds	r7, #32
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b088      	sub	sp, #32
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
 800ff2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ff30:	2300      	movs	r3, #0
 800ff32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ff34:	2303      	movs	r3, #3
 800ff36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff38:	2340      	movs	r3, #64	@ 0x40
 800ff3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff46:	f107 0308 	add.w	r3, r7, #8
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f7ff fdc5 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ff52:	683a      	ldr	r2, [r7, #0]
 800ff54:	2103      	movs	r1, #3
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f000 f99c 	bl	8010294 <SDMMC_GetCmdResp6>
 800ff5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff5e:	69fb      	ldr	r3, [r7, #28]
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3720      	adds	r7, #32
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b088      	sub	sp, #32
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ff76:	230d      	movs	r3, #13
 800ff78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff7a:	2340      	movs	r3, #64	@ 0x40
 800ff7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff88:	f107 0308 	add.w	r3, r7, #8
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff fda4 	bl	800fadc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ff94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff98:	210d      	movs	r1, #13
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f000 f806 	bl	800ffac <SDMMC_GetCmdResp1>
 800ffa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffa2:	69fb      	ldr	r3, [r7, #28]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3720      	adds	r7, #32
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b088      	sub	sp, #32
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	607a      	str	r2, [r7, #4]
 800ffb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ffba:	4b70      	ldr	r3, [pc, #448]	@ (801017c <SDMMC_GetCmdResp1+0x1d0>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4a70      	ldr	r2, [pc, #448]	@ (8010180 <SDMMC_GetCmdResp1+0x1d4>)
 800ffc0:	fba2 2303 	umull	r2, r3, r2, r3
 800ffc4:	0a5a      	lsrs	r2, r3, #9
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	fb02 f303 	mul.w	r3, r2, r3
 800ffcc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	1e5a      	subs	r2, r3, #1
 800ffd2:	61fa      	str	r2, [r7, #28]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d102      	bne.n	800ffde <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ffdc:	e0c9      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffe2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d0ef      	beq.n	800ffce <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1ea      	bne.n	800ffce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fffc:	f003 0304 	and.w	r3, r3, #4
 8010000:	2b00      	cmp	r3, #0
 8010002:	d004      	beq.n	801000e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2204      	movs	r2, #4
 8010008:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801000a:	2304      	movs	r3, #4
 801000c:	e0b1      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010012:	f003 0301 	and.w	r3, r3, #1
 8010016:	2b00      	cmp	r3, #0
 8010018:	d004      	beq.n	8010024 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2201      	movs	r2, #1
 801001e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010020:	2301      	movs	r3, #1
 8010022:	e0a6      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	22c5      	movs	r2, #197	@ 0xc5
 8010028:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f7ff fd80 	bl	800fb30 <SDMMC_GetCommandResponse>
 8010030:	4603      	mov	r3, r0
 8010032:	461a      	mov	r2, r3
 8010034:	7afb      	ldrb	r3, [r7, #11]
 8010036:	4293      	cmp	r3, r2
 8010038:	d001      	beq.n	801003e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801003a:	2301      	movs	r3, #1
 801003c:	e099      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801003e:	2100      	movs	r1, #0
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f7ff fd82 	bl	800fb4a <SDMMC_GetResponse>
 8010046:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010048:	697a      	ldr	r2, [r7, #20]
 801004a:	4b4e      	ldr	r3, [pc, #312]	@ (8010184 <SDMMC_GetCmdResp1+0x1d8>)
 801004c:	4013      	ands	r3, r2
 801004e:	2b00      	cmp	r3, #0
 8010050:	d101      	bne.n	8010056 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010052:	2300      	movs	r3, #0
 8010054:	e08d      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	2b00      	cmp	r3, #0
 801005a:	da02      	bge.n	8010062 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801005c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010060:	e087      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801006c:	2340      	movs	r3, #64	@ 0x40
 801006e:	e080      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010076:	2b00      	cmp	r3, #0
 8010078:	d001      	beq.n	801007e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801007a:	2380      	movs	r3, #128	@ 0x80
 801007c:	e079      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010084:	2b00      	cmp	r3, #0
 8010086:	d002      	beq.n	801008e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801008c:	e071      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801009c:	e069      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d002      	beq.n	80100ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80100a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100ac:	e061      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80100b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80100bc:	e059      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d002      	beq.n	80100ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80100c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100cc:	e051      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80100d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80100dc:	e049      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d002      	beq.n	80100ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80100e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80100ec:	e041      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80100f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100fc:	e039      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010108:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801010c:	e031      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010114:	2b00      	cmp	r3, #0
 8010116:	d002      	beq.n	801011e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010118:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801011c:	e029      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010128:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801012c:	e021      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010134:	2b00      	cmp	r3, #0
 8010136:	d002      	beq.n	801013e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010138:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801013c:	e019      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010144:	2b00      	cmp	r3, #0
 8010146:	d002      	beq.n	801014e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010148:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801014c:	e011      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010154:	2b00      	cmp	r3, #0
 8010156:	d002      	beq.n	801015e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010158:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801015c:	e009      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	f003 0308 	and.w	r3, r3, #8
 8010164:	2b00      	cmp	r3, #0
 8010166:	d002      	beq.n	801016e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010168:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801016c:	e001      	b.n	8010172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801016e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010172:	4618      	mov	r0, r3
 8010174:	3720      	adds	r7, #32
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	20000000 	.word	0x20000000
 8010180:	10624dd3 	.word	0x10624dd3
 8010184:	fdffe008 	.word	0xfdffe008

08010188 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010188:	b480      	push	{r7}
 801018a:	b085      	sub	sp, #20
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010190:	4b1f      	ldr	r3, [pc, #124]	@ (8010210 <SDMMC_GetCmdResp2+0x88>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	4a1f      	ldr	r2, [pc, #124]	@ (8010214 <SDMMC_GetCmdResp2+0x8c>)
 8010196:	fba2 2303 	umull	r2, r3, r2, r3
 801019a:	0a5b      	lsrs	r3, r3, #9
 801019c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101a0:	fb02 f303 	mul.w	r3, r2, r3
 80101a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	1e5a      	subs	r2, r3, #1
 80101aa:	60fa      	str	r2, [r7, #12]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d102      	bne.n	80101b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101b4:	e026      	b.n	8010204 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d0ef      	beq.n	80101a6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1ea      	bne.n	80101a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101d4:	f003 0304 	and.w	r3, r3, #4
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d004      	beq.n	80101e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2204      	movs	r2, #4
 80101e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101e2:	2304      	movs	r3, #4
 80101e4:	e00e      	b.n	8010204 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101ea:	f003 0301 	and.w	r3, r3, #1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d004      	beq.n	80101fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2201      	movs	r2, #1
 80101f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80101f8:	2301      	movs	r3, #1
 80101fa:	e003      	b.n	8010204 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	22c5      	movs	r2, #197	@ 0xc5
 8010200:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3714      	adds	r7, #20
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr
 8010210:	20000000 	.word	0x20000000
 8010214:	10624dd3 	.word	0x10624dd3

08010218 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010218:	b480      	push	{r7}
 801021a:	b085      	sub	sp, #20
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010220:	4b1a      	ldr	r3, [pc, #104]	@ (801028c <SDMMC_GetCmdResp3+0x74>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4a1a      	ldr	r2, [pc, #104]	@ (8010290 <SDMMC_GetCmdResp3+0x78>)
 8010226:	fba2 2303 	umull	r2, r3, r2, r3
 801022a:	0a5b      	lsrs	r3, r3, #9
 801022c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010230:	fb02 f303 	mul.w	r3, r2, r3
 8010234:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	1e5a      	subs	r2, r3, #1
 801023a:	60fa      	str	r2, [r7, #12]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010240:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010244:	e01b      	b.n	801027e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801024a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010252:	2b00      	cmp	r3, #0
 8010254:	d0ef      	beq.n	8010236 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1ea      	bne.n	8010236 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010264:	f003 0304 	and.w	r3, r3, #4
 8010268:	2b00      	cmp	r3, #0
 801026a:	d004      	beq.n	8010276 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2204      	movs	r2, #4
 8010270:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010272:	2304      	movs	r3, #4
 8010274:	e003      	b.n	801027e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	22c5      	movs	r2, #197	@ 0xc5
 801027a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3714      	adds	r7, #20
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop
 801028c:	20000000 	.word	0x20000000
 8010290:	10624dd3 	.word	0x10624dd3

08010294 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b088      	sub	sp, #32
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	460b      	mov	r3, r1
 801029e:	607a      	str	r2, [r7, #4]
 80102a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80102a2:	4b35      	ldr	r3, [pc, #212]	@ (8010378 <SDMMC_GetCmdResp6+0xe4>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	4a35      	ldr	r2, [pc, #212]	@ (801037c <SDMMC_GetCmdResp6+0xe8>)
 80102a8:	fba2 2303 	umull	r2, r3, r2, r3
 80102ac:	0a5b      	lsrs	r3, r3, #9
 80102ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102b2:	fb02 f303 	mul.w	r3, r2, r3
 80102b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	1e5a      	subs	r2, r3, #1
 80102bc:	61fa      	str	r2, [r7, #28]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d102      	bne.n	80102c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80102c6:	e052      	b.n	801036e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d0ef      	beq.n	80102b8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1ea      	bne.n	80102b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102e6:	f003 0304 	and.w	r3, r3, #4
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d004      	beq.n	80102f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2204      	movs	r2, #4
 80102f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80102f4:	2304      	movs	r3, #4
 80102f6:	e03a      	b.n	801036e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	d004      	beq.n	801030e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2201      	movs	r2, #1
 8010308:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801030a:	2301      	movs	r3, #1
 801030c:	e02f      	b.n	801036e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f7ff fc0e 	bl	800fb30 <SDMMC_GetCommandResponse>
 8010314:	4603      	mov	r3, r0
 8010316:	461a      	mov	r2, r3
 8010318:	7afb      	ldrb	r3, [r7, #11]
 801031a:	4293      	cmp	r3, r2
 801031c:	d001      	beq.n	8010322 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801031e:	2301      	movs	r3, #1
 8010320:	e025      	b.n	801036e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	22c5      	movs	r2, #197	@ 0xc5
 8010326:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010328:	2100      	movs	r1, #0
 801032a:	68f8      	ldr	r0, [r7, #12]
 801032c:	f7ff fc0d 	bl	800fb4a <SDMMC_GetResponse>
 8010330:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010338:	2b00      	cmp	r3, #0
 801033a:	d106      	bne.n	801034a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	0c1b      	lsrs	r3, r3, #16
 8010340:	b29a      	uxth	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010346:	2300      	movs	r3, #0
 8010348:	e011      	b.n	801036e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010350:	2b00      	cmp	r3, #0
 8010352:	d002      	beq.n	801035a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010354:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010358:	e009      	b.n	801036e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010360:	2b00      	cmp	r3, #0
 8010362:	d002      	beq.n	801036a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010368:	e001      	b.n	801036e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801036a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801036e:	4618      	mov	r0, r3
 8010370:	3720      	adds	r7, #32
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	20000000 	.word	0x20000000
 801037c:	10624dd3 	.word	0x10624dd3

08010380 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010380:	b480      	push	{r7}
 8010382:	b085      	sub	sp, #20
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010388:	4b22      	ldr	r3, [pc, #136]	@ (8010414 <SDMMC_GetCmdResp7+0x94>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a22      	ldr	r2, [pc, #136]	@ (8010418 <SDMMC_GetCmdResp7+0x98>)
 801038e:	fba2 2303 	umull	r2, r3, r2, r3
 8010392:	0a5b      	lsrs	r3, r3, #9
 8010394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010398:	fb02 f303 	mul.w	r3, r2, r3
 801039c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	1e5a      	subs	r2, r3, #1
 80103a2:	60fa      	str	r2, [r7, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d102      	bne.n	80103ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80103ac:	e02c      	b.n	8010408 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d0ef      	beq.n	801039e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1ea      	bne.n	801039e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103cc:	f003 0304 	and.w	r3, r3, #4
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d004      	beq.n	80103de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2204      	movs	r2, #4
 80103d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103da:	2304      	movs	r3, #4
 80103dc:	e014      	b.n	8010408 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103e2:	f003 0301 	and.w	r3, r3, #1
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d004      	beq.n	80103f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2201      	movs	r2, #1
 80103ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103f0:	2301      	movs	r3, #1
 80103f2:	e009      	b.n	8010408 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d002      	beq.n	8010406 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2240      	movs	r2, #64	@ 0x40
 8010404:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010406:	2300      	movs	r3, #0
  
}
 8010408:	4618      	mov	r0, r3
 801040a:	3714      	adds	r7, #20
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	20000000 	.word	0x20000000
 8010418:	10624dd3 	.word	0x10624dd3

0801041c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010424:	4b11      	ldr	r3, [pc, #68]	@ (801046c <SDMMC_GetCmdError+0x50>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a11      	ldr	r2, [pc, #68]	@ (8010470 <SDMMC_GetCmdError+0x54>)
 801042a:	fba2 2303 	umull	r2, r3, r2, r3
 801042e:	0a5b      	lsrs	r3, r3, #9
 8010430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010434:	fb02 f303 	mul.w	r3, r2, r3
 8010438:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	1e5a      	subs	r2, r3, #1
 801043e:	60fa      	str	r2, [r7, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d102      	bne.n	801044a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010444:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010448:	e009      	b.n	801045e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801044e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010452:	2b00      	cmp	r3, #0
 8010454:	d0f1      	beq.n	801043a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	22c5      	movs	r2, #197	@ 0xc5
 801045a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 801045c:	2300      	movs	r3, #0
}
 801045e:	4618      	mov	r0, r3
 8010460:	3714      	adds	r7, #20
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	20000000 	.word	0x20000000
 8010470:	10624dd3 	.word	0x10624dd3

08010474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010474:	b084      	sub	sp, #16
 8010476:	b580      	push	{r7, lr}
 8010478:	b084      	sub	sp, #16
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
 801047e:	f107 001c 	add.w	r0, r7, #28
 8010482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010486:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801048a:	2b01      	cmp	r3, #1
 801048c:	d121      	bne.n	80104d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010492:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	68da      	ldr	r2, [r3, #12]
 801049e:	4b21      	ldr	r3, [pc, #132]	@ (8010524 <USB_CoreInit+0xb0>)
 80104a0:	4013      	ands	r3, r2
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80104b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d105      	bne.n	80104c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f9d4 	bl	8010874 <USB_CoreReset>
 80104cc:	4603      	mov	r3, r0
 80104ce:	73fb      	strb	r3, [r7, #15]
 80104d0:	e010      	b.n	80104f4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 f9c8 	bl	8010874 <USB_CoreReset>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80104f4:	7fbb      	ldrb	r3, [r7, #30]
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d10b      	bne.n	8010512 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	f043 0206 	orr.w	r2, r3, #6
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	689b      	ldr	r3, [r3, #8]
 801050a:	f043 0220 	orr.w	r2, r3, #32
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010512:	7bfb      	ldrb	r3, [r7, #15]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801051e:	b004      	add	sp, #16
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	ffbdffbf 	.word	0xffbdffbf

08010528 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	f043 0201 	orr.w	r2, r3, #1
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	370c      	adds	r7, #12
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr

0801054a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801054a:	b480      	push	{r7}
 801054c:	b083      	sub	sp, #12
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	f023 0201 	bic.w	r2, r3, #1
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801055e:	2300      	movs	r3, #0
}
 8010560:	4618      	mov	r0, r3
 8010562:	370c      	adds	r7, #12
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr

0801056c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	460b      	mov	r3, r1
 8010576:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010578:	2300      	movs	r3, #0
 801057a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010588:	78fb      	ldrb	r3, [r7, #3]
 801058a:	2b01      	cmp	r3, #1
 801058c:	d115      	bne.n	80105ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801059a:	200a      	movs	r0, #10
 801059c:	f7f4 fd9a 	bl	80050d4 <HAL_Delay>
      ms += 10U;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	330a      	adds	r3, #10
 80105a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 f956 	bl	8010858 <USB_GetMode>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d01e      	beq.n	80105f0 <USB_SetCurrentMode+0x84>
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80105b6:	d9f0      	bls.n	801059a <USB_SetCurrentMode+0x2e>
 80105b8:	e01a      	b.n	80105f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80105ba:	78fb      	ldrb	r3, [r7, #3]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d115      	bne.n	80105ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80105cc:	200a      	movs	r0, #10
 80105ce:	f7f4 fd81 	bl	80050d4 <HAL_Delay>
      ms += 10U;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	330a      	adds	r3, #10
 80105d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f000 f93d 	bl	8010858 <USB_GetMode>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d005      	beq.n	80105f0 <USB_SetCurrentMode+0x84>
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80105e8:	d9f0      	bls.n	80105cc <USB_SetCurrentMode+0x60>
 80105ea:	e001      	b.n	80105f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80105ec:	2301      	movs	r3, #1
 80105ee:	e005      	b.n	80105fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80105f4:	d101      	bne.n	80105fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80105f6:	2301      	movs	r3, #1
 80105f8:	e000      	b.n	80105fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010604:	b480      	push	{r7}
 8010606:	b085      	sub	sp, #20
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801060e:	2300      	movs	r3, #0
 8010610:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	3301      	adds	r3, #1
 8010616:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801061e:	d901      	bls.n	8010624 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010620:	2303      	movs	r3, #3
 8010622:	e01b      	b.n	801065c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	691b      	ldr	r3, [r3, #16]
 8010628:	2b00      	cmp	r3, #0
 801062a:	daf2      	bge.n	8010612 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801062c:	2300      	movs	r3, #0
 801062e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	019b      	lsls	r3, r3, #6
 8010634:	f043 0220 	orr.w	r2, r3, #32
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	3301      	adds	r3, #1
 8010640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010648:	d901      	bls.n	801064e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801064a:	2303      	movs	r3, #3
 801064c:	e006      	b.n	801065c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	f003 0320 	and.w	r3, r3, #32
 8010656:	2b20      	cmp	r3, #32
 8010658:	d0f0      	beq.n	801063c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801065a:	2300      	movs	r3, #0
}
 801065c:	4618      	mov	r0, r3
 801065e:	3714      	adds	r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010670:	2300      	movs	r3, #0
 8010672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	3301      	adds	r3, #1
 8010678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010680:	d901      	bls.n	8010686 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010682:	2303      	movs	r3, #3
 8010684:	e018      	b.n	80106b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	691b      	ldr	r3, [r3, #16]
 801068a:	2b00      	cmp	r3, #0
 801068c:	daf2      	bge.n	8010674 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801068e:	2300      	movs	r3, #0
 8010690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2210      	movs	r2, #16
 8010696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	3301      	adds	r3, #1
 801069c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80106a4:	d901      	bls.n	80106aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80106a6:	2303      	movs	r3, #3
 80106a8:	e006      	b.n	80106b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	f003 0310 	and.w	r3, r3, #16
 80106b2:	2b10      	cmp	r3, #16
 80106b4:	d0f0      	beq.n	8010698 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80106b6:	2300      	movs	r3, #0
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3714      	adds	r7, #20
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b089      	sub	sp, #36	@ 0x24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	4611      	mov	r1, r2
 80106d0:	461a      	mov	r2, r3
 80106d2:	460b      	mov	r3, r1
 80106d4:	71fb      	strb	r3, [r7, #7]
 80106d6:	4613      	mov	r3, r2
 80106d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80106e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d123      	bne.n	8010732 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80106ea:	88bb      	ldrh	r3, [r7, #4]
 80106ec:	3303      	adds	r3, #3
 80106ee:	089b      	lsrs	r3, r3, #2
 80106f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80106f2:	2300      	movs	r3, #0
 80106f4:	61bb      	str	r3, [r7, #24]
 80106f6:	e018      	b.n	801072a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80106f8:	79fb      	ldrb	r3, [r7, #7]
 80106fa:	031a      	lsls	r2, r3, #12
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	4413      	add	r3, r2
 8010700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010704:	461a      	mov	r2, r3
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	3301      	adds	r3, #1
 8010710:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	3301      	adds	r3, #1
 8010716:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	3301      	adds	r3, #1
 801071c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	3301      	adds	r3, #1
 8010722:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	3301      	adds	r3, #1
 8010728:	61bb      	str	r3, [r7, #24]
 801072a:	69ba      	ldr	r2, [r7, #24]
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	429a      	cmp	r2, r3
 8010730:	d3e2      	bcc.n	80106f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010732:	2300      	movs	r3, #0
}
 8010734:	4618      	mov	r0, r3
 8010736:	3724      	adds	r7, #36	@ 0x24
 8010738:	46bd      	mov	sp, r7
 801073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073e:	4770      	bx	lr

08010740 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010740:	b480      	push	{r7}
 8010742:	b08b      	sub	sp, #44	@ 0x2c
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	4613      	mov	r3, r2
 801074c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010756:	88fb      	ldrh	r3, [r7, #6]
 8010758:	089b      	lsrs	r3, r3, #2
 801075a:	b29b      	uxth	r3, r3
 801075c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801075e:	88fb      	ldrh	r3, [r7, #6]
 8010760:	f003 0303 	and.w	r3, r3, #3
 8010764:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010766:	2300      	movs	r3, #0
 8010768:	623b      	str	r3, [r7, #32]
 801076a:	e014      	b.n	8010796 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010776:	601a      	str	r2, [r3, #0]
    pDest++;
 8010778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801077a:	3301      	adds	r3, #1
 801077c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010780:	3301      	adds	r3, #1
 8010782:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010786:	3301      	adds	r3, #1
 8010788:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801078a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078c:	3301      	adds	r3, #1
 801078e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010790:	6a3b      	ldr	r3, [r7, #32]
 8010792:	3301      	adds	r3, #1
 8010794:	623b      	str	r3, [r7, #32]
 8010796:	6a3a      	ldr	r2, [r7, #32]
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	429a      	cmp	r2, r3
 801079c:	d3e6      	bcc.n	801076c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801079e:	8bfb      	ldrh	r3, [r7, #30]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d01e      	beq.n	80107e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80107a4:	2300      	movs	r3, #0
 80107a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80107ae:	461a      	mov	r2, r3
 80107b0:	f107 0310 	add.w	r3, r7, #16
 80107b4:	6812      	ldr	r2, [r2, #0]
 80107b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80107b8:	693a      	ldr	r2, [r7, #16]
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	00db      	lsls	r3, r3, #3
 80107c0:	fa22 f303 	lsr.w	r3, r2, r3
 80107c4:	b2da      	uxtb	r2, r3
 80107c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c8:	701a      	strb	r2, [r3, #0]
      i++;
 80107ca:	6a3b      	ldr	r3, [r7, #32]
 80107cc:	3301      	adds	r3, #1
 80107ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80107d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d2:	3301      	adds	r3, #1
 80107d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80107d6:	8bfb      	ldrh	r3, [r7, #30]
 80107d8:	3b01      	subs	r3, #1
 80107da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80107dc:	8bfb      	ldrh	r3, [r7, #30]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d1ea      	bne.n	80107b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80107e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	372c      	adds	r7, #44	@ 0x2c
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b085      	sub	sp, #20
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	695b      	ldr	r3, [r3, #20]
 80107fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	699b      	ldr	r3, [r3, #24]
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	4013      	ands	r3, r2
 8010806:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010808:	68fb      	ldr	r3, [r7, #12]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3714      	adds	r7, #20
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr

08010816 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8010816:	b480      	push	{r7}
 8010818:	b085      	sub	sp, #20
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
 801081e:	460b      	mov	r3, r1
 8010820:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8010826:	78fb      	ldrb	r3, [r7, #3]
 8010828:	015a      	lsls	r2, r3, #5
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	4413      	add	r3, r2
 801082e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010832:	689b      	ldr	r3, [r3, #8]
 8010834:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8010836:	78fb      	ldrb	r3, [r7, #3]
 8010838:	015a      	lsls	r2, r3, #5
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	4413      	add	r3, r2
 801083e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	68ba      	ldr	r2, [r7, #8]
 8010846:	4013      	ands	r3, r2
 8010848:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801084a:	68bb      	ldr	r3, [r7, #8]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3714      	adds	r7, #20
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	695b      	ldr	r3, [r3, #20]
 8010864:	f003 0301 	and.w	r3, r3, #1
}
 8010868:	4618      	mov	r0, r3
 801086a:	370c      	adds	r7, #12
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr

08010874 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801087c:	2300      	movs	r3, #0
 801087e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	3301      	adds	r3, #1
 8010884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801088c:	d901      	bls.n	8010892 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801088e:	2303      	movs	r3, #3
 8010890:	e022      	b.n	80108d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	691b      	ldr	r3, [r3, #16]
 8010896:	2b00      	cmp	r3, #0
 8010898:	daf2      	bge.n	8010880 <USB_CoreReset+0xc>

  count = 10U;
 801089a:	230a      	movs	r3, #10
 801089c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 801089e:	e002      	b.n	80108a6 <USB_CoreReset+0x32>
  {
    count--;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	3b01      	subs	r3, #1
 80108a4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1f9      	bne.n	80108a0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	691b      	ldr	r3, [r3, #16]
 80108b0:	f043 0201 	orr.w	r2, r3, #1
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	3301      	adds	r3, #1
 80108bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80108c4:	d901      	bls.n	80108ca <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80108c6:	2303      	movs	r3, #3
 80108c8:	e006      	b.n	80108d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	f003 0301 	and.w	r3, r3, #1
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d0f0      	beq.n	80108b8 <USB_CoreReset+0x44>

  return HAL_OK;
 80108d6:	2300      	movs	r3, #0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3714      	adds	r7, #20
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80108e4:	b084      	sub	sp, #16
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b086      	sub	sp, #24
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80108f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010904:	461a      	mov	r2, r3
 8010906:	2300      	movs	r3, #0
 8010908:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801090e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801091e:	2b00      	cmp	r3, #0
 8010920:	d119      	bne.n	8010956 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8010922:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010926:	2b01      	cmp	r3, #1
 8010928:	d10a      	bne.n	8010940 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	68fa      	ldr	r2, [r7, #12]
 8010934:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010938:	f043 0304 	orr.w	r3, r3, #4
 801093c:	6013      	str	r3, [r2, #0]
 801093e:	e014      	b.n	801096a <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801094e:	f023 0304 	bic.w	r3, r3, #4
 8010952:	6013      	str	r3, [r2, #0]
 8010954:	e009      	b.n	801096a <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010964:	f023 0304 	bic.w	r3, r3, #4
 8010968:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801096a:	2110      	movs	r1, #16
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7ff fe49 	bl	8010604 <USB_FlushTxFifo>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d001      	beq.n	801097c <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8010978:	2301      	movs	r3, #1
 801097a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f7ff fe73 	bl	8010668 <USB_FlushRxFifo>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d001      	beq.n	801098c <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8010988:	2301      	movs	r3, #1
 801098a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801098c:	2300      	movs	r3, #0
 801098e:	613b      	str	r3, [r7, #16]
 8010990:	e015      	b.n	80109be <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	015a      	lsls	r2, r3, #5
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	4413      	add	r3, r2
 801099a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801099e:	461a      	mov	r2, r3
 80109a0:	f04f 33ff 	mov.w	r3, #4294967295
 80109a4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	015a      	lsls	r2, r3, #5
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	4413      	add	r3, r2
 80109ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80109b2:	461a      	mov	r2, r3
 80109b4:	2300      	movs	r3, #0
 80109b6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	3301      	adds	r3, #1
 80109bc:	613b      	str	r3, [r7, #16]
 80109be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80109c2:	461a      	mov	r2, r3
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	4293      	cmp	r3, r2
 80109c8:	d3e3      	bcc.n	8010992 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f04f 32ff 	mov.w	r2, #4294967295
 80109d6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	4a18      	ldr	r2, [pc, #96]	@ (8010a3c <USB_HostInit+0x158>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d10b      	bne.n	80109f8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109e6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	4a15      	ldr	r2, [pc, #84]	@ (8010a40 <USB_HostInit+0x15c>)
 80109ec:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4a14      	ldr	r2, [pc, #80]	@ (8010a44 <USB_HostInit+0x160>)
 80109f2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80109f6:	e009      	b.n	8010a0c <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2280      	movs	r2, #128	@ 0x80
 80109fc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4a11      	ldr	r2, [pc, #68]	@ (8010a48 <USB_HostInit+0x164>)
 8010a02:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	4a11      	ldr	r2, [pc, #68]	@ (8010a4c <USB_HostInit+0x168>)
 8010a08:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d105      	bne.n	8010a20 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	699b      	ldr	r3, [r3, #24]
 8010a18:	f043 0210 	orr.w	r2, r3, #16
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	699a      	ldr	r2, [r3, #24]
 8010a24:	4b0a      	ldr	r3, [pc, #40]	@ (8010a50 <USB_HostInit+0x16c>)
 8010a26:	4313      	orrs	r3, r2
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8010a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3718      	adds	r7, #24
 8010a32:	46bd      	mov	sp, r7
 8010a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a38:	b004      	add	sp, #16
 8010a3a:	4770      	bx	lr
 8010a3c:	40040000 	.word	0x40040000
 8010a40:	01000200 	.word	0x01000200
 8010a44:	00e00300 	.word	0x00e00300
 8010a48:	00600080 	.word	0x00600080
 8010a4c:	004000e0 	.word	0x004000e0
 8010a50:	a3200008 	.word	0xa3200008

08010a54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68fa      	ldr	r2, [r7, #12]
 8010a6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010a72:	f023 0303 	bic.w	r3, r3, #3
 8010a76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	78fb      	ldrb	r3, [r7, #3]
 8010a82:	f003 0303 	and.w	r3, r3, #3
 8010a86:	68f9      	ldr	r1, [r7, #12]
 8010a88:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010a8c:	4313      	orrs	r3, r2
 8010a8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010a90:	78fb      	ldrb	r3, [r7, #3]
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d107      	bne.n	8010aa6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010aa2:	6053      	str	r3, [r2, #4]
 8010aa4:	e00c      	b.n	8010ac0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010aa6:	78fb      	ldrb	r3, [r7, #3]
 8010aa8:	2b02      	cmp	r3, #2
 8010aaa:	d107      	bne.n	8010abc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010ab8:	6053      	str	r3, [r2, #4]
 8010aba:	e001      	b.n	8010ac0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8010abc:	2301      	movs	r3, #1
 8010abe:	e000      	b.n	8010ac2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010ac0:	2300      	movs	r3, #0
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3714      	adds	r7, #20
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr

08010ace <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b084      	sub	sp, #16
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8010ada:	2300      	movs	r3, #0
 8010adc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010aee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	68fa      	ldr	r2, [r7, #12]
 8010af4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010afc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8010afe:	2064      	movs	r0, #100	@ 0x64
 8010b00:	f7f4 fae8 	bl	80050d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b10:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8010b12:	200a      	movs	r0, #10
 8010b14:	f7f4 fade 	bl	80050d4 <HAL_Delay>

  return HAL_OK;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8010b22:	b480      	push	{r7}
 8010b24:	b085      	sub	sp, #20
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010b32:	2300      	movs	r3, #0
 8010b34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010b46:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d109      	bne.n	8010b66 <USB_DriveVbus+0x44>
 8010b52:	78fb      	ldrb	r3, [r7, #3]
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d106      	bne.n	8010b66 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010b64:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b70:	d109      	bne.n	8010b86 <USB_DriveVbus+0x64>
 8010b72:	78fb      	ldrb	r3, [r7, #3]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d106      	bne.n	8010b86 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	68fa      	ldr	r2, [r7, #12]
 8010b7c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010b84:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3714      	adds	r7, #20
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b92:	4770      	bx	lr

08010b94 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b085      	sub	sp, #20
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	0c5b      	lsrs	r3, r3, #17
 8010bb2:	f003 0303 	and.w	r3, r3, #3
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3714      	adds	r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8010bc2:	b480      	push	{r7}
 8010bc4:	b085      	sub	sp, #20
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010bd4:	689b      	ldr	r3, [r3, #8]
 8010bd6:	b29b      	uxth	r3, r3
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	4608      	mov	r0, r1
 8010bee:	4611      	mov	r1, r2
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	70fb      	strb	r3, [r7, #3]
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	70bb      	strb	r3, [r7, #2]
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8010c06:	78fb      	ldrb	r3, [r7, #3]
 8010c08:	015a      	lsls	r2, r3, #5
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	4413      	add	r3, r2
 8010c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c12:	461a      	mov	r2, r3
 8010c14:	f04f 33ff 	mov.w	r3, #4294967295
 8010c18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8010c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010c1e:	2b03      	cmp	r3, #3
 8010c20:	d87c      	bhi.n	8010d1c <USB_HC_Init+0x138>
 8010c22:	a201      	add	r2, pc, #4	@ (adr r2, 8010c28 <USB_HC_Init+0x44>)
 8010c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c28:	08010c39 	.word	0x08010c39
 8010c2c:	08010cdf 	.word	0x08010cdf
 8010c30:	08010c39 	.word	0x08010c39
 8010c34:	08010ca1 	.word	0x08010ca1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010c38:	78fb      	ldrb	r3, [r7, #3]
 8010c3a:	015a      	lsls	r2, r3, #5
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	4413      	add	r3, r2
 8010c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c44:	461a      	mov	r2, r3
 8010c46:	f240 439d 	movw	r3, #1181	@ 0x49d
 8010c4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8010c4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	da10      	bge.n	8010c76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010c54:	78fb      	ldrb	r3, [r7, #3]
 8010c56:	015a      	lsls	r2, r3, #5
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	78fa      	ldrb	r2, [r7, #3]
 8010c64:	0151      	lsls	r1, r2, #5
 8010c66:	693a      	ldr	r2, [r7, #16]
 8010c68:	440a      	add	r2, r1
 8010c6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c72:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8010c74:	e055      	b.n	8010d22 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4a6f      	ldr	r2, [pc, #444]	@ (8010e38 <USB_HC_Init+0x254>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d151      	bne.n	8010d22 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8010c7e:	78fb      	ldrb	r3, [r7, #3]
 8010c80:	015a      	lsls	r2, r3, #5
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	4413      	add	r3, r2
 8010c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	78fa      	ldrb	r2, [r7, #3]
 8010c8e:	0151      	lsls	r1, r2, #5
 8010c90:	693a      	ldr	r2, [r7, #16]
 8010c92:	440a      	add	r2, r1
 8010c94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c98:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010c9c:	60d3      	str	r3, [r2, #12]
      break;
 8010c9e:	e040      	b.n	8010d22 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010ca0:	78fb      	ldrb	r3, [r7, #3]
 8010ca2:	015a      	lsls	r2, r3, #5
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cac:	461a      	mov	r2, r3
 8010cae:	f240 639d 	movw	r3, #1693	@ 0x69d
 8010cb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010cb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	da34      	bge.n	8010d26 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010cbc:	78fb      	ldrb	r3, [r7, #3]
 8010cbe:	015a      	lsls	r2, r3, #5
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cc8:	68db      	ldr	r3, [r3, #12]
 8010cca:	78fa      	ldrb	r2, [r7, #3]
 8010ccc:	0151      	lsls	r1, r2, #5
 8010cce:	693a      	ldr	r2, [r7, #16]
 8010cd0:	440a      	add	r2, r1
 8010cd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010cda:	60d3      	str	r3, [r2, #12]
      }

      break;
 8010cdc:	e023      	b.n	8010d26 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010cde:	78fb      	ldrb	r3, [r7, #3]
 8010ce0:	015a      	lsls	r2, r3, #5
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cea:	461a      	mov	r2, r3
 8010cec:	f240 2325 	movw	r3, #549	@ 0x225
 8010cf0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	da17      	bge.n	8010d2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8010cfa:	78fb      	ldrb	r3, [r7, #3]
 8010cfc:	015a      	lsls	r2, r3, #5
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	4413      	add	r3, r2
 8010d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d06:	68db      	ldr	r3, [r3, #12]
 8010d08:	78fa      	ldrb	r2, [r7, #3]
 8010d0a:	0151      	lsls	r1, r2, #5
 8010d0c:	693a      	ldr	r2, [r7, #16]
 8010d0e:	440a      	add	r2, r1
 8010d10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d14:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8010d18:	60d3      	str	r3, [r2, #12]
      }
      break;
 8010d1a:	e006      	b.n	8010d2a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	77fb      	strb	r3, [r7, #31]
      break;
 8010d20:	e004      	b.n	8010d2c <USB_HC_Init+0x148>
      break;
 8010d22:	bf00      	nop
 8010d24:	e002      	b.n	8010d2c <USB_HC_Init+0x148>
      break;
 8010d26:	bf00      	nop
 8010d28:	e000      	b.n	8010d2c <USB_HC_Init+0x148>
      break;
 8010d2a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8010d2c:	78fb      	ldrb	r3, [r7, #3]
 8010d2e:	015a      	lsls	r2, r3, #5
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	4413      	add	r3, r2
 8010d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d38:	461a      	mov	r2, r3
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8010d3e:	78fb      	ldrb	r3, [r7, #3]
 8010d40:	015a      	lsls	r2, r3, #5
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	4413      	add	r3, r2
 8010d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	78fa      	ldrb	r2, [r7, #3]
 8010d4e:	0151      	lsls	r1, r2, #5
 8010d50:	693a      	ldr	r2, [r7, #16]
 8010d52:	440a      	add	r2, r1
 8010d54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d58:	f043 0302 	orr.w	r3, r3, #2
 8010d5c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010d64:	699a      	ldr	r2, [r3, #24]
 8010d66:	78fb      	ldrb	r3, [r7, #3]
 8010d68:	f003 030f 	and.w	r3, r3, #15
 8010d6c:	2101      	movs	r1, #1
 8010d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d72:	6939      	ldr	r1, [r7, #16]
 8010d74:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	699b      	ldr	r3, [r3, #24]
 8010d80:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8010d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	da03      	bge.n	8010d98 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8010d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d94:	61bb      	str	r3, [r7, #24]
 8010d96:	e001      	b.n	8010d9c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f7ff fef9 	bl	8010b94 <USB_GetHostSpeed>
 8010da2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8010da4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010da8:	2b02      	cmp	r3, #2
 8010daa:	d106      	bne.n	8010dba <USB_HC_Init+0x1d6>
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d003      	beq.n	8010dba <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8010db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010db6:	617b      	str	r3, [r7, #20]
 8010db8:	e001      	b.n	8010dbe <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dbe:	787b      	ldrb	r3, [r7, #1]
 8010dc0:	059b      	lsls	r3, r3, #22
 8010dc2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010dc6:	78bb      	ldrb	r3, [r7, #2]
 8010dc8:	02db      	lsls	r3, r3, #11
 8010dca:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dce:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010dd0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010dd4:	049b      	lsls	r3, r3, #18
 8010dd6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010dda:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8010ddc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010de2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	431a      	orrs	r2, r3
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dec:	78fa      	ldrb	r2, [r7, #3]
 8010dee:	0151      	lsls	r1, r2, #5
 8010df0:	693a      	ldr	r2, [r7, #16]
 8010df2:	440a      	add	r2, r1
 8010df4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010df8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010dfc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8010dfe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010e02:	2b03      	cmp	r3, #3
 8010e04:	d003      	beq.n	8010e0e <USB_HC_Init+0x22a>
 8010e06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d10f      	bne.n	8010e2e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010e0e:	78fb      	ldrb	r3, [r7, #3]
 8010e10:	015a      	lsls	r2, r3, #5
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	4413      	add	r3, r2
 8010e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	78fa      	ldrb	r2, [r7, #3]
 8010e1e:	0151      	lsls	r1, r2, #5
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	440a      	add	r2, r1
 8010e24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010e2c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8010e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3720      	adds	r7, #32
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	40040000 	.word	0x40040000

08010e3c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b08c      	sub	sp, #48	@ 0x30
 8010e40:	af02      	add	r7, sp, #8
 8010e42:	60f8      	str	r0, [r7, #12]
 8010e44:	60b9      	str	r1, [r7, #8]
 8010e46:	4613      	mov	r3, r2
 8010e48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	785b      	ldrb	r3, [r3, #1]
 8010e52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8010e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e58:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8010fd4 <USB_HC_StartXfer+0x198>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d12f      	bne.n	8010ec2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8010e62:	79fb      	ldrb	r3, [r7, #7]
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d11c      	bne.n	8010ea2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	7c9b      	ldrb	r3, [r3, #18]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d003      	beq.n	8010e78 <USB_HC_StartXfer+0x3c>
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	7c9b      	ldrb	r3, [r3, #18]
 8010e74:	2b02      	cmp	r3, #2
 8010e76:	d124      	bne.n	8010ec2 <USB_HC_StartXfer+0x86>
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	799b      	ldrb	r3, [r3, #6]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d120      	bne.n	8010ec2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	015a      	lsls	r2, r3, #5
 8010e84:	6a3b      	ldr	r3, [r7, #32]
 8010e86:	4413      	add	r3, r2
 8010e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	69fa      	ldr	r2, [r7, #28]
 8010e90:	0151      	lsls	r1, r2, #5
 8010e92:	6a3a      	ldr	r2, [r7, #32]
 8010e94:	440a      	add	r2, r1
 8010e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e9e:	60d3      	str	r3, [r2, #12]
 8010ea0:	e00f      	b.n	8010ec2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	791b      	ldrb	r3, [r3, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d10b      	bne.n	8010ec2 <USB_HC_StartXfer+0x86>
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	795b      	ldrb	r3, [r3, #5]
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d107      	bne.n	8010ec2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	785b      	ldrb	r3, [r3, #1]
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f000 fb6b 	bl	8011594 <USB_DoPing>
        return HAL_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	e232      	b.n	8011328 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	799b      	ldrb	r3, [r3, #6]
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d158      	bne.n	8010f7c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	78db      	ldrb	r3, [r3, #3]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d007      	beq.n	8010ee6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010ed6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	8a92      	ldrh	r2, [r2, #20]
 8010edc:	fb03 f202 	mul.w	r2, r3, r2
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	61da      	str	r2, [r3, #28]
 8010ee4:	e07c      	b.n	8010fe0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	7c9b      	ldrb	r3, [r3, #18]
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d130      	bne.n	8010f50 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	6a1b      	ldr	r3, [r3, #32]
 8010ef2:	2bbc      	cmp	r3, #188	@ 0xbc
 8010ef4:	d918      	bls.n	8010f28 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	8a9b      	ldrh	r3, [r3, #20]
 8010efa:	461a      	mov	r2, r3
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	69da      	ldr	r2, [r3, #28]
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d003      	beq.n	8010f18 <USB_HC_StartXfer+0xdc>
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	2b02      	cmp	r3, #2
 8010f16:	d103      	bne.n	8010f20 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	60da      	str	r2, [r3, #12]
 8010f1e:	e05f      	b.n	8010fe0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	2201      	movs	r2, #1
 8010f24:	60da      	str	r2, [r3, #12]
 8010f26:	e05b      	b.n	8010fe0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	6a1a      	ldr	r2, [r3, #32]
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d007      	beq.n	8010f48 <USB_HC_StartXfer+0x10c>
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d003      	beq.n	8010f48 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2204      	movs	r2, #4
 8010f44:	60da      	str	r2, [r3, #12]
 8010f46:	e04b      	b.n	8010fe0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	2203      	movs	r2, #3
 8010f4c:	60da      	str	r2, [r3, #12]
 8010f4e:	e047      	b.n	8010fe0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8010f50:	79fb      	ldrb	r3, [r7, #7]
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d10d      	bne.n	8010f72 <USB_HC_StartXfer+0x136>
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	6a1b      	ldr	r3, [r3, #32]
 8010f5a:	68ba      	ldr	r2, [r7, #8]
 8010f5c:	8a92      	ldrh	r2, [r2, #20]
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d907      	bls.n	8010f72 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010f62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f64:	68ba      	ldr	r2, [r7, #8]
 8010f66:	8a92      	ldrh	r2, [r2, #20]
 8010f68:	fb03 f202 	mul.w	r2, r3, r2
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	61da      	str	r2, [r3, #28]
 8010f70:	e036      	b.n	8010fe0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	6a1a      	ldr	r2, [r3, #32]
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	61da      	str	r2, [r3, #28]
 8010f7a:	e031      	b.n	8010fe0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	6a1b      	ldr	r3, [r3, #32]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d018      	beq.n	8010fb6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	6a1b      	ldr	r3, [r3, #32]
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	8a92      	ldrh	r2, [r2, #20]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	3b01      	subs	r3, #1
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	8a92      	ldrh	r2, [r2, #20]
 8010f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f98:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8010f9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010f9c:	8b7b      	ldrh	r3, [r7, #26]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d90b      	bls.n	8010fba <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8010fa2:	8b7b      	ldrh	r3, [r7, #26]
 8010fa4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010fa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	8a92      	ldrh	r2, [r2, #20]
 8010fac:	fb03 f202 	mul.w	r2, r3, r2
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	61da      	str	r2, [r3, #28]
 8010fb4:	e001      	b.n	8010fba <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	78db      	ldrb	r3, [r3, #3]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d00a      	beq.n	8010fd8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010fc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	8a92      	ldrh	r2, [r2, #20]
 8010fc8:	fb03 f202 	mul.w	r2, r3, r2
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	61da      	str	r2, [r3, #28]
 8010fd0:	e006      	b.n	8010fe0 <USB_HC_StartXfer+0x1a4>
 8010fd2:	bf00      	nop
 8010fd4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	6a1a      	ldr	r2, [r3, #32]
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	69db      	ldr	r3, [r3, #28]
 8010fe4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010fe8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fea:	04d9      	lsls	r1, r3, #19
 8010fec:	4ba3      	ldr	r3, [pc, #652]	@ (801127c <USB_HC_StartXfer+0x440>)
 8010fee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010ff0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	7d9b      	ldrb	r3, [r3, #22]
 8010ff6:	075b      	lsls	r3, r3, #29
 8010ff8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010ffc:	69f9      	ldr	r1, [r7, #28]
 8010ffe:	0148      	lsls	r0, r1, #5
 8011000:	6a39      	ldr	r1, [r7, #32]
 8011002:	4401      	add	r1, r0
 8011004:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011008:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801100a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801100c:	79fb      	ldrb	r3, [r7, #7]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d009      	beq.n	8011026 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	6999      	ldr	r1, [r3, #24]
 8011016:	69fb      	ldr	r3, [r7, #28]
 8011018:	015a      	lsls	r2, r3, #5
 801101a:	6a3b      	ldr	r3, [r7, #32]
 801101c:	4413      	add	r3, r2
 801101e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011022:	460a      	mov	r2, r1
 8011024:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8011026:	6a3b      	ldr	r3, [r7, #32]
 8011028:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	f003 0301 	and.w	r3, r3, #1
 8011032:	2b00      	cmp	r3, #0
 8011034:	bf0c      	ite	eq
 8011036:	2301      	moveq	r3, #1
 8011038:	2300      	movne	r3, #0
 801103a:	b2db      	uxtb	r3, r3
 801103c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	015a      	lsls	r2, r3, #5
 8011042:	6a3b      	ldr	r3, [r7, #32]
 8011044:	4413      	add	r3, r2
 8011046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	69fa      	ldr	r2, [r7, #28]
 801104e:	0151      	lsls	r1, r2, #5
 8011050:	6a3a      	ldr	r2, [r7, #32]
 8011052:	440a      	add	r2, r1
 8011054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011058:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801105c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	015a      	lsls	r2, r3, #5
 8011062:	6a3b      	ldr	r3, [r7, #32]
 8011064:	4413      	add	r3, r2
 8011066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	7e7b      	ldrb	r3, [r7, #25]
 801106e:	075b      	lsls	r3, r3, #29
 8011070:	69f9      	ldr	r1, [r7, #28]
 8011072:	0148      	lsls	r0, r1, #5
 8011074:	6a39      	ldr	r1, [r7, #32]
 8011076:	4401      	add	r1, r0
 8011078:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 801107c:	4313      	orrs	r3, r2
 801107e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	799b      	ldrb	r3, [r3, #6]
 8011084:	2b01      	cmp	r3, #1
 8011086:	f040 80c3 	bne.w	8011210 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	7c5b      	ldrb	r3, [r3, #17]
 801108e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011094:	4313      	orrs	r3, r2
 8011096:	69fa      	ldr	r2, [r7, #28]
 8011098:	0151      	lsls	r1, r2, #5
 801109a:	6a3a      	ldr	r2, [r7, #32]
 801109c:	440a      	add	r2, r1
 801109e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80110a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80110a6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	015a      	lsls	r2, r3, #5
 80110ac:	6a3b      	ldr	r3, [r7, #32]
 80110ae:	4413      	add	r3, r2
 80110b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	69fa      	ldr	r2, [r7, #28]
 80110b8:	0151      	lsls	r1, r2, #5
 80110ba:	6a3a      	ldr	r2, [r7, #32]
 80110bc:	440a      	add	r2, r1
 80110be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80110c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	79db      	ldrb	r3, [r3, #7]
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d123      	bne.n	8011118 <USB_HC_StartXfer+0x2dc>
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	78db      	ldrb	r3, [r3, #3]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d11f      	bne.n	8011118 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	015a      	lsls	r2, r3, #5
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	4413      	add	r3, r2
 80110e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	69fa      	ldr	r2, [r7, #28]
 80110e8:	0151      	lsls	r1, r2, #5
 80110ea:	6a3a      	ldr	r2, [r7, #32]
 80110ec:	440a      	add	r2, r1
 80110ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80110f6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	015a      	lsls	r2, r3, #5
 80110fc:	6a3b      	ldr	r3, [r7, #32]
 80110fe:	4413      	add	r3, r2
 8011100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	69fa      	ldr	r2, [r7, #28]
 8011108:	0151      	lsls	r1, r2, #5
 801110a:	6a3a      	ldr	r2, [r7, #32]
 801110c:	440a      	add	r2, r1
 801110e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011116:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	7c9b      	ldrb	r3, [r3, #18]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d003      	beq.n	8011128 <USB_HC_StartXfer+0x2ec>
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	7c9b      	ldrb	r3, [r3, #18]
 8011124:	2b03      	cmp	r3, #3
 8011126:	d117      	bne.n	8011158 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 801112c:	2b01      	cmp	r3, #1
 801112e:	d113      	bne.n	8011158 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	78db      	ldrb	r3, [r3, #3]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d10f      	bne.n	8011158 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	015a      	lsls	r2, r3, #5
 801113c:	6a3b      	ldr	r3, [r7, #32]
 801113e:	4413      	add	r3, r2
 8011140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	69fa      	ldr	r2, [r7, #28]
 8011148:	0151      	lsls	r1, r2, #5
 801114a:	6a3a      	ldr	r2, [r7, #32]
 801114c:	440a      	add	r2, r1
 801114e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011156:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	7c9b      	ldrb	r3, [r3, #18]
 801115c:	2b01      	cmp	r3, #1
 801115e:	d162      	bne.n	8011226 <USB_HC_StartXfer+0x3ea>
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	78db      	ldrb	r3, [r3, #3]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d15e      	bne.n	8011226 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	3b01      	subs	r3, #1
 801116e:	2b03      	cmp	r3, #3
 8011170:	d858      	bhi.n	8011224 <USB_HC_StartXfer+0x3e8>
 8011172:	a201      	add	r2, pc, #4	@ (adr r2, 8011178 <USB_HC_StartXfer+0x33c>)
 8011174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011178:	08011189 	.word	0x08011189
 801117c:	080111ab 	.word	0x080111ab
 8011180:	080111cd 	.word	0x080111cd
 8011184:	080111ef 	.word	0x080111ef
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	015a      	lsls	r2, r3, #5
 801118c:	6a3b      	ldr	r3, [r7, #32]
 801118e:	4413      	add	r3, r2
 8011190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	69fa      	ldr	r2, [r7, #28]
 8011198:	0151      	lsls	r1, r2, #5
 801119a:	6a3a      	ldr	r2, [r7, #32]
 801119c:	440a      	add	r2, r1
 801119e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80111a6:	6053      	str	r3, [r2, #4]
          break;
 80111a8:	e03d      	b.n	8011226 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	015a      	lsls	r2, r3, #5
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	4413      	add	r3, r2
 80111b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111b6:	685b      	ldr	r3, [r3, #4]
 80111b8:	69fa      	ldr	r2, [r7, #28]
 80111ba:	0151      	lsls	r1, r2, #5
 80111bc:	6a3a      	ldr	r2, [r7, #32]
 80111be:	440a      	add	r2, r1
 80111c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111c4:	f043 030e 	orr.w	r3, r3, #14
 80111c8:	6053      	str	r3, [r2, #4]
          break;
 80111ca:	e02c      	b.n	8011226 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	015a      	lsls	r2, r3, #5
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	4413      	add	r3, r2
 80111d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	69fa      	ldr	r2, [r7, #28]
 80111dc:	0151      	lsls	r1, r2, #5
 80111de:	6a3a      	ldr	r2, [r7, #32]
 80111e0:	440a      	add	r2, r1
 80111e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80111ea:	6053      	str	r3, [r2, #4]
          break;
 80111ec:	e01b      	b.n	8011226 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	015a      	lsls	r2, r3, #5
 80111f2:	6a3b      	ldr	r3, [r7, #32]
 80111f4:	4413      	add	r3, r2
 80111f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111fa:	685b      	ldr	r3, [r3, #4]
 80111fc:	69fa      	ldr	r2, [r7, #28]
 80111fe:	0151      	lsls	r1, r2, #5
 8011200:	6a3a      	ldr	r2, [r7, #32]
 8011202:	440a      	add	r2, r1
 8011204:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801120c:	6053      	str	r3, [r2, #4]
          break;
 801120e:	e00a      	b.n	8011226 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	015a      	lsls	r2, r3, #5
 8011214:	6a3b      	ldr	r3, [r7, #32]
 8011216:	4413      	add	r3, r2
 8011218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801121c:	461a      	mov	r2, r3
 801121e:	2300      	movs	r3, #0
 8011220:	6053      	str	r3, [r2, #4]
 8011222:	e000      	b.n	8011226 <USB_HC_StartXfer+0x3ea>
          break;
 8011224:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	015a      	lsls	r2, r3, #5
 801122a:	6a3b      	ldr	r3, [r7, #32]
 801122c:	4413      	add	r3, r2
 801122e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801123c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	78db      	ldrb	r3, [r3, #3]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d004      	beq.n	8011250 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801124c:	613b      	str	r3, [r7, #16]
 801124e:	e003      	b.n	8011258 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011256:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801125e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	015a      	lsls	r2, r3, #5
 8011264:	6a3b      	ldr	r3, [r7, #32]
 8011266:	4413      	add	r3, r2
 8011268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801126c:	461a      	mov	r2, r3
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8011272:	79fb      	ldrb	r3, [r7, #7]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d003      	beq.n	8011280 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8011278:	2300      	movs	r3, #0
 801127a:	e055      	b.n	8011328 <USB_HC_StartXfer+0x4ec>
 801127c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	78db      	ldrb	r3, [r3, #3]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d14e      	bne.n	8011326 <USB_HC_StartXfer+0x4ea>
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	6a1b      	ldr	r3, [r3, #32]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d04a      	beq.n	8011326 <USB_HC_StartXfer+0x4ea>
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	79db      	ldrb	r3, [r3, #7]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d146      	bne.n	8011326 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	7c9b      	ldrb	r3, [r3, #18]
 801129c:	2b03      	cmp	r3, #3
 801129e:	d831      	bhi.n	8011304 <USB_HC_StartXfer+0x4c8>
 80112a0:	a201      	add	r2, pc, #4	@ (adr r2, 80112a8 <USB_HC_StartXfer+0x46c>)
 80112a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a6:	bf00      	nop
 80112a8:	080112b9 	.word	0x080112b9
 80112ac:	080112dd 	.word	0x080112dd
 80112b0:	080112b9 	.word	0x080112b9
 80112b4:	080112dd 	.word	0x080112dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	6a1b      	ldr	r3, [r3, #32]
 80112bc:	3303      	adds	r3, #3
 80112be:	089b      	lsrs	r3, r3, #2
 80112c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80112c2:	8afa      	ldrh	r2, [r7, #22]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d91c      	bls.n	8011308 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	699b      	ldr	r3, [r3, #24]
 80112d2:	f043 0220 	orr.w	r2, r3, #32
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80112da:	e015      	b.n	8011308 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	6a1b      	ldr	r3, [r3, #32]
 80112e0:	3303      	adds	r3, #3
 80112e2:	089b      	lsrs	r3, r3, #2
 80112e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80112e6:	8afa      	ldrh	r2, [r7, #22]
 80112e8:	6a3b      	ldr	r3, [r7, #32]
 80112ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80112ee:	691b      	ldr	r3, [r3, #16]
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d90a      	bls.n	801130c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	699b      	ldr	r3, [r3, #24]
 80112fa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	619a      	str	r2, [r3, #24]
        }
        break;
 8011302:	e003      	b.n	801130c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8011304:	bf00      	nop
 8011306:	e002      	b.n	801130e <USB_HC_StartXfer+0x4d2>
        break;
 8011308:	bf00      	nop
 801130a:	e000      	b.n	801130e <USB_HC_StartXfer+0x4d2>
        break;
 801130c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	6999      	ldr	r1, [r3, #24]
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	785a      	ldrb	r2, [r3, #1]
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	6a1b      	ldr	r3, [r3, #32]
 801131a:	b29b      	uxth	r3, r3
 801131c:	2000      	movs	r0, #0
 801131e:	9000      	str	r0, [sp, #0]
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f7ff f9cf 	bl	80106c4 <USB_WritePacket>
  }

  return HAL_OK;
 8011326:	2300      	movs	r3, #0
}
 8011328:	4618      	mov	r0, r3
 801132a:	3728      	adds	r7, #40	@ 0x28
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011330:	b480      	push	{r7}
 8011332:	b085      	sub	sp, #20
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011342:	695b      	ldr	r3, [r3, #20]
 8011344:	b29b      	uxth	r3, r3
}
 8011346:	4618      	mov	r0, r3
 8011348:	3714      	adds	r7, #20
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr

08011352 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011352:	b480      	push	{r7}
 8011354:	b089      	sub	sp, #36	@ 0x24
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	460b      	mov	r3, r1
 801135c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011362:	78fb      	ldrb	r3, [r7, #3]
 8011364:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8011366:	2300      	movs	r3, #0
 8011368:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801136a:	69bb      	ldr	r3, [r7, #24]
 801136c:	015a      	lsls	r2, r3, #5
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	4413      	add	r3, r2
 8011372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	0c9b      	lsrs	r3, r3, #18
 801137a:	f003 0303 	and.w	r3, r3, #3
 801137e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011380:	69bb      	ldr	r3, [r7, #24]
 8011382:	015a      	lsls	r2, r3, #5
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	4413      	add	r3, r2
 8011388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	0fdb      	lsrs	r3, r3, #31
 8011390:	f003 0301 	and.w	r3, r3, #1
 8011394:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	015a      	lsls	r2, r3, #5
 801139a:	69fb      	ldr	r3, [r7, #28]
 801139c:	4413      	add	r3, r2
 801139e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	0fdb      	lsrs	r3, r3, #31
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	689b      	ldr	r3, [r3, #8]
 80113b0:	f003 0320 	and.w	r3, r3, #32
 80113b4:	2b20      	cmp	r3, #32
 80113b6:	d10d      	bne.n	80113d4 <USB_HC_Halt+0x82>
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d10a      	bne.n	80113d4 <USB_HC_Halt+0x82>
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d005      	beq.n	80113d0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d002      	beq.n	80113d0 <USB_HC_Halt+0x7e>
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	2b03      	cmp	r3, #3
 80113ce:	d101      	bne.n	80113d4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	e0d8      	b.n	8011586 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d002      	beq.n	80113e0 <USB_HC_Halt+0x8e>
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d173      	bne.n	80114c8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	015a      	lsls	r2, r3, #5
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	4413      	add	r3, r2
 80113e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	69ba      	ldr	r2, [r7, #24]
 80113f0:	0151      	lsls	r1, r2, #5
 80113f2:	69fa      	ldr	r2, [r7, #28]
 80113f4:	440a      	add	r2, r1
 80113f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80113fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80113fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	689b      	ldr	r3, [r3, #8]
 8011404:	f003 0320 	and.w	r3, r3, #32
 8011408:	2b00      	cmp	r3, #0
 801140a:	d14a      	bne.n	80114a2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011410:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011414:	2b00      	cmp	r3, #0
 8011416:	d133      	bne.n	8011480 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	015a      	lsls	r2, r3, #5
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	4413      	add	r3, r2
 8011420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	69ba      	ldr	r2, [r7, #24]
 8011428:	0151      	lsls	r1, r2, #5
 801142a:	69fa      	ldr	r2, [r7, #28]
 801142c:	440a      	add	r2, r1
 801142e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011432:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011436:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	015a      	lsls	r2, r3, #5
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	4413      	add	r3, r2
 8011440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	69ba      	ldr	r2, [r7, #24]
 8011448:	0151      	lsls	r1, r2, #5
 801144a:	69fa      	ldr	r2, [r7, #28]
 801144c:	440a      	add	r2, r1
 801144e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011452:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011456:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	3301      	adds	r3, #1
 801145c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011464:	d82e      	bhi.n	80114c4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	015a      	lsls	r2, r3, #5
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	4413      	add	r3, r2
 801146e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801147c:	d0ec      	beq.n	8011458 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801147e:	e081      	b.n	8011584 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011480:	69bb      	ldr	r3, [r7, #24]
 8011482:	015a      	lsls	r2, r3, #5
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	4413      	add	r3, r2
 8011488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	69ba      	ldr	r2, [r7, #24]
 8011490:	0151      	lsls	r1, r2, #5
 8011492:	69fa      	ldr	r2, [r7, #28]
 8011494:	440a      	add	r2, r1
 8011496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801149a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801149e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114a0:	e070      	b.n	8011584 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	015a      	lsls	r2, r3, #5
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	4413      	add	r3, r2
 80114aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	69ba      	ldr	r2, [r7, #24]
 80114b2:	0151      	lsls	r1, r2, #5
 80114b4:	69fa      	ldr	r2, [r7, #28]
 80114b6:	440a      	add	r2, r1
 80114b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80114c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114c2:	e05f      	b.n	8011584 <USB_HC_Halt+0x232>
            break;
 80114c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114c6:	e05d      	b.n	8011584 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80114c8:	69bb      	ldr	r3, [r7, #24]
 80114ca:	015a      	lsls	r2, r3, #5
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	4413      	add	r3, r2
 80114d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	69ba      	ldr	r2, [r7, #24]
 80114d8:	0151      	lsls	r1, r2, #5
 80114da:	69fa      	ldr	r2, [r7, #28]
 80114dc:	440a      	add	r2, r1
 80114de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80114e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80114ee:	691b      	ldr	r3, [r3, #16]
 80114f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d133      	bne.n	8011560 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	015a      	lsls	r2, r3, #5
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	4413      	add	r3, r2
 8011500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	69ba      	ldr	r2, [r7, #24]
 8011508:	0151      	lsls	r1, r2, #5
 801150a:	69fa      	ldr	r2, [r7, #28]
 801150c:	440a      	add	r2, r1
 801150e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011512:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011516:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	015a      	lsls	r2, r3, #5
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	4413      	add	r3, r2
 8011520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	69ba      	ldr	r2, [r7, #24]
 8011528:	0151      	lsls	r1, r2, #5
 801152a:	69fa      	ldr	r2, [r7, #28]
 801152c:	440a      	add	r2, r1
 801152e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011532:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011536:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	3301      	adds	r3, #1
 801153c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011544:	d81d      	bhi.n	8011582 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011546:	69bb      	ldr	r3, [r7, #24]
 8011548:	015a      	lsls	r2, r3, #5
 801154a:	69fb      	ldr	r3, [r7, #28]
 801154c:	4413      	add	r3, r2
 801154e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011558:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801155c:	d0ec      	beq.n	8011538 <USB_HC_Halt+0x1e6>
 801155e:	e011      	b.n	8011584 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011560:	69bb      	ldr	r3, [r7, #24]
 8011562:	015a      	lsls	r2, r3, #5
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	4413      	add	r3, r2
 8011568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	69ba      	ldr	r2, [r7, #24]
 8011570:	0151      	lsls	r1, r2, #5
 8011572:	69fa      	ldr	r2, [r7, #28]
 8011574:	440a      	add	r2, r1
 8011576:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801157a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801157e:	6013      	str	r3, [r2, #0]
 8011580:	e000      	b.n	8011584 <USB_HC_Halt+0x232>
          break;
 8011582:	bf00      	nop
    }
  }

  return HAL_OK;
 8011584:	2300      	movs	r3, #0
}
 8011586:	4618      	mov	r0, r3
 8011588:	3724      	adds	r7, #36	@ 0x24
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
	...

08011594 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8011594:	b480      	push	{r7}
 8011596:	b087      	sub	sp, #28
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	460b      	mov	r3, r1
 801159e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80115a4:	78fb      	ldrb	r3, [r7, #3]
 80115a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80115a8:	2301      	movs	r3, #1
 80115aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	04da      	lsls	r2, r3, #19
 80115b0:	4b15      	ldr	r3, [pc, #84]	@ (8011608 <USB_DoPing+0x74>)
 80115b2:	4013      	ands	r3, r2
 80115b4:	693a      	ldr	r2, [r7, #16]
 80115b6:	0151      	lsls	r1, r2, #5
 80115b8:	697a      	ldr	r2, [r7, #20]
 80115ba:	440a      	add	r2, r1
 80115bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80115c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	015a      	lsls	r2, r3, #5
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	4413      	add	r3, r2
 80115ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80115dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	015a      	lsls	r2, r3, #5
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	4413      	add	r3, r2
 80115ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115f2:	461a      	mov	r2, r3
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	371c      	adds	r7, #28
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop
 8011608:	1ff80000 	.word	0x1ff80000

0801160c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b088      	sub	sp, #32
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011614:	2300      	movs	r3, #0
 8011616:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 801161c:	2300      	movs	r3, #0
 801161e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f7fe ff92 	bl	801054a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011626:	2110      	movs	r1, #16
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7fe ffeb 	bl	8010604 <USB_FlushTxFifo>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011634:	2301      	movs	r3, #1
 8011636:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f7ff f815 	bl	8010668 <USB_FlushRxFifo>
 801163e:	4603      	mov	r3, r0
 8011640:	2b00      	cmp	r3, #0
 8011642:	d001      	beq.n	8011648 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011644:	2301      	movs	r3, #1
 8011646:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011648:	2300      	movs	r3, #0
 801164a:	61bb      	str	r3, [r7, #24]
 801164c:	e01f      	b.n	801168e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 801164e:	69bb      	ldr	r3, [r7, #24]
 8011650:	015a      	lsls	r2, r3, #5
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	4413      	add	r3, r2
 8011656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011664:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801166c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011674:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	015a      	lsls	r2, r3, #5
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	4413      	add	r3, r2
 801167e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011682:	461a      	mov	r2, r3
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	3301      	adds	r3, #1
 801168c:	61bb      	str	r3, [r7, #24]
 801168e:	69bb      	ldr	r3, [r7, #24]
 8011690:	2b0f      	cmp	r3, #15
 8011692:	d9dc      	bls.n	801164e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011694:	2300      	movs	r3, #0
 8011696:	61bb      	str	r3, [r7, #24]
 8011698:	e034      	b.n	8011704 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801169a:	69bb      	ldr	r3, [r7, #24]
 801169c:	015a      	lsls	r2, r3, #5
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	4413      	add	r3, r2
 80116a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80116b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80116b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80116c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	015a      	lsls	r2, r3, #5
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	4413      	add	r3, r2
 80116ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116ce:	461a      	mov	r2, r3
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	3301      	adds	r3, #1
 80116d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80116e0:	d80c      	bhi.n	80116fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	015a      	lsls	r2, r3, #5
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	4413      	add	r3, r2
 80116ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80116f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80116f8:	d0ec      	beq.n	80116d4 <USB_StopHost+0xc8>
 80116fa:	e000      	b.n	80116fe <USB_StopHost+0xf2>
        break;
 80116fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80116fe:	69bb      	ldr	r3, [r7, #24]
 8011700:	3301      	adds	r3, #1
 8011702:	61bb      	str	r3, [r7, #24]
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	2b0f      	cmp	r3, #15
 8011708:	d9c7      	bls.n	801169a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011710:	461a      	mov	r2, r3
 8011712:	f04f 33ff 	mov.w	r3, #4294967295
 8011716:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f04f 32ff 	mov.w	r2, #4294967295
 801171e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7fe ff01 	bl	8010528 <USB_EnableGlobalInt>

  return ret;
 8011726:	7ffb      	ldrb	r3, [r7, #31]
}
 8011728:	4618      	mov	r0, r3
 801172a:	3720      	adds	r7, #32
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011734:	4904      	ldr	r1, [pc, #16]	@ (8011748 <MX_FATFS_Init+0x18>)
 8011736:	4805      	ldr	r0, [pc, #20]	@ (801174c <MX_FATFS_Init+0x1c>)
 8011738:	f004 fdce 	bl	80162d8 <FATFS_LinkDriver>
 801173c:	4603      	mov	r3, r0
 801173e:	461a      	mov	r2, r3
 8011740:	4b03      	ldr	r3, [pc, #12]	@ (8011750 <MX_FATFS_Init+0x20>)
 8011742:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011744:	bf00      	nop
 8011746:	bd80      	pop	{r7, pc}
 8011748:	2000158c 	.word	0x2000158c
 801174c:	0801c1a8 	.word	0x0801c1a8
 8011750:	20001588 	.word	0x20001588

08011754 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011754:	b480      	push	{r7}
 8011756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011758:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801175a:	4618      	mov	r0, r3
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011770:	2300      	movs	r3, #0
 8011772:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	68ba      	ldr	r2, [r7, #8]
 8011778:	68f9      	ldr	r1, [r7, #12]
 801177a:	4806      	ldr	r0, [pc, #24]	@ (8011794 <BSP_SD_ReadBlocks_DMA+0x30>)
 801177c:	f7fa fcb4 	bl	800c0e8 <HAL_SD_ReadBlocks_DMA>
 8011780:	4603      	mov	r3, r0
 8011782:	2b00      	cmp	r3, #0
 8011784:	d001      	beq.n	801178a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011786:	2301      	movs	r3, #1
 8011788:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801178a:	7dfb      	ldrb	r3, [r7, #23]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3718      	adds	r7, #24
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	20000c60 	.word	0x20000c60

08011798 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b086      	sub	sp, #24
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80117a4:	2300      	movs	r3, #0
 80117a6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	68ba      	ldr	r2, [r7, #8]
 80117ac:	68f9      	ldr	r1, [r7, #12]
 80117ae:	4806      	ldr	r0, [pc, #24]	@ (80117c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80117b0:	f7fa fd7c 	bl	800c2ac <HAL_SD_WriteBlocks_DMA>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80117ba:	2301      	movs	r3, #1
 80117bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80117be:	7dfb      	ldrb	r3, [r7, #23]
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3718      	adds	r7, #24
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	20000c60 	.word	0x20000c60

080117cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80117d0:	4805      	ldr	r0, [pc, #20]	@ (80117e8 <BSP_SD_GetCardState+0x1c>)
 80117d2:	f7fb f82b 	bl	800c82c <HAL_SD_GetCardState>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b04      	cmp	r3, #4
 80117da:	bf14      	ite	ne
 80117dc:	2301      	movne	r3, #1
 80117de:	2300      	moveq	r3, #0
 80117e0:	b2db      	uxtb	r3, r3
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	bd80      	pop	{r7, pc}
 80117e6:	bf00      	nop
 80117e8:	20000c60 	.word	0x20000c60

080117ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80117f4:	6879      	ldr	r1, [r7, #4]
 80117f6:	4803      	ldr	r0, [pc, #12]	@ (8011804 <BSP_SD_GetCardInfo+0x18>)
 80117f8:	f7fa ffec 	bl	800c7d4 <HAL_SD_GetCardInfo>
}
 80117fc:	bf00      	nop
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	20000c60 	.word	0x20000c60

08011808 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011810:	f000 f998 	bl	8011b44 <BSP_SD_ReadCpltCallback>
}
 8011814:	bf00      	nop
 8011816:	3708      	adds	r7, #8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011824:	f004 fdb8 	bl	8016398 <osKernelSysTick>
 8011828:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 801182a:	e006      	b.n	801183a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801182c:	f7ff ffce 	bl	80117cc <BSP_SD_GetCardState>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011836:	2300      	movs	r3, #0
 8011838:	e009      	b.n	801184e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801183a:	f004 fdad 	bl	8016398 <osKernelSysTick>
 801183e:	4602      	mov	r2, r0
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	1ad3      	subs	r3, r2, r3
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	429a      	cmp	r2, r3
 8011848:	d8f0      	bhi.n	801182c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801184e:	4618      	mov	r0, r3
 8011850:	3710      	adds	r7, #16
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
	...

08011858 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b088      	sub	sp, #32
 801185c:	af00      	add	r7, sp, #0
 801185e:	4603      	mov	r3, r0
 8011860:	71fb      	strb	r3, [r7, #7]
  extern UART_HandleTypeDef huart6;
  const char* start_msg = "[SD_CheckStatus] Start\r\n";
 8011862:	4b2b      	ldr	r3, [pc, #172]	@ (8011910 <SD_CheckStatus+0xb8>)
 8011864:	61fb      	str	r3, [r7, #28]
  HAL_UART_Transmit(&huart6, (uint8_t*)start_msg, strlen(start_msg), 100);
 8011866:	69f8      	ldr	r0, [r7, #28]
 8011868:	f7ee fcdc 	bl	8000224 <strlen>
 801186c:	4603      	mov	r3, r0
 801186e:	b29a      	uxth	r2, r3
 8011870:	2364      	movs	r3, #100	@ 0x64
 8011872:	69f9      	ldr	r1, [r7, #28]
 8011874:	4827      	ldr	r0, [pc, #156]	@ (8011914 <SD_CheckStatus+0xbc>)
 8011876:	f7fc fca1 	bl	800e1bc <HAL_UART_Transmit>

  Stat = STA_NOINIT;
 801187a:	4b27      	ldr	r3, [pc, #156]	@ (8011918 <SD_CheckStatus+0xc0>)
 801187c:	2201      	movs	r2, #1
 801187e:	701a      	strb	r2, [r3, #0]

  // BSP 함수 대신 HAL 함수 직접 사용
  extern SD_HandleTypeDef hsd1;
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 8011880:	4826      	ldr	r0, [pc, #152]	@ (801191c <SD_CheckStatus+0xc4>)
 8011882:	f7fa ffd3 	bl	800c82c <HAL_SD_GetCardState>
 8011886:	61b8      	str	r0, [r7, #24]
  
  const char* check_msg = "[SD_CheckStatus] Got card state\r\n";
 8011888:	4b25      	ldr	r3, [pc, #148]	@ (8011920 <SD_CheckStatus+0xc8>)
 801188a:	617b      	str	r3, [r7, #20]
  HAL_UART_Transmit(&huart6, (uint8_t*)check_msg, strlen(check_msg), 100);
 801188c:	6978      	ldr	r0, [r7, #20]
 801188e:	f7ee fcc9 	bl	8000224 <strlen>
 8011892:	4603      	mov	r3, r0
 8011894:	b29a      	uxth	r2, r3
 8011896:	2364      	movs	r3, #100	@ 0x64
 8011898:	6979      	ldr	r1, [r7, #20]
 801189a:	481e      	ldr	r0, [pc, #120]	@ (8011914 <SD_CheckStatus+0xbc>)
 801189c:	f7fc fc8e 	bl	800e1bc <HAL_UART_Transmit>
  
  if(cardState == HAL_SD_CARD_TRANSFER)
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	2b04      	cmp	r3, #4
 80118a4:	d114      	bne.n	80118d0 <SD_CheckStatus+0x78>
  {
    Stat &= ~STA_NOINIT;
 80118a6:	4b1c      	ldr	r3, [pc, #112]	@ (8011918 <SD_CheckStatus+0xc0>)
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	f023 0301 	bic.w	r3, r3, #1
 80118b0:	b2da      	uxtb	r2, r3
 80118b2:	4b19      	ldr	r3, [pc, #100]	@ (8011918 <SD_CheckStatus+0xc0>)
 80118b4:	701a      	strb	r2, [r3, #0]
    const char* success_msg = "[SD_CheckStatus] SUCCESS!\r\n";
 80118b6:	4b1b      	ldr	r3, [pc, #108]	@ (8011924 <SD_CheckStatus+0xcc>)
 80118b8:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart6, (uint8_t*)success_msg, strlen(success_msg), 100);
 80118ba:	68f8      	ldr	r0, [r7, #12]
 80118bc:	f7ee fcb2 	bl	8000224 <strlen>
 80118c0:	4603      	mov	r3, r0
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	2364      	movs	r3, #100	@ 0x64
 80118c6:	68f9      	ldr	r1, [r7, #12]
 80118c8:	4812      	ldr	r0, [pc, #72]	@ (8011914 <SD_CheckStatus+0xbc>)
 80118ca:	f7fc fc77 	bl	800e1bc <HAL_UART_Transmit>
 80118ce:	e00b      	b.n	80118e8 <SD_CheckStatus+0x90>
  } else {
    const char* fail_msg = "[SD_CheckStatus] FAILED!\r\n";
 80118d0:	4b15      	ldr	r3, [pc, #84]	@ (8011928 <SD_CheckStatus+0xd0>)
 80118d2:	613b      	str	r3, [r7, #16]
    HAL_UART_Transmit(&huart6, (uint8_t*)fail_msg, strlen(fail_msg), 100);
 80118d4:	6938      	ldr	r0, [r7, #16]
 80118d6:	f7ee fca5 	bl	8000224 <strlen>
 80118da:	4603      	mov	r3, r0
 80118dc:	b29a      	uxth	r2, r3
 80118de:	2364      	movs	r3, #100	@ 0x64
 80118e0:	6939      	ldr	r1, [r7, #16]
 80118e2:	480c      	ldr	r0, [pc, #48]	@ (8011914 <SD_CheckStatus+0xbc>)
 80118e4:	f7fc fc6a 	bl	800e1bc <HAL_UART_Transmit>
  }

  const char* end_msg = "[SD_CheckStatus] End\r\n";
 80118e8:	4b10      	ldr	r3, [pc, #64]	@ (801192c <SD_CheckStatus+0xd4>)
 80118ea:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart6, (uint8_t*)end_msg, strlen(end_msg), 100);
 80118ec:	68b8      	ldr	r0, [r7, #8]
 80118ee:	f7ee fc99 	bl	8000224 <strlen>
 80118f2:	4603      	mov	r3, r0
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	2364      	movs	r3, #100	@ 0x64
 80118f8:	68b9      	ldr	r1, [r7, #8]
 80118fa:	4806      	ldr	r0, [pc, #24]	@ (8011914 <SD_CheckStatus+0xbc>)
 80118fc:	f7fc fc5e 	bl	800e1bc <HAL_UART_Transmit>
  return Stat;
 8011900:	4b05      	ldr	r3, [pc, #20]	@ (8011918 <SD_CheckStatus+0xc0>)
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	b2db      	uxtb	r3, r3
}
 8011906:	4618      	mov	r0, r3
 8011908:	3720      	adds	r7, #32
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	0801c070 	.word	0x0801c070
 8011914:	20000fe4 	.word	0x20000fe4
 8011918:	20000051 	.word	0x20000051
 801191c:	20000c60 	.word	0x20000c60
 8011920:	0801c08c 	.word	0x0801c08c
 8011924:	0801c0b0 	.word	0x0801c0b0
 8011928:	0801c0cc 	.word	0x0801c0cc
 801192c:	0801c0e8 	.word	0x0801c0e8

08011930 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011930:	b480      	push	{r7}
 8011932:	b083      	sub	sp, #12
 8011934:	af00      	add	r7, sp, #0
 8011936:	4603      	mov	r3, r0
 8011938:	71fb      	strb	r3, [r7, #7]
  // 테스트: 즉시 성공 반환
  return 0;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	4603      	mov	r3, r0
 8011950:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011952:	79fb      	ldrb	r3, [r7, #7]
 8011954:	4618      	mov	r0, r3
 8011956:	f7ff ff7f 	bl	8011858 <SD_CheckStatus>
 801195a:	4603      	mov	r3, r0
}
 801195c:	4618      	mov	r0, r3
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b08a      	sub	sp, #40	@ 0x28
 8011968:	af00      	add	r7, sp, #0
 801196a:	60b9      	str	r1, [r7, #8]
 801196c:	607a      	str	r2, [r7, #4]
 801196e:	603b      	str	r3, [r7, #0]
 8011970:	4603      	mov	r3, r0
 8011972:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011974:	2301      	movs	r3, #1
 8011976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801197a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801197e:	f7ff ff4d 	bl	801181c <SD_CheckStatusWithTimeout>
 8011982:	4603      	mov	r3, r0
 8011984:	2b00      	cmp	r3, #0
 8011986:	da02      	bge.n	801198e <SD_read+0x2a>
  {
    return res;
 8011988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801198c:	e032      	b.n	80119f4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801198e:	683a      	ldr	r2, [r7, #0]
 8011990:	6879      	ldr	r1, [r7, #4]
 8011992:	68b8      	ldr	r0, [r7, #8]
 8011994:	f7ff fee6 	bl	8011764 <BSP_SD_ReadBlocks_DMA>
 8011998:	4603      	mov	r3, r0
 801199a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 801199e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d124      	bne.n	80119f0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80119a6:	4b15      	ldr	r3, [pc, #84]	@ (80119fc <SD_read+0x98>)
 80119a8:	6819      	ldr	r1, [r3, #0]
 80119aa:	f107 0314 	add.w	r3, r7, #20
 80119ae:	f247 5230 	movw	r2, #30000	@ 0x7530
 80119b2:	4618      	mov	r0, r3
 80119b4:	f004 fe4c 	bl	8016650 <osMessageGet>

    if (event.status == osEventMessage)
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2b10      	cmp	r3, #16
 80119bc:	d118      	bne.n	80119f0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80119be:	69bb      	ldr	r3, [r7, #24]
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d115      	bne.n	80119f0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80119c4:	f004 fce8 	bl	8016398 <osKernelSysTick>
 80119c8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80119ca:	e008      	b.n	80119de <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80119cc:	f7ff fefe 	bl	80117cc <BSP_SD_GetCardState>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d103      	bne.n	80119de <SD_read+0x7a>
              {
                res = RES_OK;
 80119d6:	2300      	movs	r3, #0
 80119d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80119dc:	e008      	b.n	80119f0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80119de:	f004 fcdb 	bl	8016398 <osKernelSysTick>
 80119e2:	4602      	mov	r2, r0
 80119e4:	6a3b      	ldr	r3, [r7, #32]
 80119e6:	1ad3      	subs	r3, r2, r3
 80119e8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80119ec:	4293      	cmp	r3, r2
 80119ee:	d9ed      	bls.n	80119cc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80119f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3728      	adds	r7, #40	@ 0x28
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	20001590 	.word	0x20001590

08011a00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b08a      	sub	sp, #40	@ 0x28
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60b9      	str	r1, [r7, #8]
 8011a08:	607a      	str	r2, [r7, #4]
 8011a0a:	603b      	str	r3, [r7, #0]
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011a10:	2301      	movs	r3, #1
 8011a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011a16:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011a1a:	f7ff feff 	bl	801181c <SD_CheckStatusWithTimeout>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	da02      	bge.n	8011a2a <SD_write+0x2a>
  {
    return res;
 8011a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a28:	e02e      	b.n	8011a88 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011a2a:	683a      	ldr	r2, [r7, #0]
 8011a2c:	6879      	ldr	r1, [r7, #4]
 8011a2e:	68b8      	ldr	r0, [r7, #8]
 8011a30:	f7ff feb2 	bl	8011798 <BSP_SD_WriteBlocks_DMA>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d124      	bne.n	8011a84 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011a3a:	4b15      	ldr	r3, [pc, #84]	@ (8011a90 <SD_write+0x90>)
 8011a3c:	6819      	ldr	r1, [r3, #0]
 8011a3e:	f107 0314 	add.w	r3, r7, #20
 8011a42:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011a46:	4618      	mov	r0, r3
 8011a48:	f004 fe02 	bl	8016650 <osMessageGet>

    if (event.status == osEventMessage)
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2b10      	cmp	r3, #16
 8011a50:	d118      	bne.n	8011a84 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	2b02      	cmp	r3, #2
 8011a56:	d115      	bne.n	8011a84 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8011a58:	f004 fc9e 	bl	8016398 <osKernelSysTick>
 8011a5c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011a5e:	e008      	b.n	8011a72 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011a60:	f7ff feb4 	bl	80117cc <BSP_SD_GetCardState>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d103      	bne.n	8011a72 <SD_write+0x72>
          {
            res = RES_OK;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8011a70:	e008      	b.n	8011a84 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011a72:	f004 fc91 	bl	8016398 <osKernelSysTick>
 8011a76:	4602      	mov	r2, r0
 8011a78:	6a3b      	ldr	r3, [r7, #32]
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011a80:	4293      	cmp	r3, r2
 8011a82:	d9ed      	bls.n	8011a60 <SD_write+0x60>
    }

  }
#endif

  return res;
 8011a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3728      	adds	r7, #40	@ 0x28
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	20001590 	.word	0x20001590

08011a94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b08c      	sub	sp, #48	@ 0x30
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	603a      	str	r2, [r7, #0]
 8011a9e:	71fb      	strb	r3, [r7, #7]
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011aaa:	4b25      	ldr	r3, [pc, #148]	@ (8011b40 <SD_ioctl+0xac>)
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	f003 0301 	and.w	r3, r3, #1
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d001      	beq.n	8011abc <SD_ioctl+0x28>
 8011ab8:	2303      	movs	r3, #3
 8011aba:	e03c      	b.n	8011b36 <SD_ioctl+0xa2>

  switch (cmd)
 8011abc:	79bb      	ldrb	r3, [r7, #6]
 8011abe:	2b03      	cmp	r3, #3
 8011ac0:	d834      	bhi.n	8011b2c <SD_ioctl+0x98>
 8011ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ac8 <SD_ioctl+0x34>)
 8011ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ac8:	08011ad9 	.word	0x08011ad9
 8011acc:	08011ae1 	.word	0x08011ae1
 8011ad0:	08011af9 	.word	0x08011af9
 8011ad4:	08011b13 	.word	0x08011b13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ade:	e028      	b.n	8011b32 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ae0:	f107 030c 	add.w	r3, r7, #12
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ff fe81 	bl	80117ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011af0:	2300      	movs	r3, #0
 8011af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011af6:	e01c      	b.n	8011b32 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011af8:	f107 030c 	add.w	r3, r7, #12
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7ff fe75 	bl	80117ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011b10:	e00f      	b.n	8011b32 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011b12:	f107 030c 	add.w	r3, r7, #12
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7ff fe68 	bl	80117ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b1e:	0a5a      	lsrs	r2, r3, #9
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011b24:	2300      	movs	r3, #0
 8011b26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011b2a:	e002      	b.n	8011b32 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011b2c:	2304      	movs	r3, #4
 8011b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011b32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3730      	adds	r7, #48	@ 0x30
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	20000051 	.word	0x20000051

08011b44 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8011b48:	4b04      	ldr	r3, [pc, #16]	@ (8011b5c <BSP_SD_ReadCpltCallback+0x18>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	2101      	movs	r1, #1
 8011b50:	4618      	mov	r0, r3
 8011b52:	f004 fd3d 	bl	80165d0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8011b56:	bf00      	nop
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	20001590 	.word	0x20001590

08011b60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8011b60:	b590      	push	{r4, r7, lr}
 8011b62:	b089      	sub	sp, #36	@ 0x24
 8011b64:	af04      	add	r7, sp, #16
 8011b66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8011b68:	2301      	movs	r3, #1
 8011b6a:	2202      	movs	r2, #2
 8011b6c:	2102      	movs	r1, #2
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 fcbd 	bl	80124ee <USBH_FindInterface>
 8011b74:	4603      	mov	r3, r0
 8011b76:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011b78:	7bfb      	ldrb	r3, [r7, #15]
 8011b7a:	2bff      	cmp	r3, #255	@ 0xff
 8011b7c:	d002      	beq.n	8011b84 <USBH_CDC_InterfaceInit+0x24>
 8011b7e:	7bfb      	ldrb	r3, [r7, #15]
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d901      	bls.n	8011b88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011b84:	2302      	movs	r3, #2
 8011b86:	e13d      	b.n	8011e04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8011b88:	7bfb      	ldrb	r3, [r7, #15]
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f000 fc92 	bl	80124b6 <USBH_SelectInterface>
 8011b92:	4603      	mov	r3, r0
 8011b94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8011b96:	7bbb      	ldrb	r3, [r7, #14]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d001      	beq.n	8011ba0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	e131      	b.n	8011e04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8011ba6:	2050      	movs	r0, #80	@ 0x50
 8011ba8:	f007 fdcc 	bl	8019744 <malloc>
 8011bac:	4603      	mov	r3, r0
 8011bae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011bb6:	69db      	ldr	r3, [r3, #28]
 8011bb8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d101      	bne.n	8011bc4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8011bc0:	2302      	movs	r3, #2
 8011bc2:	e11f      	b.n	8011e04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8011bc4:	2250      	movs	r2, #80	@ 0x50
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	68b8      	ldr	r0, [r7, #8]
 8011bca:	f007 ff0d 	bl	80199e8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011bce:	7bfb      	ldrb	r3, [r7, #15]
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	211a      	movs	r1, #26
 8011bd4:	fb01 f303 	mul.w	r3, r1, r3
 8011bd8:	4413      	add	r3, r2
 8011bda:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	b25b      	sxtb	r3, r3
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	da15      	bge.n	8011c12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011be6:	7bfb      	ldrb	r3, [r7, #15]
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	211a      	movs	r1, #26
 8011bec:	fb01 f303 	mul.w	r3, r1, r3
 8011bf0:	4413      	add	r3, r2
 8011bf2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011bf6:	781a      	ldrb	r2, [r3, #0]
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011bfc:	7bfb      	ldrb	r3, [r7, #15]
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	211a      	movs	r1, #26
 8011c02:	fb01 f303 	mul.w	r3, r1, r3
 8011c06:	4413      	add	r3, r2
 8011c08:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011c0c:	881a      	ldrh	r2, [r3, #0]
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	785b      	ldrb	r3, [r3, #1]
 8011c16:	4619      	mov	r1, r3
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f002 f90c 	bl	8013e36 <USBH_AllocPipe>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	461a      	mov	r2, r3
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	7819      	ldrb	r1, [r3, #0]
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	7858      	ldrb	r0, [r3, #1]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011c3a:	68ba      	ldr	r2, [r7, #8]
 8011c3c:	8952      	ldrh	r2, [r2, #10]
 8011c3e:	9202      	str	r2, [sp, #8]
 8011c40:	2203      	movs	r2, #3
 8011c42:	9201      	str	r2, [sp, #4]
 8011c44:	9300      	str	r3, [sp, #0]
 8011c46:	4623      	mov	r3, r4
 8011c48:	4602      	mov	r2, r0
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f002 f8c4 	bl	8013dd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	2200      	movs	r2, #0
 8011c56:	4619      	mov	r1, r3
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f007 fced 	bl	8019638 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8011c5e:	2300      	movs	r3, #0
 8011c60:	2200      	movs	r2, #0
 8011c62:	210a      	movs	r1, #10
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f000 fc42 	bl	80124ee <USBH_FindInterface>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011c6e:	7bfb      	ldrb	r3, [r7, #15]
 8011c70:	2bff      	cmp	r3, #255	@ 0xff
 8011c72:	d002      	beq.n	8011c7a <USBH_CDC_InterfaceInit+0x11a>
 8011c74:	7bfb      	ldrb	r3, [r7, #15]
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d901      	bls.n	8011c7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011c7a:	2302      	movs	r3, #2
 8011c7c:	e0c2      	b.n	8011e04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011c7e:	7bfb      	ldrb	r3, [r7, #15]
 8011c80:	687a      	ldr	r2, [r7, #4]
 8011c82:	211a      	movs	r1, #26
 8011c84:	fb01 f303 	mul.w	r3, r1, r3
 8011c88:	4413      	add	r3, r2
 8011c8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	b25b      	sxtb	r3, r3
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	da16      	bge.n	8011cc4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011c96:	7bfb      	ldrb	r3, [r7, #15]
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	211a      	movs	r1, #26
 8011c9c:	fb01 f303 	mul.w	r3, r1, r3
 8011ca0:	4413      	add	r3, r2
 8011ca2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011ca6:	781a      	ldrb	r2, [r3, #0]
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011cac:	7bfb      	ldrb	r3, [r7, #15]
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	211a      	movs	r1, #26
 8011cb2:	fb01 f303 	mul.w	r3, r1, r3
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011cbc:	881a      	ldrh	r2, [r3, #0]
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	835a      	strh	r2, [r3, #26]
 8011cc2:	e015      	b.n	8011cf0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011cc4:	7bfb      	ldrb	r3, [r7, #15]
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	211a      	movs	r1, #26
 8011cca:	fb01 f303 	mul.w	r3, r1, r3
 8011cce:	4413      	add	r3, r2
 8011cd0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011cd4:	781a      	ldrb	r2, [r3, #0]
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011cda:	7bfb      	ldrb	r3, [r7, #15]
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	211a      	movs	r1, #26
 8011ce0:	fb01 f303 	mul.w	r3, r1, r3
 8011ce4:	4413      	add	r3, r2
 8011ce6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011cea:	881a      	ldrh	r2, [r3, #0]
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8011cf0:	7bfb      	ldrb	r3, [r7, #15]
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	211a      	movs	r1, #26
 8011cf6:	fb01 f303 	mul.w	r3, r1, r3
 8011cfa:	4413      	add	r3, r2
 8011cfc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	b25b      	sxtb	r3, r3
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	da16      	bge.n	8011d36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011d08:	7bfb      	ldrb	r3, [r7, #15]
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	211a      	movs	r1, #26
 8011d0e:	fb01 f303 	mul.w	r3, r1, r3
 8011d12:	4413      	add	r3, r2
 8011d14:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011d18:	781a      	ldrb	r2, [r3, #0]
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011d1e:	7bfb      	ldrb	r3, [r7, #15]
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	211a      	movs	r1, #26
 8011d24:	fb01 f303 	mul.w	r3, r1, r3
 8011d28:	4413      	add	r3, r2
 8011d2a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011d2e:	881a      	ldrh	r2, [r3, #0]
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	835a      	strh	r2, [r3, #26]
 8011d34:	e015      	b.n	8011d62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011d36:	7bfb      	ldrb	r3, [r7, #15]
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	211a      	movs	r1, #26
 8011d3c:	fb01 f303 	mul.w	r3, r1, r3
 8011d40:	4413      	add	r3, r2
 8011d42:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011d46:	781a      	ldrb	r2, [r3, #0]
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011d4c:	7bfb      	ldrb	r3, [r7, #15]
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	211a      	movs	r1, #26
 8011d52:	fb01 f303 	mul.w	r3, r1, r3
 8011d56:	4413      	add	r3, r2
 8011d58:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011d5c:	881a      	ldrh	r2, [r3, #0]
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	7b9b      	ldrb	r3, [r3, #14]
 8011d66:	4619      	mov	r1, r3
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f002 f864 	bl	8013e36 <USBH_AllocPipe>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	461a      	mov	r2, r3
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	7bdb      	ldrb	r3, [r3, #15]
 8011d7a:	4619      	mov	r1, r3
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f002 f85a 	bl	8013e36 <USBH_AllocPipe>
 8011d82:	4603      	mov	r3, r0
 8011d84:	461a      	mov	r2, r3
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	7b59      	ldrb	r1, [r3, #13]
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	7b98      	ldrb	r0, [r3, #14]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d9e:	68ba      	ldr	r2, [r7, #8]
 8011da0:	8b12      	ldrh	r2, [r2, #24]
 8011da2:	9202      	str	r2, [sp, #8]
 8011da4:	2202      	movs	r2, #2
 8011da6:	9201      	str	r2, [sp, #4]
 8011da8:	9300      	str	r3, [sp, #0]
 8011daa:	4623      	mov	r3, r4
 8011dac:	4602      	mov	r2, r0
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f002 f812 	bl	8013dd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	7b19      	ldrb	r1, [r3, #12]
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	7bd8      	ldrb	r0, [r3, #15]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	8b52      	ldrh	r2, [r2, #26]
 8011dcc:	9202      	str	r2, [sp, #8]
 8011dce:	2202      	movs	r2, #2
 8011dd0:	9201      	str	r2, [sp, #4]
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	4623      	mov	r3, r4
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f001 fffd 	bl	8013dd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	2200      	movs	r2, #0
 8011de2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	7b5b      	ldrb	r3, [r3, #13]
 8011dea:	2200      	movs	r2, #0
 8011dec:	4619      	mov	r1, r3
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f007 fc22 	bl	8019638 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	7b1b      	ldrb	r3, [r3, #12]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f007 fc1b 	bl	8019638 <USBH_LL_SetToggle>

  return USBH_OK;
 8011e02:	2300      	movs	r3, #0
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3714      	adds	r7, #20
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd90      	pop	{r4, r7, pc}

08011e0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e1a:	69db      	ldr	r3, [r3, #28]
 8011e1c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00e      	beq.n	8011e44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f001 fff2 	bl	8013e16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	4619      	mov	r1, r3
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f002 f81d 	bl	8013e78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2200      	movs	r2, #0
 8011e42:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	7b1b      	ldrb	r3, [r3, #12]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00e      	beq.n	8011e6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	7b1b      	ldrb	r3, [r3, #12]
 8011e50:	4619      	mov	r1, r3
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f001 ffdf 	bl	8013e16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	7b1b      	ldrb	r3, [r3, #12]
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f002 f80a 	bl	8013e78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2200      	movs	r2, #0
 8011e68:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	7b5b      	ldrb	r3, [r3, #13]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d00e      	beq.n	8011e90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	7b5b      	ldrb	r3, [r3, #13]
 8011e76:	4619      	mov	r1, r3
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f001 ffcc 	bl	8013e16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	7b5b      	ldrb	r3, [r3, #13]
 8011e82:	4619      	mov	r1, r3
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f001 fff7 	bl	8013e78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e96:	69db      	ldr	r3, [r3, #28]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00b      	beq.n	8011eb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011ea2:	69db      	ldr	r3, [r3, #28]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f007 fc55 	bl	8019754 <free>
    phost->pActiveClass->pData = 0U;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8011ebe:	b580      	push	{r7, lr}
 8011ec0:	b084      	sub	sp, #16
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011ecc:	69db      	ldr	r3, [r3, #28]
 8011ece:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	3340      	adds	r3, #64	@ 0x40
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f000 f8b1 	bl	801203e <GetLineCoding>
 8011edc:	4603      	mov	r3, r0
 8011ede:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8011ee0:	7afb      	ldrb	r3, [r7, #11]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d105      	bne.n	8011ef2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011eec:	2102      	movs	r1, #2
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8011ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3710      	adds	r7, #16
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011f04:	2301      	movs	r3, #1
 8011f06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011f12:	69db      	ldr	r3, [r3, #28]
 8011f14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8011f1c:	2b04      	cmp	r3, #4
 8011f1e:	d877      	bhi.n	8012010 <USBH_CDC_Process+0x114>
 8011f20:	a201      	add	r2, pc, #4	@ (adr r2, 8011f28 <USBH_CDC_Process+0x2c>)
 8011f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f26:	bf00      	nop
 8011f28:	08011f3d 	.word	0x08011f3d
 8011f2c:	08011f43 	.word	0x08011f43
 8011f30:	08011f73 	.word	0x08011f73
 8011f34:	08011fe7 	.word	0x08011fe7
 8011f38:	08011ff5 	.word	0x08011ff5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8011f40:	e06d      	b.n	801201e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f46:	4619      	mov	r1, r3
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 f897 	bl	801207c <SetLineCoding>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011f52:	7bbb      	ldrb	r3, [r7, #14]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d104      	bne.n	8011f62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	2202      	movs	r2, #2
 8011f5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011f60:	e058      	b.n	8012014 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8011f62:	7bbb      	ldrb	r3, [r7, #14]
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d055      	beq.n	8012014 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	2204      	movs	r2, #4
 8011f6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011f70:	e050      	b.n	8012014 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	3340      	adds	r3, #64	@ 0x40
 8011f76:	4619      	mov	r1, r3
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f000 f860 	bl	801203e <GetLineCoding>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011f82:	7bbb      	ldrb	r3, [r7, #14]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d126      	bne.n	8011fd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f9a:	791b      	ldrb	r3, [r3, #4]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d13b      	bne.n	8012018 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011faa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d133      	bne.n	8012018 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d12b      	bne.n	8012018 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d124      	bne.n	8012018 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f000 f96a 	bl	80122a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011fd4:	e020      	b.n	8012018 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8011fd6:	7bbb      	ldrb	r3, [r7, #14]
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d01d      	beq.n	8012018 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	2204      	movs	r2, #4
 8011fe0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011fe4:	e018      	b.n	8012018 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 f867 	bl	80120ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f000 f8e6 	bl	80121be <CDC_ProcessReception>
      break;
 8011ff2:	e014      	b.n	801201e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f001 f8ff 	bl	80131fa <USBH_ClrFeature>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012000:	7bbb      	ldrb	r3, [r7, #14]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d10a      	bne.n	801201c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	2200      	movs	r2, #0
 801200a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 801200e:	e005      	b.n	801201c <USBH_CDC_Process+0x120>

    default:
      break;
 8012010:	bf00      	nop
 8012012:	e004      	b.n	801201e <USBH_CDC_Process+0x122>
      break;
 8012014:	bf00      	nop
 8012016:	e002      	b.n	801201e <USBH_CDC_Process+0x122>
      break;
 8012018:	bf00      	nop
 801201a:	e000      	b.n	801201e <USBH_CDC_Process+0x122>
      break;
 801201c:	bf00      	nop

  }

  return status;
 801201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012020:	4618      	mov	r0, r3
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012030:	2300      	movs	r3, #0
}
 8012032:	4618      	mov	r0, r3
 8012034:	370c      	adds	r7, #12
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr

0801203e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 801203e:	b580      	push	{r7, lr}
 8012040:	b082      	sub	sp, #8
 8012042:	af00      	add	r7, sp, #0
 8012044:	6078      	str	r0, [r7, #4]
 8012046:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	22a1      	movs	r2, #161	@ 0xa1
 801204c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2221      	movs	r2, #33	@ 0x21
 8012052:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2207      	movs	r2, #7
 8012064:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	2207      	movs	r2, #7
 801206a:	4619      	mov	r1, r3
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f001 fbf9 	bl	8013864 <USBH_CtlReq>
 8012072:	4603      	mov	r3, r0
}
 8012074:	4618      	mov	r0, r3
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b082      	sub	sp, #8
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2221      	movs	r2, #33	@ 0x21
 801208a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2220      	movs	r2, #32
 8012090:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2200      	movs	r2, #0
 8012096:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2200      	movs	r2, #0
 801209c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2207      	movs	r2, #7
 80120a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	2207      	movs	r2, #7
 80120a8:	4619      	mov	r1, r3
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f001 fbda 	bl	8013864 <USBH_CtlReq>
 80120b0:	4603      	mov	r3, r0
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3708      	adds	r7, #8
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b086      	sub	sp, #24
 80120be:	af02      	add	r7, sp, #8
 80120c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80120c8:	69db      	ldr	r3, [r3, #28]
 80120ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80120cc:	2300      	movs	r3, #0
 80120ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80120d6:	2b01      	cmp	r3, #1
 80120d8:	d002      	beq.n	80120e0 <CDC_ProcessTransmission+0x26>
 80120da:	2b02      	cmp	r3, #2
 80120dc:	d023      	beq.n	8012126 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80120de:	e06a      	b.n	80121b6 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	8b12      	ldrh	r2, [r2, #24]
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d90b      	bls.n	8012104 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	69d9      	ldr	r1, [r3, #28]
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	8b1a      	ldrh	r2, [r3, #24]
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	7b5b      	ldrb	r3, [r3, #13]
 80120f8:	2001      	movs	r0, #1
 80120fa:	9000      	str	r0, [sp, #0]
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f001 fe28 	bl	8013d52 <USBH_BulkSendData>
 8012102:	e00b      	b.n	801211c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 801210c:	b29a      	uxth	r2, r3
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	7b5b      	ldrb	r3, [r3, #13]
 8012112:	2001      	movs	r0, #1
 8012114:	9000      	str	r0, [sp, #0]
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f001 fe1b 	bl	8013d52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	2202      	movs	r2, #2
 8012120:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8012124:	e047      	b.n	80121b6 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	7b5b      	ldrb	r3, [r3, #13]
 801212a:	4619      	mov	r1, r3
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f007 fa59 	bl	80195e4 <USBH_LL_GetURBState>
 8012132:	4603      	mov	r3, r0
 8012134:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8012136:	7afb      	ldrb	r3, [r7, #11]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d12e      	bne.n	801219a <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	8b12      	ldrh	r2, [r2, #24]
 8012144:	4293      	cmp	r3, r2
 8012146:	d90e      	bls.n	8012166 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801214c:	68fa      	ldr	r2, [r7, #12]
 801214e:	8b12      	ldrh	r2, [r2, #24]
 8012150:	1a9a      	subs	r2, r3, r2
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	69db      	ldr	r3, [r3, #28]
 801215a:	68fa      	ldr	r2, [r7, #12]
 801215c:	8b12      	ldrh	r2, [r2, #24]
 801215e:	441a      	add	r2, r3
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	61da      	str	r2, [r3, #28]
 8012164:	e002      	b.n	801216c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2200      	movs	r2, #0
 801216a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012170:	2b00      	cmp	r3, #0
 8012172:	d004      	beq.n	801217e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2201      	movs	r2, #1
 8012178:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 801217c:	e006      	b.n	801218c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2200      	movs	r2, #0
 8012182:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 f87a 	bl	8012280 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 801218c:	2300      	movs	r3, #0
 801218e:	2200      	movs	r2, #0
 8012190:	2104      	movs	r1, #4
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f000 febc 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8012198:	e00c      	b.n	80121b4 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 801219a:	7afb      	ldrb	r3, [r7, #11]
 801219c:	2b02      	cmp	r3, #2
 801219e:	d109      	bne.n	80121b4 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2201      	movs	r2, #1
 80121a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 80121a8:	2300      	movs	r3, #0
 80121aa:	2200      	movs	r2, #0
 80121ac:	2104      	movs	r1, #4
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 feae 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 80121b4:	bf00      	nop
  }
}
 80121b6:	bf00      	nop
 80121b8:	3710      	adds	r7, #16
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}

080121be <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b086      	sub	sp, #24
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80121cc:	69db      	ldr	r3, [r3, #28]
 80121ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80121d0:	2300      	movs	r3, #0
 80121d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80121da:	2b03      	cmp	r3, #3
 80121dc:	d002      	beq.n	80121e4 <CDC_ProcessReception+0x26>
 80121de:	2b04      	cmp	r3, #4
 80121e0:	d00e      	beq.n	8012200 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80121e2:	e049      	b.n	8012278 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	6a19      	ldr	r1, [r3, #32]
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	8b5a      	ldrh	r2, [r3, #26]
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	7b1b      	ldrb	r3, [r3, #12]
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f001 fdd3 	bl	8013d9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	2204      	movs	r2, #4
 80121fa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80121fe:	e03b      	b.n	8012278 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	7b1b      	ldrb	r3, [r3, #12]
 8012204:	4619      	mov	r1, r3
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f007 f9ec 	bl	80195e4 <USBH_LL_GetURBState>
 801220c:	4603      	mov	r3, r0
 801220e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012210:	7cfb      	ldrb	r3, [r7, #19]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d12f      	bne.n	8012276 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	7b1b      	ldrb	r3, [r3, #12]
 801221a:	4619      	mov	r1, r3
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f007 f94f 	bl	80194c0 <USBH_LL_GetLastXferSize>
 8012222:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012228:	68fa      	ldr	r2, [r7, #12]
 801222a:	429a      	cmp	r2, r3
 801222c:	d016      	beq.n	801225c <CDC_ProcessReception+0x9e>
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	8b5b      	ldrh	r3, [r3, #26]
 8012232:	461a      	mov	r2, r3
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4293      	cmp	r3, r2
 8012238:	d110      	bne.n	801225c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	1ad2      	subs	r2, r2, r3
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	6a1a      	ldr	r2, [r3, #32]
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	441a      	add	r2, r3
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	2203      	movs	r2, #3
 8012256:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 801225a:	e006      	b.n	801226a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	2200      	movs	r2, #0
 8012260:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 f815 	bl	8012294 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 801226a:	2300      	movs	r3, #0
 801226c:	2200      	movs	r2, #0
 801226e:	2104      	movs	r1, #4
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f000 fe4d 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8012276:	bf00      	nop
  }
}
 8012278:	bf00      	nop
 801227a:	3718      	adds	r7, #24
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012280:	b480      	push	{r7}
 8012282:	b083      	sub	sp, #12
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012288:	bf00      	nop
 801228a:	370c      	adds	r7, #12
 801228c:	46bd      	mov	sp, r7
 801228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012292:	4770      	bx	lr

08012294 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801229c:	bf00      	nop
 801229e:	370c      	adds	r7, #12
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b083      	sub	sp, #12
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80122b0:	bf00      	nop
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr

080122bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80122bc:	b5b0      	push	{r4, r5, r7, lr}
 80122be:	b090      	sub	sp, #64	@ 0x40
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	4613      	mov	r3, r2
 80122c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d101      	bne.n	80122d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80122d0:	2302      	movs	r3, #2
 80122d2:	e04d      	b.n	8012370 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	79fa      	ldrb	r2, [r7, #7]
 80122d8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2200      	movs	r2, #0
 80122e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2200      	movs	r2, #0
 80122e8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 f847 	bl	8012380 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2200      	movs	r2, #0
 80122f6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2200      	movs	r2, #0
 80122fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2200      	movs	r2, #0
 8012306:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2200      	movs	r2, #0
 801230e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d003      	beq.n	8012320 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	68ba      	ldr	r2, [r7, #8]
 801231c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8012320:	4b15      	ldr	r3, [pc, #84]	@ (8012378 <USBH_Init+0xbc>)
 8012322:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8012326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 801232c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012330:	2100      	movs	r1, #0
 8012332:	4618      	mov	r0, r3
 8012334:	f004 f924 	bl	8016580 <osMessageCreate>
 8012338:	4602      	mov	r2, r0
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8012340:	4b0e      	ldr	r3, [pc, #56]	@ (801237c <USBH_Init+0xc0>)
 8012342:	f107 0414 	add.w	r4, r7, #20
 8012346:	461d      	mov	r5, r3
 8012348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801234a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801234c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8012354:	f107 0314 	add.w	r3, r7, #20
 8012358:	68f9      	ldr	r1, [r7, #12]
 801235a:	4618      	mov	r0, r3
 801235c:	f004 f82c 	bl	80163b8 <osThreadCreate>
 8012360:	4602      	mov	r2, r0
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8012368:	68f8      	ldr	r0, [r7, #12]
 801236a:	f006 fff5 	bl	8019358 <USBH_LL_Init>

  return USBH_OK;
 801236e:	2300      	movs	r3, #0
}
 8012370:	4618      	mov	r0, r3
 8012372:	3740      	adds	r7, #64	@ 0x40
 8012374:	46bd      	mov	sp, r7
 8012376:	bdb0      	pop	{r4, r5, r7, pc}
 8012378:	0801c104 	.word	0x0801c104
 801237c:	0801c120 	.word	0x0801c120

08012380 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012388:	2300      	movs	r3, #0
 801238a:	60fb      	str	r3, [r7, #12]
 801238c:	e009      	b.n	80123a2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 801238e:	687a      	ldr	r2, [r7, #4]
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	33e0      	adds	r3, #224	@ 0xe0
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	4413      	add	r3, r2
 8012398:	2200      	movs	r2, #0
 801239a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	3301      	adds	r3, #1
 80123a0:	60fb      	str	r3, [r7, #12]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2b0f      	cmp	r3, #15
 80123a6:	d9f2      	bls.n	801238e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80123a8:	2300      	movs	r3, #0
 80123aa:	60fb      	str	r3, [r7, #12]
 80123ac:	e009      	b.n	80123c2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80123ae:	687a      	ldr	r2, [r7, #4]
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	4413      	add	r3, r2
 80123b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80123b8:	2200      	movs	r2, #0
 80123ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	3301      	adds	r3, #1
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123c8:	d3f1      	bcc.n	80123ae <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2200      	movs	r2, #0
 80123ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2201      	movs	r2, #1
 80123da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2201      	movs	r2, #1
 80123e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2240      	movs	r2, #64	@ 0x40
 80123ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2200      	movs	r2, #0
 80123f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2201      	movs	r2, #1
 8012402:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2200      	movs	r2, #0
 801240a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2200      	movs	r2, #0
 8012412:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	331c      	adds	r3, #28
 801241a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801241e:	2100      	movs	r1, #0
 8012420:	4618      	mov	r0, r3
 8012422:	f007 fae1 	bl	80199e8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801242c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012430:	2100      	movs	r1, #0
 8012432:	4618      	mov	r0, r3
 8012434:	f007 fad8 	bl	80199e8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 801243e:	2212      	movs	r2, #18
 8012440:	2100      	movs	r1, #0
 8012442:	4618      	mov	r0, r3
 8012444:	f007 fad0 	bl	80199e8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801244e:	223e      	movs	r2, #62	@ 0x3e
 8012450:	2100      	movs	r1, #0
 8012452:	4618      	mov	r0, r3
 8012454:	f007 fac8 	bl	80199e8 <memset>

  return USBH_OK;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3710      	adds	r7, #16
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8012462:	b480      	push	{r7}
 8012464:	b085      	sub	sp, #20
 8012466:	af00      	add	r7, sp, #0
 8012468:	6078      	str	r0, [r7, #4]
 801246a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801246c:	2300      	movs	r3, #0
 801246e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d016      	beq.n	80124a4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801247c:	2b00      	cmp	r3, #0
 801247e:	d10e      	bne.n	801249e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8012486:	1c59      	adds	r1, r3, #1
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	33de      	adds	r3, #222	@ 0xde
 8012492:	6839      	ldr	r1, [r7, #0]
 8012494:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8012498:	2300      	movs	r3, #0
 801249a:	73fb      	strb	r3, [r7, #15]
 801249c:	e004      	b.n	80124a8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801249e:	2302      	movs	r3, #2
 80124a0:	73fb      	strb	r3, [r7, #15]
 80124a2:	e001      	b.n	80124a8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80124a4:	2302      	movs	r3, #2
 80124a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80124a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3714      	adds	r7, #20
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr

080124b6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80124b6:	b480      	push	{r7}
 80124b8:	b085      	sub	sp, #20
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	460b      	mov	r3, r1
 80124c0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80124c2:	2300      	movs	r3, #0
 80124c4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80124cc:	78fa      	ldrb	r2, [r7, #3]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d204      	bcs.n	80124dc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	78fa      	ldrb	r2, [r7, #3]
 80124d6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80124da:	e001      	b.n	80124e0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80124dc:	2302      	movs	r3, #2
 80124de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3714      	adds	r7, #20
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr

080124ee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80124ee:	b480      	push	{r7}
 80124f0:	b087      	sub	sp, #28
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	4608      	mov	r0, r1
 80124f8:	4611      	mov	r1, r2
 80124fa:	461a      	mov	r2, r3
 80124fc:	4603      	mov	r3, r0
 80124fe:	70fb      	strb	r3, [r7, #3]
 8012500:	460b      	mov	r3, r1
 8012502:	70bb      	strb	r3, [r7, #2]
 8012504:	4613      	mov	r3, r2
 8012506:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8012508:	2300      	movs	r3, #0
 801250a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 801250c:	2300      	movs	r3, #0
 801250e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8012516:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012518:	e025      	b.n	8012566 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801251a:	7dfb      	ldrb	r3, [r7, #23]
 801251c:	221a      	movs	r2, #26
 801251e:	fb02 f303 	mul.w	r3, r2, r3
 8012522:	3308      	adds	r3, #8
 8012524:	68fa      	ldr	r2, [r7, #12]
 8012526:	4413      	add	r3, r2
 8012528:	3302      	adds	r3, #2
 801252a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	795b      	ldrb	r3, [r3, #5]
 8012530:	78fa      	ldrb	r2, [r7, #3]
 8012532:	429a      	cmp	r2, r3
 8012534:	d002      	beq.n	801253c <USBH_FindInterface+0x4e>
 8012536:	78fb      	ldrb	r3, [r7, #3]
 8012538:	2bff      	cmp	r3, #255	@ 0xff
 801253a:	d111      	bne.n	8012560 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012540:	78ba      	ldrb	r2, [r7, #2]
 8012542:	429a      	cmp	r2, r3
 8012544:	d002      	beq.n	801254c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012546:	78bb      	ldrb	r3, [r7, #2]
 8012548:	2bff      	cmp	r3, #255	@ 0xff
 801254a:	d109      	bne.n	8012560 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012550:	787a      	ldrb	r2, [r7, #1]
 8012552:	429a      	cmp	r2, r3
 8012554:	d002      	beq.n	801255c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012556:	787b      	ldrb	r3, [r7, #1]
 8012558:	2bff      	cmp	r3, #255	@ 0xff
 801255a:	d101      	bne.n	8012560 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801255c:	7dfb      	ldrb	r3, [r7, #23]
 801255e:	e006      	b.n	801256e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012560:	7dfb      	ldrb	r3, [r7, #23]
 8012562:	3301      	adds	r3, #1
 8012564:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012566:	7dfb      	ldrb	r3, [r7, #23]
 8012568:	2b01      	cmp	r3, #1
 801256a:	d9d6      	bls.n	801251a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801256c:	23ff      	movs	r3, #255	@ 0xff
}
 801256e:	4618      	mov	r0, r3
 8012570:	371c      	adds	r7, #28
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr

0801257a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b082      	sub	sp, #8
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f006 ff24 	bl	80193d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8012588:	2101      	movs	r1, #1
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f007 f83d 	bl	801960a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012590:	2300      	movs	r3, #0
}
 8012592:	4618      	mov	r0, r3
 8012594:	3708      	adds	r7, #8
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}
	...

0801259c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b088      	sub	sp, #32
 80125a0:	af04      	add	r7, sp, #16
 80125a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80125a4:	2302      	movs	r3, #2
 80125a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80125a8:	2300      	movs	r3, #0
 80125aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	2b01      	cmp	r3, #1
 80125b6:	d102      	bne.n	80125be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2203      	movs	r2, #3
 80125bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	2b0b      	cmp	r3, #11
 80125c6:	f200 81f5 	bhi.w	80129b4 <USBH_Process+0x418>
 80125ca:	a201      	add	r2, pc, #4	@ (adr r2, 80125d0 <USBH_Process+0x34>)
 80125cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125d0:	08012601 	.word	0x08012601
 80125d4:	0801263f 	.word	0x0801263f
 80125d8:	080126b5 	.word	0x080126b5
 80125dc:	08012943 	.word	0x08012943
 80125e0:	080129b5 	.word	0x080129b5
 80125e4:	08012761 	.word	0x08012761
 80125e8:	080128dd 	.word	0x080128dd
 80125ec:	080127a3 	.word	0x080127a3
 80125f0:	080127cf 	.word	0x080127cf
 80125f4:	080127f7 	.word	0x080127f7
 80125f8:	08012845 	.word	0x08012845
 80125fc:	0801292b 	.word	0x0801292b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8012606:	b2db      	uxtb	r3, r3
 8012608:	2b00      	cmp	r3, #0
 801260a:	f000 81d5 	beq.w	80129b8 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2201      	movs	r2, #1
 8012612:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8012614:	20c8      	movs	r0, #200	@ 0xc8
 8012616:	f007 f842 	bl	801969e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f006 ff35 	bl	801948a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2200      	movs	r2, #0
 8012624:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2200      	movs	r2, #0
 801262c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012630:	2300      	movs	r3, #0
 8012632:	2200      	movs	r2, #0
 8012634:	2101      	movs	r1, #1
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f000 fc6a 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801263c:	e1bc      	b.n	80129b8 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8012644:	b2db      	uxtb	r3, r3
 8012646:	2b01      	cmp	r3, #1
 8012648:	d107      	bne.n	801265a <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2200      	movs	r2, #0
 801264e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2202      	movs	r2, #2
 8012656:	701a      	strb	r2, [r3, #0]
 8012658:	e025      	b.n	80126a6 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012660:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012664:	d914      	bls.n	8012690 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 801266c:	3301      	adds	r3, #1
 801266e:	b2da      	uxtb	r2, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 801267c:	2b03      	cmp	r3, #3
 801267e:	d903      	bls.n	8012688 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	220d      	movs	r2, #13
 8012684:	701a      	strb	r2, [r3, #0]
 8012686:	e00e      	b.n	80126a6 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	701a      	strb	r2, [r3, #0]
 801268e:	e00a      	b.n	80126a6 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012696:	f103 020a 	add.w	r2, r3, #10
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80126a0:	200a      	movs	r0, #10
 80126a2:	f006 fffc 	bl	801969e <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80126a6:	2300      	movs	r3, #0
 80126a8:	2200      	movs	r2, #0
 80126aa:	2101      	movs	r1, #1
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 fc2f 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80126b2:	e188      	b.n	80129c6 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d005      	beq.n	80126ca <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80126c4:	2104      	movs	r1, #4
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80126ca:	2064      	movs	r0, #100	@ 0x64
 80126cc:	f006 ffe7 	bl	801969e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f006 feb3 	bl	801943c <USBH_LL_GetSpeed>
 80126d6:	4603      	mov	r3, r0
 80126d8:	461a      	mov	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2205      	movs	r2, #5
 80126e4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80126e6:	2100      	movs	r1, #0
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f001 fba4 	bl	8013e36 <USBH_AllocPipe>
 80126ee:	4603      	mov	r3, r0
 80126f0:	461a      	mov	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80126f6:	2180      	movs	r1, #128	@ 0x80
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f001 fb9c 	bl	8013e36 <USBH_AllocPipe>
 80126fe:	4603      	mov	r3, r0
 8012700:	461a      	mov	r2, r3
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	7919      	ldrb	r1, [r3, #4]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012716:	687a      	ldr	r2, [r7, #4]
 8012718:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801271a:	9202      	str	r2, [sp, #8]
 801271c:	2200      	movs	r2, #0
 801271e:	9201      	str	r2, [sp, #4]
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	4603      	mov	r3, r0
 8012724:	2280      	movs	r2, #128	@ 0x80
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f001 fb56 	bl	8013dd8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	7959      	ldrb	r1, [r3, #5]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012740:	9202      	str	r2, [sp, #8]
 8012742:	2200      	movs	r2, #0
 8012744:	9201      	str	r2, [sp, #4]
 8012746:	9300      	str	r3, [sp, #0]
 8012748:	4603      	mov	r3, r0
 801274a:	2200      	movs	r2, #0
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f001 fb43 	bl	8013dd8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012752:	2300      	movs	r3, #0
 8012754:	2200      	movs	r2, #0
 8012756:	2101      	movs	r1, #1
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 fbd9 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801275e:	e132      	b.n	80129c6 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 f935 	bl	80129d0 <USBH_HandleEnum>
 8012766:	4603      	mov	r3, r0
 8012768:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801276a:	7bbb      	ldrb	r3, [r7, #14]
 801276c:	b2db      	uxtb	r3, r3
 801276e:	2b00      	cmp	r3, #0
 8012770:	f040 8124 	bne.w	80129bc <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2200      	movs	r2, #0
 8012778:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8012782:	2b01      	cmp	r3, #1
 8012784:	d103      	bne.n	801278e <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2208      	movs	r2, #8
 801278a:	701a      	strb	r2, [r3, #0]
 801278c:	e002      	b.n	8012794 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2207      	movs	r2, #7
 8012792:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012794:	2300      	movs	r3, #0
 8012796:	2200      	movs	r2, #0
 8012798:	2105      	movs	r1, #5
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f000 fbb8 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80127a0:	e10c      	b.n	80129bc <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f000 8109 	beq.w	80129c0 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80127b4:	2101      	movs	r1, #1
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	2208      	movs	r2, #8
 80127be:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80127c0:	2300      	movs	r3, #0
 80127c2:	2200      	movs	r2, #0
 80127c4:	2105      	movs	r1, #5
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f000 fba2 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80127cc:	e0f8      	b.n	80129c0 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80127d4:	4619      	mov	r1, r3
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 fcc8 	bl	801316c <USBH_SetCfg>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d102      	bne.n	80127e8 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2209      	movs	r2, #9
 80127e6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80127e8:	2300      	movs	r3, #0
 80127ea:	2200      	movs	r2, #0
 80127ec:	2101      	movs	r1, #1
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f000 fb8e 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80127f4:	e0e7      	b.n	80129c6 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80127fc:	f003 0320 	and.w	r3, r3, #32
 8012800:	2b00      	cmp	r3, #0
 8012802:	d015      	beq.n	8012830 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8012804:	2101      	movs	r1, #1
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 fcd3 	bl	80131b2 <USBH_SetFeature>
 801280c:	4603      	mov	r3, r0
 801280e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8012810:	7bbb      	ldrb	r3, [r7, #14]
 8012812:	b2db      	uxtb	r3, r3
 8012814:	2b00      	cmp	r3, #0
 8012816:	d103      	bne.n	8012820 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	220a      	movs	r2, #10
 801281c:	701a      	strb	r2, [r3, #0]
 801281e:	e00a      	b.n	8012836 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8012820:	7bbb      	ldrb	r3, [r7, #14]
 8012822:	b2db      	uxtb	r3, r3
 8012824:	2b03      	cmp	r3, #3
 8012826:	d106      	bne.n	8012836 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	220a      	movs	r2, #10
 801282c:	701a      	strb	r2, [r3, #0]
 801282e:	e002      	b.n	8012836 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	220a      	movs	r2, #10
 8012834:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012836:	2300      	movs	r3, #0
 8012838:	2200      	movs	r2, #0
 801283a:	2101      	movs	r1, #1
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 fb67 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012842:	e0c0      	b.n	80129c6 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801284a:	2b00      	cmp	r3, #0
 801284c:	d03f      	beq.n	80128ce <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2200      	movs	r2, #0
 8012852:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012856:	2300      	movs	r3, #0
 8012858:	73fb      	strb	r3, [r7, #15]
 801285a:	e016      	b.n	801288a <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801285c:	7bfa      	ldrb	r2, [r7, #15]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	32de      	adds	r2, #222	@ 0xde
 8012862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012866:	791a      	ldrb	r2, [r3, #4]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 801286e:	429a      	cmp	r2, r3
 8012870:	d108      	bne.n	8012884 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8012872:	7bfa      	ldrb	r2, [r7, #15]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	32de      	adds	r2, #222	@ 0xde
 8012878:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8012882:	e005      	b.n	8012890 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012884:	7bfb      	ldrb	r3, [r7, #15]
 8012886:	3301      	adds	r3, #1
 8012888:	73fb      	strb	r3, [r7, #15]
 801288a:	7bfb      	ldrb	r3, [r7, #15]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d0e5      	beq.n	801285c <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012896:	2b00      	cmp	r3, #0
 8012898:	d016      	beq.n	80128c8 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128a0:	689b      	ldr	r3, [r3, #8]
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	4798      	blx	r3
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d109      	bne.n	80128c0 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2206      	movs	r2, #6
 80128b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80128b8:	2103      	movs	r1, #3
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	4798      	blx	r3
 80128be:	e006      	b.n	80128ce <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	220d      	movs	r2, #13
 80128c4:	701a      	strb	r2, [r3, #0]
 80128c6:	e002      	b.n	80128ce <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	220d      	movs	r2, #13
 80128cc:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80128ce:	2300      	movs	r3, #0
 80128d0:	2200      	movs	r2, #0
 80128d2:	2105      	movs	r1, #5
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 fb1b 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80128da:	e074      	b.n	80129c6 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d017      	beq.n	8012916 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128ec:	691b      	ldr	r3, [r3, #16]
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	4798      	blx	r3
 80128f2:	4603      	mov	r3, r0
 80128f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80128f6:	7bbb      	ldrb	r3, [r7, #14]
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d103      	bne.n	8012906 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	220b      	movs	r2, #11
 8012902:	701a      	strb	r2, [r3, #0]
 8012904:	e00a      	b.n	801291c <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 8012906:	7bbb      	ldrb	r3, [r7, #14]
 8012908:	b2db      	uxtb	r3, r3
 801290a:	2b02      	cmp	r3, #2
 801290c:	d106      	bne.n	801291c <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	220d      	movs	r2, #13
 8012912:	701a      	strb	r2, [r3, #0]
 8012914:	e002      	b.n	801291c <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	220d      	movs	r2, #13
 801291a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801291c:	2300      	movs	r3, #0
 801291e:	2200      	movs	r2, #0
 8012920:	2105      	movs	r1, #5
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f000 faf4 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012928:	e04d      	b.n	80129c6 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012930:	2b00      	cmp	r3, #0
 8012932:	d047      	beq.n	80129c4 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801293a:	695b      	ldr	r3, [r3, #20]
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	4798      	blx	r3
      }
      break;
 8012940:	e040      	b.n	80129c4 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f7ff fd18 	bl	8012380 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012956:	2b00      	cmp	r3, #0
 8012958:	d009      	beq.n	801296e <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012960:	68db      	ldr	r3, [r3, #12]
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2200      	movs	r2, #0
 801296a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012974:	2b00      	cmp	r3, #0
 8012976:	d005      	beq.n	8012984 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801297e:	2105      	movs	r1, #5
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 801298a:	b2db      	uxtb	r3, r3
 801298c:	2b01      	cmp	r3, #1
 801298e:	d107      	bne.n	80129a0 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2200      	movs	r2, #0
 8012994:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f7ff fdee 	bl	801257a <USBH_Start>
 801299e:	e002      	b.n	80129a6 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f006 fd15 	bl	80193d0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80129a6:	2300      	movs	r3, #0
 80129a8:	2200      	movs	r2, #0
 80129aa:	2101      	movs	r1, #1
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f000 faaf 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80129b2:	e008      	b.n	80129c6 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 80129b4:	bf00      	nop
 80129b6:	e006      	b.n	80129c6 <USBH_Process+0x42a>
      break;
 80129b8:	bf00      	nop
 80129ba:	e004      	b.n	80129c6 <USBH_Process+0x42a>
      break;
 80129bc:	bf00      	nop
 80129be:	e002      	b.n	80129c6 <USBH_Process+0x42a>
    break;
 80129c0:	bf00      	nop
 80129c2:	e000      	b.n	80129c6 <USBH_Process+0x42a>
      break;
 80129c4:	bf00      	nop
  }
  return USBH_OK;
 80129c6:	2300      	movs	r3, #0
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3710      	adds	r7, #16
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b088      	sub	sp, #32
 80129d4:	af04      	add	r7, sp, #16
 80129d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80129d8:	2301      	movs	r3, #1
 80129da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80129dc:	2301      	movs	r3, #1
 80129de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	785b      	ldrb	r3, [r3, #1]
 80129e4:	2b07      	cmp	r3, #7
 80129e6:	f200 81db 	bhi.w	8012da0 <USBH_HandleEnum+0x3d0>
 80129ea:	a201      	add	r2, pc, #4	@ (adr r2, 80129f0 <USBH_HandleEnum+0x20>)
 80129ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129f0:	08012a11 	.word	0x08012a11
 80129f4:	08012acb 	.word	0x08012acb
 80129f8:	08012b35 	.word	0x08012b35
 80129fc:	08012bbf 	.word	0x08012bbf
 8012a00:	08012c29 	.word	0x08012c29
 8012a04:	08012c99 	.word	0x08012c99
 8012a08:	08012d03 	.word	0x08012d03
 8012a0c:	08012d61 	.word	0x08012d61
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8012a10:	2108      	movs	r1, #8
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f000 fac7 	bl	8012fa6 <USBH_Get_DevDesc>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012a1c:	7bbb      	ldrb	r3, [r7, #14]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d12e      	bne.n	8012a80 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	7919      	ldrb	r1, [r3, #4]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012a42:	687a      	ldr	r2, [r7, #4]
 8012a44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012a46:	9202      	str	r2, [sp, #8]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	9201      	str	r2, [sp, #4]
 8012a4c:	9300      	str	r3, [sp, #0]
 8012a4e:	4603      	mov	r3, r0
 8012a50:	2280      	movs	r2, #128	@ 0x80
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f001 f9c0 	bl	8013dd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	7959      	ldrb	r1, [r3, #5]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012a6c:	9202      	str	r2, [sp, #8]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	9201      	str	r2, [sp, #4]
 8012a72:	9300      	str	r3, [sp, #0]
 8012a74:	4603      	mov	r3, r0
 8012a76:	2200      	movs	r2, #0
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f001 f9ad 	bl	8013dd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012a7e:	e191      	b.n	8012da4 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012a80:	7bbb      	ldrb	r3, [r7, #14]
 8012a82:	2b03      	cmp	r3, #3
 8012a84:	f040 818e 	bne.w	8012da4 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a8e:	3301      	adds	r3, #1
 8012a90:	b2da      	uxtb	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a9e:	2b03      	cmp	r3, #3
 8012aa0:	d903      	bls.n	8012aaa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	220d      	movs	r2, #13
 8012aa6:	701a      	strb	r2, [r3, #0]
      break;
 8012aa8:	e17c      	b.n	8012da4 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	795b      	ldrb	r3, [r3, #5]
 8012aae:	4619      	mov	r1, r3
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f001 f9e1 	bl	8013e78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	791b      	ldrb	r3, [r3, #4]
 8012aba:	4619      	mov	r1, r3
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f001 f9db 	bl	8013e78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	701a      	strb	r2, [r3, #0]
      break;
 8012ac8:	e16c      	b.n	8012da4 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8012aca:	2112      	movs	r1, #18
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 fa6a 	bl	8012fa6 <USBH_Get_DevDesc>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012ad6:	7bbb      	ldrb	r3, [r7, #14]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d103      	bne.n	8012ae4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2202      	movs	r2, #2
 8012ae0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012ae2:	e161      	b.n	8012da8 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012ae4:	7bbb      	ldrb	r3, [r7, #14]
 8012ae6:	2b03      	cmp	r3, #3
 8012ae8:	f040 815e 	bne.w	8012da8 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012af2:	3301      	adds	r3, #1
 8012af4:	b2da      	uxtb	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012b02:	2b03      	cmp	r3, #3
 8012b04:	d903      	bls.n	8012b0e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	220d      	movs	r2, #13
 8012b0a:	701a      	strb	r2, [r3, #0]
      break;
 8012b0c:	e14c      	b.n	8012da8 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	795b      	ldrb	r3, [r3, #5]
 8012b12:	4619      	mov	r1, r3
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f001 f9af 	bl	8013e78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	791b      	ldrb	r3, [r3, #4]
 8012b1e:	4619      	mov	r1, r3
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f001 f9a9 	bl	8013e78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	701a      	strb	r2, [r3, #0]
      break;
 8012b32:	e139      	b.n	8012da8 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8012b34:	2101      	movs	r1, #1
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f000 faf4 	bl	8013124 <USBH_SetAddress>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012b40:	7bbb      	ldrb	r3, [r7, #14]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d130      	bne.n	8012ba8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8012b46:	2002      	movs	r0, #2
 8012b48:	f006 fda9 	bl	801969e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2201      	movs	r2, #1
 8012b50:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2203      	movs	r2, #3
 8012b58:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	7919      	ldrb	r1, [r3, #4]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012b6e:	9202      	str	r2, [sp, #8]
 8012b70:	2200      	movs	r2, #0
 8012b72:	9201      	str	r2, [sp, #4]
 8012b74:	9300      	str	r3, [sp, #0]
 8012b76:	4603      	mov	r3, r0
 8012b78:	2280      	movs	r2, #128	@ 0x80
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f001 f92c 	bl	8013dd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	7959      	ldrb	r1, [r3, #5]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012b94:	9202      	str	r2, [sp, #8]
 8012b96:	2200      	movs	r2, #0
 8012b98:	9201      	str	r2, [sp, #4]
 8012b9a:	9300      	str	r3, [sp, #0]
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f001 f919 	bl	8013dd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012ba6:	e101      	b.n	8012dac <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012ba8:	7bbb      	ldrb	r3, [r7, #14]
 8012baa:	2b03      	cmp	r3, #3
 8012bac:	f040 80fe 	bne.w	8012dac <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	220d      	movs	r2, #13
 8012bb4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	705a      	strb	r2, [r3, #1]
      break;
 8012bbc:	e0f6      	b.n	8012dac <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8012bbe:	2109      	movs	r1, #9
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f000 fa1c 	bl	8012ffe <USBH_Get_CfgDesc>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012bca:	7bbb      	ldrb	r3, [r7, #14]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d103      	bne.n	8012bd8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2204      	movs	r2, #4
 8012bd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012bd6:	e0eb      	b.n	8012db0 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012bd8:	7bbb      	ldrb	r3, [r7, #14]
 8012bda:	2b03      	cmp	r3, #3
 8012bdc:	f040 80e8 	bne.w	8012db0 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012be6:	3301      	adds	r3, #1
 8012be8:	b2da      	uxtb	r2, r3
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012bf6:	2b03      	cmp	r3, #3
 8012bf8:	d903      	bls.n	8012c02 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	220d      	movs	r2, #13
 8012bfe:	701a      	strb	r2, [r3, #0]
      break;
 8012c00:	e0d6      	b.n	8012db0 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	795b      	ldrb	r3, [r3, #5]
 8012c06:	4619      	mov	r1, r3
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f001 f935 	bl	8013e78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	791b      	ldrb	r3, [r3, #4]
 8012c12:	4619      	mov	r1, r3
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f001 f92f 	bl	8013e78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2200      	movs	r2, #0
 8012c24:	701a      	strb	r2, [r3, #0]
      break;
 8012c26:	e0c3      	b.n	8012db0 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8012c2e:	4619      	mov	r1, r3
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f000 f9e4 	bl	8012ffe <USBH_Get_CfgDesc>
 8012c36:	4603      	mov	r3, r0
 8012c38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012c3a:	7bbb      	ldrb	r3, [r7, #14]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d103      	bne.n	8012c48 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2205      	movs	r2, #5
 8012c44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012c46:	e0b5      	b.n	8012db4 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012c48:	7bbb      	ldrb	r3, [r7, #14]
 8012c4a:	2b03      	cmp	r3, #3
 8012c4c:	f040 80b2 	bne.w	8012db4 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012c56:	3301      	adds	r3, #1
 8012c58:	b2da      	uxtb	r2, r3
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012c66:	2b03      	cmp	r3, #3
 8012c68:	d903      	bls.n	8012c72 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	220d      	movs	r2, #13
 8012c6e:	701a      	strb	r2, [r3, #0]
      break;
 8012c70:	e0a0      	b.n	8012db4 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	795b      	ldrb	r3, [r3, #5]
 8012c76:	4619      	mov	r1, r3
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f001 f8fd 	bl	8013e78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	791b      	ldrb	r3, [r3, #4]
 8012c82:	4619      	mov	r1, r3
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f001 f8f7 	bl	8013e78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2200      	movs	r2, #0
 8012c94:	701a      	strb	r2, [r3, #0]
      break;
 8012c96:	e08d      	b.n	8012db4 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d025      	beq.n	8012cee <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012cae:	23ff      	movs	r3, #255	@ 0xff
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f000 f9ce 	bl	8013052 <USBH_Get_StringDesc>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012cba:	7bbb      	ldrb	r3, [r7, #14]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d109      	bne.n	8012cd4 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2206      	movs	r2, #6
 8012cc4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	2200      	movs	r2, #0
 8012cca:	2105      	movs	r1, #5
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f000 f91f 	bl	8012f10 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012cd2:	e071      	b.n	8012db8 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012cd4:	7bbb      	ldrb	r3, [r7, #14]
 8012cd6:	2b03      	cmp	r3, #3
 8012cd8:	d16e      	bne.n	8012db8 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2206      	movs	r2, #6
 8012cde:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	2105      	movs	r1, #5
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f000 f912 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8012cec:	e064      	b.n	8012db8 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2206      	movs	r2, #6
 8012cf2:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	2105      	movs	r1, #5
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 f908 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8012d00:	e05a      	b.n	8012db8 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d01f      	beq.n	8012d4c <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012d18:	23ff      	movs	r3, #255	@ 0xff
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f000 f999 	bl	8013052 <USBH_Get_StringDesc>
 8012d20:	4603      	mov	r3, r0
 8012d22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012d24:	7bbb      	ldrb	r3, [r7, #14]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d103      	bne.n	8012d32 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2207      	movs	r2, #7
 8012d2e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012d30:	e044      	b.n	8012dbc <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012d32:	7bbb      	ldrb	r3, [r7, #14]
 8012d34:	2b03      	cmp	r3, #3
 8012d36:	d141      	bne.n	8012dbc <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2207      	movs	r2, #7
 8012d3c:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012d3e:	2300      	movs	r3, #0
 8012d40:	2200      	movs	r2, #0
 8012d42:	2105      	movs	r1, #5
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f000 f8e3 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8012d4a:	e037      	b.n	8012dbc <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2207      	movs	r2, #7
 8012d50:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012d52:	2300      	movs	r3, #0
 8012d54:	2200      	movs	r2, #0
 8012d56:	2105      	movs	r1, #5
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f000 f8d9 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8012d5e:	e02d      	b.n	8012dbc <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d017      	beq.n	8012d9a <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012d76:	23ff      	movs	r3, #255	@ 0xff
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f000 f96a 	bl	8013052 <USBH_Get_StringDesc>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012d82:	7bbb      	ldrb	r3, [r7, #14]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d102      	bne.n	8012d8e <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8012d8c:	e018      	b.n	8012dc0 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012d8e:	7bbb      	ldrb	r3, [r7, #14]
 8012d90:	2b03      	cmp	r3, #3
 8012d92:	d115      	bne.n	8012dc0 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8012d94:	2300      	movs	r3, #0
 8012d96:	73fb      	strb	r3, [r7, #15]
      break;
 8012d98:	e012      	b.n	8012dc0 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d9e:	e00f      	b.n	8012dc0 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8012da0:	bf00      	nop
 8012da2:	e00e      	b.n	8012dc2 <USBH_HandleEnum+0x3f2>
      break;
 8012da4:	bf00      	nop
 8012da6:	e00c      	b.n	8012dc2 <USBH_HandleEnum+0x3f2>
      break;
 8012da8:	bf00      	nop
 8012daa:	e00a      	b.n	8012dc2 <USBH_HandleEnum+0x3f2>
      break;
 8012dac:	bf00      	nop
 8012dae:	e008      	b.n	8012dc2 <USBH_HandleEnum+0x3f2>
      break;
 8012db0:	bf00      	nop
 8012db2:	e006      	b.n	8012dc2 <USBH_HandleEnum+0x3f2>
      break;
 8012db4:	bf00      	nop
 8012db6:	e004      	b.n	8012dc2 <USBH_HandleEnum+0x3f2>
      break;
 8012db8:	bf00      	nop
 8012dba:	e002      	b.n	8012dc2 <USBH_HandleEnum+0x3f2>
      break;
 8012dbc:	bf00      	nop
 8012dbe:	e000      	b.n	8012dc2 <USBH_HandleEnum+0x3f2>
      break;
 8012dc0:	bf00      	nop
  }
  return Status;
 8012dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3710      	adds	r7, #16
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	683a      	ldr	r2, [r7, #0]
 8012dda:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8012dde:	bf00      	nop
 8012de0:	370c      	adds	r7, #12
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr

08012dea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012dea:	b580      	push	{r7, lr}
 8012dec:	b082      	sub	sp, #8
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012df8:	1c5a      	adds	r2, r3, #1
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f000 f804 	bl	8012e0e <USBH_HandleSof>
}
 8012e06:	bf00      	nop
 8012e08:	3708      	adds	r7, #8
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b082      	sub	sp, #8
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	b2db      	uxtb	r3, r3
 8012e1c:	2b0b      	cmp	r3, #11
 8012e1e:	d10a      	bne.n	8012e36 <USBH_HandleSof+0x28>
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d005      	beq.n	8012e36 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012e30:	699b      	ldr	r3, [r3, #24]
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	4798      	blx	r3
  }
}
 8012e36:	bf00      	nop
 8012e38:	3708      	adds	r7, #8
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}

08012e3e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012e3e:	b580      	push	{r7, lr}
 8012e40:	b082      	sub	sp, #8
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2201      	movs	r2, #1
 8012e4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012e4e:	2300      	movs	r3, #0
 8012e50:	2200      	movs	r2, #0
 8012e52:	2101      	movs	r1, #1
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f000 f85b 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012e5a:	bf00      	nop
}
 8012e5c:	3708      	adds	r7, #8
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}

08012e62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012e62:	b480      	push	{r7}
 8012e64:	b083      	sub	sp, #12
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2201      	movs	r2, #1
 8012e76:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012e7a:	bf00      	nop
}
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012e86:	b580      	push	{r7, lr}
 8012e88:	b082      	sub	sp, #8
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2201      	movs	r2, #1
 8012e92:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	2101      	movs	r1, #1
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 f82f 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012eb2:	2300      	movs	r3, #0
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3708      	adds	r7, #8
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f006 fa92 	bl	8019406 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	791b      	ldrb	r3, [r3, #4]
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f000 ffc5 	bl	8013e78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	795b      	ldrb	r3, [r3, #5]
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 ffbf 	bl	8013e78 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012efa:	2300      	movs	r3, #0
 8012efc:	2200      	movs	r2, #0
 8012efe:	2101      	movs	r1, #1
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f000 f805 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012f06:	2300      	movs	r3, #0
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3708      	adds	r7, #8
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b086      	sub	sp, #24
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	607a      	str	r2, [r7, #4]
 8012f1a:	603b      	str	r3, [r7, #0]
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8012f20:	7afa      	ldrb	r2, [r7, #11]
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f003 fc02 	bl	8016738 <osMessageWaiting>
 8012f34:	4603      	mov	r3, r0
 8012f36:	f1c3 0310 	rsb	r3, r3, #16
 8012f3a:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d009      	beq.n	8012f56 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	4619      	mov	r1, r3
 8012f52:	f003 fb3d 	bl	80165d0 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012f56:	bf00      	nop
 8012f58:	3718      	adds	r7, #24
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}

08012f5e <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8012f5e:	b580      	push	{r7, lr}
 8012f60:	b086      	sub	sp, #24
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8012f6c:	f107 030c 	add.w	r3, r7, #12
 8012f70:	f04f 32ff 	mov.w	r2, #4294967295
 8012f74:	4618      	mov	r0, r3
 8012f76:	f003 fb6b 	bl	8016650 <osMessageGet>
    if (event.status == osEventMessage)
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2b10      	cmp	r3, #16
 8012f7e:	d1f2      	bne.n	8012f66 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f7ff fb0b 	bl	801259c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012f86:	e7ee      	b.n	8012f66 <USBH_Process_OS+0x8>

08012f88 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012f90:	2300      	movs	r3, #0
 8012f92:	2200      	movs	r2, #0
 8012f94:	2101      	movs	r1, #1
 8012f96:	6878      	ldr	r0, [r7, #4]
 8012f98:	f7ff ffba 	bl	8012f10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012f9c:	2300      	movs	r3, #0
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3708      	adds	r7, #8
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}

08012fa6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012fa6:	b580      	push	{r7, lr}
 8012fa8:	b086      	sub	sp, #24
 8012faa:	af02      	add	r7, sp, #8
 8012fac:	6078      	str	r0, [r7, #4]
 8012fae:	460b      	mov	r3, r1
 8012fb0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8012fb2:	887b      	ldrh	r3, [r7, #2]
 8012fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fb8:	d901      	bls.n	8012fbe <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012fba:	2303      	movs	r3, #3
 8012fbc:	e01b      	b.n	8012ff6 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8012fc4:	887b      	ldrh	r3, [r7, #2]
 8012fc6:	9300      	str	r3, [sp, #0]
 8012fc8:	4613      	mov	r3, r2
 8012fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012fce:	2100      	movs	r1, #0
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f000 f872 	bl	80130ba <USBH_GetDescriptor>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8012fda:	7bfb      	ldrb	r3, [r7, #15]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d109      	bne.n	8012ff4 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012fe6:	887a      	ldrh	r2, [r7, #2]
 8012fe8:	4619      	mov	r1, r3
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f000 f92a 	bl	8013244 <USBH_ParseDevDesc>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b086      	sub	sp, #24
 8013002:	af02      	add	r7, sp, #8
 8013004:	6078      	str	r0, [r7, #4]
 8013006:	460b      	mov	r3, r1
 8013008:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	331c      	adds	r3, #28
 801300e:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8013010:	887b      	ldrh	r3, [r7, #2]
 8013012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013016:	d901      	bls.n	801301c <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013018:	2303      	movs	r3, #3
 801301a:	e016      	b.n	801304a <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801301c:	887b      	ldrh	r3, [r7, #2]
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013026:	2100      	movs	r1, #0
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 f846 	bl	80130ba <USBH_GetDescriptor>
 801302e:	4603      	mov	r3, r0
 8013030:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8013032:	7bfb      	ldrb	r3, [r7, #15]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d107      	bne.n	8013048 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8013038:	887b      	ldrh	r3, [r7, #2]
 801303a:	461a      	mov	r2, r3
 801303c:	68b9      	ldr	r1, [r7, #8]
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f000 f9b0 	bl	80133a4 <USBH_ParseCfgDesc>
 8013044:	4603      	mov	r3, r0
 8013046:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013048:	7bfb      	ldrb	r3, [r7, #15]
}
 801304a:	4618      	mov	r0, r3
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8013052:	b580      	push	{r7, lr}
 8013054:	b088      	sub	sp, #32
 8013056:	af02      	add	r7, sp, #8
 8013058:	60f8      	str	r0, [r7, #12]
 801305a:	607a      	str	r2, [r7, #4]
 801305c:	461a      	mov	r2, r3
 801305e:	460b      	mov	r3, r1
 8013060:	72fb      	strb	r3, [r7, #11]
 8013062:	4613      	mov	r3, r2
 8013064:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8013066:	893b      	ldrh	r3, [r7, #8]
 8013068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801306c:	d802      	bhi.n	8013074 <USBH_Get_StringDesc+0x22>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d101      	bne.n	8013078 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013074:	2303      	movs	r3, #3
 8013076:	e01c      	b.n	80130b2 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8013078:	7afb      	ldrb	r3, [r7, #11]
 801307a:	b29b      	uxth	r3, r3
 801307c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013080:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013088:	893b      	ldrh	r3, [r7, #8]
 801308a:	9300      	str	r3, [sp, #0]
 801308c:	460b      	mov	r3, r1
 801308e:	2100      	movs	r1, #0
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f000 f812 	bl	80130ba <USBH_GetDescriptor>
 8013096:	4603      	mov	r3, r0
 8013098:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801309a:	7dfb      	ldrb	r3, [r7, #23]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d107      	bne.n	80130b0 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80130a6:	893a      	ldrh	r2, [r7, #8]
 80130a8:	6879      	ldr	r1, [r7, #4]
 80130aa:	4618      	mov	r0, r3
 80130ac:	f000 fb8d 	bl	80137ca <USBH_ParseStringDesc>
  }

  return status;
 80130b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	3718      	adds	r7, #24
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}

080130ba <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80130ba:	b580      	push	{r7, lr}
 80130bc:	b084      	sub	sp, #16
 80130be:	af00      	add	r7, sp, #0
 80130c0:	60f8      	str	r0, [r7, #12]
 80130c2:	607b      	str	r3, [r7, #4]
 80130c4:	460b      	mov	r3, r1
 80130c6:	72fb      	strb	r3, [r7, #11]
 80130c8:	4613      	mov	r3, r2
 80130ca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	789b      	ldrb	r3, [r3, #2]
 80130d0:	2b01      	cmp	r3, #1
 80130d2:	d11c      	bne.n	801310e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80130d4:	7afb      	ldrb	r3, [r7, #11]
 80130d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80130da:	b2da      	uxtb	r2, r3
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2206      	movs	r2, #6
 80130e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	893a      	ldrh	r2, [r7, #8]
 80130ea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80130ec:	893b      	ldrh	r3, [r7, #8]
 80130ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80130f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130f6:	d104      	bne.n	8013102 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	f240 4209 	movw	r2, #1033	@ 0x409
 80130fe:	829a      	strh	r2, [r3, #20]
 8013100:	e002      	b.n	8013108 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	2200      	movs	r2, #0
 8013106:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	8b3a      	ldrh	r2, [r7, #24]
 801310c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801310e:	8b3b      	ldrh	r3, [r7, #24]
 8013110:	461a      	mov	r2, r3
 8013112:	6879      	ldr	r1, [r7, #4]
 8013114:	68f8      	ldr	r0, [r7, #12]
 8013116:	f000 fba5 	bl	8013864 <USBH_CtlReq>
 801311a:	4603      	mov	r3, r0
}
 801311c:	4618      	mov	r0, r3
 801311e:	3710      	adds	r7, #16
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	460b      	mov	r3, r1
 801312e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	789b      	ldrb	r3, [r3, #2]
 8013134:	2b01      	cmp	r3, #1
 8013136:	d10f      	bne.n	8013158 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2200      	movs	r2, #0
 801313c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2205      	movs	r2, #5
 8013142:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8013144:	78fb      	ldrb	r3, [r7, #3]
 8013146:	b29a      	uxth	r2, r3
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2200      	movs	r2, #0
 8013150:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2200      	movs	r2, #0
 8013156:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013158:	2200      	movs	r2, #0
 801315a:	2100      	movs	r1, #0
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f000 fb81 	bl	8013864 <USBH_CtlReq>
 8013162:	4603      	mov	r3, r0
}
 8013164:	4618      	mov	r0, r3
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	460b      	mov	r3, r1
 8013176:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	789b      	ldrb	r3, [r3, #2]
 801317c:	2b01      	cmp	r3, #1
 801317e:	d10e      	bne.n	801319e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2200      	movs	r2, #0
 8013184:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2209      	movs	r2, #9
 801318a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	887a      	ldrh	r2, [r7, #2]
 8013190:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801319e:	2200      	movs	r2, #0
 80131a0:	2100      	movs	r1, #0
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f000 fb5e 	bl	8013864 <USBH_CtlReq>
 80131a8:	4603      	mov	r3, r0
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b082      	sub	sp, #8
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	460b      	mov	r3, r1
 80131bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	789b      	ldrb	r3, [r3, #2]
 80131c2:	2b01      	cmp	r3, #1
 80131c4:	d10f      	bne.n	80131e6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2200      	movs	r2, #0
 80131ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2203      	movs	r2, #3
 80131d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80131d2:	78fb      	ldrb	r3, [r7, #3]
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2200      	movs	r2, #0
 80131de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2200      	movs	r2, #0
 80131e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80131e6:	2200      	movs	r2, #0
 80131e8:	2100      	movs	r1, #0
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f000 fb3a 	bl	8013864 <USBH_CtlReq>
 80131f0:	4603      	mov	r3, r0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3708      	adds	r7, #8
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}

080131fa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b082      	sub	sp, #8
 80131fe:	af00      	add	r7, sp, #0
 8013200:	6078      	str	r0, [r7, #4]
 8013202:	460b      	mov	r3, r1
 8013204:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	789b      	ldrb	r3, [r3, #2]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d10f      	bne.n	801322e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2202      	movs	r2, #2
 8013212:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2201      	movs	r2, #1
 8013218:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2200      	movs	r2, #0
 801321e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013220:	78fb      	ldrb	r3, [r7, #3]
 8013222:	b29a      	uxth	r2, r3
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2200      	movs	r2, #0
 801322c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801322e:	2200      	movs	r2, #0
 8013230:	2100      	movs	r1, #0
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f000 fb16 	bl	8013864 <USBH_CtlReq>
 8013238:	4603      	mov	r3, r0
}
 801323a:	4618      	mov	r0, r3
 801323c:	3708      	adds	r7, #8
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}
	...

08013244 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8013244:	b480      	push	{r7}
 8013246:	b087      	sub	sp, #28
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	4613      	mov	r3, r2
 8013250:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8013258:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 801325a:	2300      	movs	r3, #0
 801325c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d101      	bne.n	8013268 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8013264:	2302      	movs	r3, #2
 8013266:	e094      	b.n	8013392 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	781a      	ldrb	r2, [r3, #0]
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	785a      	ldrb	r2, [r3, #1]
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	3302      	adds	r3, #2
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	461a      	mov	r2, r3
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	3303      	adds	r3, #3
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	021b      	lsls	r3, r3, #8
 8013288:	b29b      	uxth	r3, r3
 801328a:	4313      	orrs	r3, r2
 801328c:	b29a      	uxth	r2, r3
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	791a      	ldrb	r2, [r3, #4]
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	795a      	ldrb	r2, [r3, #5]
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	799a      	ldrb	r2, [r3, #6]
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	79da      	ldrb	r2, [r3, #7]
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d004      	beq.n	80132c6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	d11b      	bne.n	80132fe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	79db      	ldrb	r3, [r3, #7]
 80132ca:	2b20      	cmp	r3, #32
 80132cc:	dc0f      	bgt.n	80132ee <USBH_ParseDevDesc+0xaa>
 80132ce:	2b08      	cmp	r3, #8
 80132d0:	db0f      	blt.n	80132f2 <USBH_ParseDevDesc+0xae>
 80132d2:	3b08      	subs	r3, #8
 80132d4:	4a32      	ldr	r2, [pc, #200]	@ (80133a0 <USBH_ParseDevDesc+0x15c>)
 80132d6:	fa22 f303 	lsr.w	r3, r2, r3
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b00      	cmp	r3, #0
 80132e0:	bf14      	ite	ne
 80132e2:	2301      	movne	r3, #1
 80132e4:	2300      	moveq	r3, #0
 80132e6:	b2db      	uxtb	r3, r3
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d106      	bne.n	80132fa <USBH_ParseDevDesc+0xb6>
 80132ec:	e001      	b.n	80132f2 <USBH_ParseDevDesc+0xae>
 80132ee:	2b40      	cmp	r3, #64	@ 0x40
 80132f0:	d003      	beq.n	80132fa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	2208      	movs	r2, #8
 80132f6:	71da      	strb	r2, [r3, #7]
        break;
 80132f8:	e000      	b.n	80132fc <USBH_ParseDevDesc+0xb8>
        break;
 80132fa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80132fc:	e00e      	b.n	801331c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013304:	2b02      	cmp	r3, #2
 8013306:	d107      	bne.n	8013318 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	79db      	ldrb	r3, [r3, #7]
 801330c:	2b08      	cmp	r3, #8
 801330e:	d005      	beq.n	801331c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8013310:	693b      	ldr	r3, [r7, #16]
 8013312:	2208      	movs	r2, #8
 8013314:	71da      	strb	r2, [r3, #7]
 8013316:	e001      	b.n	801331c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8013318:	2303      	movs	r3, #3
 801331a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 801331c:	88fb      	ldrh	r3, [r7, #6]
 801331e:	2b08      	cmp	r3, #8
 8013320:	d936      	bls.n	8013390 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	3308      	adds	r3, #8
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	461a      	mov	r2, r3
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	3309      	adds	r3, #9
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	021b      	lsls	r3, r3, #8
 8013332:	b29b      	uxth	r3, r3
 8013334:	4313      	orrs	r3, r2
 8013336:	b29a      	uxth	r2, r3
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	330a      	adds	r3, #10
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	461a      	mov	r2, r3
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	330b      	adds	r3, #11
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	021b      	lsls	r3, r3, #8
 801334c:	b29b      	uxth	r3, r3
 801334e:	4313      	orrs	r3, r2
 8013350:	b29a      	uxth	r2, r3
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	330c      	adds	r3, #12
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	461a      	mov	r2, r3
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	330d      	adds	r3, #13
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	021b      	lsls	r3, r3, #8
 8013366:	b29b      	uxth	r3, r3
 8013368:	4313      	orrs	r3, r2
 801336a:	b29a      	uxth	r2, r3
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	7b9a      	ldrb	r2, [r3, #14]
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	7bda      	ldrb	r2, [r3, #15]
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	7c1a      	ldrb	r2, [r3, #16]
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	7c5a      	ldrb	r2, [r3, #17]
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8013390:	7dfb      	ldrb	r3, [r7, #23]
}
 8013392:	4618      	mov	r0, r3
 8013394:	371c      	adds	r7, #28
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop
 80133a0:	01000101 	.word	0x01000101

080133a4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b08c      	sub	sp, #48	@ 0x30
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	4613      	mov	r3, r2
 80133b0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80133b8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80133ba:	2300      	movs	r3, #0
 80133bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80133c0:	2300      	movs	r3, #0
 80133c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80133c6:	2300      	movs	r3, #0
 80133c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d101      	bne.n	80133d6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80133d2:	2302      	movs	r3, #2
 80133d4:	e0de      	b.n	8013594 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80133da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	2b09      	cmp	r3, #9
 80133e0:	d002      	beq.n	80133e8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80133e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e4:	2209      	movs	r2, #9
 80133e6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	781a      	ldrb	r2, [r3, #0]
 80133ec:	6a3b      	ldr	r3, [r7, #32]
 80133ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	785a      	ldrb	r2, [r3, #1]
 80133f4:	6a3b      	ldr	r3, [r7, #32]
 80133f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	3302      	adds	r3, #2
 80133fc:	781b      	ldrb	r3, [r3, #0]
 80133fe:	461a      	mov	r2, r3
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	3303      	adds	r3, #3
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	021b      	lsls	r3, r3, #8
 8013408:	b29b      	uxth	r3, r3
 801340a:	4313      	orrs	r3, r2
 801340c:	b29b      	uxth	r3, r3
 801340e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013412:	bf28      	it	cs
 8013414:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8013418:	b29a      	uxth	r2, r3
 801341a:	6a3b      	ldr	r3, [r7, #32]
 801341c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	791a      	ldrb	r2, [r3, #4]
 8013422:	6a3b      	ldr	r3, [r7, #32]
 8013424:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	795a      	ldrb	r2, [r3, #5]
 801342a:	6a3b      	ldr	r3, [r7, #32]
 801342c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	799a      	ldrb	r2, [r3, #6]
 8013432:	6a3b      	ldr	r3, [r7, #32]
 8013434:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	79da      	ldrb	r2, [r3, #7]
 801343a:	6a3b      	ldr	r3, [r7, #32]
 801343c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	7a1a      	ldrb	r2, [r3, #8]
 8013442:	6a3b      	ldr	r3, [r7, #32]
 8013444:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8013446:	88fb      	ldrh	r3, [r7, #6]
 8013448:	2b09      	cmp	r3, #9
 801344a:	f240 80a1 	bls.w	8013590 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 801344e:	2309      	movs	r3, #9
 8013450:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013452:	2300      	movs	r3, #0
 8013454:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013456:	e085      	b.n	8013564 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013458:	f107 0316 	add.w	r3, r7, #22
 801345c:	4619      	mov	r1, r3
 801345e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013460:	f000 f9e6 	bl	8013830 <USBH_GetNextDesc>
 8013464:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8013466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013468:	785b      	ldrb	r3, [r3, #1]
 801346a:	2b04      	cmp	r3, #4
 801346c:	d17a      	bne.n	8013564 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	2b09      	cmp	r3, #9
 8013474:	d002      	beq.n	801347c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8013476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013478:	2209      	movs	r2, #9
 801347a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 801347c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013480:	221a      	movs	r2, #26
 8013482:	fb02 f303 	mul.w	r3, r2, r3
 8013486:	3308      	adds	r3, #8
 8013488:	6a3a      	ldr	r2, [r7, #32]
 801348a:	4413      	add	r3, r2
 801348c:	3302      	adds	r3, #2
 801348e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013492:	69f8      	ldr	r0, [r7, #28]
 8013494:	f000 f882 	bl	801359c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013498:	2300      	movs	r3, #0
 801349a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801349e:	2300      	movs	r3, #0
 80134a0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80134a2:	e043      	b.n	801352c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80134a4:	f107 0316 	add.w	r3, r7, #22
 80134a8:	4619      	mov	r1, r3
 80134aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134ac:	f000 f9c0 	bl	8013830 <USBH_GetNextDesc>
 80134b0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80134b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134b4:	785b      	ldrb	r3, [r3, #1]
 80134b6:	2b05      	cmp	r3, #5
 80134b8:	d138      	bne.n	801352c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80134ba:	69fb      	ldr	r3, [r7, #28]
 80134bc:	795b      	ldrb	r3, [r3, #5]
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d113      	bne.n	80134ea <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80134c2:	69fb      	ldr	r3, [r7, #28]
 80134c4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80134c6:	2b02      	cmp	r3, #2
 80134c8:	d003      	beq.n	80134d2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80134ca:	69fb      	ldr	r3, [r7, #28]
 80134cc:	799b      	ldrb	r3, [r3, #6]
 80134ce:	2b03      	cmp	r3, #3
 80134d0:	d10b      	bne.n	80134ea <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80134d2:	69fb      	ldr	r3, [r7, #28]
 80134d4:	79db      	ldrb	r3, [r3, #7]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d10b      	bne.n	80134f2 <USBH_ParseCfgDesc+0x14e>
 80134da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	2b09      	cmp	r3, #9
 80134e0:	d007      	beq.n	80134f2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80134e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e4:	2209      	movs	r2, #9
 80134e6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80134e8:	e003      	b.n	80134f2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80134ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134ec:	2207      	movs	r2, #7
 80134ee:	701a      	strb	r2, [r3, #0]
 80134f0:	e000      	b.n	80134f4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80134f2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80134f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80134fc:	3201      	adds	r2, #1
 80134fe:	00d2      	lsls	r2, r2, #3
 8013500:	211a      	movs	r1, #26
 8013502:	fb01 f303 	mul.w	r3, r1, r3
 8013506:	4413      	add	r3, r2
 8013508:	3308      	adds	r3, #8
 801350a:	6a3a      	ldr	r2, [r7, #32]
 801350c:	4413      	add	r3, r2
 801350e:	3304      	adds	r3, #4
 8013510:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8013512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013514:	69b9      	ldr	r1, [r7, #24]
 8013516:	68f8      	ldr	r0, [r7, #12]
 8013518:	f000 f86f 	bl	80135fa <USBH_ParseEPDesc>
 801351c:	4603      	mov	r3, r0
 801351e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8013522:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013526:	3301      	adds	r3, #1
 8013528:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801352c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013530:	2b01      	cmp	r3, #1
 8013532:	d80a      	bhi.n	801354a <USBH_ParseCfgDesc+0x1a6>
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	791b      	ldrb	r3, [r3, #4]
 8013538:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801353c:	429a      	cmp	r2, r3
 801353e:	d204      	bcs.n	801354a <USBH_ParseCfgDesc+0x1a6>
 8013540:	6a3b      	ldr	r3, [r7, #32]
 8013542:	885a      	ldrh	r2, [r3, #2]
 8013544:	8afb      	ldrh	r3, [r7, #22]
 8013546:	429a      	cmp	r2, r3
 8013548:	d8ac      	bhi.n	80134a4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	791b      	ldrb	r3, [r3, #4]
 801354e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013552:	429a      	cmp	r2, r3
 8013554:	d201      	bcs.n	801355a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8013556:	2303      	movs	r3, #3
 8013558:	e01c      	b.n	8013594 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 801355a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801355e:	3301      	adds	r3, #1
 8013560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013568:	2b01      	cmp	r3, #1
 801356a:	d805      	bhi.n	8013578 <USBH_ParseCfgDesc+0x1d4>
 801356c:	6a3b      	ldr	r3, [r7, #32]
 801356e:	885a      	ldrh	r2, [r3, #2]
 8013570:	8afb      	ldrh	r3, [r7, #22]
 8013572:	429a      	cmp	r2, r3
 8013574:	f63f af70 	bhi.w	8013458 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8013578:	6a3b      	ldr	r3, [r7, #32]
 801357a:	791b      	ldrb	r3, [r3, #4]
 801357c:	2b02      	cmp	r3, #2
 801357e:	bf28      	it	cs
 8013580:	2302      	movcs	r3, #2
 8013582:	b2db      	uxtb	r3, r3
 8013584:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013588:	429a      	cmp	r2, r3
 801358a:	d201      	bcs.n	8013590 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 801358c:	2303      	movs	r3, #3
 801358e:	e001      	b.n	8013594 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8013590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013594:	4618      	mov	r0, r3
 8013596:	3730      	adds	r7, #48	@ 0x30
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801359c:	b480      	push	{r7}
 801359e:	b083      	sub	sp, #12
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	781a      	ldrb	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	785a      	ldrb	r2, [r3, #1]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	789a      	ldrb	r2, [r3, #2]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	78da      	ldrb	r2, [r3, #3]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	791a      	ldrb	r2, [r3, #4]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	795a      	ldrb	r2, [r3, #5]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	799a      	ldrb	r2, [r3, #6]
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	79da      	ldrb	r2, [r3, #7]
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	7a1a      	ldrb	r2, [r3, #8]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	721a      	strb	r2, [r3, #8]
}
 80135ee:	bf00      	nop
 80135f0:	370c      	adds	r7, #12
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr

080135fa <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80135fa:	b480      	push	{r7}
 80135fc:	b087      	sub	sp, #28
 80135fe:	af00      	add	r7, sp, #0
 8013600:	60f8      	str	r0, [r7, #12]
 8013602:	60b9      	str	r1, [r7, #8]
 8013604:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8013606:	2300      	movs	r3, #0
 8013608:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	781a      	ldrb	r2, [r3, #0]
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	785a      	ldrb	r2, [r3, #1]
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	789a      	ldrb	r2, [r3, #2]
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	78da      	ldrb	r2, [r3, #3]
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	3304      	adds	r3, #4
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	461a      	mov	r2, r3
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	3305      	adds	r3, #5
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	021b      	lsls	r3, r3, #8
 801363a:	b29b      	uxth	r3, r3
 801363c:	4313      	orrs	r3, r2
 801363e:	b29a      	uxth	r2, r3
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	799a      	ldrb	r2, [r3, #6]
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	889b      	ldrh	r3, [r3, #4]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d009      	beq.n	8013668 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8013658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801365c:	d804      	bhi.n	8013668 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013666:	d901      	bls.n	801366c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8013668:	2303      	movs	r3, #3
 801366a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013672:	2b00      	cmp	r3, #0
 8013674:	d136      	bne.n	80136e4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	78db      	ldrb	r3, [r3, #3]
 801367a:	f003 0303 	and.w	r3, r3, #3
 801367e:	2b02      	cmp	r3, #2
 8013680:	d108      	bne.n	8013694 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	889b      	ldrh	r3, [r3, #4]
 8013686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801368a:	f240 8097 	bls.w	80137bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801368e:	2303      	movs	r3, #3
 8013690:	75fb      	strb	r3, [r7, #23]
 8013692:	e093      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	78db      	ldrb	r3, [r3, #3]
 8013698:	f003 0303 	and.w	r3, r3, #3
 801369c:	2b00      	cmp	r3, #0
 801369e:	d107      	bne.n	80136b0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	889b      	ldrh	r3, [r3, #4]
 80136a4:	2b40      	cmp	r3, #64	@ 0x40
 80136a6:	f240 8089 	bls.w	80137bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80136aa:	2303      	movs	r3, #3
 80136ac:	75fb      	strb	r3, [r7, #23]
 80136ae:	e085      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	78db      	ldrb	r3, [r3, #3]
 80136b4:	f003 0303 	and.w	r3, r3, #3
 80136b8:	2b01      	cmp	r3, #1
 80136ba:	d005      	beq.n	80136c8 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	78db      	ldrb	r3, [r3, #3]
 80136c0:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80136c4:	2b03      	cmp	r3, #3
 80136c6:	d10a      	bne.n	80136de <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	799b      	ldrb	r3, [r3, #6]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d003      	beq.n	80136d8 <USBH_ParseEPDesc+0xde>
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	799b      	ldrb	r3, [r3, #6]
 80136d4:	2b10      	cmp	r3, #16
 80136d6:	d970      	bls.n	80137ba <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80136d8:	2303      	movs	r3, #3
 80136da:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80136dc:	e06d      	b.n	80137ba <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80136de:	2303      	movs	r3, #3
 80136e0:	75fb      	strb	r3, [r7, #23]
 80136e2:	e06b      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80136ea:	2b01      	cmp	r3, #1
 80136ec:	d13c      	bne.n	8013768 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	78db      	ldrb	r3, [r3, #3]
 80136f2:	f003 0303 	and.w	r3, r3, #3
 80136f6:	2b02      	cmp	r3, #2
 80136f8:	d005      	beq.n	8013706 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	78db      	ldrb	r3, [r3, #3]
 80136fe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8013702:	2b00      	cmp	r3, #0
 8013704:	d106      	bne.n	8013714 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	889b      	ldrh	r3, [r3, #4]
 801370a:	2b40      	cmp	r3, #64	@ 0x40
 801370c:	d956      	bls.n	80137bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801370e:	2303      	movs	r3, #3
 8013710:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013712:	e053      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	78db      	ldrb	r3, [r3, #3]
 8013718:	f003 0303 	and.w	r3, r3, #3
 801371c:	2b01      	cmp	r3, #1
 801371e:	d10e      	bne.n	801373e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	799b      	ldrb	r3, [r3, #6]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d007      	beq.n	8013738 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801372c:	2b10      	cmp	r3, #16
 801372e:	d803      	bhi.n	8013738 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8013734:	2b40      	cmp	r3, #64	@ 0x40
 8013736:	d941      	bls.n	80137bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013738:	2303      	movs	r3, #3
 801373a:	75fb      	strb	r3, [r7, #23]
 801373c:	e03e      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	78db      	ldrb	r3, [r3, #3]
 8013742:	f003 0303 	and.w	r3, r3, #3
 8013746:	2b03      	cmp	r3, #3
 8013748:	d10b      	bne.n	8013762 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	799b      	ldrb	r3, [r3, #6]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d004      	beq.n	801375c <USBH_ParseEPDesc+0x162>
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	889b      	ldrh	r3, [r3, #4]
 8013756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801375a:	d32f      	bcc.n	80137bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801375c:	2303      	movs	r3, #3
 801375e:	75fb      	strb	r3, [r7, #23]
 8013760:	e02c      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013762:	2303      	movs	r3, #3
 8013764:	75fb      	strb	r3, [r7, #23]
 8013766:	e029      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801376e:	2b02      	cmp	r3, #2
 8013770:	d120      	bne.n	80137b4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	78db      	ldrb	r3, [r3, #3]
 8013776:	f003 0303 	and.w	r3, r3, #3
 801377a:	2b00      	cmp	r3, #0
 801377c:	d106      	bne.n	801378c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	889b      	ldrh	r3, [r3, #4]
 8013782:	2b08      	cmp	r3, #8
 8013784:	d01a      	beq.n	80137bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013786:	2303      	movs	r3, #3
 8013788:	75fb      	strb	r3, [r7, #23]
 801378a:	e017      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	78db      	ldrb	r3, [r3, #3]
 8013790:	f003 0303 	and.w	r3, r3, #3
 8013794:	2b03      	cmp	r3, #3
 8013796:	d10a      	bne.n	80137ae <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	799b      	ldrb	r3, [r3, #6]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d003      	beq.n	80137a8 <USBH_ParseEPDesc+0x1ae>
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	889b      	ldrh	r3, [r3, #4]
 80137a4:	2b08      	cmp	r3, #8
 80137a6:	d909      	bls.n	80137bc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80137a8:	2303      	movs	r3, #3
 80137aa:	75fb      	strb	r3, [r7, #23]
 80137ac:	e006      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80137ae:	2303      	movs	r3, #3
 80137b0:	75fb      	strb	r3, [r7, #23]
 80137b2:	e003      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80137b4:	2303      	movs	r3, #3
 80137b6:	75fb      	strb	r3, [r7, #23]
 80137b8:	e000      	b.n	80137bc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80137ba:	bf00      	nop
  }

  return status;
 80137bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80137be:	4618      	mov	r0, r3
 80137c0:	371c      	adds	r7, #28
 80137c2:	46bd      	mov	sp, r7
 80137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c8:	4770      	bx	lr

080137ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80137ca:	b480      	push	{r7}
 80137cc:	b087      	sub	sp, #28
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	60f8      	str	r0, [r7, #12]
 80137d2:	60b9      	str	r1, [r7, #8]
 80137d4:	4613      	mov	r3, r2
 80137d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	3301      	adds	r3, #1
 80137dc:	781b      	ldrb	r3, [r3, #0]
 80137de:	2b03      	cmp	r3, #3
 80137e0:	d120      	bne.n	8013824 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	1e9a      	subs	r2, r3, #2
 80137e8:	88fb      	ldrh	r3, [r7, #6]
 80137ea:	4293      	cmp	r3, r2
 80137ec:	bf28      	it	cs
 80137ee:	4613      	movcs	r3, r2
 80137f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	3302      	adds	r3, #2
 80137f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80137f8:	2300      	movs	r3, #0
 80137fa:	82fb      	strh	r3, [r7, #22]
 80137fc:	e00b      	b.n	8013816 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80137fe:	8afb      	ldrh	r3, [r7, #22]
 8013800:	68fa      	ldr	r2, [r7, #12]
 8013802:	4413      	add	r3, r2
 8013804:	781a      	ldrb	r2, [r3, #0]
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	701a      	strb	r2, [r3, #0]
      pdest++;
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	3301      	adds	r3, #1
 801380e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013810:	8afb      	ldrh	r3, [r7, #22]
 8013812:	3302      	adds	r3, #2
 8013814:	82fb      	strh	r3, [r7, #22]
 8013816:	8afa      	ldrh	r2, [r7, #22]
 8013818:	8abb      	ldrh	r3, [r7, #20]
 801381a:	429a      	cmp	r2, r3
 801381c:	d3ef      	bcc.n	80137fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	2200      	movs	r2, #0
 8013822:	701a      	strb	r2, [r3, #0]
  }
}
 8013824:	bf00      	nop
 8013826:	371c      	adds	r7, #28
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr

08013830 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013830:	b480      	push	{r7}
 8013832:	b085      	sub	sp, #20
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	881b      	ldrh	r3, [r3, #0]
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	7812      	ldrb	r2, [r2, #0]
 8013842:	4413      	add	r3, r2
 8013844:	b29a      	uxth	r2, r3
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	4413      	add	r3, r2
 8013854:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013856:	68fb      	ldr	r3, [r7, #12]
}
 8013858:	4618      	mov	r0, r3
 801385a:	3714      	adds	r7, #20
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr

08013864 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b086      	sub	sp, #24
 8013868:	af00      	add	r7, sp, #0
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	60b9      	str	r1, [r7, #8]
 801386e:	4613      	mov	r3, r2
 8013870:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013872:	2301      	movs	r3, #1
 8013874:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	789b      	ldrb	r3, [r3, #2]
 801387a:	2b01      	cmp	r3, #1
 801387c:	d002      	beq.n	8013884 <USBH_CtlReq+0x20>
 801387e:	2b02      	cmp	r3, #2
 8013880:	d015      	beq.n	80138ae <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8013882:	e033      	b.n	80138ec <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	68ba      	ldr	r2, [r7, #8]
 8013888:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	88fa      	ldrh	r2, [r7, #6]
 801388e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2201      	movs	r2, #1
 8013894:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2202      	movs	r2, #2
 801389a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801389c:	2301      	movs	r3, #1
 801389e:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80138a0:	2300      	movs	r3, #0
 80138a2:	2200      	movs	r2, #0
 80138a4:	2103      	movs	r1, #3
 80138a6:	68f8      	ldr	r0, [r7, #12]
 80138a8:	f7ff fb32 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 80138ac:	e01e      	b.n	80138ec <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f000 f822 	bl	80138f8 <USBH_HandleControl>
 80138b4:	4603      	mov	r3, r0
 80138b6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80138b8:	7dfb      	ldrb	r3, [r7, #23]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d002      	beq.n	80138c4 <USBH_CtlReq+0x60>
 80138be:	7dfb      	ldrb	r3, [r7, #23]
 80138c0:	2b03      	cmp	r3, #3
 80138c2:	d106      	bne.n	80138d2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2201      	movs	r2, #1
 80138c8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2200      	movs	r2, #0
 80138ce:	761a      	strb	r2, [r3, #24]
 80138d0:	e005      	b.n	80138de <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 80138d2:	7dfb      	ldrb	r3, [r7, #23]
 80138d4:	2b02      	cmp	r3, #2
 80138d6:	d102      	bne.n	80138de <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2201      	movs	r2, #1
 80138dc:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80138de:	2300      	movs	r3, #0
 80138e0:	2200      	movs	r2, #0
 80138e2:	2103      	movs	r1, #3
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	f7ff fb13 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 80138ea:	bf00      	nop
  }
  return status;
 80138ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3718      	adds	r7, #24
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
	...

080138f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b086      	sub	sp, #24
 80138fc:	af02      	add	r7, sp, #8
 80138fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013900:	2301      	movs	r3, #1
 8013902:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013904:	2300      	movs	r3, #0
 8013906:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	7e1b      	ldrb	r3, [r3, #24]
 801390c:	3b01      	subs	r3, #1
 801390e:	2b0a      	cmp	r3, #10
 8013910:	f200 81b2 	bhi.w	8013c78 <USBH_HandleControl+0x380>
 8013914:	a201      	add	r2, pc, #4	@ (adr r2, 801391c <USBH_HandleControl+0x24>)
 8013916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801391a:	bf00      	nop
 801391c:	08013949 	.word	0x08013949
 8013920:	08013963 	.word	0x08013963
 8013924:	080139e5 	.word	0x080139e5
 8013928:	08013a0b 	.word	0x08013a0b
 801392c:	08013a69 	.word	0x08013a69
 8013930:	08013a93 	.word	0x08013a93
 8013934:	08013b15 	.word	0x08013b15
 8013938:	08013b37 	.word	0x08013b37
 801393c:	08013b99 	.word	0x08013b99
 8013940:	08013bbf 	.word	0x08013bbf
 8013944:	08013c21 	.word	0x08013c21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f103 0110 	add.w	r1, r3, #16
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	795b      	ldrb	r3, [r3, #5]
 8013952:	461a      	mov	r2, r3
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 f99f 	bl	8013c98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2202      	movs	r2, #2
 801395e:	761a      	strb	r2, [r3, #24]
      break;
 8013960:	e195      	b.n	8013c8e <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	795b      	ldrb	r3, [r3, #5]
 8013966:	4619      	mov	r1, r3
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f005 fe3b 	bl	80195e4 <USBH_LL_GetURBState>
 801396e:	4603      	mov	r3, r0
 8013970:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013972:	7bbb      	ldrb	r3, [r7, #14]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d124      	bne.n	80139c2 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	7c1b      	ldrb	r3, [r3, #16]
 801397c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013980:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	8adb      	ldrh	r3, [r3, #22]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00a      	beq.n	80139a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801398a:	7b7b      	ldrb	r3, [r7, #13]
 801398c:	2b80      	cmp	r3, #128	@ 0x80
 801398e:	d103      	bne.n	8013998 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2203      	movs	r2, #3
 8013994:	761a      	strb	r2, [r3, #24]
 8013996:	e00d      	b.n	80139b4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2205      	movs	r2, #5
 801399c:	761a      	strb	r2, [r3, #24]
 801399e:	e009      	b.n	80139b4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80139a0:	7b7b      	ldrb	r3, [r7, #13]
 80139a2:	2b80      	cmp	r3, #128	@ 0x80
 80139a4:	d103      	bne.n	80139ae <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2209      	movs	r2, #9
 80139aa:	761a      	strb	r2, [r3, #24]
 80139ac:	e002      	b.n	80139b4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2207      	movs	r2, #7
 80139b2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139b4:	2300      	movs	r3, #0
 80139b6:	2200      	movs	r2, #0
 80139b8:	2103      	movs	r1, #3
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f7ff faa8 	bl	8012f10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80139c0:	e15c      	b.n	8013c7c <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80139c2:	7bbb      	ldrb	r3, [r7, #14]
 80139c4:	2b04      	cmp	r3, #4
 80139c6:	d003      	beq.n	80139d0 <USBH_HandleControl+0xd8>
 80139c8:	7bbb      	ldrb	r3, [r7, #14]
 80139ca:	2b02      	cmp	r3, #2
 80139cc:	f040 8156 	bne.w	8013c7c <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	220b      	movs	r2, #11
 80139d4:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139d6:	2300      	movs	r3, #0
 80139d8:	2200      	movs	r2, #0
 80139da:	2103      	movs	r1, #3
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f7ff fa97 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 80139e2:	e14b      	b.n	8013c7c <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6899      	ldr	r1, [r3, #8]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	899a      	ldrh	r2, [r3, #12]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	791b      	ldrb	r3, [r3, #4]
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f000 f98a 	bl	8013d16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2204      	movs	r2, #4
 8013a06:	761a      	strb	r2, [r3, #24]
      break;
 8013a08:	e141      	b.n	8013c8e <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	791b      	ldrb	r3, [r3, #4]
 8013a0e:	4619      	mov	r1, r3
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f005 fde7 	bl	80195e4 <USBH_LL_GetURBState>
 8013a16:	4603      	mov	r3, r0
 8013a18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8013a1a:	7bbb      	ldrb	r3, [r7, #14]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d109      	bne.n	8013a34 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2209      	movs	r2, #9
 8013a24:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a26:	2300      	movs	r3, #0
 8013a28:	2200      	movs	r2, #0
 8013a2a:	2103      	movs	r1, #3
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f7ff fa6f 	bl	8012f10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013a32:	e125      	b.n	8013c80 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8013a34:	7bbb      	ldrb	r3, [r7, #14]
 8013a36:	2b05      	cmp	r3, #5
 8013a38:	d108      	bne.n	8013a4c <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 8013a3a:	2303      	movs	r3, #3
 8013a3c:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a3e:	2300      	movs	r3, #0
 8013a40:	2200      	movs	r2, #0
 8013a42:	2103      	movs	r1, #3
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f7ff fa63 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013a4a:	e119      	b.n	8013c80 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 8013a4c:	7bbb      	ldrb	r3, [r7, #14]
 8013a4e:	2b04      	cmp	r3, #4
 8013a50:	f040 8116 	bne.w	8013c80 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	220b      	movs	r2, #11
 8013a58:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	2103      	movs	r1, #3
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f7ff fa55 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013a66:	e10b      	b.n	8013c80 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6899      	ldr	r1, [r3, #8]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	899a      	ldrh	r2, [r3, #12]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	795b      	ldrb	r3, [r3, #5]
 8013a74:	2001      	movs	r0, #1
 8013a76:	9000      	str	r0, [sp, #0]
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 f927 	bl	8013ccc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013a84:	b29a      	uxth	r2, r3
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2206      	movs	r2, #6
 8013a8e:	761a      	strb	r2, [r3, #24]
      break;
 8013a90:	e0fd      	b.n	8013c8e <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	795b      	ldrb	r3, [r3, #5]
 8013a96:	4619      	mov	r1, r3
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f005 fda3 	bl	80195e4 <USBH_LL_GetURBState>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013aa2:	7bbb      	ldrb	r3, [r7, #14]
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	d109      	bne.n	8013abc <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2207      	movs	r2, #7
 8013aac:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013aae:	2300      	movs	r3, #0
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	2103      	movs	r1, #3
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f7ff fa2b 	bl	8012f10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013aba:	e0e3      	b.n	8013c84 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 8013abc:	7bbb      	ldrb	r3, [r7, #14]
 8013abe:	2b05      	cmp	r3, #5
 8013ac0:	d10b      	bne.n	8013ada <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	220c      	movs	r2, #12
 8013ac6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8013ac8:	2303      	movs	r3, #3
 8013aca:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013acc:	2300      	movs	r3, #0
 8013ace:	2200      	movs	r2, #0
 8013ad0:	2103      	movs	r1, #3
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7ff fa1c 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013ad8:	e0d4      	b.n	8013c84 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013ada:	7bbb      	ldrb	r3, [r7, #14]
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	d109      	bne.n	8013af4 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2205      	movs	r2, #5
 8013ae4:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	2200      	movs	r2, #0
 8013aea:	2103      	movs	r1, #3
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f7ff fa0f 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013af2:	e0c7      	b.n	8013c84 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8013af4:	7bbb      	ldrb	r3, [r7, #14]
 8013af6:	2b04      	cmp	r3, #4
 8013af8:	f040 80c4 	bne.w	8013c84 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	220b      	movs	r2, #11
 8013b00:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013b02:	2302      	movs	r3, #2
 8013b04:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b06:	2300      	movs	r3, #0
 8013b08:	2200      	movs	r2, #0
 8013b0a:	2103      	movs	r1, #3
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7ff f9ff 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013b12:	e0b7      	b.n	8013c84 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	791b      	ldrb	r3, [r3, #4]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	2100      	movs	r1, #0
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f000 f8fa 	bl	8013d16 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013b28:	b29a      	uxth	r2, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2208      	movs	r2, #8
 8013b32:	761a      	strb	r2, [r3, #24]

      break;
 8013b34:	e0ab      	b.n	8013c8e <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	791b      	ldrb	r3, [r3, #4]
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f005 fd51 	bl	80195e4 <USBH_LL_GetURBState>
 8013b42:	4603      	mov	r3, r0
 8013b44:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013b46:	7bbb      	ldrb	r3, [r7, #14]
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	d10b      	bne.n	8013b64 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	220d      	movs	r2, #13
 8013b50:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8013b52:	2300      	movs	r3, #0
 8013b54:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b56:	2300      	movs	r3, #0
 8013b58:	2200      	movs	r2, #0
 8013b5a:	2103      	movs	r1, #3
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7ff f9d7 	bl	8012f10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013b62:	e091      	b.n	8013c88 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 8013b64:	7bbb      	ldrb	r3, [r7, #14]
 8013b66:	2b04      	cmp	r3, #4
 8013b68:	d109      	bne.n	8013b7e <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	220b      	movs	r2, #11
 8013b6e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b70:	2300      	movs	r3, #0
 8013b72:	2200      	movs	r2, #0
 8013b74:	2103      	movs	r1, #3
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f7ff f9ca 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013b7c:	e084      	b.n	8013c88 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 8013b7e:	7bbb      	ldrb	r3, [r7, #14]
 8013b80:	2b05      	cmp	r3, #5
 8013b82:	f040 8081 	bne.w	8013c88 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 8013b86:	2303      	movs	r3, #3
 8013b88:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	2103      	movs	r1, #3
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7ff f9bd 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013b96:	e077      	b.n	8013c88 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	795b      	ldrb	r3, [r3, #5]
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	9200      	str	r2, [sp, #0]
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 f891 	bl	8013ccc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013bb0:	b29a      	uxth	r2, r3
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	220a      	movs	r2, #10
 8013bba:	761a      	strb	r2, [r3, #24]
      break;
 8013bbc:	e067      	b.n	8013c8e <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	795b      	ldrb	r3, [r3, #5]
 8013bc2:	4619      	mov	r1, r3
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f005 fd0d 	bl	80195e4 <USBH_LL_GetURBState>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8013bce:	7bbb      	ldrb	r3, [r7, #14]
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d10b      	bne.n	8013bec <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	220d      	movs	r2, #13
 8013bdc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013bde:	2300      	movs	r3, #0
 8013be0:	2200      	movs	r2, #0
 8013be2:	2103      	movs	r1, #3
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f7ff f993 	bl	8012f10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013bea:	e04f      	b.n	8013c8c <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013bec:	7bbb      	ldrb	r3, [r7, #14]
 8013bee:	2b02      	cmp	r3, #2
 8013bf0:	d109      	bne.n	8013c06 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2209      	movs	r2, #9
 8013bf6:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	2103      	movs	r1, #3
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f7ff f986 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013c04:	e042      	b.n	8013c8c <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8013c06:	7bbb      	ldrb	r3, [r7, #14]
 8013c08:	2b04      	cmp	r3, #4
 8013c0a:	d13f      	bne.n	8013c8c <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	220b      	movs	r2, #11
 8013c10:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013c12:	2300      	movs	r3, #0
 8013c14:	2200      	movs	r2, #0
 8013c16:	2103      	movs	r1, #3
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f7ff f979 	bl	8012f10 <USBH_OS_PutMessage>
      break;
 8013c1e:	e035      	b.n	8013c8c <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	7e5b      	ldrb	r3, [r3, #25]
 8013c24:	3301      	adds	r3, #1
 8013c26:	b2da      	uxtb	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	765a      	strb	r2, [r3, #25]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	7e5b      	ldrb	r3, [r3, #25]
 8013c30:	2b02      	cmp	r3, #2
 8013c32:	d806      	bhi.n	8013c42 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2201      	movs	r2, #1
 8013c38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2201      	movs	r2, #1
 8013c3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8013c40:	e025      	b.n	8013c8e <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013c48:	2106      	movs	r1, #6
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2200      	movs	r2, #0
 8013c52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	795b      	ldrb	r3, [r3, #5]
 8013c58:	4619      	mov	r1, r3
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 f90c 	bl	8013e78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	791b      	ldrb	r3, [r3, #4]
 8013c64:	4619      	mov	r1, r3
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 f906 	bl	8013e78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8013c72:	2302      	movs	r3, #2
 8013c74:	73fb      	strb	r3, [r7, #15]
      break;
 8013c76:	e00a      	b.n	8013c8e <USBH_HandleControl+0x396>

    default:
      break;
 8013c78:	bf00      	nop
 8013c7a:	e008      	b.n	8013c8e <USBH_HandleControl+0x396>
      break;
 8013c7c:	bf00      	nop
 8013c7e:	e006      	b.n	8013c8e <USBH_HandleControl+0x396>
      break;
 8013c80:	bf00      	nop
 8013c82:	e004      	b.n	8013c8e <USBH_HandleControl+0x396>
      break;
 8013c84:	bf00      	nop
 8013c86:	e002      	b.n	8013c8e <USBH_HandleControl+0x396>
      break;
 8013c88:	bf00      	nop
 8013c8a:	e000      	b.n	8013c8e <USBH_HandleControl+0x396>
      break;
 8013c8c:	bf00      	nop
  }

  return status;
 8013c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3710      	adds	r7, #16
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b088      	sub	sp, #32
 8013c9c:	af04      	add	r7, sp, #16
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013ca6:	79f9      	ldrb	r1, [r7, #7]
 8013ca8:	2300      	movs	r3, #0
 8013caa:	9303      	str	r3, [sp, #12]
 8013cac:	2308      	movs	r3, #8
 8013cae:	9302      	str	r3, [sp, #8]
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	9301      	str	r3, [sp, #4]
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	2300      	movs	r3, #0
 8013cba:	2200      	movs	r2, #0
 8013cbc:	68f8      	ldr	r0, [r7, #12]
 8013cbe:	f005 fc60 	bl	8019582 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3710      	adds	r7, #16
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}

08013ccc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b088      	sub	sp, #32
 8013cd0:	af04      	add	r7, sp, #16
 8013cd2:	60f8      	str	r0, [r7, #12]
 8013cd4:	60b9      	str	r1, [r7, #8]
 8013cd6:	4611      	mov	r1, r2
 8013cd8:	461a      	mov	r2, r3
 8013cda:	460b      	mov	r3, r1
 8013cdc:	80fb      	strh	r3, [r7, #6]
 8013cde:	4613      	mov	r3, r2
 8013ce0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d001      	beq.n	8013cf0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8013cec:	2300      	movs	r3, #0
 8013cee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013cf0:	7979      	ldrb	r1, [r7, #5]
 8013cf2:	7e3b      	ldrb	r3, [r7, #24]
 8013cf4:	9303      	str	r3, [sp, #12]
 8013cf6:	88fb      	ldrh	r3, [r7, #6]
 8013cf8:	9302      	str	r3, [sp, #8]
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	9301      	str	r3, [sp, #4]
 8013cfe:	2301      	movs	r3, #1
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	2300      	movs	r3, #0
 8013d04:	2200      	movs	r2, #0
 8013d06:	68f8      	ldr	r0, [r7, #12]
 8013d08:	f005 fc3b 	bl	8019582 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013d0c:	2300      	movs	r3, #0
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3710      	adds	r7, #16
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}

08013d16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8013d16:	b580      	push	{r7, lr}
 8013d18:	b088      	sub	sp, #32
 8013d1a:	af04      	add	r7, sp, #16
 8013d1c:	60f8      	str	r0, [r7, #12]
 8013d1e:	60b9      	str	r1, [r7, #8]
 8013d20:	4611      	mov	r1, r2
 8013d22:	461a      	mov	r2, r3
 8013d24:	460b      	mov	r3, r1
 8013d26:	80fb      	strh	r3, [r7, #6]
 8013d28:	4613      	mov	r3, r2
 8013d2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013d2c:	7979      	ldrb	r1, [r7, #5]
 8013d2e:	2300      	movs	r3, #0
 8013d30:	9303      	str	r3, [sp, #12]
 8013d32:	88fb      	ldrh	r3, [r7, #6]
 8013d34:	9302      	str	r3, [sp, #8]
 8013d36:	68bb      	ldr	r3, [r7, #8]
 8013d38:	9301      	str	r3, [sp, #4]
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	9300      	str	r3, [sp, #0]
 8013d3e:	2300      	movs	r3, #0
 8013d40:	2201      	movs	r2, #1
 8013d42:	68f8      	ldr	r0, [r7, #12]
 8013d44:	f005 fc1d 	bl	8019582 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013d48:	2300      	movs	r3, #0

}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3710      	adds	r7, #16
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}

08013d52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8013d52:	b580      	push	{r7, lr}
 8013d54:	b088      	sub	sp, #32
 8013d56:	af04      	add	r7, sp, #16
 8013d58:	60f8      	str	r0, [r7, #12]
 8013d5a:	60b9      	str	r1, [r7, #8]
 8013d5c:	4611      	mov	r1, r2
 8013d5e:	461a      	mov	r2, r3
 8013d60:	460b      	mov	r3, r1
 8013d62:	80fb      	strh	r3, [r7, #6]
 8013d64:	4613      	mov	r3, r2
 8013d66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d001      	beq.n	8013d76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013d72:	2300      	movs	r3, #0
 8013d74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013d76:	7979      	ldrb	r1, [r7, #5]
 8013d78:	7e3b      	ldrb	r3, [r7, #24]
 8013d7a:	9303      	str	r3, [sp, #12]
 8013d7c:	88fb      	ldrh	r3, [r7, #6]
 8013d7e:	9302      	str	r3, [sp, #8]
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	9301      	str	r3, [sp, #4]
 8013d84:	2301      	movs	r3, #1
 8013d86:	9300      	str	r3, [sp, #0]
 8013d88:	2302      	movs	r3, #2
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f005 fbf8 	bl	8019582 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8013d92:	2300      	movs	r3, #0
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3710      	adds	r7, #16
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b088      	sub	sp, #32
 8013da0:	af04      	add	r7, sp, #16
 8013da2:	60f8      	str	r0, [r7, #12]
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	4611      	mov	r1, r2
 8013da8:	461a      	mov	r2, r3
 8013daa:	460b      	mov	r3, r1
 8013dac:	80fb      	strh	r3, [r7, #6]
 8013dae:	4613      	mov	r3, r2
 8013db0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013db2:	7979      	ldrb	r1, [r7, #5]
 8013db4:	2300      	movs	r3, #0
 8013db6:	9303      	str	r3, [sp, #12]
 8013db8:	88fb      	ldrh	r3, [r7, #6]
 8013dba:	9302      	str	r3, [sp, #8]
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	9301      	str	r3, [sp, #4]
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	2302      	movs	r3, #2
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	68f8      	ldr	r0, [r7, #12]
 8013dca:	f005 fbda 	bl	8019582 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013dce:	2300      	movs	r3, #0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3710      	adds	r7, #16
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b086      	sub	sp, #24
 8013ddc:	af04      	add	r7, sp, #16
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	4608      	mov	r0, r1
 8013de2:	4611      	mov	r1, r2
 8013de4:	461a      	mov	r2, r3
 8013de6:	4603      	mov	r3, r0
 8013de8:	70fb      	strb	r3, [r7, #3]
 8013dea:	460b      	mov	r3, r1
 8013dec:	70bb      	strb	r3, [r7, #2]
 8013dee:	4613      	mov	r3, r2
 8013df0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8013df2:	7878      	ldrb	r0, [r7, #1]
 8013df4:	78ba      	ldrb	r2, [r7, #2]
 8013df6:	78f9      	ldrb	r1, [r7, #3]
 8013df8:	8b3b      	ldrh	r3, [r7, #24]
 8013dfa:	9302      	str	r3, [sp, #8]
 8013dfc:	7d3b      	ldrb	r3, [r7, #20]
 8013dfe:	9301      	str	r3, [sp, #4]
 8013e00:	7c3b      	ldrb	r3, [r7, #16]
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	4603      	mov	r3, r0
 8013e06:	6878      	ldr	r0, [r7, #4]
 8013e08:	f005 fb6d 	bl	80194e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8013e0c:	2300      	movs	r3, #0
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3708      	adds	r7, #8
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b082      	sub	sp, #8
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
 8013e1e:	460b      	mov	r3, r1
 8013e20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8013e22:	78fb      	ldrb	r3, [r7, #3]
 8013e24:	4619      	mov	r1, r3
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f005 fb8c 	bl	8019544 <USBH_LL_ClosePipe>

  return USBH_OK;
 8013e2c:	2300      	movs	r3, #0
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3708      	adds	r7, #8
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}

08013e36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8013e36:	b580      	push	{r7, lr}
 8013e38:	b084      	sub	sp, #16
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
 8013e3e:	460b      	mov	r3, r1
 8013e40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f000 f836 	bl	8013eb4 <USBH_GetFreePipe>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8013e4c:	89fb      	ldrh	r3, [r7, #14]
 8013e4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d00a      	beq.n	8013e6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8013e56:	78fa      	ldrb	r2, [r7, #3]
 8013e58:	89fb      	ldrh	r3, [r7, #14]
 8013e5a:	f003 030f 	and.w	r3, r3, #15
 8013e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013e62:	6879      	ldr	r1, [r7, #4]
 8013e64:	33e0      	adds	r3, #224	@ 0xe0
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	440b      	add	r3, r1
 8013e6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013e6c:	89fb      	ldrh	r3, [r7, #14]
 8013e6e:	b2db      	uxtb	r3, r3
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3710      	adds	r7, #16
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b083      	sub	sp, #12
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	460b      	mov	r3, r1
 8013e82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8013e84:	78fb      	ldrb	r3, [r7, #3]
 8013e86:	2b0f      	cmp	r3, #15
 8013e88:	d80d      	bhi.n	8013ea6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8013e8a:	78fb      	ldrb	r3, [r7, #3]
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	33e0      	adds	r3, #224	@ 0xe0
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	4413      	add	r3, r2
 8013e94:	685a      	ldr	r2, [r3, #4]
 8013e96:	78fb      	ldrb	r3, [r7, #3]
 8013e98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013e9c:	6879      	ldr	r1, [r7, #4]
 8013e9e:	33e0      	adds	r3, #224	@ 0xe0
 8013ea0:	009b      	lsls	r3, r3, #2
 8013ea2:	440b      	add	r3, r1
 8013ea4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8013ea6:	2300      	movs	r3, #0
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	370c      	adds	r7, #12
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	b085      	sub	sp, #20
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	73fb      	strb	r3, [r7, #15]
 8013ec4:	e00f      	b.n	8013ee6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8013ec6:	7bfb      	ldrb	r3, [r7, #15]
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	33e0      	adds	r3, #224	@ 0xe0
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	4413      	add	r3, r2
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d102      	bne.n	8013ee0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8013eda:	7bfb      	ldrb	r3, [r7, #15]
 8013edc:	b29b      	uxth	r3, r3
 8013ede:	e007      	b.n	8013ef0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013ee0:	7bfb      	ldrb	r3, [r7, #15]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	73fb      	strb	r3, [r7, #15]
 8013ee6:	7bfb      	ldrb	r3, [r7, #15]
 8013ee8:	2b0f      	cmp	r3, #15
 8013eea:	d9ec      	bls.n	8013ec6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8013eec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3714      	adds	r7, #20
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	4603      	mov	r3, r0
 8013f04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013f06:	79fb      	ldrb	r3, [r7, #7]
 8013f08:	4a08      	ldr	r2, [pc, #32]	@ (8013f2c <disk_status+0x30>)
 8013f0a:	009b      	lsls	r3, r3, #2
 8013f0c:	4413      	add	r3, r2
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	79fa      	ldrb	r2, [r7, #7]
 8013f14:	4905      	ldr	r1, [pc, #20]	@ (8013f2c <disk_status+0x30>)
 8013f16:	440a      	add	r2, r1
 8013f18:	7a12      	ldrb	r2, [r2, #8]
 8013f1a:	4610      	mov	r0, r2
 8013f1c:	4798      	blx	r3
 8013f1e:	4603      	mov	r3, r0
 8013f20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3710      	adds	r7, #16
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	200015bc 	.word	0x200015bc

08013f30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	4603      	mov	r3, r0
 8013f38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8013f3e:	79fb      	ldrb	r3, [r7, #7]
 8013f40:	4a0d      	ldr	r2, [pc, #52]	@ (8013f78 <disk_initialize+0x48>)
 8013f42:	5cd3      	ldrb	r3, [r2, r3]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d111      	bne.n	8013f6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013f48:	79fb      	ldrb	r3, [r7, #7]
 8013f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8013f78 <disk_initialize+0x48>)
 8013f4c:	2101      	movs	r1, #1
 8013f4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013f50:	79fb      	ldrb	r3, [r7, #7]
 8013f52:	4a09      	ldr	r2, [pc, #36]	@ (8013f78 <disk_initialize+0x48>)
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	4413      	add	r3, r2
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	79fa      	ldrb	r2, [r7, #7]
 8013f5e:	4906      	ldr	r1, [pc, #24]	@ (8013f78 <disk_initialize+0x48>)
 8013f60:	440a      	add	r2, r1
 8013f62:	7a12      	ldrb	r2, [r2, #8]
 8013f64:	4610      	mov	r0, r2
 8013f66:	4798      	blx	r3
 8013f68:	4603      	mov	r3, r0
 8013f6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3710      	adds	r7, #16
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}
 8013f76:	bf00      	nop
 8013f78:	200015bc 	.word	0x200015bc

08013f7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013f7c:	b590      	push	{r4, r7, lr}
 8013f7e:	b087      	sub	sp, #28
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60b9      	str	r1, [r7, #8]
 8013f84:	607a      	str	r2, [r7, #4]
 8013f86:	603b      	str	r3, [r7, #0]
 8013f88:	4603      	mov	r3, r0
 8013f8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013f8c:	7bfb      	ldrb	r3, [r7, #15]
 8013f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8013fb8 <disk_read+0x3c>)
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	4413      	add	r3, r2
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	689c      	ldr	r4, [r3, #8]
 8013f98:	7bfb      	ldrb	r3, [r7, #15]
 8013f9a:	4a07      	ldr	r2, [pc, #28]	@ (8013fb8 <disk_read+0x3c>)
 8013f9c:	4413      	add	r3, r2
 8013f9e:	7a18      	ldrb	r0, [r3, #8]
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	68b9      	ldr	r1, [r7, #8]
 8013fa6:	47a0      	blx	r4
 8013fa8:	4603      	mov	r3, r0
 8013faa:	75fb      	strb	r3, [r7, #23]
  return res;
 8013fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	371c      	adds	r7, #28
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd90      	pop	{r4, r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	200015bc 	.word	0x200015bc

08013fbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013fbc:	b590      	push	{r4, r7, lr}
 8013fbe:	b087      	sub	sp, #28
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60b9      	str	r1, [r7, #8]
 8013fc4:	607a      	str	r2, [r7, #4]
 8013fc6:	603b      	str	r3, [r7, #0]
 8013fc8:	4603      	mov	r3, r0
 8013fca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013fcc:	7bfb      	ldrb	r3, [r7, #15]
 8013fce:	4a0a      	ldr	r2, [pc, #40]	@ (8013ff8 <disk_write+0x3c>)
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	4413      	add	r3, r2
 8013fd4:	685b      	ldr	r3, [r3, #4]
 8013fd6:	68dc      	ldr	r4, [r3, #12]
 8013fd8:	7bfb      	ldrb	r3, [r7, #15]
 8013fda:	4a07      	ldr	r2, [pc, #28]	@ (8013ff8 <disk_write+0x3c>)
 8013fdc:	4413      	add	r3, r2
 8013fde:	7a18      	ldrb	r0, [r3, #8]
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	68b9      	ldr	r1, [r7, #8]
 8013fe6:	47a0      	blx	r4
 8013fe8:	4603      	mov	r3, r0
 8013fea:	75fb      	strb	r3, [r7, #23]
  return res;
 8013fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	371c      	adds	r7, #28
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd90      	pop	{r4, r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	200015bc 	.word	0x200015bc

08013ffc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b084      	sub	sp, #16
 8014000:	af00      	add	r7, sp, #0
 8014002:	4603      	mov	r3, r0
 8014004:	603a      	str	r2, [r7, #0]
 8014006:	71fb      	strb	r3, [r7, #7]
 8014008:	460b      	mov	r3, r1
 801400a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801400c:	79fb      	ldrb	r3, [r7, #7]
 801400e:	4a09      	ldr	r2, [pc, #36]	@ (8014034 <disk_ioctl+0x38>)
 8014010:	009b      	lsls	r3, r3, #2
 8014012:	4413      	add	r3, r2
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	691b      	ldr	r3, [r3, #16]
 8014018:	79fa      	ldrb	r2, [r7, #7]
 801401a:	4906      	ldr	r1, [pc, #24]	@ (8014034 <disk_ioctl+0x38>)
 801401c:	440a      	add	r2, r1
 801401e:	7a10      	ldrb	r0, [r2, #8]
 8014020:	79b9      	ldrb	r1, [r7, #6]
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	4798      	blx	r3
 8014026:	4603      	mov	r3, r0
 8014028:	73fb      	strb	r3, [r7, #15]
  return res;
 801402a:	7bfb      	ldrb	r3, [r7, #15]
}
 801402c:	4618      	mov	r0, r3
 801402e:	3710      	adds	r7, #16
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}
 8014034:	200015bc 	.word	0x200015bc

08014038 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014038:	b480      	push	{r7}
 801403a:	b085      	sub	sp, #20
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	3301      	adds	r3, #1
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014048:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801404c:	021b      	lsls	r3, r3, #8
 801404e:	b21a      	sxth	r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	b21b      	sxth	r3, r3
 8014056:	4313      	orrs	r3, r2
 8014058:	b21b      	sxth	r3, r3
 801405a:	81fb      	strh	r3, [r7, #14]
	return rv;
 801405c:	89fb      	ldrh	r3, [r7, #14]
}
 801405e:	4618      	mov	r0, r3
 8014060:	3714      	adds	r7, #20
 8014062:	46bd      	mov	sp, r7
 8014064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014068:	4770      	bx	lr

0801406a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801406a:	b480      	push	{r7}
 801406c:	b085      	sub	sp, #20
 801406e:	af00      	add	r7, sp, #0
 8014070:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	3303      	adds	r3, #3
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	021b      	lsls	r3, r3, #8
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	3202      	adds	r2, #2
 8014082:	7812      	ldrb	r2, [r2, #0]
 8014084:	4313      	orrs	r3, r2
 8014086:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	021b      	lsls	r3, r3, #8
 801408c:	687a      	ldr	r2, [r7, #4]
 801408e:	3201      	adds	r2, #1
 8014090:	7812      	ldrb	r2, [r2, #0]
 8014092:	4313      	orrs	r3, r2
 8014094:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	021b      	lsls	r3, r3, #8
 801409a:	687a      	ldr	r2, [r7, #4]
 801409c:	7812      	ldrb	r2, [r2, #0]
 801409e:	4313      	orrs	r3, r2
 80140a0:	60fb      	str	r3, [r7, #12]
	return rv;
 80140a2:	68fb      	ldr	r3, [r7, #12]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3714      	adds	r7, #20
 80140a8:	46bd      	mov	sp, r7
 80140aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ae:	4770      	bx	lr

080140b0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80140b0:	b480      	push	{r7}
 80140b2:	b083      	sub	sp, #12
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	460b      	mov	r3, r1
 80140ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	1c5a      	adds	r2, r3, #1
 80140c0:	607a      	str	r2, [r7, #4]
 80140c2:	887a      	ldrh	r2, [r7, #2]
 80140c4:	b2d2      	uxtb	r2, r2
 80140c6:	701a      	strb	r2, [r3, #0]
 80140c8:	887b      	ldrh	r3, [r7, #2]
 80140ca:	0a1b      	lsrs	r3, r3, #8
 80140cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	1c5a      	adds	r2, r3, #1
 80140d2:	607a      	str	r2, [r7, #4]
 80140d4:	887a      	ldrh	r2, [r7, #2]
 80140d6:	b2d2      	uxtb	r2, r2
 80140d8:	701a      	strb	r2, [r3, #0]
}
 80140da:	bf00      	nop
 80140dc:	370c      	adds	r7, #12
 80140de:	46bd      	mov	sp, r7
 80140e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e4:	4770      	bx	lr

080140e6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80140e6:	b480      	push	{r7}
 80140e8:	b083      	sub	sp, #12
 80140ea:	af00      	add	r7, sp, #0
 80140ec:	6078      	str	r0, [r7, #4]
 80140ee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	1c5a      	adds	r2, r3, #1
 80140f4:	607a      	str	r2, [r7, #4]
 80140f6:	683a      	ldr	r2, [r7, #0]
 80140f8:	b2d2      	uxtb	r2, r2
 80140fa:	701a      	strb	r2, [r3, #0]
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	0a1b      	lsrs	r3, r3, #8
 8014100:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	1c5a      	adds	r2, r3, #1
 8014106:	607a      	str	r2, [r7, #4]
 8014108:	683a      	ldr	r2, [r7, #0]
 801410a:	b2d2      	uxtb	r2, r2
 801410c:	701a      	strb	r2, [r3, #0]
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	0a1b      	lsrs	r3, r3, #8
 8014112:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	1c5a      	adds	r2, r3, #1
 8014118:	607a      	str	r2, [r7, #4]
 801411a:	683a      	ldr	r2, [r7, #0]
 801411c:	b2d2      	uxtb	r2, r2
 801411e:	701a      	strb	r2, [r3, #0]
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	0a1b      	lsrs	r3, r3, #8
 8014124:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	1c5a      	adds	r2, r3, #1
 801412a:	607a      	str	r2, [r7, #4]
 801412c:	683a      	ldr	r2, [r7, #0]
 801412e:	b2d2      	uxtb	r2, r2
 8014130:	701a      	strb	r2, [r3, #0]
}
 8014132:	bf00      	nop
 8014134:	370c      	adds	r7, #12
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr

0801413e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801413e:	b480      	push	{r7}
 8014140:	b087      	sub	sp, #28
 8014142:	af00      	add	r7, sp, #0
 8014144:	60f8      	str	r0, [r7, #12]
 8014146:	60b9      	str	r1, [r7, #8]
 8014148:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d00d      	beq.n	8014174 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014158:	693a      	ldr	r2, [r7, #16]
 801415a:	1c53      	adds	r3, r2, #1
 801415c:	613b      	str	r3, [r7, #16]
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	1c59      	adds	r1, r3, #1
 8014162:	6179      	str	r1, [r7, #20]
 8014164:	7812      	ldrb	r2, [r2, #0]
 8014166:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	3b01      	subs	r3, #1
 801416c:	607b      	str	r3, [r7, #4]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d1f1      	bne.n	8014158 <mem_cpy+0x1a>
	}
}
 8014174:	bf00      	nop
 8014176:	371c      	adds	r7, #28
 8014178:	46bd      	mov	sp, r7
 801417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417e:	4770      	bx	lr

08014180 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014180:	b480      	push	{r7}
 8014182:	b087      	sub	sp, #28
 8014184:	af00      	add	r7, sp, #0
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	1c5a      	adds	r2, r3, #1
 8014194:	617a      	str	r2, [r7, #20]
 8014196:	68ba      	ldr	r2, [r7, #8]
 8014198:	b2d2      	uxtb	r2, r2
 801419a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	3b01      	subs	r3, #1
 80141a0:	607b      	str	r3, [r7, #4]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d1f3      	bne.n	8014190 <mem_set+0x10>
}
 80141a8:	bf00      	nop
 80141aa:	bf00      	nop
 80141ac:	371c      	adds	r7, #28
 80141ae:	46bd      	mov	sp, r7
 80141b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b4:	4770      	bx	lr

080141b6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80141b6:	b480      	push	{r7}
 80141b8:	b089      	sub	sp, #36	@ 0x24
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	60f8      	str	r0, [r7, #12]
 80141be:	60b9      	str	r1, [r7, #8]
 80141c0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	61fb      	str	r3, [r7, #28]
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80141ca:	2300      	movs	r3, #0
 80141cc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80141ce:	69fb      	ldr	r3, [r7, #28]
 80141d0:	1c5a      	adds	r2, r3, #1
 80141d2:	61fa      	str	r2, [r7, #28]
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	4619      	mov	r1, r3
 80141d8:	69bb      	ldr	r3, [r7, #24]
 80141da:	1c5a      	adds	r2, r3, #1
 80141dc:	61ba      	str	r2, [r7, #24]
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	1acb      	subs	r3, r1, r3
 80141e2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	3b01      	subs	r3, #1
 80141e8:	607b      	str	r3, [r7, #4]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d002      	beq.n	80141f6 <mem_cmp+0x40>
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d0eb      	beq.n	80141ce <mem_cmp+0x18>

	return r;
 80141f6:	697b      	ldr	r3, [r7, #20]
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	3724      	adds	r7, #36	@ 0x24
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr

08014204 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014204:	b480      	push	{r7}
 8014206:	b083      	sub	sp, #12
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801420e:	e002      	b.n	8014216 <chk_chr+0x12>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	3301      	adds	r3, #1
 8014214:	607b      	str	r3, [r7, #4]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d005      	beq.n	801422a <chk_chr+0x26>
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	461a      	mov	r2, r3
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	4293      	cmp	r3, r2
 8014228:	d1f2      	bne.n	8014210 <chk_chr+0xc>
	return *str;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	781b      	ldrb	r3, [r3, #0]
}
 801422e:	4618      	mov	r0, r3
 8014230:	370c      	adds	r7, #12
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr

0801423a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801423a:	b580      	push	{r7, lr}
 801423c:	b082      	sub	sp, #8
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d009      	beq.n	801425c <lock_fs+0x22>
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	68db      	ldr	r3, [r3, #12]
 801424c:	4618      	mov	r0, r3
 801424e:	f002 f852 	bl	80162f6 <ff_req_grant>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d001      	beq.n	801425c <lock_fs+0x22>
 8014258:	2301      	movs	r3, #1
 801425a:	e000      	b.n	801425e <lock_fs+0x24>
 801425c:	2300      	movs	r3, #0
}
 801425e:	4618      	mov	r0, r3
 8014260:	3708      	adds	r7, #8
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}

08014266 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8014266:	b580      	push	{r7, lr}
 8014268:	b082      	sub	sp, #8
 801426a:	af00      	add	r7, sp, #0
 801426c:	6078      	str	r0, [r7, #4]
 801426e:	460b      	mov	r3, r1
 8014270:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d00d      	beq.n	8014294 <unlock_fs+0x2e>
 8014278:	78fb      	ldrb	r3, [r7, #3]
 801427a:	2b0c      	cmp	r3, #12
 801427c:	d00a      	beq.n	8014294 <unlock_fs+0x2e>
 801427e:	78fb      	ldrb	r3, [r7, #3]
 8014280:	2b0b      	cmp	r3, #11
 8014282:	d007      	beq.n	8014294 <unlock_fs+0x2e>
 8014284:	78fb      	ldrb	r3, [r7, #3]
 8014286:	2b0f      	cmp	r3, #15
 8014288:	d004      	beq.n	8014294 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	4618      	mov	r0, r3
 8014290:	f002 f846 	bl	8016320 <ff_rel_grant>
	}
}
 8014294:	bf00      	nop
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801429c:	b480      	push	{r7}
 801429e:	b085      	sub	sp, #20
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80142a6:	2300      	movs	r3, #0
 80142a8:	60bb      	str	r3, [r7, #8]
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	60fb      	str	r3, [r7, #12]
 80142ae:	e029      	b.n	8014304 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80142b0:	4a27      	ldr	r2, [pc, #156]	@ (8014350 <chk_lock+0xb4>)
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	011b      	lsls	r3, r3, #4
 80142b6:	4413      	add	r3, r2
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d01d      	beq.n	80142fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80142be:	4a24      	ldr	r2, [pc, #144]	@ (8014350 <chk_lock+0xb4>)
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	011b      	lsls	r3, r3, #4
 80142c4:	4413      	add	r3, r2
 80142c6:	681a      	ldr	r2, [r3, #0]
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d116      	bne.n	80142fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80142d0:	4a1f      	ldr	r2, [pc, #124]	@ (8014350 <chk_lock+0xb4>)
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	011b      	lsls	r3, r3, #4
 80142d6:	4413      	add	r3, r2
 80142d8:	3304      	adds	r3, #4
 80142da:	681a      	ldr	r2, [r3, #0]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d10c      	bne.n	80142fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80142e4:	4a1a      	ldr	r2, [pc, #104]	@ (8014350 <chk_lock+0xb4>)
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	011b      	lsls	r3, r3, #4
 80142ea:	4413      	add	r3, r2
 80142ec:	3308      	adds	r3, #8
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d102      	bne.n	80142fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80142f8:	e007      	b.n	801430a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80142fa:	2301      	movs	r3, #1
 80142fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	3301      	adds	r3, #1
 8014302:	60fb      	str	r3, [r7, #12]
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	2b01      	cmp	r3, #1
 8014308:	d9d2      	bls.n	80142b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	2b02      	cmp	r3, #2
 801430e:	d109      	bne.n	8014324 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d102      	bne.n	801431c <chk_lock+0x80>
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	2b02      	cmp	r3, #2
 801431a:	d101      	bne.n	8014320 <chk_lock+0x84>
 801431c:	2300      	movs	r3, #0
 801431e:	e010      	b.n	8014342 <chk_lock+0xa6>
 8014320:	2312      	movs	r3, #18
 8014322:	e00e      	b.n	8014342 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d108      	bne.n	801433c <chk_lock+0xa0>
 801432a:	4a09      	ldr	r2, [pc, #36]	@ (8014350 <chk_lock+0xb4>)
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	011b      	lsls	r3, r3, #4
 8014330:	4413      	add	r3, r2
 8014332:	330c      	adds	r3, #12
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801433a:	d101      	bne.n	8014340 <chk_lock+0xa4>
 801433c:	2310      	movs	r3, #16
 801433e:	e000      	b.n	8014342 <chk_lock+0xa6>
 8014340:	2300      	movs	r3, #0
}
 8014342:	4618      	mov	r0, r3
 8014344:	3714      	adds	r7, #20
 8014346:	46bd      	mov	sp, r7
 8014348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434c:	4770      	bx	lr
 801434e:	bf00      	nop
 8014350:	2000159c 	.word	0x2000159c

08014354 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801435a:	2300      	movs	r3, #0
 801435c:	607b      	str	r3, [r7, #4]
 801435e:	e002      	b.n	8014366 <enq_lock+0x12>
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	3301      	adds	r3, #1
 8014364:	607b      	str	r3, [r7, #4]
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2b01      	cmp	r3, #1
 801436a:	d806      	bhi.n	801437a <enq_lock+0x26>
 801436c:	4a09      	ldr	r2, [pc, #36]	@ (8014394 <enq_lock+0x40>)
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	011b      	lsls	r3, r3, #4
 8014372:	4413      	add	r3, r2
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d1f2      	bne.n	8014360 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2b02      	cmp	r3, #2
 801437e:	bf14      	ite	ne
 8014380:	2301      	movne	r3, #1
 8014382:	2300      	moveq	r3, #0
 8014384:	b2db      	uxtb	r3, r3
}
 8014386:	4618      	mov	r0, r3
 8014388:	370c      	adds	r7, #12
 801438a:	46bd      	mov	sp, r7
 801438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014390:	4770      	bx	lr
 8014392:	bf00      	nop
 8014394:	2000159c 	.word	0x2000159c

08014398 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014398:	b480      	push	{r7}
 801439a:	b085      	sub	sp, #20
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80143a2:	2300      	movs	r3, #0
 80143a4:	60fb      	str	r3, [r7, #12]
 80143a6:	e01f      	b.n	80143e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80143a8:	4a41      	ldr	r2, [pc, #260]	@ (80144b0 <inc_lock+0x118>)
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	011b      	lsls	r3, r3, #4
 80143ae:	4413      	add	r3, r2
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d113      	bne.n	80143e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80143ba:	4a3d      	ldr	r2, [pc, #244]	@ (80144b0 <inc_lock+0x118>)
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	011b      	lsls	r3, r3, #4
 80143c0:	4413      	add	r3, r2
 80143c2:	3304      	adds	r3, #4
 80143c4:	681a      	ldr	r2, [r3, #0]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d109      	bne.n	80143e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80143ce:	4a38      	ldr	r2, [pc, #224]	@ (80144b0 <inc_lock+0x118>)
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	011b      	lsls	r3, r3, #4
 80143d4:	4413      	add	r3, r2
 80143d6:	3308      	adds	r3, #8
 80143d8:	681a      	ldr	r2, [r3, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80143de:	429a      	cmp	r2, r3
 80143e0:	d006      	beq.n	80143f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	3301      	adds	r3, #1
 80143e6:	60fb      	str	r3, [r7, #12]
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2b01      	cmp	r3, #1
 80143ec:	d9dc      	bls.n	80143a8 <inc_lock+0x10>
 80143ee:	e000      	b.n	80143f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80143f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	2b02      	cmp	r3, #2
 80143f6:	d132      	bne.n	801445e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80143f8:	2300      	movs	r3, #0
 80143fa:	60fb      	str	r3, [r7, #12]
 80143fc:	e002      	b.n	8014404 <inc_lock+0x6c>
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	3301      	adds	r3, #1
 8014402:	60fb      	str	r3, [r7, #12]
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2b01      	cmp	r3, #1
 8014408:	d806      	bhi.n	8014418 <inc_lock+0x80>
 801440a:	4a29      	ldr	r2, [pc, #164]	@ (80144b0 <inc_lock+0x118>)
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	011b      	lsls	r3, r3, #4
 8014410:	4413      	add	r3, r2
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d1f2      	bne.n	80143fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2b02      	cmp	r3, #2
 801441c:	d101      	bne.n	8014422 <inc_lock+0x8a>
 801441e:	2300      	movs	r3, #0
 8014420:	e040      	b.n	80144a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681a      	ldr	r2, [r3, #0]
 8014426:	4922      	ldr	r1, [pc, #136]	@ (80144b0 <inc_lock+0x118>)
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	011b      	lsls	r3, r3, #4
 801442c:	440b      	add	r3, r1
 801442e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	689a      	ldr	r2, [r3, #8]
 8014434:	491e      	ldr	r1, [pc, #120]	@ (80144b0 <inc_lock+0x118>)
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	011b      	lsls	r3, r3, #4
 801443a:	440b      	add	r3, r1
 801443c:	3304      	adds	r3, #4
 801443e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	695a      	ldr	r2, [r3, #20]
 8014444:	491a      	ldr	r1, [pc, #104]	@ (80144b0 <inc_lock+0x118>)
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	011b      	lsls	r3, r3, #4
 801444a:	440b      	add	r3, r1
 801444c:	3308      	adds	r3, #8
 801444e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014450:	4a17      	ldr	r2, [pc, #92]	@ (80144b0 <inc_lock+0x118>)
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	011b      	lsls	r3, r3, #4
 8014456:	4413      	add	r3, r2
 8014458:	330c      	adds	r3, #12
 801445a:	2200      	movs	r2, #0
 801445c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d009      	beq.n	8014478 <inc_lock+0xe0>
 8014464:	4a12      	ldr	r2, [pc, #72]	@ (80144b0 <inc_lock+0x118>)
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	011b      	lsls	r3, r3, #4
 801446a:	4413      	add	r3, r2
 801446c:	330c      	adds	r3, #12
 801446e:	881b      	ldrh	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d001      	beq.n	8014478 <inc_lock+0xe0>
 8014474:	2300      	movs	r3, #0
 8014476:	e015      	b.n	80144a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d108      	bne.n	8014490 <inc_lock+0xf8>
 801447e:	4a0c      	ldr	r2, [pc, #48]	@ (80144b0 <inc_lock+0x118>)
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	011b      	lsls	r3, r3, #4
 8014484:	4413      	add	r3, r2
 8014486:	330c      	adds	r3, #12
 8014488:	881b      	ldrh	r3, [r3, #0]
 801448a:	3301      	adds	r3, #1
 801448c:	b29a      	uxth	r2, r3
 801448e:	e001      	b.n	8014494 <inc_lock+0xfc>
 8014490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014494:	4906      	ldr	r1, [pc, #24]	@ (80144b0 <inc_lock+0x118>)
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	011b      	lsls	r3, r3, #4
 801449a:	440b      	add	r3, r1
 801449c:	330c      	adds	r3, #12
 801449e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	3301      	adds	r3, #1
}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3714      	adds	r7, #20
 80144a8:	46bd      	mov	sp, r7
 80144aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ae:	4770      	bx	lr
 80144b0:	2000159c 	.word	0x2000159c

080144b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	3b01      	subs	r3, #1
 80144c0:	607b      	str	r3, [r7, #4]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d825      	bhi.n	8014514 <dec_lock+0x60>
		n = Files[i].ctr;
 80144c8:	4a17      	ldr	r2, [pc, #92]	@ (8014528 <dec_lock+0x74>)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	011b      	lsls	r3, r3, #4
 80144ce:	4413      	add	r3, r2
 80144d0:	330c      	adds	r3, #12
 80144d2:	881b      	ldrh	r3, [r3, #0]
 80144d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80144d6:	89fb      	ldrh	r3, [r7, #14]
 80144d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144dc:	d101      	bne.n	80144e2 <dec_lock+0x2e>
 80144de:	2300      	movs	r3, #0
 80144e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80144e2:	89fb      	ldrh	r3, [r7, #14]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d002      	beq.n	80144ee <dec_lock+0x3a>
 80144e8:	89fb      	ldrh	r3, [r7, #14]
 80144ea:	3b01      	subs	r3, #1
 80144ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80144ee:	4a0e      	ldr	r2, [pc, #56]	@ (8014528 <dec_lock+0x74>)
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	011b      	lsls	r3, r3, #4
 80144f4:	4413      	add	r3, r2
 80144f6:	330c      	adds	r3, #12
 80144f8:	89fa      	ldrh	r2, [r7, #14]
 80144fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80144fc:	89fb      	ldrh	r3, [r7, #14]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d105      	bne.n	801450e <dec_lock+0x5a>
 8014502:	4a09      	ldr	r2, [pc, #36]	@ (8014528 <dec_lock+0x74>)
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	011b      	lsls	r3, r3, #4
 8014508:	4413      	add	r3, r2
 801450a:	2200      	movs	r2, #0
 801450c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801450e:	2300      	movs	r3, #0
 8014510:	737b      	strb	r3, [r7, #13]
 8014512:	e001      	b.n	8014518 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8014514:	2302      	movs	r3, #2
 8014516:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8014518:	7b7b      	ldrb	r3, [r7, #13]
}
 801451a:	4618      	mov	r0, r3
 801451c:	3714      	adds	r7, #20
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop
 8014528:	2000159c 	.word	0x2000159c

0801452c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801452c:	b480      	push	{r7}
 801452e:	b085      	sub	sp, #20
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8014534:	2300      	movs	r3, #0
 8014536:	60fb      	str	r3, [r7, #12]
 8014538:	e010      	b.n	801455c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801453a:	4a0d      	ldr	r2, [pc, #52]	@ (8014570 <clear_lock+0x44>)
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	011b      	lsls	r3, r3, #4
 8014540:	4413      	add	r3, r2
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	687a      	ldr	r2, [r7, #4]
 8014546:	429a      	cmp	r2, r3
 8014548:	d105      	bne.n	8014556 <clear_lock+0x2a>
 801454a:	4a09      	ldr	r2, [pc, #36]	@ (8014570 <clear_lock+0x44>)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	011b      	lsls	r3, r3, #4
 8014550:	4413      	add	r3, r2
 8014552:	2200      	movs	r2, #0
 8014554:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	3301      	adds	r3, #1
 801455a:	60fb      	str	r3, [r7, #12]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	2b01      	cmp	r3, #1
 8014560:	d9eb      	bls.n	801453a <clear_lock+0xe>
	}
}
 8014562:	bf00      	nop
 8014564:	bf00      	nop
 8014566:	3714      	adds	r7, #20
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr
 8014570:	2000159c 	.word	0x2000159c

08014574 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b086      	sub	sp, #24
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801457c:	2300      	movs	r3, #0
 801457e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	78db      	ldrb	r3, [r3, #3]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d034      	beq.n	80145f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801458c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	7858      	ldrb	r0, [r3, #1]
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014598:	2301      	movs	r3, #1
 801459a:	697a      	ldr	r2, [r7, #20]
 801459c:	f7ff fd0e 	bl	8013fbc <disk_write>
 80145a0:	4603      	mov	r3, r0
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d002      	beq.n	80145ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80145a6:	2301      	movs	r3, #1
 80145a8:	73fb      	strb	r3, [r7, #15]
 80145aa:	e022      	b.n	80145f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2200      	movs	r2, #0
 80145b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145b6:	697a      	ldr	r2, [r7, #20]
 80145b8:	1ad2      	subs	r2, r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	69db      	ldr	r3, [r3, #28]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d217      	bcs.n	80145f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	789b      	ldrb	r3, [r3, #2]
 80145c6:	613b      	str	r3, [r7, #16]
 80145c8:	e010      	b.n	80145ec <sync_window+0x78>
					wsect += fs->fsize;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	69db      	ldr	r3, [r3, #28]
 80145ce:	697a      	ldr	r2, [r7, #20]
 80145d0:	4413      	add	r3, r2
 80145d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	7858      	ldrb	r0, [r3, #1]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80145de:	2301      	movs	r3, #1
 80145e0:	697a      	ldr	r2, [r7, #20]
 80145e2:	f7ff fceb 	bl	8013fbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	3b01      	subs	r3, #1
 80145ea:	613b      	str	r3, [r7, #16]
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	2b01      	cmp	r3, #1
 80145f0:	d8eb      	bhi.n	80145ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80145f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3718      	adds	r7, #24
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014606:	2300      	movs	r3, #0
 8014608:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801460e:	683a      	ldr	r2, [r7, #0]
 8014610:	429a      	cmp	r2, r3
 8014612:	d01b      	beq.n	801464c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f7ff ffad 	bl	8014574 <sync_window>
 801461a:	4603      	mov	r3, r0
 801461c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801461e:	7bfb      	ldrb	r3, [r7, #15]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d113      	bne.n	801464c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	7858      	ldrb	r0, [r3, #1]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801462e:	2301      	movs	r3, #1
 8014630:	683a      	ldr	r2, [r7, #0]
 8014632:	f7ff fca3 	bl	8013f7c <disk_read>
 8014636:	4603      	mov	r3, r0
 8014638:	2b00      	cmp	r3, #0
 801463a:	d004      	beq.n	8014646 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801463c:	f04f 33ff 	mov.w	r3, #4294967295
 8014640:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014642:	2301      	movs	r3, #1
 8014644:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	683a      	ldr	r2, [r7, #0]
 801464a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 801464c:	7bfb      	ldrb	r3, [r7, #15]
}
 801464e:	4618      	mov	r0, r3
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
	...

08014658 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f7ff ff87 	bl	8014574 <sync_window>
 8014666:	4603      	mov	r3, r0
 8014668:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801466a:	7bfb      	ldrb	r3, [r7, #15]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d158      	bne.n	8014722 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	2b03      	cmp	r3, #3
 8014676:	d148      	bne.n	801470a <sync_fs+0xb2>
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	791b      	ldrb	r3, [r3, #4]
 801467c:	2b01      	cmp	r3, #1
 801467e:	d144      	bne.n	801470a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	3334      	adds	r3, #52	@ 0x34
 8014684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014688:	2100      	movs	r1, #0
 801468a:	4618      	mov	r0, r3
 801468c:	f7ff fd78 	bl	8014180 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	3334      	adds	r3, #52	@ 0x34
 8014694:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014698:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801469c:	4618      	mov	r0, r3
 801469e:	f7ff fd07 	bl	80140b0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	3334      	adds	r3, #52	@ 0x34
 80146a6:	4921      	ldr	r1, [pc, #132]	@ (801472c <sync_fs+0xd4>)
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7ff fd1c 	bl	80140e6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	3334      	adds	r3, #52	@ 0x34
 80146b2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80146b6:	491e      	ldr	r1, [pc, #120]	@ (8014730 <sync_fs+0xd8>)
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7ff fd14 	bl	80140e6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	3334      	adds	r3, #52	@ 0x34
 80146c2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	695b      	ldr	r3, [r3, #20]
 80146ca:	4619      	mov	r1, r3
 80146cc:	4610      	mov	r0, r2
 80146ce:	f7ff fd0a 	bl	80140e6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	3334      	adds	r3, #52	@ 0x34
 80146d6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	691b      	ldr	r3, [r3, #16]
 80146de:	4619      	mov	r1, r3
 80146e0:	4610      	mov	r0, r2
 80146e2:	f7ff fd00 	bl	80140e6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	6a1b      	ldr	r3, [r3, #32]
 80146ea:	1c5a      	adds	r2, r3, #1
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	7858      	ldrb	r0, [r3, #1]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80146fe:	2301      	movs	r3, #1
 8014700:	f7ff fc5c 	bl	8013fbc <disk_write>
			fs->fsi_flag = 0;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2200      	movs	r2, #0
 8014708:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	785b      	ldrb	r3, [r3, #1]
 801470e:	2200      	movs	r2, #0
 8014710:	2100      	movs	r1, #0
 8014712:	4618      	mov	r0, r3
 8014714:	f7ff fc72 	bl	8013ffc <disk_ioctl>
 8014718:	4603      	mov	r3, r0
 801471a:	2b00      	cmp	r3, #0
 801471c:	d001      	beq.n	8014722 <sync_fs+0xca>
 801471e:	2301      	movs	r3, #1
 8014720:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014722:	7bfb      	ldrb	r3, [r7, #15]
}
 8014724:	4618      	mov	r0, r3
 8014726:	3710      	adds	r7, #16
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}
 801472c:	41615252 	.word	0x41615252
 8014730:	61417272 	.word	0x61417272

08014734 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014734:	b480      	push	{r7}
 8014736:	b083      	sub	sp, #12
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	3b02      	subs	r3, #2
 8014742:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	699b      	ldr	r3, [r3, #24]
 8014748:	3b02      	subs	r3, #2
 801474a:	683a      	ldr	r2, [r7, #0]
 801474c:	429a      	cmp	r2, r3
 801474e:	d301      	bcc.n	8014754 <clust2sect+0x20>
 8014750:	2300      	movs	r3, #0
 8014752:	e008      	b.n	8014766 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	895b      	ldrh	r3, [r3, #10]
 8014758:	461a      	mov	r2, r3
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	fb03 f202 	mul.w	r2, r3, r2
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014764:	4413      	add	r3, r2
}
 8014766:	4618      	mov	r0, r3
 8014768:	370c      	adds	r7, #12
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014772:	b580      	push	{r7, lr}
 8014774:	b086      	sub	sp, #24
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	2b01      	cmp	r3, #1
 8014786:	d904      	bls.n	8014792 <get_fat+0x20>
 8014788:	693b      	ldr	r3, [r7, #16]
 801478a:	699b      	ldr	r3, [r3, #24]
 801478c:	683a      	ldr	r2, [r7, #0]
 801478e:	429a      	cmp	r2, r3
 8014790:	d302      	bcc.n	8014798 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014792:	2301      	movs	r3, #1
 8014794:	617b      	str	r3, [r7, #20]
 8014796:	e08e      	b.n	80148b6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014798:	f04f 33ff 	mov.w	r3, #4294967295
 801479c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801479e:	693b      	ldr	r3, [r7, #16]
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	2b03      	cmp	r3, #3
 80147a4:	d061      	beq.n	801486a <get_fat+0xf8>
 80147a6:	2b03      	cmp	r3, #3
 80147a8:	dc7b      	bgt.n	80148a2 <get_fat+0x130>
 80147aa:	2b01      	cmp	r3, #1
 80147ac:	d002      	beq.n	80147b4 <get_fat+0x42>
 80147ae:	2b02      	cmp	r3, #2
 80147b0:	d041      	beq.n	8014836 <get_fat+0xc4>
 80147b2:	e076      	b.n	80148a2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	60fb      	str	r3, [r7, #12]
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	085b      	lsrs	r3, r3, #1
 80147bc:	68fa      	ldr	r2, [r7, #12]
 80147be:	4413      	add	r3, r2
 80147c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	0a5b      	lsrs	r3, r3, #9
 80147ca:	4413      	add	r3, r2
 80147cc:	4619      	mov	r1, r3
 80147ce:	6938      	ldr	r0, [r7, #16]
 80147d0:	f7ff ff14 	bl	80145fc <move_window>
 80147d4:	4603      	mov	r3, r0
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d166      	bne.n	80148a8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	1c5a      	adds	r2, r3, #1
 80147de:	60fa      	str	r2, [r7, #12]
 80147e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147e4:	693a      	ldr	r2, [r7, #16]
 80147e6:	4413      	add	r3, r2
 80147e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80147ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	0a5b      	lsrs	r3, r3, #9
 80147f6:	4413      	add	r3, r2
 80147f8:	4619      	mov	r1, r3
 80147fa:	6938      	ldr	r0, [r7, #16]
 80147fc:	f7ff fefe 	bl	80145fc <move_window>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d152      	bne.n	80148ac <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801480c:	693a      	ldr	r2, [r7, #16]
 801480e:	4413      	add	r3, r2
 8014810:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014814:	021b      	lsls	r3, r3, #8
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	4313      	orrs	r3, r2
 801481a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	f003 0301 	and.w	r3, r3, #1
 8014822:	2b00      	cmp	r3, #0
 8014824:	d002      	beq.n	801482c <get_fat+0xba>
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	091b      	lsrs	r3, r3, #4
 801482a:	e002      	b.n	8014832 <get_fat+0xc0>
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014832:	617b      	str	r3, [r7, #20]
			break;
 8014834:	e03f      	b.n	80148b6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	0a1b      	lsrs	r3, r3, #8
 801483e:	4413      	add	r3, r2
 8014840:	4619      	mov	r1, r3
 8014842:	6938      	ldr	r0, [r7, #16]
 8014844:	f7ff feda 	bl	80145fc <move_window>
 8014848:	4603      	mov	r3, r0
 801484a:	2b00      	cmp	r3, #0
 801484c:	d130      	bne.n	80148b0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	005b      	lsls	r3, r3, #1
 8014858:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801485c:	4413      	add	r3, r2
 801485e:	4618      	mov	r0, r3
 8014860:	f7ff fbea 	bl	8014038 <ld_word>
 8014864:	4603      	mov	r3, r0
 8014866:	617b      	str	r3, [r7, #20]
			break;
 8014868:	e025      	b.n	80148b6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	09db      	lsrs	r3, r3, #7
 8014872:	4413      	add	r3, r2
 8014874:	4619      	mov	r1, r3
 8014876:	6938      	ldr	r0, [r7, #16]
 8014878:	f7ff fec0 	bl	80145fc <move_window>
 801487c:	4603      	mov	r3, r0
 801487e:	2b00      	cmp	r3, #0
 8014880:	d118      	bne.n	80148b4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014882:	693b      	ldr	r3, [r7, #16]
 8014884:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014890:	4413      	add	r3, r2
 8014892:	4618      	mov	r0, r3
 8014894:	f7ff fbe9 	bl	801406a <ld_dword>
 8014898:	4603      	mov	r3, r0
 801489a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801489e:	617b      	str	r3, [r7, #20]
			break;
 80148a0:	e009      	b.n	80148b6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80148a2:	2301      	movs	r3, #1
 80148a4:	617b      	str	r3, [r7, #20]
 80148a6:	e006      	b.n	80148b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80148a8:	bf00      	nop
 80148aa:	e004      	b.n	80148b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80148ac:	bf00      	nop
 80148ae:	e002      	b.n	80148b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80148b0:	bf00      	nop
 80148b2:	e000      	b.n	80148b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80148b4:	bf00      	nop
		}
	}

	return val;
 80148b6:	697b      	ldr	r3, [r7, #20]
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3718      	adds	r7, #24
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}

080148c0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80148c0:	b590      	push	{r4, r7, lr}
 80148c2:	b089      	sub	sp, #36	@ 0x24
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	60b9      	str	r1, [r7, #8]
 80148ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80148cc:	2302      	movs	r3, #2
 80148ce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	2b01      	cmp	r3, #1
 80148d4:	f240 80d9 	bls.w	8014a8a <put_fat+0x1ca>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	699b      	ldr	r3, [r3, #24]
 80148dc:	68ba      	ldr	r2, [r7, #8]
 80148de:	429a      	cmp	r2, r3
 80148e0:	f080 80d3 	bcs.w	8014a8a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	2b03      	cmp	r3, #3
 80148ea:	f000 8096 	beq.w	8014a1a <put_fat+0x15a>
 80148ee:	2b03      	cmp	r3, #3
 80148f0:	f300 80cb 	bgt.w	8014a8a <put_fat+0x1ca>
 80148f4:	2b01      	cmp	r3, #1
 80148f6:	d002      	beq.n	80148fe <put_fat+0x3e>
 80148f8:	2b02      	cmp	r3, #2
 80148fa:	d06e      	beq.n	80149da <put_fat+0x11a>
 80148fc:	e0c5      	b.n	8014a8a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	61bb      	str	r3, [r7, #24]
 8014902:	69bb      	ldr	r3, [r7, #24]
 8014904:	085b      	lsrs	r3, r3, #1
 8014906:	69ba      	ldr	r2, [r7, #24]
 8014908:	4413      	add	r3, r2
 801490a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014910:	69bb      	ldr	r3, [r7, #24]
 8014912:	0a5b      	lsrs	r3, r3, #9
 8014914:	4413      	add	r3, r2
 8014916:	4619      	mov	r1, r3
 8014918:	68f8      	ldr	r0, [r7, #12]
 801491a:	f7ff fe6f 	bl	80145fc <move_window>
 801491e:	4603      	mov	r3, r0
 8014920:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014922:	7ffb      	ldrb	r3, [r7, #31]
 8014924:	2b00      	cmp	r3, #0
 8014926:	f040 80a9 	bne.w	8014a7c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014930:	69bb      	ldr	r3, [r7, #24]
 8014932:	1c59      	adds	r1, r3, #1
 8014934:	61b9      	str	r1, [r7, #24]
 8014936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801493a:	4413      	add	r3, r2
 801493c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	f003 0301 	and.w	r3, r3, #1
 8014944:	2b00      	cmp	r3, #0
 8014946:	d00d      	beq.n	8014964 <put_fat+0xa4>
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	b25b      	sxtb	r3, r3
 801494e:	f003 030f 	and.w	r3, r3, #15
 8014952:	b25a      	sxtb	r2, r3
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	b25b      	sxtb	r3, r3
 8014958:	011b      	lsls	r3, r3, #4
 801495a:	b25b      	sxtb	r3, r3
 801495c:	4313      	orrs	r3, r2
 801495e:	b25b      	sxtb	r3, r3
 8014960:	b2db      	uxtb	r3, r3
 8014962:	e001      	b.n	8014968 <put_fat+0xa8>
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	b2db      	uxtb	r3, r3
 8014968:	697a      	ldr	r2, [r7, #20]
 801496a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2201      	movs	r2, #1
 8014970:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	0a5b      	lsrs	r3, r3, #9
 801497a:	4413      	add	r3, r2
 801497c:	4619      	mov	r1, r3
 801497e:	68f8      	ldr	r0, [r7, #12]
 8014980:	f7ff fe3c 	bl	80145fc <move_window>
 8014984:	4603      	mov	r3, r0
 8014986:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014988:	7ffb      	ldrb	r3, [r7, #31]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d178      	bne.n	8014a80 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014994:	69bb      	ldr	r3, [r7, #24]
 8014996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801499a:	4413      	add	r3, r2
 801499c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	f003 0301 	and.w	r3, r3, #1
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d003      	beq.n	80149b0 <put_fat+0xf0>
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	091b      	lsrs	r3, r3, #4
 80149ac:	b2db      	uxtb	r3, r3
 80149ae:	e00e      	b.n	80149ce <put_fat+0x10e>
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	b25b      	sxtb	r3, r3
 80149b6:	f023 030f 	bic.w	r3, r3, #15
 80149ba:	b25a      	sxtb	r2, r3
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	0a1b      	lsrs	r3, r3, #8
 80149c0:	b25b      	sxtb	r3, r3
 80149c2:	f003 030f 	and.w	r3, r3, #15
 80149c6:	b25b      	sxtb	r3, r3
 80149c8:	4313      	orrs	r3, r2
 80149ca:	b25b      	sxtb	r3, r3
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	697a      	ldr	r2, [r7, #20]
 80149d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2201      	movs	r2, #1
 80149d6:	70da      	strb	r2, [r3, #3]
			break;
 80149d8:	e057      	b.n	8014a8a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	0a1b      	lsrs	r3, r3, #8
 80149e2:	4413      	add	r3, r2
 80149e4:	4619      	mov	r1, r3
 80149e6:	68f8      	ldr	r0, [r7, #12]
 80149e8:	f7ff fe08 	bl	80145fc <move_window>
 80149ec:	4603      	mov	r3, r0
 80149ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80149f0:	7ffb      	ldrb	r3, [r7, #31]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d146      	bne.n	8014a84 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	005b      	lsls	r3, r3, #1
 8014a00:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8014a04:	4413      	add	r3, r2
 8014a06:	687a      	ldr	r2, [r7, #4]
 8014a08:	b292      	uxth	r2, r2
 8014a0a:	4611      	mov	r1, r2
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7ff fb4f 	bl	80140b0 <st_word>
			fs->wflag = 1;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	2201      	movs	r2, #1
 8014a16:	70da      	strb	r2, [r3, #3]
			break;
 8014a18:	e037      	b.n	8014a8a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	09db      	lsrs	r3, r3, #7
 8014a22:	4413      	add	r3, r2
 8014a24:	4619      	mov	r1, r3
 8014a26:	68f8      	ldr	r0, [r7, #12]
 8014a28:	f7ff fde8 	bl	80145fc <move_window>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014a30:	7ffb      	ldrb	r3, [r7, #31]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d128      	bne.n	8014a88 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	009b      	lsls	r3, r3, #2
 8014a46:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014a4a:	4413      	add	r3, r2
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff fb0c 	bl	801406a <ld_dword>
 8014a52:	4603      	mov	r3, r0
 8014a54:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8014a58:	4323      	orrs	r3, r4
 8014a5a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	009b      	lsls	r3, r3, #2
 8014a66:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014a6a:	4413      	add	r3, r2
 8014a6c:	6879      	ldr	r1, [r7, #4]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7ff fb39 	bl	80140e6 <st_dword>
			fs->wflag = 1;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2201      	movs	r2, #1
 8014a78:	70da      	strb	r2, [r3, #3]
			break;
 8014a7a:	e006      	b.n	8014a8a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a7c:	bf00      	nop
 8014a7e:	e004      	b.n	8014a8a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a80:	bf00      	nop
 8014a82:	e002      	b.n	8014a8a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a84:	bf00      	nop
 8014a86:	e000      	b.n	8014a8a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a88:	bf00      	nop
		}
	}
	return res;
 8014a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3724      	adds	r7, #36	@ 0x24
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd90      	pop	{r4, r7, pc}

08014a94 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b088      	sub	sp, #32
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	d904      	bls.n	8014aba <remove_chain+0x26>
 8014ab0:	69bb      	ldr	r3, [r7, #24]
 8014ab2:	699b      	ldr	r3, [r3, #24]
 8014ab4:	68ba      	ldr	r2, [r7, #8]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d301      	bcc.n	8014abe <remove_chain+0x2a>
 8014aba:	2302      	movs	r3, #2
 8014abc:	e04b      	b.n	8014b56 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d00c      	beq.n	8014ade <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8014ac8:	6879      	ldr	r1, [r7, #4]
 8014aca:	69b8      	ldr	r0, [r7, #24]
 8014acc:	f7ff fef8 	bl	80148c0 <put_fat>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014ad4:	7ffb      	ldrb	r3, [r7, #31]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d001      	beq.n	8014ade <remove_chain+0x4a>
 8014ada:	7ffb      	ldrb	r3, [r7, #31]
 8014adc:	e03b      	b.n	8014b56 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014ade:	68b9      	ldr	r1, [r7, #8]
 8014ae0:	68f8      	ldr	r0, [r7, #12]
 8014ae2:	f7ff fe46 	bl	8014772 <get_fat>
 8014ae6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d031      	beq.n	8014b52 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	2b01      	cmp	r3, #1
 8014af2:	d101      	bne.n	8014af8 <remove_chain+0x64>
 8014af4:	2302      	movs	r3, #2
 8014af6:	e02e      	b.n	8014b56 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014afe:	d101      	bne.n	8014b04 <remove_chain+0x70>
 8014b00:	2301      	movs	r3, #1
 8014b02:	e028      	b.n	8014b56 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014b04:	2200      	movs	r2, #0
 8014b06:	68b9      	ldr	r1, [r7, #8]
 8014b08:	69b8      	ldr	r0, [r7, #24]
 8014b0a:	f7ff fed9 	bl	80148c0 <put_fat>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014b12:	7ffb      	ldrb	r3, [r7, #31]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d001      	beq.n	8014b1c <remove_chain+0x88>
 8014b18:	7ffb      	ldrb	r3, [r7, #31]
 8014b1a:	e01c      	b.n	8014b56 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	695a      	ldr	r2, [r3, #20]
 8014b20:	69bb      	ldr	r3, [r7, #24]
 8014b22:	699b      	ldr	r3, [r3, #24]
 8014b24:	3b02      	subs	r3, #2
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d20b      	bcs.n	8014b42 <remove_chain+0xae>
			fs->free_clst++;
 8014b2a:	69bb      	ldr	r3, [r7, #24]
 8014b2c:	695b      	ldr	r3, [r3, #20]
 8014b2e:	1c5a      	adds	r2, r3, #1
 8014b30:	69bb      	ldr	r3, [r7, #24]
 8014b32:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8014b34:	69bb      	ldr	r3, [r7, #24]
 8014b36:	791b      	ldrb	r3, [r3, #4]
 8014b38:	f043 0301 	orr.w	r3, r3, #1
 8014b3c:	b2da      	uxtb	r2, r3
 8014b3e:	69bb      	ldr	r3, [r7, #24]
 8014b40:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014b46:	69bb      	ldr	r3, [r7, #24]
 8014b48:	699b      	ldr	r3, [r3, #24]
 8014b4a:	68ba      	ldr	r2, [r7, #8]
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	d3c6      	bcc.n	8014ade <remove_chain+0x4a>
 8014b50:	e000      	b.n	8014b54 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014b52:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014b54:	2300      	movs	r3, #0
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3720      	adds	r7, #32
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}

08014b5e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014b5e:	b580      	push	{r7, lr}
 8014b60:	b088      	sub	sp, #32
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
 8014b66:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d10d      	bne.n	8014b90 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014b74:	693b      	ldr	r3, [r7, #16]
 8014b76:	691b      	ldr	r3, [r3, #16]
 8014b78:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014b7a:	69bb      	ldr	r3, [r7, #24]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d004      	beq.n	8014b8a <create_chain+0x2c>
 8014b80:	693b      	ldr	r3, [r7, #16]
 8014b82:	699b      	ldr	r3, [r3, #24]
 8014b84:	69ba      	ldr	r2, [r7, #24]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d31b      	bcc.n	8014bc2 <create_chain+0x64>
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	61bb      	str	r3, [r7, #24]
 8014b8e:	e018      	b.n	8014bc2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014b90:	6839      	ldr	r1, [r7, #0]
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f7ff fded 	bl	8014772 <get_fat>
 8014b98:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d801      	bhi.n	8014ba4 <create_chain+0x46>
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	e070      	b.n	8014c86 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014baa:	d101      	bne.n	8014bb0 <create_chain+0x52>
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	e06a      	b.n	8014c86 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	699b      	ldr	r3, [r3, #24]
 8014bb4:	68fa      	ldr	r2, [r7, #12]
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d201      	bcs.n	8014bbe <create_chain+0x60>
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	e063      	b.n	8014c86 <create_chain+0x128>
		scl = clst;
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014bc2:	69bb      	ldr	r3, [r7, #24]
 8014bc4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014bcc:	693b      	ldr	r3, [r7, #16]
 8014bce:	699b      	ldr	r3, [r3, #24]
 8014bd0:	69fa      	ldr	r2, [r7, #28]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d307      	bcc.n	8014be6 <create_chain+0x88>
				ncl = 2;
 8014bd6:	2302      	movs	r3, #2
 8014bd8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014bda:	69fa      	ldr	r2, [r7, #28]
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d901      	bls.n	8014be6 <create_chain+0x88>
 8014be2:	2300      	movs	r3, #0
 8014be4:	e04f      	b.n	8014c86 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014be6:	69f9      	ldr	r1, [r7, #28]
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f7ff fdc2 	bl	8014772 <get_fat>
 8014bee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d00e      	beq.n	8014c14 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d003      	beq.n	8014c04 <create_chain+0xa6>
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c02:	d101      	bne.n	8014c08 <create_chain+0xaa>
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	e03e      	b.n	8014c86 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014c08:	69fa      	ldr	r2, [r7, #28]
 8014c0a:	69bb      	ldr	r3, [r7, #24]
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d1da      	bne.n	8014bc6 <create_chain+0x68>
 8014c10:	2300      	movs	r3, #0
 8014c12:	e038      	b.n	8014c86 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014c14:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014c16:	f04f 32ff 	mov.w	r2, #4294967295
 8014c1a:	69f9      	ldr	r1, [r7, #28]
 8014c1c:	6938      	ldr	r0, [r7, #16]
 8014c1e:	f7ff fe4f 	bl	80148c0 <put_fat>
 8014c22:	4603      	mov	r3, r0
 8014c24:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014c26:	7dfb      	ldrb	r3, [r7, #23]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d109      	bne.n	8014c40 <create_chain+0xe2>
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d006      	beq.n	8014c40 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014c32:	69fa      	ldr	r2, [r7, #28]
 8014c34:	6839      	ldr	r1, [r7, #0]
 8014c36:	6938      	ldr	r0, [r7, #16]
 8014c38:	f7ff fe42 	bl	80148c0 <put_fat>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014c40:	7dfb      	ldrb	r3, [r7, #23]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d116      	bne.n	8014c74 <create_chain+0x116>
		fs->last_clst = ncl;
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	69fa      	ldr	r2, [r7, #28]
 8014c4a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	695a      	ldr	r2, [r3, #20]
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	699b      	ldr	r3, [r3, #24]
 8014c54:	3b02      	subs	r3, #2
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d804      	bhi.n	8014c64 <create_chain+0x106>
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	695b      	ldr	r3, [r3, #20]
 8014c5e:	1e5a      	subs	r2, r3, #1
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	791b      	ldrb	r3, [r3, #4]
 8014c68:	f043 0301 	orr.w	r3, r3, #1
 8014c6c:	b2da      	uxtb	r2, r3
 8014c6e:	693b      	ldr	r3, [r7, #16]
 8014c70:	711a      	strb	r2, [r3, #4]
 8014c72:	e007      	b.n	8014c84 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014c74:	7dfb      	ldrb	r3, [r7, #23]
 8014c76:	2b01      	cmp	r3, #1
 8014c78:	d102      	bne.n	8014c80 <create_chain+0x122>
 8014c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c7e:	e000      	b.n	8014c82 <create_chain+0x124>
 8014c80:	2301      	movs	r3, #1
 8014c82:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014c84:	69fb      	ldr	r3, [r7, #28]
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3720      	adds	r7, #32
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}

08014c8e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014c8e:	b480      	push	{r7}
 8014c90:	b087      	sub	sp, #28
 8014c92:	af00      	add	r7, sp, #0
 8014c94:	6078      	str	r0, [r7, #4]
 8014c96:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ca2:	3304      	adds	r3, #4
 8014ca4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	0a5b      	lsrs	r3, r3, #9
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	8952      	ldrh	r2, [r2, #10]
 8014cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8014cb2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	1d1a      	adds	r2, r3, #4
 8014cb8:	613a      	str	r2, [r7, #16]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d101      	bne.n	8014cc8 <clmt_clust+0x3a>
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	e010      	b.n	8014cea <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8014cc8:	697a      	ldr	r2, [r7, #20]
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d307      	bcc.n	8014ce0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8014cd0:	697a      	ldr	r2, [r7, #20]
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	1ad3      	subs	r3, r2, r3
 8014cd6:	617b      	str	r3, [r7, #20]
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	3304      	adds	r3, #4
 8014cdc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014cde:	e7e9      	b.n	8014cb4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014ce0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	681a      	ldr	r2, [r3, #0]
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	4413      	add	r3, r2
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	371c      	adds	r7, #28
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf4:	4770      	bx	lr

08014cf6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014cf6:	b580      	push	{r7, lr}
 8014cf8:	b086      	sub	sp, #24
 8014cfa:	af00      	add	r7, sp, #0
 8014cfc:	6078      	str	r0, [r7, #4]
 8014cfe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014d0c:	d204      	bcs.n	8014d18 <dir_sdi+0x22>
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	f003 031f 	and.w	r3, r3, #31
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d001      	beq.n	8014d1c <dir_sdi+0x26>
		return FR_INT_ERR;
 8014d18:	2302      	movs	r3, #2
 8014d1a:	e063      	b.n	8014de4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	683a      	ldr	r2, [r7, #0]
 8014d20:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	689b      	ldr	r3, [r3, #8]
 8014d26:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014d28:	697b      	ldr	r3, [r7, #20]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d106      	bne.n	8014d3c <dir_sdi+0x46>
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	2b02      	cmp	r3, #2
 8014d34:	d902      	bls.n	8014d3c <dir_sdi+0x46>
		clst = fs->dirbase;
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d3a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d10c      	bne.n	8014d5c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	095b      	lsrs	r3, r3, #5
 8014d46:	693a      	ldr	r2, [r7, #16]
 8014d48:	8912      	ldrh	r2, [r2, #8]
 8014d4a:	4293      	cmp	r3, r2
 8014d4c:	d301      	bcc.n	8014d52 <dir_sdi+0x5c>
 8014d4e:	2302      	movs	r3, #2
 8014d50:	e048      	b.n	8014de4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	61da      	str	r2, [r3, #28]
 8014d5a:	e029      	b.n	8014db0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014d5c:	693b      	ldr	r3, [r7, #16]
 8014d5e:	895b      	ldrh	r3, [r3, #10]
 8014d60:	025b      	lsls	r3, r3, #9
 8014d62:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d64:	e019      	b.n	8014d9a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6979      	ldr	r1, [r7, #20]
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7ff fd01 	bl	8014772 <get_fat>
 8014d70:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d78:	d101      	bne.n	8014d7e <dir_sdi+0x88>
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	e032      	b.n	8014de4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	2b01      	cmp	r3, #1
 8014d82:	d904      	bls.n	8014d8e <dir_sdi+0x98>
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	699b      	ldr	r3, [r3, #24]
 8014d88:	697a      	ldr	r2, [r7, #20]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d301      	bcc.n	8014d92 <dir_sdi+0x9c>
 8014d8e:	2302      	movs	r3, #2
 8014d90:	e028      	b.n	8014de4 <dir_sdi+0xee>
			ofs -= csz;
 8014d92:	683a      	ldr	r2, [r7, #0]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	1ad3      	subs	r3, r2, r3
 8014d98:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d9a:	683a      	ldr	r2, [r7, #0]
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d2e1      	bcs.n	8014d66 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014da2:	6979      	ldr	r1, [r7, #20]
 8014da4:	6938      	ldr	r0, [r7, #16]
 8014da6:	f7ff fcc5 	bl	8014734 <clust2sect>
 8014daa:	4602      	mov	r2, r0
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	697a      	ldr	r2, [r7, #20]
 8014db4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	69db      	ldr	r3, [r3, #28]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d101      	bne.n	8014dc2 <dir_sdi+0xcc>
 8014dbe:	2302      	movs	r3, #2
 8014dc0:	e010      	b.n	8014de4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	69da      	ldr	r2, [r3, #28]
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	0a5b      	lsrs	r3, r3, #9
 8014dca:	441a      	add	r2, r3
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ddc:	441a      	add	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014de2:	2300      	movs	r3, #0
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3718      	adds	r7, #24
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b086      	sub	sp, #24
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	695b      	ldr	r3, [r3, #20]
 8014e00:	3320      	adds	r3, #32
 8014e02:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	69db      	ldr	r3, [r3, #28]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d003      	beq.n	8014e14 <dir_next+0x28>
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014e12:	d301      	bcc.n	8014e18 <dir_next+0x2c>
 8014e14:	2304      	movs	r3, #4
 8014e16:	e0aa      	b.n	8014f6e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	f040 8098 	bne.w	8014f54 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	69db      	ldr	r3, [r3, #28]
 8014e28:	1c5a      	adds	r2, r3, #1
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	699b      	ldr	r3, [r3, #24]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d10b      	bne.n	8014e4e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	095b      	lsrs	r3, r3, #5
 8014e3a:	68fa      	ldr	r2, [r7, #12]
 8014e3c:	8912      	ldrh	r2, [r2, #8]
 8014e3e:	4293      	cmp	r3, r2
 8014e40:	f0c0 8088 	bcc.w	8014f54 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2200      	movs	r2, #0
 8014e48:	61da      	str	r2, [r3, #28]
 8014e4a:	2304      	movs	r3, #4
 8014e4c:	e08f      	b.n	8014f6e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	0a5b      	lsrs	r3, r3, #9
 8014e52:	68fa      	ldr	r2, [r7, #12]
 8014e54:	8952      	ldrh	r2, [r2, #10]
 8014e56:	3a01      	subs	r2, #1
 8014e58:	4013      	ands	r3, r2
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d17a      	bne.n	8014f54 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	699b      	ldr	r3, [r3, #24]
 8014e64:	4619      	mov	r1, r3
 8014e66:	4610      	mov	r0, r2
 8014e68:	f7ff fc83 	bl	8014772 <get_fat>
 8014e6c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	2b01      	cmp	r3, #1
 8014e72:	d801      	bhi.n	8014e78 <dir_next+0x8c>
 8014e74:	2302      	movs	r3, #2
 8014e76:	e07a      	b.n	8014f6e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e7e:	d101      	bne.n	8014e84 <dir_next+0x98>
 8014e80:	2301      	movs	r3, #1
 8014e82:	e074      	b.n	8014f6e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	699b      	ldr	r3, [r3, #24]
 8014e88:	697a      	ldr	r2, [r7, #20]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d358      	bcc.n	8014f40 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d104      	bne.n	8014e9e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2200      	movs	r2, #0
 8014e98:	61da      	str	r2, [r3, #28]
 8014e9a:	2304      	movs	r3, #4
 8014e9c:	e067      	b.n	8014f6e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014e9e:	687a      	ldr	r2, [r7, #4]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	699b      	ldr	r3, [r3, #24]
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	4610      	mov	r0, r2
 8014ea8:	f7ff fe59 	bl	8014b5e <create_chain>
 8014eac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d101      	bne.n	8014eb8 <dir_next+0xcc>
 8014eb4:	2307      	movs	r3, #7
 8014eb6:	e05a      	b.n	8014f6e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	d101      	bne.n	8014ec2 <dir_next+0xd6>
 8014ebe:	2302      	movs	r3, #2
 8014ec0:	e055      	b.n	8014f6e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014ec2:	697b      	ldr	r3, [r7, #20]
 8014ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ec8:	d101      	bne.n	8014ece <dir_next+0xe2>
 8014eca:	2301      	movs	r3, #1
 8014ecc:	e04f      	b.n	8014f6e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	f7ff fb50 	bl	8014574 <sync_window>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d001      	beq.n	8014ede <dir_next+0xf2>
 8014eda:	2301      	movs	r3, #1
 8014edc:	e047      	b.n	8014f6e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	3334      	adds	r3, #52	@ 0x34
 8014ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ee6:	2100      	movs	r1, #0
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7ff f949 	bl	8014180 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014eee:	2300      	movs	r3, #0
 8014ef0:	613b      	str	r3, [r7, #16]
 8014ef2:	6979      	ldr	r1, [r7, #20]
 8014ef4:	68f8      	ldr	r0, [r7, #12]
 8014ef6:	f7ff fc1d 	bl	8014734 <clust2sect>
 8014efa:	4602      	mov	r2, r0
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8014f00:	e012      	b.n	8014f28 <dir_next+0x13c>
						fs->wflag = 1;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	2201      	movs	r2, #1
 8014f06:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f7ff fb33 	bl	8014574 <sync_window>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d001      	beq.n	8014f18 <dir_next+0x12c>
 8014f14:	2301      	movs	r3, #1
 8014f16:	e02a      	b.n	8014f6e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014f18:	693b      	ldr	r3, [r7, #16]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	613b      	str	r3, [r7, #16]
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f22:	1c5a      	adds	r2, r3, #1
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	895b      	ldrh	r3, [r3, #10]
 8014f2c:	461a      	mov	r2, r3
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	4293      	cmp	r3, r2
 8014f32:	d3e6      	bcc.n	8014f02 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	1ad2      	subs	r2, r2, r3
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	697a      	ldr	r2, [r7, #20]
 8014f44:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8014f46:	6979      	ldr	r1, [r7, #20]
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	f7ff fbf3 	bl	8014734 <clust2sect>
 8014f4e:	4602      	mov	r2, r0
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	68ba      	ldr	r2, [r7, #8]
 8014f58:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f66:	441a      	add	r2, r3
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014f6c:	2300      	movs	r3, #0
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3718      	adds	r7, #24
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}

08014f76 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014f76:	b580      	push	{r7, lr}
 8014f78:	b086      	sub	sp, #24
 8014f7a:	af00      	add	r7, sp, #0
 8014f7c:	6078      	str	r0, [r7, #4]
 8014f7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014f86:	2100      	movs	r1, #0
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	f7ff feb4 	bl	8014cf6 <dir_sdi>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014f92:	7dfb      	ldrb	r3, [r7, #23]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d12b      	bne.n	8014ff0 <dir_alloc+0x7a>
		n = 0;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	69db      	ldr	r3, [r3, #28]
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	68f8      	ldr	r0, [r7, #12]
 8014fa4:	f7ff fb2a 	bl	80145fc <move_window>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014fac:	7dfb      	ldrb	r3, [r7, #23]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d11d      	bne.n	8014fee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	6a1b      	ldr	r3, [r3, #32]
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	2be5      	cmp	r3, #229	@ 0xe5
 8014fba:	d004      	beq.n	8014fc6 <dir_alloc+0x50>
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6a1b      	ldr	r3, [r3, #32]
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d107      	bne.n	8014fd6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	3301      	adds	r3, #1
 8014fca:	613b      	str	r3, [r7, #16]
 8014fcc:	693a      	ldr	r2, [r7, #16]
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d102      	bne.n	8014fda <dir_alloc+0x64>
 8014fd4:	e00c      	b.n	8014ff0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014fda:	2101      	movs	r1, #1
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f7ff ff05 	bl	8014dec <dir_next>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014fe6:	7dfb      	ldrb	r3, [r7, #23]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d0d7      	beq.n	8014f9c <dir_alloc+0x26>
 8014fec:	e000      	b.n	8014ff0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014fee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014ff0:	7dfb      	ldrb	r3, [r7, #23]
 8014ff2:	2b04      	cmp	r3, #4
 8014ff4:	d101      	bne.n	8014ffa <dir_alloc+0x84>
 8014ff6:	2307      	movs	r3, #7
 8014ff8:	75fb      	strb	r3, [r7, #23]
	return res;
 8014ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3718      	adds	r7, #24
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
 801500c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	331a      	adds	r3, #26
 8015012:	4618      	mov	r0, r3
 8015014:	f7ff f810 	bl	8014038 <ld_word>
 8015018:	4603      	mov	r3, r0
 801501a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	781b      	ldrb	r3, [r3, #0]
 8015020:	2b03      	cmp	r3, #3
 8015022:	d109      	bne.n	8015038 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	3314      	adds	r3, #20
 8015028:	4618      	mov	r0, r3
 801502a:	f7ff f805 	bl	8014038 <ld_word>
 801502e:	4603      	mov	r3, r0
 8015030:	041b      	lsls	r3, r3, #16
 8015032:	68fa      	ldr	r2, [r7, #12]
 8015034:	4313      	orrs	r3, r2
 8015036:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015038:	68fb      	ldr	r3, [r7, #12]
}
 801503a:	4618      	mov	r0, r3
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b084      	sub	sp, #16
 8015046:	af00      	add	r7, sp, #0
 8015048:	60f8      	str	r0, [r7, #12]
 801504a:	60b9      	str	r1, [r7, #8]
 801504c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	331a      	adds	r3, #26
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	b292      	uxth	r2, r2
 8015056:	4611      	mov	r1, r2
 8015058:	4618      	mov	r0, r3
 801505a:	f7ff f829 	bl	80140b0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	2b03      	cmp	r3, #3
 8015064:	d109      	bne.n	801507a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	f103 0214 	add.w	r2, r3, #20
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	0c1b      	lsrs	r3, r3, #16
 8015070:	b29b      	uxth	r3, r3
 8015072:	4619      	mov	r1, r3
 8015074:	4610      	mov	r0, r2
 8015076:	f7ff f81b 	bl	80140b0 <st_word>
	}
}
 801507a:	bf00      	nop
 801507c:	3710      	adds	r7, #16
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}

08015082 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015082:	b580      	push	{r7, lr}
 8015084:	b086      	sub	sp, #24
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015090:	2100      	movs	r1, #0
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f7ff fe2f 	bl	8014cf6 <dir_sdi>
 8015098:	4603      	mov	r3, r0
 801509a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801509c:	7dfb      	ldrb	r3, [r7, #23]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d001      	beq.n	80150a6 <dir_find+0x24>
 80150a2:	7dfb      	ldrb	r3, [r7, #23]
 80150a4:	e03e      	b.n	8015124 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	69db      	ldr	r3, [r3, #28]
 80150aa:	4619      	mov	r1, r3
 80150ac:	6938      	ldr	r0, [r7, #16]
 80150ae:	f7ff faa5 	bl	80145fc <move_window>
 80150b2:	4603      	mov	r3, r0
 80150b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80150b6:	7dfb      	ldrb	r3, [r7, #23]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d12f      	bne.n	801511c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6a1b      	ldr	r3, [r3, #32]
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80150c4:	7bfb      	ldrb	r3, [r7, #15]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d102      	bne.n	80150d0 <dir_find+0x4e>
 80150ca:	2304      	movs	r3, #4
 80150cc:	75fb      	strb	r3, [r7, #23]
 80150ce:	e028      	b.n	8015122 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6a1b      	ldr	r3, [r3, #32]
 80150d4:	330b      	adds	r3, #11
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80150dc:	b2da      	uxtb	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6a1b      	ldr	r3, [r3, #32]
 80150e6:	330b      	adds	r3, #11
 80150e8:	781b      	ldrb	r3, [r3, #0]
 80150ea:	f003 0308 	and.w	r3, r3, #8
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d10a      	bne.n	8015108 <dir_find+0x86>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	6a18      	ldr	r0, [r3, #32]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	3324      	adds	r3, #36	@ 0x24
 80150fa:	220b      	movs	r2, #11
 80150fc:	4619      	mov	r1, r3
 80150fe:	f7ff f85a 	bl	80141b6 <mem_cmp>
 8015102:	4603      	mov	r3, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	d00b      	beq.n	8015120 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015108:	2100      	movs	r1, #0
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7ff fe6e 	bl	8014dec <dir_next>
 8015110:	4603      	mov	r3, r0
 8015112:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015114:	7dfb      	ldrb	r3, [r7, #23]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d0c5      	beq.n	80150a6 <dir_find+0x24>
 801511a:	e002      	b.n	8015122 <dir_find+0xa0>
		if (res != FR_OK) break;
 801511c:	bf00      	nop
 801511e:	e000      	b.n	8015122 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015120:	bf00      	nop

	return res;
 8015122:	7dfb      	ldrb	r3, [r7, #23]
}
 8015124:	4618      	mov	r0, r3
 8015126:	3718      	adds	r7, #24
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b084      	sub	sp, #16
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801513a:	2101      	movs	r1, #1
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f7ff ff1a 	bl	8014f76 <dir_alloc>
 8015142:	4603      	mov	r3, r0
 8015144:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015146:	7bfb      	ldrb	r3, [r7, #15]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d11c      	bne.n	8015186 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	69db      	ldr	r3, [r3, #28]
 8015150:	4619      	mov	r1, r3
 8015152:	68b8      	ldr	r0, [r7, #8]
 8015154:	f7ff fa52 	bl	80145fc <move_window>
 8015158:	4603      	mov	r3, r0
 801515a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801515c:	7bfb      	ldrb	r3, [r7, #15]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d111      	bne.n	8015186 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6a1b      	ldr	r3, [r3, #32]
 8015166:	2220      	movs	r2, #32
 8015168:	2100      	movs	r1, #0
 801516a:	4618      	mov	r0, r3
 801516c:	f7ff f808 	bl	8014180 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	6a18      	ldr	r0, [r3, #32]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	3324      	adds	r3, #36	@ 0x24
 8015178:	220b      	movs	r2, #11
 801517a:	4619      	mov	r1, r3
 801517c:	f7fe ffdf 	bl	801413e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	2201      	movs	r2, #1
 8015184:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015186:	7bfb      	ldrb	r3, [r7, #15]
}
 8015188:	4618      	mov	r0, r3
 801518a:	3710      	adds	r7, #16
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}

08015190 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b088      	sub	sp, #32
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
 8015198:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	60fb      	str	r3, [r7, #12]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	3324      	adds	r3, #36	@ 0x24
 80151a4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80151a6:	220b      	movs	r2, #11
 80151a8:	2120      	movs	r1, #32
 80151aa:	68b8      	ldr	r0, [r7, #8]
 80151ac:	f7fe ffe8 	bl	8014180 <mem_set>
	si = i = 0; ni = 8;
 80151b0:	2300      	movs	r3, #0
 80151b2:	613b      	str	r3, [r7, #16]
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	61fb      	str	r3, [r7, #28]
 80151b8:	2308      	movs	r3, #8
 80151ba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80151bc:	69fb      	ldr	r3, [r7, #28]
 80151be:	1c5a      	adds	r2, r3, #1
 80151c0:	61fa      	str	r2, [r7, #28]
 80151c2:	68fa      	ldr	r2, [r7, #12]
 80151c4:	4413      	add	r3, r2
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80151ca:	7efb      	ldrb	r3, [r7, #27]
 80151cc:	2b20      	cmp	r3, #32
 80151ce:	d94e      	bls.n	801526e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80151d0:	7efb      	ldrb	r3, [r7, #27]
 80151d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80151d4:	d006      	beq.n	80151e4 <create_name+0x54>
 80151d6:	7efb      	ldrb	r3, [r7, #27]
 80151d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80151da:	d110      	bne.n	80151fe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80151dc:	e002      	b.n	80151e4 <create_name+0x54>
 80151de:	69fb      	ldr	r3, [r7, #28]
 80151e0:	3301      	adds	r3, #1
 80151e2:	61fb      	str	r3, [r7, #28]
 80151e4:	68fa      	ldr	r2, [r7, #12]
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	4413      	add	r3, r2
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80151ee:	d0f6      	beq.n	80151de <create_name+0x4e>
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	69fb      	ldr	r3, [r7, #28]
 80151f4:	4413      	add	r3, r2
 80151f6:	781b      	ldrb	r3, [r3, #0]
 80151f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80151fa:	d0f0      	beq.n	80151de <create_name+0x4e>
			break;
 80151fc:	e038      	b.n	8015270 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80151fe:	7efb      	ldrb	r3, [r7, #27]
 8015200:	2b2e      	cmp	r3, #46	@ 0x2e
 8015202:	d003      	beq.n	801520c <create_name+0x7c>
 8015204:	693a      	ldr	r2, [r7, #16]
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	429a      	cmp	r2, r3
 801520a:	d30c      	bcc.n	8015226 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	2b0b      	cmp	r3, #11
 8015210:	d002      	beq.n	8015218 <create_name+0x88>
 8015212:	7efb      	ldrb	r3, [r7, #27]
 8015214:	2b2e      	cmp	r3, #46	@ 0x2e
 8015216:	d001      	beq.n	801521c <create_name+0x8c>
 8015218:	2306      	movs	r3, #6
 801521a:	e044      	b.n	80152a6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801521c:	2308      	movs	r3, #8
 801521e:	613b      	str	r3, [r7, #16]
 8015220:	230b      	movs	r3, #11
 8015222:	617b      	str	r3, [r7, #20]
			continue;
 8015224:	e022      	b.n	801526c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8015226:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801522a:	2b00      	cmp	r3, #0
 801522c:	da04      	bge.n	8015238 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801522e:	7efb      	ldrb	r3, [r7, #27]
 8015230:	3b80      	subs	r3, #128	@ 0x80
 8015232:	4a1f      	ldr	r2, [pc, #124]	@ (80152b0 <create_name+0x120>)
 8015234:	5cd3      	ldrb	r3, [r2, r3]
 8015236:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8015238:	7efb      	ldrb	r3, [r7, #27]
 801523a:	4619      	mov	r1, r3
 801523c:	481d      	ldr	r0, [pc, #116]	@ (80152b4 <create_name+0x124>)
 801523e:	f7fe ffe1 	bl	8014204 <chk_chr>
 8015242:	4603      	mov	r3, r0
 8015244:	2b00      	cmp	r3, #0
 8015246:	d001      	beq.n	801524c <create_name+0xbc>
 8015248:	2306      	movs	r3, #6
 801524a:	e02c      	b.n	80152a6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801524c:	7efb      	ldrb	r3, [r7, #27]
 801524e:	2b60      	cmp	r3, #96	@ 0x60
 8015250:	d905      	bls.n	801525e <create_name+0xce>
 8015252:	7efb      	ldrb	r3, [r7, #27]
 8015254:	2b7a      	cmp	r3, #122	@ 0x7a
 8015256:	d802      	bhi.n	801525e <create_name+0xce>
 8015258:	7efb      	ldrb	r3, [r7, #27]
 801525a:	3b20      	subs	r3, #32
 801525c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	1c5a      	adds	r2, r3, #1
 8015262:	613a      	str	r2, [r7, #16]
 8015264:	68ba      	ldr	r2, [r7, #8]
 8015266:	4413      	add	r3, r2
 8015268:	7efa      	ldrb	r2, [r7, #27]
 801526a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801526c:	e7a6      	b.n	80151bc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801526e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8015270:	68fa      	ldr	r2, [r7, #12]
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	441a      	add	r2, r3
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d101      	bne.n	8015284 <create_name+0xf4>
 8015280:	2306      	movs	r3, #6
 8015282:	e010      	b.n	80152a6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	781b      	ldrb	r3, [r3, #0]
 8015288:	2be5      	cmp	r3, #229	@ 0xe5
 801528a:	d102      	bne.n	8015292 <create_name+0x102>
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	2205      	movs	r2, #5
 8015290:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015292:	7efb      	ldrb	r3, [r7, #27]
 8015294:	2b20      	cmp	r3, #32
 8015296:	d801      	bhi.n	801529c <create_name+0x10c>
 8015298:	2204      	movs	r2, #4
 801529a:	e000      	b.n	801529e <create_name+0x10e>
 801529c:	2200      	movs	r2, #0
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	330b      	adds	r3, #11
 80152a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80152a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3720      	adds	r7, #32
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
 80152ae:	bf00      	nop
 80152b0:	0801c1bc 	.word	0x0801c1bc
 80152b4:	0801c13c 	.word	0x0801c13c

080152b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b086      	sub	sp, #24
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
 80152c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80152c6:	693b      	ldr	r3, [r7, #16]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80152cc:	e002      	b.n	80152d4 <follow_path+0x1c>
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	3301      	adds	r3, #1
 80152d2:	603b      	str	r3, [r7, #0]
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80152da:	d0f8      	beq.n	80152ce <follow_path+0x16>
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80152e2:	d0f4      	beq.n	80152ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	2200      	movs	r2, #0
 80152e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	2b1f      	cmp	r3, #31
 80152f0:	d80a      	bhi.n	8015308 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2280      	movs	r2, #128	@ 0x80
 80152f6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80152fa:	2100      	movs	r1, #0
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f7ff fcfa 	bl	8014cf6 <dir_sdi>
 8015302:	4603      	mov	r3, r0
 8015304:	75fb      	strb	r3, [r7, #23]
 8015306:	e043      	b.n	8015390 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015308:	463b      	mov	r3, r7
 801530a:	4619      	mov	r1, r3
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f7ff ff3f 	bl	8015190 <create_name>
 8015312:	4603      	mov	r3, r0
 8015314:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015316:	7dfb      	ldrb	r3, [r7, #23]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d134      	bne.n	8015386 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f7ff feb0 	bl	8015082 <dir_find>
 8015322:	4603      	mov	r3, r0
 8015324:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801532c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801532e:	7dfb      	ldrb	r3, [r7, #23]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d00a      	beq.n	801534a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015334:	7dfb      	ldrb	r3, [r7, #23]
 8015336:	2b04      	cmp	r3, #4
 8015338:	d127      	bne.n	801538a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801533a:	7afb      	ldrb	r3, [r7, #11]
 801533c:	f003 0304 	and.w	r3, r3, #4
 8015340:	2b00      	cmp	r3, #0
 8015342:	d122      	bne.n	801538a <follow_path+0xd2>
 8015344:	2305      	movs	r3, #5
 8015346:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015348:	e01f      	b.n	801538a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801534a:	7afb      	ldrb	r3, [r7, #11]
 801534c:	f003 0304 	and.w	r3, r3, #4
 8015350:	2b00      	cmp	r3, #0
 8015352:	d11c      	bne.n	801538e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	799b      	ldrb	r3, [r3, #6]
 8015358:	f003 0310 	and.w	r3, r3, #16
 801535c:	2b00      	cmp	r3, #0
 801535e:	d102      	bne.n	8015366 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015360:	2305      	movs	r3, #5
 8015362:	75fb      	strb	r3, [r7, #23]
 8015364:	e014      	b.n	8015390 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	695b      	ldr	r3, [r3, #20]
 8015370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015374:	4413      	add	r3, r2
 8015376:	4619      	mov	r1, r3
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f7ff fe43 	bl	8015004 <ld_clust>
 801537e:	4602      	mov	r2, r0
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015384:	e7c0      	b.n	8015308 <follow_path+0x50>
			if (res != FR_OK) break;
 8015386:	bf00      	nop
 8015388:	e002      	b.n	8015390 <follow_path+0xd8>
				break;
 801538a:	bf00      	nop
 801538c:	e000      	b.n	8015390 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801538e:	bf00      	nop
			}
		}
	}

	return res;
 8015390:	7dfb      	ldrb	r3, [r7, #23]
}
 8015392:	4618      	mov	r0, r3
 8015394:	3718      	adds	r7, #24
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}

0801539a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801539a:	b480      	push	{r7}
 801539c:	b087      	sub	sp, #28
 801539e:	af00      	add	r7, sp, #0
 80153a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80153a2:	f04f 33ff 	mov.w	r3, #4294967295
 80153a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d031      	beq.n	8015414 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	617b      	str	r3, [r7, #20]
 80153b6:	e002      	b.n	80153be <get_ldnumber+0x24>
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	3301      	adds	r3, #1
 80153bc:	617b      	str	r3, [r7, #20]
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	781b      	ldrb	r3, [r3, #0]
 80153c2:	2b20      	cmp	r3, #32
 80153c4:	d903      	bls.n	80153ce <get_ldnumber+0x34>
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	781b      	ldrb	r3, [r3, #0]
 80153ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80153cc:	d1f4      	bne.n	80153b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	781b      	ldrb	r3, [r3, #0]
 80153d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80153d4:	d11c      	bne.n	8015410 <get_ldnumber+0x76>
			tp = *path;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	1c5a      	adds	r2, r3, #1
 80153e0:	60fa      	str	r2, [r7, #12]
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	3b30      	subs	r3, #48	@ 0x30
 80153e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	2b09      	cmp	r3, #9
 80153ec:	d80e      	bhi.n	801540c <get_ldnumber+0x72>
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	697b      	ldr	r3, [r7, #20]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d10a      	bne.n	801540c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d107      	bne.n	801540c <get_ldnumber+0x72>
					vol = (int)i;
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	3301      	adds	r3, #1
 8015404:	617b      	str	r3, [r7, #20]
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	697a      	ldr	r2, [r7, #20]
 801540a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	e002      	b.n	8015416 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015410:	2300      	movs	r3, #0
 8015412:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015414:	693b      	ldr	r3, [r7, #16]
}
 8015416:	4618      	mov	r0, r3
 8015418:	371c      	adds	r7, #28
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr
	...

08015424 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2200      	movs	r2, #0
 8015432:	70da      	strb	r2, [r3, #3]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f04f 32ff 	mov.w	r2, #4294967295
 801543a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801543c:	6839      	ldr	r1, [r7, #0]
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f7ff f8dc 	bl	80145fc <move_window>
 8015444:	4603      	mov	r3, r0
 8015446:	2b00      	cmp	r3, #0
 8015448:	d001      	beq.n	801544e <check_fs+0x2a>
 801544a:	2304      	movs	r3, #4
 801544c:	e038      	b.n	80154c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	3334      	adds	r3, #52	@ 0x34
 8015452:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015456:	4618      	mov	r0, r3
 8015458:	f7fe fdee 	bl	8014038 <ld_word>
 801545c:	4603      	mov	r3, r0
 801545e:	461a      	mov	r2, r3
 8015460:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8015464:	429a      	cmp	r2, r3
 8015466:	d001      	beq.n	801546c <check_fs+0x48>
 8015468:	2303      	movs	r3, #3
 801546a:	e029      	b.n	80154c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015472:	2be9      	cmp	r3, #233	@ 0xe9
 8015474:	d009      	beq.n	801548a <check_fs+0x66>
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801547c:	2beb      	cmp	r3, #235	@ 0xeb
 801547e:	d11e      	bne.n	80154be <check_fs+0x9a>
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8015486:	2b90      	cmp	r3, #144	@ 0x90
 8015488:	d119      	bne.n	80154be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	3334      	adds	r3, #52	@ 0x34
 801548e:	3336      	adds	r3, #54	@ 0x36
 8015490:	4618      	mov	r0, r3
 8015492:	f7fe fdea 	bl	801406a <ld_dword>
 8015496:	4603      	mov	r3, r0
 8015498:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801549c:	4a0a      	ldr	r2, [pc, #40]	@ (80154c8 <check_fs+0xa4>)
 801549e:	4293      	cmp	r3, r2
 80154a0:	d101      	bne.n	80154a6 <check_fs+0x82>
 80154a2:	2300      	movs	r3, #0
 80154a4:	e00c      	b.n	80154c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	3334      	adds	r3, #52	@ 0x34
 80154aa:	3352      	adds	r3, #82	@ 0x52
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7fe fddc 	bl	801406a <ld_dword>
 80154b2:	4603      	mov	r3, r0
 80154b4:	4a05      	ldr	r2, [pc, #20]	@ (80154cc <check_fs+0xa8>)
 80154b6:	4293      	cmp	r3, r2
 80154b8:	d101      	bne.n	80154be <check_fs+0x9a>
 80154ba:	2300      	movs	r3, #0
 80154bc:	e000      	b.n	80154c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80154be:	2302      	movs	r3, #2
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3708      	adds	r7, #8
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	00544146 	.word	0x00544146
 80154cc:	33544146 	.word	0x33544146

080154d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b096      	sub	sp, #88	@ 0x58
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	4613      	mov	r3, r2
 80154dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	2200      	movs	r2, #0
 80154e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80154e4:	68f8      	ldr	r0, [r7, #12]
 80154e6:	f7ff ff58 	bl	801539a <get_ldnumber>
 80154ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80154ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	da01      	bge.n	80154f6 <find_volume+0x26>
 80154f2:	230b      	movs	r3, #11
 80154f4:	e235      	b.n	8015962 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80154f6:	4aa5      	ldr	r2, [pc, #660]	@ (801578c <find_volume+0x2bc>)
 80154f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015502:	2b00      	cmp	r3, #0
 8015504:	d101      	bne.n	801550a <find_volume+0x3a>
 8015506:	230c      	movs	r3, #12
 8015508:	e22b      	b.n	8015962 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 801550a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801550c:	f7fe fe95 	bl	801423a <lock_fs>
 8015510:	4603      	mov	r3, r0
 8015512:	2b00      	cmp	r3, #0
 8015514:	d101      	bne.n	801551a <find_volume+0x4a>
 8015516:	230f      	movs	r3, #15
 8015518:	e223      	b.n	8015962 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801551e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015520:	79fb      	ldrb	r3, [r7, #7]
 8015522:	f023 0301 	bic.w	r3, r3, #1
 8015526:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801552a:	781b      	ldrb	r3, [r3, #0]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d01a      	beq.n	8015566 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8015530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015532:	785b      	ldrb	r3, [r3, #1]
 8015534:	4618      	mov	r0, r3
 8015536:	f7fe fce1 	bl	8013efc <disk_status>
 801553a:	4603      	mov	r3, r0
 801553c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015540:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015544:	f003 0301 	and.w	r3, r3, #1
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10c      	bne.n	8015566 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801554c:	79fb      	ldrb	r3, [r7, #7]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d007      	beq.n	8015562 <find_volume+0x92>
 8015552:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015556:	f003 0304 	and.w	r3, r3, #4
 801555a:	2b00      	cmp	r3, #0
 801555c:	d001      	beq.n	8015562 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801555e:	230a      	movs	r3, #10
 8015560:	e1ff      	b.n	8015962 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8015562:	2300      	movs	r3, #0
 8015564:	e1fd      	b.n	8015962 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015568:	2200      	movs	r2, #0
 801556a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801556c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801556e:	b2da      	uxtb	r2, r3
 8015570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015572:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015576:	785b      	ldrb	r3, [r3, #1]
 8015578:	4618      	mov	r0, r3
 801557a:	f7fe fcd9 	bl	8013f30 <disk_initialize>
 801557e:	4603      	mov	r3, r0
 8015580:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015584:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015588:	f003 0301 	and.w	r3, r3, #1
 801558c:	2b00      	cmp	r3, #0
 801558e:	d001      	beq.n	8015594 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015590:	2303      	movs	r3, #3
 8015592:	e1e6      	b.n	8015962 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015594:	79fb      	ldrb	r3, [r7, #7]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d007      	beq.n	80155aa <find_volume+0xda>
 801559a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801559e:	f003 0304 	and.w	r3, r3, #4
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d001      	beq.n	80155aa <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80155a6:	230a      	movs	r3, #10
 80155a8:	e1db      	b.n	8015962 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80155aa:	2300      	movs	r3, #0
 80155ac:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80155ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80155b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80155b2:	f7ff ff37 	bl	8015424 <check_fs>
 80155b6:	4603      	mov	r3, r0
 80155b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80155bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80155c0:	2b02      	cmp	r3, #2
 80155c2:	d149      	bne.n	8015658 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80155c4:	2300      	movs	r3, #0
 80155c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80155c8:	e01e      	b.n	8015608 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80155ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155cc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80155d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155d2:	011b      	lsls	r3, r3, #4
 80155d4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80155d8:	4413      	add	r3, r2
 80155da:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80155dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155de:	3304      	adds	r3, #4
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d006      	beq.n	80155f4 <find_volume+0x124>
 80155e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155e8:	3308      	adds	r3, #8
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7fe fd3d 	bl	801406a <ld_dword>
 80155f0:	4602      	mov	r2, r0
 80155f2:	e000      	b.n	80155f6 <find_volume+0x126>
 80155f4:	2200      	movs	r2, #0
 80155f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	3358      	adds	r3, #88	@ 0x58
 80155fc:	443b      	add	r3, r7
 80155fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015604:	3301      	adds	r3, #1
 8015606:	643b      	str	r3, [r7, #64]	@ 0x40
 8015608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801560a:	2b03      	cmp	r3, #3
 801560c:	d9dd      	bls.n	80155ca <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801560e:	2300      	movs	r3, #0
 8015610:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8015612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015614:	2b00      	cmp	r3, #0
 8015616:	d002      	beq.n	801561e <find_volume+0x14e>
 8015618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801561a:	3b01      	subs	r3, #1
 801561c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801561e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	3358      	adds	r3, #88	@ 0x58
 8015624:	443b      	add	r3, r7
 8015626:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801562a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801562c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801562e:	2b00      	cmp	r3, #0
 8015630:	d005      	beq.n	801563e <find_volume+0x16e>
 8015632:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015634:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015636:	f7ff fef5 	bl	8015424 <check_fs>
 801563a:	4603      	mov	r3, r0
 801563c:	e000      	b.n	8015640 <find_volume+0x170>
 801563e:	2303      	movs	r3, #3
 8015640:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015644:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015648:	2b01      	cmp	r3, #1
 801564a:	d905      	bls.n	8015658 <find_volume+0x188>
 801564c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801564e:	3301      	adds	r3, #1
 8015650:	643b      	str	r3, [r7, #64]	@ 0x40
 8015652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015654:	2b03      	cmp	r3, #3
 8015656:	d9e2      	bls.n	801561e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015658:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801565c:	2b04      	cmp	r3, #4
 801565e:	d101      	bne.n	8015664 <find_volume+0x194>
 8015660:	2301      	movs	r3, #1
 8015662:	e17e      	b.n	8015962 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015664:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015668:	2b01      	cmp	r3, #1
 801566a:	d901      	bls.n	8015670 <find_volume+0x1a0>
 801566c:	230d      	movs	r3, #13
 801566e:	e178      	b.n	8015962 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015672:	3334      	adds	r3, #52	@ 0x34
 8015674:	330b      	adds	r3, #11
 8015676:	4618      	mov	r0, r3
 8015678:	f7fe fcde 	bl	8014038 <ld_word>
 801567c:	4603      	mov	r3, r0
 801567e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015682:	d001      	beq.n	8015688 <find_volume+0x1b8>
 8015684:	230d      	movs	r3, #13
 8015686:	e16c      	b.n	8015962 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801568a:	3334      	adds	r3, #52	@ 0x34
 801568c:	3316      	adds	r3, #22
 801568e:	4618      	mov	r0, r3
 8015690:	f7fe fcd2 	bl	8014038 <ld_word>
 8015694:	4603      	mov	r3, r0
 8015696:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801569a:	2b00      	cmp	r3, #0
 801569c:	d106      	bne.n	80156ac <find_volume+0x1dc>
 801569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a0:	3334      	adds	r3, #52	@ 0x34
 80156a2:	3324      	adds	r3, #36	@ 0x24
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7fe fce0 	bl	801406a <ld_dword>
 80156aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80156ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80156b0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80156b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80156b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80156bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156be:	789b      	ldrb	r3, [r3, #2]
 80156c0:	2b01      	cmp	r3, #1
 80156c2:	d005      	beq.n	80156d0 <find_volume+0x200>
 80156c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156c6:	789b      	ldrb	r3, [r3, #2]
 80156c8:	2b02      	cmp	r3, #2
 80156ca:	d001      	beq.n	80156d0 <find_volume+0x200>
 80156cc:	230d      	movs	r3, #13
 80156ce:	e148      	b.n	8015962 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80156d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156d2:	789b      	ldrb	r3, [r3, #2]
 80156d4:	461a      	mov	r2, r3
 80156d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156d8:	fb02 f303 	mul.w	r3, r2, r3
 80156dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80156de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80156e4:	461a      	mov	r2, r3
 80156e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80156ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ec:	895b      	ldrh	r3, [r3, #10]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d008      	beq.n	8015704 <find_volume+0x234>
 80156f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156f4:	895b      	ldrh	r3, [r3, #10]
 80156f6:	461a      	mov	r2, r3
 80156f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156fa:	895b      	ldrh	r3, [r3, #10]
 80156fc:	3b01      	subs	r3, #1
 80156fe:	4013      	ands	r3, r2
 8015700:	2b00      	cmp	r3, #0
 8015702:	d001      	beq.n	8015708 <find_volume+0x238>
 8015704:	230d      	movs	r3, #13
 8015706:	e12c      	b.n	8015962 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801570a:	3334      	adds	r3, #52	@ 0x34
 801570c:	3311      	adds	r3, #17
 801570e:	4618      	mov	r0, r3
 8015710:	f7fe fc92 	bl	8014038 <ld_word>
 8015714:	4603      	mov	r3, r0
 8015716:	461a      	mov	r2, r3
 8015718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801571a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801571e:	891b      	ldrh	r3, [r3, #8]
 8015720:	f003 030f 	and.w	r3, r3, #15
 8015724:	b29b      	uxth	r3, r3
 8015726:	2b00      	cmp	r3, #0
 8015728:	d001      	beq.n	801572e <find_volume+0x25e>
 801572a:	230d      	movs	r3, #13
 801572c:	e119      	b.n	8015962 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801572e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015730:	3334      	adds	r3, #52	@ 0x34
 8015732:	3313      	adds	r3, #19
 8015734:	4618      	mov	r0, r3
 8015736:	f7fe fc7f 	bl	8014038 <ld_word>
 801573a:	4603      	mov	r3, r0
 801573c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801573e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015740:	2b00      	cmp	r3, #0
 8015742:	d106      	bne.n	8015752 <find_volume+0x282>
 8015744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015746:	3334      	adds	r3, #52	@ 0x34
 8015748:	3320      	adds	r3, #32
 801574a:	4618      	mov	r0, r3
 801574c:	f7fe fc8d 	bl	801406a <ld_dword>
 8015750:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015754:	3334      	adds	r3, #52	@ 0x34
 8015756:	330e      	adds	r3, #14
 8015758:	4618      	mov	r0, r3
 801575a:	f7fe fc6d 	bl	8014038 <ld_word>
 801575e:	4603      	mov	r3, r0
 8015760:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015762:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015764:	2b00      	cmp	r3, #0
 8015766:	d101      	bne.n	801576c <find_volume+0x29c>
 8015768:	230d      	movs	r3, #13
 801576a:	e0fa      	b.n	8015962 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801576c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801576e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015770:	4413      	add	r3, r2
 8015772:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015774:	8912      	ldrh	r2, [r2, #8]
 8015776:	0912      	lsrs	r2, r2, #4
 8015778:	b292      	uxth	r2, r2
 801577a:	4413      	add	r3, r2
 801577c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801577e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015782:	429a      	cmp	r2, r3
 8015784:	d204      	bcs.n	8015790 <find_volume+0x2c0>
 8015786:	230d      	movs	r3, #13
 8015788:	e0eb      	b.n	8015962 <find_volume+0x492>
 801578a:	bf00      	nop
 801578c:	20001594 	.word	0x20001594
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015794:	1ad3      	subs	r3, r2, r3
 8015796:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015798:	8952      	ldrh	r2, [r2, #10]
 801579a:	fbb3 f3f2 	udiv	r3, r3, r2
 801579e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80157a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d101      	bne.n	80157aa <find_volume+0x2da>
 80157a6:	230d      	movs	r3, #13
 80157a8:	e0db      	b.n	8015962 <find_volume+0x492>
		fmt = FS_FAT32;
 80157aa:	2303      	movs	r3, #3
 80157ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80157b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157b2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80157b6:	4293      	cmp	r3, r2
 80157b8:	d802      	bhi.n	80157c0 <find_volume+0x2f0>
 80157ba:	2302      	movs	r3, #2
 80157bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80157c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80157c6:	4293      	cmp	r3, r2
 80157c8:	d802      	bhi.n	80157d0 <find_volume+0x300>
 80157ca:	2301      	movs	r3, #1
 80157cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80157d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d2:	1c9a      	adds	r2, r3, #2
 80157d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157d6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80157d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80157dc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80157de:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80157e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80157e2:	441a      	add	r2, r3
 80157e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157e6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80157e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80157ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ec:	441a      	add	r2, r3
 80157ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157f0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80157f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80157f6:	2b03      	cmp	r3, #3
 80157f8:	d11e      	bne.n	8015838 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80157fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157fc:	3334      	adds	r3, #52	@ 0x34
 80157fe:	332a      	adds	r3, #42	@ 0x2a
 8015800:	4618      	mov	r0, r3
 8015802:	f7fe fc19 	bl	8014038 <ld_word>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d001      	beq.n	8015810 <find_volume+0x340>
 801580c:	230d      	movs	r3, #13
 801580e:	e0a8      	b.n	8015962 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015812:	891b      	ldrh	r3, [r3, #8]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d001      	beq.n	801581c <find_volume+0x34c>
 8015818:	230d      	movs	r3, #13
 801581a:	e0a2      	b.n	8015962 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801581c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801581e:	3334      	adds	r3, #52	@ 0x34
 8015820:	332c      	adds	r3, #44	@ 0x2c
 8015822:	4618      	mov	r0, r3
 8015824:	f7fe fc21 	bl	801406a <ld_dword>
 8015828:	4602      	mov	r2, r0
 801582a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801582c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015830:	699b      	ldr	r3, [r3, #24]
 8015832:	009b      	lsls	r3, r3, #2
 8015834:	647b      	str	r3, [r7, #68]	@ 0x44
 8015836:	e01f      	b.n	8015878 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801583a:	891b      	ldrh	r3, [r3, #8]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d101      	bne.n	8015844 <find_volume+0x374>
 8015840:	230d      	movs	r3, #13
 8015842:	e08e      	b.n	8015962 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801584a:	441a      	add	r2, r3
 801584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801584e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015850:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015854:	2b02      	cmp	r3, #2
 8015856:	d103      	bne.n	8015860 <find_volume+0x390>
 8015858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801585a:	699b      	ldr	r3, [r3, #24]
 801585c:	005b      	lsls	r3, r3, #1
 801585e:	e00a      	b.n	8015876 <find_volume+0x3a6>
 8015860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015862:	699a      	ldr	r2, [r3, #24]
 8015864:	4613      	mov	r3, r2
 8015866:	005b      	lsls	r3, r3, #1
 8015868:	4413      	add	r3, r2
 801586a:	085a      	lsrs	r2, r3, #1
 801586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801586e:	699b      	ldr	r3, [r3, #24]
 8015870:	f003 0301 	and.w	r3, r3, #1
 8015874:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015876:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801587a:	69da      	ldr	r2, [r3, #28]
 801587c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801587e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8015882:	0a5b      	lsrs	r3, r3, #9
 8015884:	429a      	cmp	r2, r3
 8015886:	d201      	bcs.n	801588c <find_volume+0x3bc>
 8015888:	230d      	movs	r3, #13
 801588a:	e06a      	b.n	8015962 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801588e:	f04f 32ff 	mov.w	r2, #4294967295
 8015892:	615a      	str	r2, [r3, #20]
 8015894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015896:	695a      	ldr	r2, [r3, #20]
 8015898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801589a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801589e:	2280      	movs	r2, #128	@ 0x80
 80158a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80158a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80158a6:	2b03      	cmp	r3, #3
 80158a8:	d149      	bne.n	801593e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80158aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158ac:	3334      	adds	r3, #52	@ 0x34
 80158ae:	3330      	adds	r3, #48	@ 0x30
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fe fbc1 	bl	8014038 <ld_word>
 80158b6:	4603      	mov	r3, r0
 80158b8:	2b01      	cmp	r3, #1
 80158ba:	d140      	bne.n	801593e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80158bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80158be:	3301      	adds	r3, #1
 80158c0:	4619      	mov	r1, r3
 80158c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80158c4:	f7fe fe9a 	bl	80145fc <move_window>
 80158c8:	4603      	mov	r3, r0
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d137      	bne.n	801593e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80158ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158d0:	2200      	movs	r2, #0
 80158d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80158d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158d6:	3334      	adds	r3, #52	@ 0x34
 80158d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80158dc:	4618      	mov	r0, r3
 80158de:	f7fe fbab 	bl	8014038 <ld_word>
 80158e2:	4603      	mov	r3, r0
 80158e4:	461a      	mov	r2, r3
 80158e6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d127      	bne.n	801593e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80158ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158f0:	3334      	adds	r3, #52	@ 0x34
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fe fbb9 	bl	801406a <ld_dword>
 80158f8:	4603      	mov	r3, r0
 80158fa:	4a1c      	ldr	r2, [pc, #112]	@ (801596c <find_volume+0x49c>)
 80158fc:	4293      	cmp	r3, r2
 80158fe:	d11e      	bne.n	801593e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015902:	3334      	adds	r3, #52	@ 0x34
 8015904:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8015908:	4618      	mov	r0, r3
 801590a:	f7fe fbae 	bl	801406a <ld_dword>
 801590e:	4603      	mov	r3, r0
 8015910:	4a17      	ldr	r2, [pc, #92]	@ (8015970 <find_volume+0x4a0>)
 8015912:	4293      	cmp	r3, r2
 8015914:	d113      	bne.n	801593e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015918:	3334      	adds	r3, #52	@ 0x34
 801591a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801591e:	4618      	mov	r0, r3
 8015920:	f7fe fba3 	bl	801406a <ld_dword>
 8015924:	4602      	mov	r2, r0
 8015926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015928:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801592c:	3334      	adds	r3, #52	@ 0x34
 801592e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8015932:	4618      	mov	r0, r3
 8015934:	f7fe fb99 	bl	801406a <ld_dword>
 8015938:	4602      	mov	r2, r0
 801593a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801593c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801593e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015940:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8015944:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015946:	4b0b      	ldr	r3, [pc, #44]	@ (8015974 <find_volume+0x4a4>)
 8015948:	881b      	ldrh	r3, [r3, #0]
 801594a:	3301      	adds	r3, #1
 801594c:	b29a      	uxth	r2, r3
 801594e:	4b09      	ldr	r3, [pc, #36]	@ (8015974 <find_volume+0x4a4>)
 8015950:	801a      	strh	r2, [r3, #0]
 8015952:	4b08      	ldr	r3, [pc, #32]	@ (8015974 <find_volume+0x4a4>)
 8015954:	881a      	ldrh	r2, [r3, #0]
 8015956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015958:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801595a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801595c:	f7fe fde6 	bl	801452c <clear_lock>
#endif
	return FR_OK;
 8015960:	2300      	movs	r3, #0
}
 8015962:	4618      	mov	r0, r3
 8015964:	3758      	adds	r7, #88	@ 0x58
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
 801596a:	bf00      	nop
 801596c:	41615252 	.word	0x41615252
 8015970:	61417272 	.word	0x61417272
 8015974:	20001598 	.word	0x20001598

08015978 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
 8015980:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015982:	2309      	movs	r3, #9
 8015984:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d02e      	beq.n	80159ea <validate+0x72>
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d02a      	beq.n	80159ea <validate+0x72>
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d025      	beq.n	80159ea <validate+0x72>
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	889a      	ldrh	r2, [r3, #4]
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	88db      	ldrh	r3, [r3, #6]
 80159a8:	429a      	cmp	r2, r3
 80159aa:	d11e      	bne.n	80159ea <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7fe fc42 	bl	801423a <lock_fs>
 80159b6:	4603      	mov	r3, r0
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d014      	beq.n	80159e6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	785b      	ldrb	r3, [r3, #1]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7fe fa9a 	bl	8013efc <disk_status>
 80159c8:	4603      	mov	r3, r0
 80159ca:	f003 0301 	and.w	r3, r3, #1
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d102      	bne.n	80159d8 <validate+0x60>
				res = FR_OK;
 80159d2:	2300      	movs	r3, #0
 80159d4:	73fb      	strb	r3, [r7, #15]
 80159d6:	e008      	b.n	80159ea <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2100      	movs	r1, #0
 80159de:	4618      	mov	r0, r3
 80159e0:	f7fe fc41 	bl	8014266 <unlock_fs>
 80159e4:	e001      	b.n	80159ea <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80159e6:	230f      	movs	r3, #15
 80159e8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80159ea:	7bfb      	ldrb	r3, [r7, #15]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d102      	bne.n	80159f6 <validate+0x7e>
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	e000      	b.n	80159f8 <validate+0x80>
 80159f6:	2300      	movs	r3, #0
 80159f8:	683a      	ldr	r2, [r7, #0]
 80159fa:	6013      	str	r3, [r2, #0]
	return res;
 80159fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	3710      	adds	r7, #16
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd80      	pop	{r7, pc}

08015a06 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015a06:	b580      	push	{r7, lr}
 8015a08:	b098      	sub	sp, #96	@ 0x60
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	60f8      	str	r0, [r7, #12]
 8015a0e:	60b9      	str	r1, [r7, #8]
 8015a10:	4613      	mov	r3, r2
 8015a12:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d101      	bne.n	8015a1e <f_open+0x18>
 8015a1a:	2309      	movs	r3, #9
 8015a1c:	e1b0      	b.n	8015d80 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015a1e:	79fb      	ldrb	r3, [r7, #7]
 8015a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015a24:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015a26:	79fa      	ldrb	r2, [r7, #7]
 8015a28:	f107 0110 	add.w	r1, r7, #16
 8015a2c:	f107 0308 	add.w	r3, r7, #8
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7ff fd4d 	bl	80154d0 <find_volume>
 8015a36:	4603      	mov	r3, r0
 8015a38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8015a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	f040 818d 	bne.w	8015d60 <f_open+0x35a>
		dj.obj.fs = fs;
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015a4a:	68ba      	ldr	r2, [r7, #8]
 8015a4c:	f107 0314 	add.w	r3, r7, #20
 8015a50:	4611      	mov	r1, r2
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7ff fc30 	bl	80152b8 <follow_path>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d118      	bne.n	8015a98 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015a66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015a6a:	b25b      	sxtb	r3, r3
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	da03      	bge.n	8015a78 <f_open+0x72>
				res = FR_INVALID_NAME;
 8015a70:	2306      	movs	r3, #6
 8015a72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015a76:	e00f      	b.n	8015a98 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015a78:	79fb      	ldrb	r3, [r7, #7]
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	bf8c      	ite	hi
 8015a7e:	2301      	movhi	r3, #1
 8015a80:	2300      	movls	r3, #0
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	461a      	mov	r2, r3
 8015a86:	f107 0314 	add.w	r3, r7, #20
 8015a8a:	4611      	mov	r1, r2
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7fe fc05 	bl	801429c <chk_lock>
 8015a92:	4603      	mov	r3, r0
 8015a94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015a98:	79fb      	ldrb	r3, [r7, #7]
 8015a9a:	f003 031c 	and.w	r3, r3, #28
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d07f      	beq.n	8015ba2 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8015aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d017      	beq.n	8015ada <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015aae:	2b04      	cmp	r3, #4
 8015ab0:	d10e      	bne.n	8015ad0 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015ab2:	f7fe fc4f 	bl	8014354 <enq_lock>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d006      	beq.n	8015aca <f_open+0xc4>
 8015abc:	f107 0314 	add.w	r3, r7, #20
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7ff fb33 	bl	801512c <dir_register>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	e000      	b.n	8015acc <f_open+0xc6>
 8015aca:	2312      	movs	r3, #18
 8015acc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015ad0:	79fb      	ldrb	r3, [r7, #7]
 8015ad2:	f043 0308 	orr.w	r3, r3, #8
 8015ad6:	71fb      	strb	r3, [r7, #7]
 8015ad8:	e010      	b.n	8015afc <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015ada:	7ebb      	ldrb	r3, [r7, #26]
 8015adc:	f003 0311 	and.w	r3, r3, #17
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d003      	beq.n	8015aec <f_open+0xe6>
					res = FR_DENIED;
 8015ae4:	2307      	movs	r3, #7
 8015ae6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015aea:	e007      	b.n	8015afc <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015aec:	79fb      	ldrb	r3, [r7, #7]
 8015aee:	f003 0304 	and.w	r3, r3, #4
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d002      	beq.n	8015afc <f_open+0xf6>
 8015af6:	2308      	movs	r3, #8
 8015af8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015afc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d168      	bne.n	8015bd6 <f_open+0x1d0>
 8015b04:	79fb      	ldrb	r3, [r7, #7]
 8015b06:	f003 0308 	and.w	r3, r3, #8
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d063      	beq.n	8015bd6 <f_open+0x1d0>
				dw = GET_FATTIME();
 8015b0e:	f7fb fe21 	bl	8011754 <get_fattime>
 8015b12:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b16:	330e      	adds	r3, #14
 8015b18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7fe fae3 	bl	80140e6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b22:	3316      	adds	r3, #22
 8015b24:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7fe fadd 	bl	80140e6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b2e:	330b      	adds	r3, #11
 8015b30:	2220      	movs	r2, #32
 8015b32:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015b38:	4611      	mov	r1, r2
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7ff fa62 	bl	8015004 <ld_clust>
 8015b40:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015b46:	2200      	movs	r2, #0
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7ff fa7a 	bl	8015042 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b50:	331c      	adds	r3, #28
 8015b52:	2100      	movs	r1, #0
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7fe fac6 	bl	80140e6 <st_dword>
					fs->wflag = 1;
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	2201      	movs	r2, #1
 8015b5e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8015b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d037      	beq.n	8015bd6 <f_open+0x1d0>
						dw = fs->winsect;
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b6a:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8015b6c:	f107 0314 	add.w	r3, r7, #20
 8015b70:	2200      	movs	r2, #0
 8015b72:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7fe ff8d 	bl	8014a94 <remove_chain>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8015b80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d126      	bne.n	8015bd6 <f_open+0x1d0>
							res = move_window(fs, dw);
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7fe fd35 	bl	80145fc <move_window>
 8015b92:	4603      	mov	r3, r0
 8015b94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015b9c:	3a01      	subs	r2, #1
 8015b9e:	611a      	str	r2, [r3, #16]
 8015ba0:	e019      	b.n	8015bd6 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d115      	bne.n	8015bd6 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015baa:	7ebb      	ldrb	r3, [r7, #26]
 8015bac:	f003 0310 	and.w	r3, r3, #16
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d003      	beq.n	8015bbc <f_open+0x1b6>
					res = FR_NO_FILE;
 8015bb4:	2304      	movs	r3, #4
 8015bb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015bba:	e00c      	b.n	8015bd6 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015bbc:	79fb      	ldrb	r3, [r7, #7]
 8015bbe:	f003 0302 	and.w	r3, r3, #2
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d007      	beq.n	8015bd6 <f_open+0x1d0>
 8015bc6:	7ebb      	ldrb	r3, [r7, #26]
 8015bc8:	f003 0301 	and.w	r3, r3, #1
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d002      	beq.n	8015bd6 <f_open+0x1d0>
						res = FR_DENIED;
 8015bd0:	2307      	movs	r3, #7
 8015bd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8015bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d126      	bne.n	8015c2c <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015bde:	79fb      	ldrb	r3, [r7, #7]
 8015be0:	f003 0308 	and.w	r3, r3, #8
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d003      	beq.n	8015bf0 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8015be8:	79fb      	ldrb	r3, [r7, #7]
 8015bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015bee:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015bf0:	693b      	ldr	r3, [r7, #16]
 8015bf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8015bf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	2b01      	cmp	r3, #1
 8015c02:	bf8c      	ite	hi
 8015c04:	2301      	movhi	r3, #1
 8015c06:	2300      	movls	r3, #0
 8015c08:	b2db      	uxtb	r3, r3
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	f107 0314 	add.w	r3, r7, #20
 8015c10:	4611      	mov	r1, r2
 8015c12:	4618      	mov	r0, r3
 8015c14:	f7fe fbc0 	bl	8014398 <inc_lock>
 8015c18:	4602      	mov	r2, r0
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	691b      	ldr	r3, [r3, #16]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d102      	bne.n	8015c2c <f_open+0x226>
 8015c26:	2302      	movs	r3, #2
 8015c28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	f040 8095 	bne.w	8015d60 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015c3a:	4611      	mov	r1, r2
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7ff f9e1 	bl	8015004 <ld_clust>
 8015c42:	4602      	mov	r2, r0
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c4a:	331c      	adds	r3, #28
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7fe fa0c 	bl	801406a <ld_dword>
 8015c52:	4602      	mov	r2, r0
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015c5e:	693a      	ldr	r2, [r7, #16]
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8015c64:	693b      	ldr	r3, [r7, #16]
 8015c66:	88da      	ldrh	r2, [r3, #6]
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	79fa      	ldrb	r2, [r7, #7]
 8015c70:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	2200      	movs	r2, #0
 8015c76:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	2200      	movs	r2, #0
 8015c82:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	3330      	adds	r3, #48	@ 0x30
 8015c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c8c:	2100      	movs	r1, #0
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7fe fa76 	bl	8014180 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015c94:	79fb      	ldrb	r3, [r7, #7]
 8015c96:	f003 0320 	and.w	r3, r3, #32
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d060      	beq.n	8015d60 <f_open+0x35a>
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	68db      	ldr	r3, [r3, #12]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d05c      	beq.n	8015d60 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	68da      	ldr	r2, [r3, #12]
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	895b      	ldrh	r3, [r3, #10]
 8015cb2:	025b      	lsls	r3, r3, #9
 8015cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	689b      	ldr	r3, [r3, #8]
 8015cba:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	68db      	ldr	r3, [r3, #12]
 8015cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8015cc2:	e016      	b.n	8015cf2 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7fe fd52 	bl	8014772 <get_fat>
 8015cce:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8015cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015cd2:	2b01      	cmp	r3, #1
 8015cd4:	d802      	bhi.n	8015cdc <f_open+0x2d6>
 8015cd6:	2302      	movs	r3, #2
 8015cd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ce2:	d102      	bne.n	8015cea <f_open+0x2e4>
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015cea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015cee:	1ad3      	subs	r3, r2, r3
 8015cf0:	657b      	str	r3, [r7, #84]	@ 0x54
 8015cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d103      	bne.n	8015d02 <f_open+0x2fc>
 8015cfa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d8e0      	bhi.n	8015cc4 <f_open+0x2be>
				}
				fp->clust = clst;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015d06:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015d08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d127      	bne.n	8015d60 <f_open+0x35a>
 8015d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d022      	beq.n	8015d60 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015d1a:	693b      	ldr	r3, [r7, #16]
 8015d1c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7fe fd08 	bl	8014734 <clust2sect>
 8015d24:	6478      	str	r0, [r7, #68]	@ 0x44
 8015d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d103      	bne.n	8015d34 <f_open+0x32e>
						res = FR_INT_ERR;
 8015d2c:	2302      	movs	r3, #2
 8015d2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015d32:	e015      	b.n	8015d60 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015d36:	0a5a      	lsrs	r2, r3, #9
 8015d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d3a:	441a      	add	r2, r3
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	7858      	ldrb	r0, [r3, #1]
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	6a1a      	ldr	r2, [r3, #32]
 8015d4e:	2301      	movs	r3, #1
 8015d50:	f7fe f914 	bl	8013f7c <disk_read>
 8015d54:	4603      	mov	r3, r0
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d002      	beq.n	8015d60 <f_open+0x35a>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015d60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d002      	beq.n	8015d6e <f_open+0x368>
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8015d74:	4611      	mov	r1, r2
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7fe fa75 	bl	8014266 <unlock_fs>
 8015d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3760      	adds	r7, #96	@ 0x60
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b08c      	sub	sp, #48	@ 0x30
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	60f8      	str	r0, [r7, #12]
 8015d90:	60b9      	str	r1, [r7, #8]
 8015d92:	607a      	str	r2, [r7, #4]
 8015d94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015d96:	68bb      	ldr	r3, [r7, #8]
 8015d98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	f107 0210 	add.w	r2, r7, #16
 8015da6:	4611      	mov	r1, r2
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7ff fde5 	bl	8015978 <validate>
 8015dae:	4603      	mov	r3, r0
 8015db0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015db4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d107      	bne.n	8015dcc <f_write+0x44>
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	7d5b      	ldrb	r3, [r3, #21]
 8015dc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8015dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d009      	beq.n	8015de0 <f_write+0x58>
 8015dcc:	693b      	ldr	r3, [r7, #16]
 8015dce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8015dd2:	4611      	mov	r1, r2
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7fe fa46 	bl	8014266 <unlock_fs>
 8015dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015dde:	e173      	b.n	80160c8 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	7d1b      	ldrb	r3, [r3, #20]
 8015de4:	f003 0302 	and.w	r3, r3, #2
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d106      	bne.n	8015dfa <f_write+0x72>
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	2107      	movs	r1, #7
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7fe fa38 	bl	8014266 <unlock_fs>
 8015df6:	2307      	movs	r3, #7
 8015df8:	e166      	b.n	80160c8 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	699a      	ldr	r2, [r3, #24]
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	441a      	add	r2, r3
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	699b      	ldr	r3, [r3, #24]
 8015e06:	429a      	cmp	r2, r3
 8015e08:	f080 814b 	bcs.w	80160a2 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	699b      	ldr	r3, [r3, #24]
 8015e10:	43db      	mvns	r3, r3
 8015e12:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015e14:	e145      	b.n	80160a2 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	699b      	ldr	r3, [r3, #24]
 8015e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	f040 8101 	bne.w	8016026 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	699b      	ldr	r3, [r3, #24]
 8015e28:	0a5b      	lsrs	r3, r3, #9
 8015e2a:	693a      	ldr	r2, [r7, #16]
 8015e2c:	8952      	ldrh	r2, [r2, #10]
 8015e2e:	3a01      	subs	r2, #1
 8015e30:	4013      	ands	r3, r2
 8015e32:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015e34:	69bb      	ldr	r3, [r7, #24]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d14d      	bne.n	8015ed6 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	699b      	ldr	r3, [r3, #24]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d10c      	bne.n	8015e5c <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	689b      	ldr	r3, [r3, #8]
 8015e46:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d11a      	bne.n	8015e84 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	2100      	movs	r1, #0
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7fe fe83 	bl	8014b5e <create_chain>
 8015e58:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015e5a:	e013      	b.n	8015e84 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d007      	beq.n	8015e74 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	699b      	ldr	r3, [r3, #24]
 8015e68:	4619      	mov	r1, r3
 8015e6a:	68f8      	ldr	r0, [r7, #12]
 8015e6c:	f7fe ff0f 	bl	8014c8e <clmt_clust>
 8015e70:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015e72:	e007      	b.n	8015e84 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015e74:	68fa      	ldr	r2, [r7, #12]
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	69db      	ldr	r3, [r3, #28]
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	4610      	mov	r0, r2
 8015e7e:	f7fe fe6e 	bl	8014b5e <create_chain>
 8015e82:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	f000 8110 	beq.w	80160ac <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e8e:	2b01      	cmp	r3, #1
 8015e90:	d109      	bne.n	8015ea6 <f_write+0x11e>
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	2202      	movs	r2, #2
 8015e96:	755a      	strb	r2, [r3, #21]
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	2102      	movs	r1, #2
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	f7fe f9e2 	bl	8014266 <unlock_fs>
 8015ea2:	2302      	movs	r3, #2
 8015ea4:	e110      	b.n	80160c8 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eac:	d109      	bne.n	8015ec2 <f_write+0x13a>
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2201      	movs	r2, #1
 8015eb2:	755a      	strb	r2, [r3, #21]
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	2101      	movs	r1, #1
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7fe f9d4 	bl	8014266 <unlock_fs>
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	e102      	b.n	80160c8 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ec6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	689b      	ldr	r3, [r3, #8]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d102      	bne.n	8015ed6 <f_write+0x14e>
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ed4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	7d1b      	ldrb	r3, [r3, #20]
 8015eda:	b25b      	sxtb	r3, r3
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	da1d      	bge.n	8015f1c <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	7858      	ldrb	r0, [r3, #1]
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	6a1a      	ldr	r2, [r3, #32]
 8015eee:	2301      	movs	r3, #1
 8015ef0:	f7fe f864 	bl	8013fbc <disk_write>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d009      	beq.n	8015f0e <f_write+0x186>
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2201      	movs	r2, #1
 8015efe:	755a      	strb	r2, [r3, #21]
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	2101      	movs	r1, #1
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7fe f9ae 	bl	8014266 <unlock_fs>
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	e0dc      	b.n	80160c8 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	7d1b      	ldrb	r3, [r3, #20]
 8015f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f16:	b2da      	uxtb	r2, r3
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015f1c:	693a      	ldr	r2, [r7, #16]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	69db      	ldr	r3, [r3, #28]
 8015f22:	4619      	mov	r1, r3
 8015f24:	4610      	mov	r0, r2
 8015f26:	f7fe fc05 	bl	8014734 <clust2sect>
 8015f2a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d109      	bne.n	8015f46 <f_write+0x1be>
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	2202      	movs	r2, #2
 8015f36:	755a      	strb	r2, [r3, #21]
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	2102      	movs	r1, #2
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f7fe f992 	bl	8014266 <unlock_fs>
 8015f42:	2302      	movs	r3, #2
 8015f44:	e0c0      	b.n	80160c8 <f_write+0x340>
			sect += csect;
 8015f46:	697a      	ldr	r2, [r7, #20]
 8015f48:	69bb      	ldr	r3, [r7, #24]
 8015f4a:	4413      	add	r3, r2
 8015f4c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	0a5b      	lsrs	r3, r3, #9
 8015f52:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015f54:	6a3b      	ldr	r3, [r7, #32]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d041      	beq.n	8015fde <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015f5a:	69ba      	ldr	r2, [r7, #24]
 8015f5c:	6a3b      	ldr	r3, [r7, #32]
 8015f5e:	4413      	add	r3, r2
 8015f60:	693a      	ldr	r2, [r7, #16]
 8015f62:	8952      	ldrh	r2, [r2, #10]
 8015f64:	4293      	cmp	r3, r2
 8015f66:	d905      	bls.n	8015f74 <f_write+0x1ec>
					cc = fs->csize - csect;
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	895b      	ldrh	r3, [r3, #10]
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	69bb      	ldr	r3, [r7, #24]
 8015f70:	1ad3      	subs	r3, r2, r3
 8015f72:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	7858      	ldrb	r0, [r3, #1]
 8015f78:	6a3b      	ldr	r3, [r7, #32]
 8015f7a:	697a      	ldr	r2, [r7, #20]
 8015f7c:	69f9      	ldr	r1, [r7, #28]
 8015f7e:	f7fe f81d 	bl	8013fbc <disk_write>
 8015f82:	4603      	mov	r3, r0
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d009      	beq.n	8015f9c <f_write+0x214>
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	2201      	movs	r2, #1
 8015f8c:	755a      	strb	r2, [r3, #21]
 8015f8e:	693b      	ldr	r3, [r7, #16]
 8015f90:	2101      	movs	r1, #1
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7fe f967 	bl	8014266 <unlock_fs>
 8015f98:	2301      	movs	r3, #1
 8015f9a:	e095      	b.n	80160c8 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	6a1a      	ldr	r2, [r3, #32]
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	1ad3      	subs	r3, r2, r3
 8015fa4:	6a3a      	ldr	r2, [r7, #32]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d915      	bls.n	8015fd6 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	6a1a      	ldr	r2, [r3, #32]
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	1ad3      	subs	r3, r2, r3
 8015fb8:	025b      	lsls	r3, r3, #9
 8015fba:	69fa      	ldr	r2, [r7, #28]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015fc2:	4619      	mov	r1, r3
 8015fc4:	f7fe f8bb 	bl	801413e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	7d1b      	ldrb	r3, [r3, #20]
 8015fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015fd6:	6a3b      	ldr	r3, [r7, #32]
 8015fd8:	025b      	lsls	r3, r3, #9
 8015fda:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8015fdc:	e044      	b.n	8016068 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	6a1b      	ldr	r3, [r3, #32]
 8015fe2:	697a      	ldr	r2, [r7, #20]
 8015fe4:	429a      	cmp	r2, r3
 8015fe6:	d01b      	beq.n	8016020 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	699a      	ldr	r2, [r3, #24]
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d215      	bcs.n	8016020 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	7858      	ldrb	r0, [r3, #1]
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015ffe:	2301      	movs	r3, #1
 8016000:	697a      	ldr	r2, [r7, #20]
 8016002:	f7fd ffbb 	bl	8013f7c <disk_read>
 8016006:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016008:	2b00      	cmp	r3, #0
 801600a:	d009      	beq.n	8016020 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2201      	movs	r2, #1
 8016010:	755a      	strb	r2, [r3, #21]
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	2101      	movs	r1, #1
 8016016:	4618      	mov	r0, r3
 8016018:	f7fe f925 	bl	8014266 <unlock_fs>
 801601c:	2301      	movs	r3, #1
 801601e:	e053      	b.n	80160c8 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	697a      	ldr	r2, [r7, #20]
 8016024:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	699b      	ldr	r3, [r3, #24]
 801602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801602e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8016032:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	429a      	cmp	r2, r3
 801603a:	d901      	bls.n	8016040 <f_write+0x2b8>
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	699b      	ldr	r3, [r3, #24]
 801604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801604e:	4413      	add	r3, r2
 8016050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016052:	69f9      	ldr	r1, [r7, #28]
 8016054:	4618      	mov	r0, r3
 8016056:	f7fe f872 	bl	801413e <mem_cpy>
		fp->flag |= FA_DIRTY;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	7d1b      	ldrb	r3, [r3, #20]
 801605e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016062:	b2da      	uxtb	r2, r3
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016068:	69fa      	ldr	r2, [r7, #28]
 801606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801606c:	4413      	add	r3, r2
 801606e:	61fb      	str	r3, [r7, #28]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	699a      	ldr	r2, [r3, #24]
 8016074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016076:	441a      	add	r2, r3
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	619a      	str	r2, [r3, #24]
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	68da      	ldr	r2, [r3, #12]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	699b      	ldr	r3, [r3, #24]
 8016084:	429a      	cmp	r2, r3
 8016086:	bf38      	it	cc
 8016088:	461a      	movcc	r2, r3
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	60da      	str	r2, [r3, #12]
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	681a      	ldr	r2, [r3, #0]
 8016092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016094:	441a      	add	r2, r3
 8016096:	683b      	ldr	r3, [r7, #0]
 8016098:	601a      	str	r2, [r3, #0]
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801609e:	1ad3      	subs	r3, r2, r3
 80160a0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	f47f aeb6 	bne.w	8015e16 <f_write+0x8e>
 80160aa:	e000      	b.n	80160ae <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80160ac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	7d1b      	ldrb	r3, [r3, #20]
 80160b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160b6:	b2da      	uxtb	r2, r3
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80160bc:	693b      	ldr	r3, [r7, #16]
 80160be:	2100      	movs	r1, #0
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7fe f8d0 	bl	8014266 <unlock_fs>
 80160c6:	2300      	movs	r3, #0
}
 80160c8:	4618      	mov	r0, r3
 80160ca:	3730      	adds	r7, #48	@ 0x30
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b086      	sub	sp, #24
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f107 0208 	add.w	r2, r7, #8
 80160de:	4611      	mov	r1, r2
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7ff fc49 	bl	8015978 <validate>
 80160e6:	4603      	mov	r3, r0
 80160e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80160ea:	7dfb      	ldrb	r3, [r7, #23]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d16d      	bne.n	80161cc <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	7d1b      	ldrb	r3, [r3, #20]
 80160f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d067      	beq.n	80161cc <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	7d1b      	ldrb	r3, [r3, #20]
 8016100:	b25b      	sxtb	r3, r3
 8016102:	2b00      	cmp	r3, #0
 8016104:	da1a      	bge.n	801613c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	7858      	ldrb	r0, [r3, #1]
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6a1a      	ldr	r2, [r3, #32]
 8016114:	2301      	movs	r3, #1
 8016116:	f7fd ff51 	bl	8013fbc <disk_write>
 801611a:	4603      	mov	r3, r0
 801611c:	2b00      	cmp	r3, #0
 801611e:	d006      	beq.n	801612e <f_sync+0x5e>
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	2101      	movs	r1, #1
 8016124:	4618      	mov	r0, r3
 8016126:	f7fe f89e 	bl	8014266 <unlock_fs>
 801612a:	2301      	movs	r3, #1
 801612c:	e055      	b.n	80161da <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	7d1b      	ldrb	r3, [r3, #20]
 8016132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016136:	b2da      	uxtb	r2, r3
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801613c:	f7fb fb0a 	bl	8011754 <get_fattime>
 8016140:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016142:	68ba      	ldr	r2, [r7, #8]
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016148:	4619      	mov	r1, r3
 801614a:	4610      	mov	r0, r2
 801614c:	f7fe fa56 	bl	80145fc <move_window>
 8016150:	4603      	mov	r3, r0
 8016152:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016154:	7dfb      	ldrb	r3, [r7, #23]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d138      	bne.n	80161cc <f_sync+0xfc>
					dir = fp->dir_ptr;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801615e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	330b      	adds	r3, #11
 8016164:	781a      	ldrb	r2, [r3, #0]
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	330b      	adds	r3, #11
 801616a:	f042 0220 	orr.w	r2, r2, #32
 801616e:	b2d2      	uxtb	r2, r2
 8016170:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	6818      	ldr	r0, [r3, #0]
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	689b      	ldr	r3, [r3, #8]
 801617a:	461a      	mov	r2, r3
 801617c:	68f9      	ldr	r1, [r7, #12]
 801617e:	f7fe ff60 	bl	8015042 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	f103 021c 	add.w	r2, r3, #28
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	4619      	mov	r1, r3
 801618e:	4610      	mov	r0, r2
 8016190:	f7fd ffa9 	bl	80140e6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	3316      	adds	r3, #22
 8016198:	6939      	ldr	r1, [r7, #16]
 801619a:	4618      	mov	r0, r3
 801619c:	f7fd ffa3 	bl	80140e6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	3312      	adds	r3, #18
 80161a4:	2100      	movs	r1, #0
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7fd ff82 	bl	80140b0 <st_word>
					fs->wflag = 1;
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	2201      	movs	r2, #1
 80161b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	4618      	mov	r0, r3
 80161b6:	f7fe fa4f 	bl	8014658 <sync_fs>
 80161ba:	4603      	mov	r3, r0
 80161bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	7d1b      	ldrb	r3, [r3, #20]
 80161c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80161c6:	b2da      	uxtb	r2, r3
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	7dfa      	ldrb	r2, [r7, #23]
 80161d0:	4611      	mov	r1, r2
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7fe f847 	bl	8014266 <unlock_fs>
 80161d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3718      	adds	r7, #24
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}

080161e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80161e2:	b580      	push	{r7, lr}
 80161e4:	b084      	sub	sp, #16
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f7ff ff70 	bl	80160d0 <f_sync>
 80161f0:	4603      	mov	r3, r0
 80161f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80161f4:	7bfb      	ldrb	r3, [r7, #15]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d11d      	bne.n	8016236 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f107 0208 	add.w	r2, r7, #8
 8016200:	4611      	mov	r1, r2
 8016202:	4618      	mov	r0, r3
 8016204:	f7ff fbb8 	bl	8015978 <validate>
 8016208:	4603      	mov	r3, r0
 801620a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801620c:	7bfb      	ldrb	r3, [r7, #15]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d111      	bne.n	8016236 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	691b      	ldr	r3, [r3, #16]
 8016216:	4618      	mov	r0, r3
 8016218:	f7fe f94c 	bl	80144b4 <dec_lock>
 801621c:	4603      	mov	r3, r0
 801621e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8016220:	7bfb      	ldrb	r3, [r7, #15]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d102      	bne.n	801622c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	2200      	movs	r2, #0
 801622a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	2100      	movs	r1, #0
 8016230:	4618      	mov	r0, r3
 8016232:	f7fe f818 	bl	8014266 <unlock_fs>
#endif
		}
	}
	return res;
 8016236:	7bfb      	ldrb	r3, [r7, #15]
}
 8016238:	4618      	mov	r0, r3
 801623a:	3710      	adds	r7, #16
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}

08016240 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016240:	b480      	push	{r7}
 8016242:	b087      	sub	sp, #28
 8016244:	af00      	add	r7, sp, #0
 8016246:	60f8      	str	r0, [r7, #12]
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	4613      	mov	r3, r2
 801624c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801624e:	2301      	movs	r3, #1
 8016250:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016252:	2300      	movs	r3, #0
 8016254:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016256:	4b1f      	ldr	r3, [pc, #124]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 8016258:	7a5b      	ldrb	r3, [r3, #9]
 801625a:	b2db      	uxtb	r3, r3
 801625c:	2b00      	cmp	r3, #0
 801625e:	d131      	bne.n	80162c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016260:	4b1c      	ldr	r3, [pc, #112]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 8016262:	7a5b      	ldrb	r3, [r3, #9]
 8016264:	b2db      	uxtb	r3, r3
 8016266:	461a      	mov	r2, r3
 8016268:	4b1a      	ldr	r3, [pc, #104]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 801626a:	2100      	movs	r1, #0
 801626c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801626e:	4b19      	ldr	r3, [pc, #100]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 8016270:	7a5b      	ldrb	r3, [r3, #9]
 8016272:	b2db      	uxtb	r3, r3
 8016274:	4a17      	ldr	r2, [pc, #92]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 8016276:	009b      	lsls	r3, r3, #2
 8016278:	4413      	add	r3, r2
 801627a:	68fa      	ldr	r2, [r7, #12]
 801627c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801627e:	4b15      	ldr	r3, [pc, #84]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 8016280:	7a5b      	ldrb	r3, [r3, #9]
 8016282:	b2db      	uxtb	r3, r3
 8016284:	461a      	mov	r2, r3
 8016286:	4b13      	ldr	r3, [pc, #76]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 8016288:	4413      	add	r3, r2
 801628a:	79fa      	ldrb	r2, [r7, #7]
 801628c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801628e:	4b11      	ldr	r3, [pc, #68]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 8016290:	7a5b      	ldrb	r3, [r3, #9]
 8016292:	b2db      	uxtb	r3, r3
 8016294:	1c5a      	adds	r2, r3, #1
 8016296:	b2d1      	uxtb	r1, r2
 8016298:	4a0e      	ldr	r2, [pc, #56]	@ (80162d4 <FATFS_LinkDriverEx+0x94>)
 801629a:	7251      	strb	r1, [r2, #9]
 801629c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801629e:	7dbb      	ldrb	r3, [r7, #22]
 80162a0:	3330      	adds	r3, #48	@ 0x30
 80162a2:	b2da      	uxtb	r2, r3
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	3301      	adds	r3, #1
 80162ac:	223a      	movs	r2, #58	@ 0x3a
 80162ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	3302      	adds	r3, #2
 80162b4:	222f      	movs	r2, #47	@ 0x2f
 80162b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	3303      	adds	r3, #3
 80162bc:	2200      	movs	r2, #0
 80162be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80162c0:	2300      	movs	r3, #0
 80162c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80162c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	371c      	adds	r7, #28
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	200015bc 	.word	0x200015bc

080162d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80162e2:	2200      	movs	r2, #0
 80162e4:	6839      	ldr	r1, [r7, #0]
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f7ff ffaa 	bl	8016240 <FATFS_LinkDriverEx>
 80162ec:	4603      	mov	r3, r0
}
 80162ee:	4618      	mov	r0, r3
 80162f0:	3708      	adds	r7, #8
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}

080162f6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80162f6:	b580      	push	{r7, lr}
 80162f8:	b084      	sub	sp, #16
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80162fe:	2300      	movs	r3, #0
 8016300:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8016302:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f000 f8b6 	bl	8016478 <osSemaphoreWait>
 801630c:	4603      	mov	r3, r0
 801630e:	2b00      	cmp	r3, #0
 8016310:	d101      	bne.n	8016316 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8016312:	2301      	movs	r3, #1
 8016314:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8016316:	68fb      	ldr	r3, [r7, #12]
}
 8016318:	4618      	mov	r0, r3
 801631a:	3710      	adds	r7, #16
 801631c:	46bd      	mov	sp, r7
 801631e:	bd80      	pop	{r7, pc}

08016320 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f000 f8f3 	bl	8016514 <osSemaphoreRelease>
#endif
}
 801632e:	bf00      	nop
 8016330:	3708      	adds	r7, #8
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}

08016336 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8016336:	b480      	push	{r7}
 8016338:	b085      	sub	sp, #20
 801633a:	af00      	add	r7, sp, #0
 801633c:	4603      	mov	r3, r0
 801633e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016340:	2300      	movs	r3, #0
 8016342:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8016344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016348:	2b84      	cmp	r3, #132	@ 0x84
 801634a:	d005      	beq.n	8016358 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801634c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	4413      	add	r3, r2
 8016354:	3303      	adds	r3, #3
 8016356:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016358:	68fb      	ldr	r3, [r7, #12]
}
 801635a:	4618      	mov	r0, r3
 801635c:	3714      	adds	r7, #20
 801635e:	46bd      	mov	sp, r7
 8016360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016364:	4770      	bx	lr

08016366 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8016366:	b480      	push	{r7}
 8016368:	b083      	sub	sp, #12
 801636a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801636c:	f3ef 8305 	mrs	r3, IPSR
 8016370:	607b      	str	r3, [r7, #4]
  return(result);
 8016372:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8016374:	2b00      	cmp	r3, #0
 8016376:	bf14      	ite	ne
 8016378:	2301      	movne	r3, #1
 801637a:	2300      	moveq	r3, #0
 801637c:	b2db      	uxtb	r3, r3
}
 801637e:	4618      	mov	r0, r3
 8016380:	370c      	adds	r7, #12
 8016382:	46bd      	mov	sp, r7
 8016384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016388:	4770      	bx	lr

0801638a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801638a:	b580      	push	{r7, lr}
 801638c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801638e:	f001 fc0d 	bl	8017bac <vTaskStartScheduler>
  
  return osOK;
 8016392:	2300      	movs	r3, #0
}
 8016394:	4618      	mov	r0, r3
 8016396:	bd80      	pop	{r7, pc}

08016398 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801639c:	f7ff ffe3 	bl	8016366 <inHandlerMode>
 80163a0:	4603      	mov	r3, r0
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d003      	beq.n	80163ae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80163a6:	f001 fd25 	bl	8017df4 <xTaskGetTickCountFromISR>
 80163aa:	4603      	mov	r3, r0
 80163ac:	e002      	b.n	80163b4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80163ae:	f001 fd11 	bl	8017dd4 <xTaskGetTickCount>
 80163b2:	4603      	mov	r3, r0
  }
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80163b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ba:	b089      	sub	sp, #36	@ 0x24
 80163bc:	af04      	add	r7, sp, #16
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	695b      	ldr	r3, [r3, #20]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d020      	beq.n	801640c <osThreadCreate+0x54>
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	699b      	ldr	r3, [r3, #24]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d01c      	beq.n	801640c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	685c      	ldr	r4, [r3, #4]
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	691e      	ldr	r6, [r3, #16]
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7ff ffa6 	bl	8016336 <makeFreeRtosPriority>
 80163ea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	695b      	ldr	r3, [r3, #20]
 80163f0:	687a      	ldr	r2, [r7, #4]
 80163f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80163f4:	9202      	str	r2, [sp, #8]
 80163f6:	9301      	str	r3, [sp, #4]
 80163f8:	9100      	str	r1, [sp, #0]
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	4632      	mov	r2, r6
 80163fe:	4629      	mov	r1, r5
 8016400:	4620      	mov	r0, r4
 8016402:	f001 f9f1 	bl	80177e8 <xTaskCreateStatic>
 8016406:	4603      	mov	r3, r0
 8016408:	60fb      	str	r3, [r7, #12]
 801640a:	e01c      	b.n	8016446 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	685c      	ldr	r4, [r3, #4]
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016418:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016420:	4618      	mov	r0, r3
 8016422:	f7ff ff88 	bl	8016336 <makeFreeRtosPriority>
 8016426:	4602      	mov	r2, r0
 8016428:	f107 030c 	add.w	r3, r7, #12
 801642c:	9301      	str	r3, [sp, #4]
 801642e:	9200      	str	r2, [sp, #0]
 8016430:	683b      	ldr	r3, [r7, #0]
 8016432:	4632      	mov	r2, r6
 8016434:	4629      	mov	r1, r5
 8016436:	4620      	mov	r0, r4
 8016438:	f001 fa3c 	bl	80178b4 <xTaskCreate>
 801643c:	4603      	mov	r3, r0
 801643e:	2b01      	cmp	r3, #1
 8016440:	d001      	beq.n	8016446 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8016442:	2300      	movs	r3, #0
 8016444:	e000      	b.n	8016448 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8016446:	68fb      	ldr	r3, [r7, #12]
}
 8016448:	4618      	mov	r0, r3
 801644a:	3714      	adds	r7, #20
 801644c:	46bd      	mov	sp, r7
 801644e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016450 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b084      	sub	sp, #16
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d001      	beq.n	8016466 <osDelay+0x16>
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	e000      	b.n	8016468 <osDelay+0x18>
 8016466:	2301      	movs	r3, #1
 8016468:	4618      	mov	r0, r3
 801646a:	f001 fb67 	bl	8017b3c <vTaskDelay>
  
  return osOK;
 801646e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016470:	4618      	mov	r0, r3
 8016472:	3710      	adds	r7, #16
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}

08016478 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b084      	sub	sp, #16
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
 8016480:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8016482:	2300      	movs	r3, #0
 8016484:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d101      	bne.n	8016490 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801648c:	2380      	movs	r3, #128	@ 0x80
 801648e:	e03a      	b.n	8016506 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8016490:	2300      	movs	r3, #0
 8016492:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801649a:	d103      	bne.n	80164a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801649c:	f04f 33ff 	mov.w	r3, #4294967295
 80164a0:	60fb      	str	r3, [r7, #12]
 80164a2:	e009      	b.n	80164b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d006      	beq.n	80164b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d101      	bne.n	80164b8 <osSemaphoreWait+0x40>
      ticks = 1;
 80164b4:	2301      	movs	r3, #1
 80164b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80164b8:	f7ff ff55 	bl	8016366 <inHandlerMode>
 80164bc:	4603      	mov	r3, r0
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d017      	beq.n	80164f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80164c2:	f107 0308 	add.w	r3, r7, #8
 80164c6:	461a      	mov	r2, r3
 80164c8:	2100      	movs	r1, #0
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f000 ff9a 	bl	8017404 <xQueueReceiveFromISR>
 80164d0:	4603      	mov	r3, r0
 80164d2:	2b01      	cmp	r3, #1
 80164d4:	d001      	beq.n	80164da <osSemaphoreWait+0x62>
      return osErrorOS;
 80164d6:	23ff      	movs	r3, #255	@ 0xff
 80164d8:	e015      	b.n	8016506 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80164da:	68bb      	ldr	r3, [r7, #8]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d011      	beq.n	8016504 <osSemaphoreWait+0x8c>
 80164e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016510 <osSemaphoreWait+0x98>)
 80164e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164e6:	601a      	str	r2, [r3, #0]
 80164e8:	f3bf 8f4f 	dsb	sy
 80164ec:	f3bf 8f6f 	isb	sy
 80164f0:	e008      	b.n	8016504 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80164f2:	68f9      	ldr	r1, [r7, #12]
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f000 fe6d 	bl	80171d4 <xQueueSemaphoreTake>
 80164fa:	4603      	mov	r3, r0
 80164fc:	2b01      	cmp	r3, #1
 80164fe:	d001      	beq.n	8016504 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8016500:	23ff      	movs	r3, #255	@ 0xff
 8016502:	e000      	b.n	8016506 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8016504:	2300      	movs	r3, #0
}
 8016506:	4618      	mov	r0, r3
 8016508:	3710      	adds	r7, #16
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}
 801650e:	bf00      	nop
 8016510:	e000ed04 	.word	0xe000ed04

08016514 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b084      	sub	sp, #16
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801651c:	2300      	movs	r3, #0
 801651e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8016520:	2300      	movs	r3, #0
 8016522:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8016524:	f7ff ff1f 	bl	8016366 <inHandlerMode>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	d016      	beq.n	801655c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801652e:	f107 0308 	add.w	r3, r7, #8
 8016532:	4619      	mov	r1, r3
 8016534:	6878      	ldr	r0, [r7, #4]
 8016536:	f000 fccc 	bl	8016ed2 <xQueueGiveFromISR>
 801653a:	4603      	mov	r3, r0
 801653c:	2b01      	cmp	r3, #1
 801653e:	d001      	beq.n	8016544 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8016540:	23ff      	movs	r3, #255	@ 0xff
 8016542:	e017      	b.n	8016574 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d013      	beq.n	8016572 <osSemaphoreRelease+0x5e>
 801654a:	4b0c      	ldr	r3, [pc, #48]	@ (801657c <osSemaphoreRelease+0x68>)
 801654c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016550:	601a      	str	r2, [r3, #0]
 8016552:	f3bf 8f4f 	dsb	sy
 8016556:	f3bf 8f6f 	isb	sy
 801655a:	e00a      	b.n	8016572 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801655c:	2300      	movs	r3, #0
 801655e:	2200      	movs	r2, #0
 8016560:	2100      	movs	r1, #0
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f000 fb08 	bl	8016b78 <xQueueGenericSend>
 8016568:	4603      	mov	r3, r0
 801656a:	2b01      	cmp	r3, #1
 801656c:	d001      	beq.n	8016572 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801656e:	23ff      	movs	r3, #255	@ 0xff
 8016570:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8016572:	68fb      	ldr	r3, [r7, #12]
}
 8016574:	4618      	mov	r0, r3
 8016576:	3710      	adds	r7, #16
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	e000ed04 	.word	0xe000ed04

08016580 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8016580:	b590      	push	{r4, r7, lr}
 8016582:	b085      	sub	sp, #20
 8016584:	af02      	add	r7, sp, #8
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	689b      	ldr	r3, [r3, #8]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d011      	beq.n	80165b6 <osMessageCreate+0x36>
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	68db      	ldr	r3, [r3, #12]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d00d      	beq.n	80165b6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	6818      	ldr	r0, [r3, #0]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6859      	ldr	r1, [r3, #4]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	689a      	ldr	r2, [r3, #8]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	68db      	ldr	r3, [r3, #12]
 80165aa:	2400      	movs	r4, #0
 80165ac:	9400      	str	r4, [sp, #0]
 80165ae:	f000 f9f9 	bl	80169a4 <xQueueGenericCreateStatic>
 80165b2:	4603      	mov	r3, r0
 80165b4:	e008      	b.n	80165c8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	6818      	ldr	r0, [r3, #0]
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	2200      	movs	r2, #0
 80165c0:	4619      	mov	r1, r3
 80165c2:	f000 fa76 	bl	8016ab2 <xQueueGenericCreate>
 80165c6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	370c      	adds	r7, #12
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd90      	pop	{r4, r7, pc}

080165d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b086      	sub	sp, #24
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	60b9      	str	r1, [r7, #8]
 80165da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80165dc:	2300      	movs	r3, #0
 80165de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d101      	bne.n	80165ee <osMessagePut+0x1e>
    ticks = 1;
 80165ea:	2301      	movs	r3, #1
 80165ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80165ee:	f7ff feba 	bl	8016366 <inHandlerMode>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d018      	beq.n	801662a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80165f8:	f107 0210 	add.w	r2, r7, #16
 80165fc:	f107 0108 	add.w	r1, r7, #8
 8016600:	2300      	movs	r3, #0
 8016602:	68f8      	ldr	r0, [r7, #12]
 8016604:	f000 fbc2 	bl	8016d8c <xQueueGenericSendFromISR>
 8016608:	4603      	mov	r3, r0
 801660a:	2b01      	cmp	r3, #1
 801660c:	d001      	beq.n	8016612 <osMessagePut+0x42>
      return osErrorOS;
 801660e:	23ff      	movs	r3, #255	@ 0xff
 8016610:	e018      	b.n	8016644 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d014      	beq.n	8016642 <osMessagePut+0x72>
 8016618:	4b0c      	ldr	r3, [pc, #48]	@ (801664c <osMessagePut+0x7c>)
 801661a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801661e:	601a      	str	r2, [r3, #0]
 8016620:	f3bf 8f4f 	dsb	sy
 8016624:	f3bf 8f6f 	isb	sy
 8016628:	e00b      	b.n	8016642 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801662a:	f107 0108 	add.w	r1, r7, #8
 801662e:	2300      	movs	r3, #0
 8016630:	697a      	ldr	r2, [r7, #20]
 8016632:	68f8      	ldr	r0, [r7, #12]
 8016634:	f000 faa0 	bl	8016b78 <xQueueGenericSend>
 8016638:	4603      	mov	r3, r0
 801663a:	2b01      	cmp	r3, #1
 801663c:	d001      	beq.n	8016642 <osMessagePut+0x72>
      return osErrorOS;
 801663e:	23ff      	movs	r3, #255	@ 0xff
 8016640:	e000      	b.n	8016644 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016642:	2300      	movs	r3, #0
}
 8016644:	4618      	mov	r0, r3
 8016646:	3718      	adds	r7, #24
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}
 801664c:	e000ed04 	.word	0xe000ed04

08016650 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016650:	b590      	push	{r4, r7, lr}
 8016652:	b08b      	sub	sp, #44	@ 0x2c
 8016654:	af00      	add	r7, sp, #0
 8016656:	60f8      	str	r0, [r7, #12]
 8016658:	60b9      	str	r1, [r7, #8]
 801665a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8016660:	2300      	movs	r3, #0
 8016662:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d10a      	bne.n	8016680 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801666a:	2380      	movs	r3, #128	@ 0x80
 801666c:	617b      	str	r3, [r7, #20]
    return event;
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	461c      	mov	r4, r3
 8016672:	f107 0314 	add.w	r3, r7, #20
 8016676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801667a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801667e:	e054      	b.n	801672a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8016680:	2300      	movs	r3, #0
 8016682:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016684:	2300      	movs	r3, #0
 8016686:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801668e:	d103      	bne.n	8016698 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016690:	f04f 33ff 	mov.w	r3, #4294967295
 8016694:	627b      	str	r3, [r7, #36]	@ 0x24
 8016696:	e009      	b.n	80166ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d006      	beq.n	80166ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80166a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d101      	bne.n	80166ac <osMessageGet+0x5c>
      ticks = 1;
 80166a8:	2301      	movs	r3, #1
 80166aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80166ac:	f7ff fe5b 	bl	8016366 <inHandlerMode>
 80166b0:	4603      	mov	r3, r0
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d01c      	beq.n	80166f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80166b6:	f107 0220 	add.w	r2, r7, #32
 80166ba:	f107 0314 	add.w	r3, r7, #20
 80166be:	3304      	adds	r3, #4
 80166c0:	4619      	mov	r1, r3
 80166c2:	68b8      	ldr	r0, [r7, #8]
 80166c4:	f000 fe9e 	bl	8017404 <xQueueReceiveFromISR>
 80166c8:	4603      	mov	r3, r0
 80166ca:	2b01      	cmp	r3, #1
 80166cc:	d102      	bne.n	80166d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80166ce:	2310      	movs	r3, #16
 80166d0:	617b      	str	r3, [r7, #20]
 80166d2:	e001      	b.n	80166d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80166d4:	2300      	movs	r3, #0
 80166d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80166d8:	6a3b      	ldr	r3, [r7, #32]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d01d      	beq.n	801671a <osMessageGet+0xca>
 80166de:	4b15      	ldr	r3, [pc, #84]	@ (8016734 <osMessageGet+0xe4>)
 80166e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80166e4:	601a      	str	r2, [r3, #0]
 80166e6:	f3bf 8f4f 	dsb	sy
 80166ea:	f3bf 8f6f 	isb	sy
 80166ee:	e014      	b.n	801671a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80166f0:	f107 0314 	add.w	r3, r7, #20
 80166f4:	3304      	adds	r3, #4
 80166f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166f8:	4619      	mov	r1, r3
 80166fa:	68b8      	ldr	r0, [r7, #8]
 80166fc:	f000 fc82 	bl	8017004 <xQueueReceive>
 8016700:	4603      	mov	r3, r0
 8016702:	2b01      	cmp	r3, #1
 8016704:	d102      	bne.n	801670c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016706:	2310      	movs	r3, #16
 8016708:	617b      	str	r3, [r7, #20]
 801670a:	e006      	b.n	801671a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801670e:	2b00      	cmp	r3, #0
 8016710:	d101      	bne.n	8016716 <osMessageGet+0xc6>
 8016712:	2300      	movs	r3, #0
 8016714:	e000      	b.n	8016718 <osMessageGet+0xc8>
 8016716:	2340      	movs	r3, #64	@ 0x40
 8016718:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	461c      	mov	r4, r3
 801671e:	f107 0314 	add.w	r3, r7, #20
 8016722:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801672a:	68f8      	ldr	r0, [r7, #12]
 801672c:	372c      	adds	r7, #44	@ 0x2c
 801672e:	46bd      	mov	sp, r7
 8016730:	bd90      	pop	{r4, r7, pc}
 8016732:	bf00      	nop
 8016734:	e000ed04 	.word	0xe000ed04

08016738 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016740:	f7ff fe11 	bl	8016366 <inHandlerMode>
 8016744:	4603      	mov	r3, r0
 8016746:	2b00      	cmp	r3, #0
 8016748:	d004      	beq.n	8016754 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f000 ff03 	bl	8017556 <uxQueueMessagesWaitingFromISR>
 8016750:	4603      	mov	r3, r0
 8016752:	e003      	b.n	801675c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f000 fedd 	bl	8017514 <uxQueueMessagesWaiting>
 801675a:	4603      	mov	r3, r0
  }
}
 801675c:	4618      	mov	r0, r3
 801675e:	3708      	adds	r7, #8
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016764:	b480      	push	{r7}
 8016766:	b083      	sub	sp, #12
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f103 0208 	add.w	r2, r3, #8
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f04f 32ff 	mov.w	r2, #4294967295
 801677c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f103 0208 	add.w	r2, r3, #8
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f103 0208 	add.w	r2, r3, #8
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2200      	movs	r2, #0
 8016796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016798:	bf00      	nop
 801679a:	370c      	adds	r7, #12
 801679c:	46bd      	mov	sp, r7
 801679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a2:	4770      	bx	lr

080167a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2200      	movs	r2, #0
 80167b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80167b2:	bf00      	nop
 80167b4:	370c      	adds	r7, #12
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr

080167be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80167be:	b480      	push	{r7}
 80167c0:	b085      	sub	sp, #20
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]
 80167c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	68fa      	ldr	r2, [r7, #12]
 80167d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	689a      	ldr	r2, [r3, #8]
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	689b      	ldr	r3, [r3, #8]
 80167e0:	683a      	ldr	r2, [r7, #0]
 80167e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	683a      	ldr	r2, [r7, #0]
 80167e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	687a      	ldr	r2, [r7, #4]
 80167ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	1c5a      	adds	r2, r3, #1
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	601a      	str	r2, [r3, #0]
}
 80167fa:	bf00      	nop
 80167fc:	3714      	adds	r7, #20
 80167fe:	46bd      	mov	sp, r7
 8016800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016804:	4770      	bx	lr

08016806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016806:	b480      	push	{r7}
 8016808:	b085      	sub	sp, #20
 801680a:	af00      	add	r7, sp, #0
 801680c:	6078      	str	r0, [r7, #4]
 801680e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801681c:	d103      	bne.n	8016826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	691b      	ldr	r3, [r3, #16]
 8016822:	60fb      	str	r3, [r7, #12]
 8016824:	e00c      	b.n	8016840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	3308      	adds	r3, #8
 801682a:	60fb      	str	r3, [r7, #12]
 801682c:	e002      	b.n	8016834 <vListInsert+0x2e>
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	685b      	ldr	r3, [r3, #4]
 8016832:	60fb      	str	r3, [r7, #12]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	685b      	ldr	r3, [r3, #4]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	68ba      	ldr	r2, [r7, #8]
 801683c:	429a      	cmp	r2, r3
 801683e:	d2f6      	bcs.n	801682e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	685a      	ldr	r2, [r3, #4]
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	683a      	ldr	r2, [r7, #0]
 801684e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	68fa      	ldr	r2, [r7, #12]
 8016854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	683a      	ldr	r2, [r7, #0]
 801685a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	687a      	ldr	r2, [r7, #4]
 8016860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	1c5a      	adds	r2, r3, #1
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	601a      	str	r2, [r3, #0]
}
 801686c:	bf00      	nop
 801686e:	3714      	adds	r7, #20
 8016870:	46bd      	mov	sp, r7
 8016872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016876:	4770      	bx	lr

08016878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016878:	b480      	push	{r7}
 801687a:	b085      	sub	sp, #20
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	691b      	ldr	r3, [r3, #16]
 8016884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	687a      	ldr	r2, [r7, #4]
 801688c:	6892      	ldr	r2, [r2, #8]
 801688e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	689b      	ldr	r3, [r3, #8]
 8016894:	687a      	ldr	r2, [r7, #4]
 8016896:	6852      	ldr	r2, [r2, #4]
 8016898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	685b      	ldr	r3, [r3, #4]
 801689e:	687a      	ldr	r2, [r7, #4]
 80168a0:	429a      	cmp	r2, r3
 80168a2:	d103      	bne.n	80168ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	689a      	ldr	r2, [r3, #8]
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2200      	movs	r2, #0
 80168b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	1e5a      	subs	r2, r3, #1
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	681b      	ldr	r3, [r3, #0]
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3714      	adds	r7, #20
 80168c4:	46bd      	mov	sp, r7
 80168c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ca:	4770      	bx	lr

080168cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b084      	sub	sp, #16
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
 80168d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d10d      	bne.n	80168fc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80168e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168e4:	b672      	cpsid	i
 80168e6:	f383 8811 	msr	BASEPRI, r3
 80168ea:	f3bf 8f6f 	isb	sy
 80168ee:	f3bf 8f4f 	dsb	sy
 80168f2:	b662      	cpsie	i
 80168f4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80168f6:	bf00      	nop
 80168f8:	bf00      	nop
 80168fa:	e7fd      	b.n	80168f8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80168fc:	f002 f90e 	bl	8018b1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	681a      	ldr	r2, [r3, #0]
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016908:	68f9      	ldr	r1, [r7, #12]
 801690a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801690c:	fb01 f303 	mul.w	r3, r1, r3
 8016910:	441a      	add	r2, r3
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	2200      	movs	r2, #0
 801691a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	681a      	ldr	r2, [r3, #0]
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	681a      	ldr	r2, [r3, #0]
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801692c:	3b01      	subs	r3, #1
 801692e:	68f9      	ldr	r1, [r7, #12]
 8016930:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016932:	fb01 f303 	mul.w	r3, r1, r3
 8016936:	441a      	add	r2, r3
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	22ff      	movs	r2, #255	@ 0xff
 8016940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	22ff      	movs	r2, #255	@ 0xff
 8016948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d114      	bne.n	801697c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	691b      	ldr	r3, [r3, #16]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d01a      	beq.n	8016990 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	3310      	adds	r3, #16
 801695e:	4618      	mov	r0, r3
 8016960:	f001 fbc2 	bl	80180e8 <xTaskRemoveFromEventList>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d012      	beq.n	8016990 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801696a:	4b0d      	ldr	r3, [pc, #52]	@ (80169a0 <xQueueGenericReset+0xd4>)
 801696c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016970:	601a      	str	r2, [r3, #0]
 8016972:	f3bf 8f4f 	dsb	sy
 8016976:	f3bf 8f6f 	isb	sy
 801697a:	e009      	b.n	8016990 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	3310      	adds	r3, #16
 8016980:	4618      	mov	r0, r3
 8016982:	f7ff feef 	bl	8016764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	3324      	adds	r3, #36	@ 0x24
 801698a:	4618      	mov	r0, r3
 801698c:	f7ff feea 	bl	8016764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016990:	f002 f8fa 	bl	8018b88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016994:	2301      	movs	r3, #1
}
 8016996:	4618      	mov	r0, r3
 8016998:	3710      	adds	r7, #16
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	e000ed04 	.word	0xe000ed04

080169a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b08e      	sub	sp, #56	@ 0x38
 80169a8:	af02      	add	r7, sp, #8
 80169aa:	60f8      	str	r0, [r7, #12]
 80169ac:	60b9      	str	r1, [r7, #8]
 80169ae:	607a      	str	r2, [r7, #4]
 80169b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d10d      	bne.n	80169d4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80169b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169bc:	b672      	cpsid	i
 80169be:	f383 8811 	msr	BASEPRI, r3
 80169c2:	f3bf 8f6f 	isb	sy
 80169c6:	f3bf 8f4f 	dsb	sy
 80169ca:	b662      	cpsie	i
 80169cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80169ce:	bf00      	nop
 80169d0:	bf00      	nop
 80169d2:	e7fd      	b.n	80169d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d10d      	bne.n	80169f6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80169da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169de:	b672      	cpsid	i
 80169e0:	f383 8811 	msr	BASEPRI, r3
 80169e4:	f3bf 8f6f 	isb	sy
 80169e8:	f3bf 8f4f 	dsb	sy
 80169ec:	b662      	cpsie	i
 80169ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80169f0:	bf00      	nop
 80169f2:	bf00      	nop
 80169f4:	e7fd      	b.n	80169f2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d002      	beq.n	8016a02 <xQueueGenericCreateStatic+0x5e>
 80169fc:	68bb      	ldr	r3, [r7, #8]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d001      	beq.n	8016a06 <xQueueGenericCreateStatic+0x62>
 8016a02:	2301      	movs	r3, #1
 8016a04:	e000      	b.n	8016a08 <xQueueGenericCreateStatic+0x64>
 8016a06:	2300      	movs	r3, #0
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d10d      	bne.n	8016a28 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8016a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a10:	b672      	cpsid	i
 8016a12:	f383 8811 	msr	BASEPRI, r3
 8016a16:	f3bf 8f6f 	isb	sy
 8016a1a:	f3bf 8f4f 	dsb	sy
 8016a1e:	b662      	cpsie	i
 8016a20:	623b      	str	r3, [r7, #32]
}
 8016a22:	bf00      	nop
 8016a24:	bf00      	nop
 8016a26:	e7fd      	b.n	8016a24 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d102      	bne.n	8016a34 <xQueueGenericCreateStatic+0x90>
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d101      	bne.n	8016a38 <xQueueGenericCreateStatic+0x94>
 8016a34:	2301      	movs	r3, #1
 8016a36:	e000      	b.n	8016a3a <xQueueGenericCreateStatic+0x96>
 8016a38:	2300      	movs	r3, #0
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d10d      	bne.n	8016a5a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8016a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a42:	b672      	cpsid	i
 8016a44:	f383 8811 	msr	BASEPRI, r3
 8016a48:	f3bf 8f6f 	isb	sy
 8016a4c:	f3bf 8f4f 	dsb	sy
 8016a50:	b662      	cpsie	i
 8016a52:	61fb      	str	r3, [r7, #28]
}
 8016a54:	bf00      	nop
 8016a56:	bf00      	nop
 8016a58:	e7fd      	b.n	8016a56 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016a5a:	2348      	movs	r3, #72	@ 0x48
 8016a5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	2b48      	cmp	r3, #72	@ 0x48
 8016a62:	d00d      	beq.n	8016a80 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8016a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a68:	b672      	cpsid	i
 8016a6a:	f383 8811 	msr	BASEPRI, r3
 8016a6e:	f3bf 8f6f 	isb	sy
 8016a72:	f3bf 8f4f 	dsb	sy
 8016a76:	b662      	cpsie	i
 8016a78:	61bb      	str	r3, [r7, #24]
}
 8016a7a:	bf00      	nop
 8016a7c:	bf00      	nop
 8016a7e:	e7fd      	b.n	8016a7c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016a80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8016a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d00d      	beq.n	8016aa8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a8e:	2201      	movs	r2, #1
 8016a90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016a94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a9a:	9300      	str	r3, [sp, #0]
 8016a9c:	4613      	mov	r3, r2
 8016a9e:	687a      	ldr	r2, [r7, #4]
 8016aa0:	68b9      	ldr	r1, [r7, #8]
 8016aa2:	68f8      	ldr	r0, [r7, #12]
 8016aa4:	f000 f848 	bl	8016b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3730      	adds	r7, #48	@ 0x30
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}

08016ab2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016ab2:	b580      	push	{r7, lr}
 8016ab4:	b08a      	sub	sp, #40	@ 0x28
 8016ab6:	af02      	add	r7, sp, #8
 8016ab8:	60f8      	str	r0, [r7, #12]
 8016aba:	60b9      	str	r1, [r7, #8]
 8016abc:	4613      	mov	r3, r2
 8016abe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d10d      	bne.n	8016ae2 <xQueueGenericCreate+0x30>
	__asm volatile
 8016ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aca:	b672      	cpsid	i
 8016acc:	f383 8811 	msr	BASEPRI, r3
 8016ad0:	f3bf 8f6f 	isb	sy
 8016ad4:	f3bf 8f4f 	dsb	sy
 8016ad8:	b662      	cpsie	i
 8016ada:	613b      	str	r3, [r7, #16]
}
 8016adc:	bf00      	nop
 8016ade:	bf00      	nop
 8016ae0:	e7fd      	b.n	8016ade <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016ae2:	68bb      	ldr	r3, [r7, #8]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d102      	bne.n	8016aee <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	61fb      	str	r3, [r7, #28]
 8016aec:	e004      	b.n	8016af8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	68ba      	ldr	r2, [r7, #8]
 8016af2:	fb02 f303 	mul.w	r3, r2, r3
 8016af6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016af8:	69fb      	ldr	r3, [r7, #28]
 8016afa:	3348      	adds	r3, #72	@ 0x48
 8016afc:	4618      	mov	r0, r3
 8016afe:	f002 f93b 	bl	8018d78 <pvPortMalloc>
 8016b02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016b04:	69bb      	ldr	r3, [r7, #24]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d011      	beq.n	8016b2e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016b0a:	69bb      	ldr	r3, [r7, #24]
 8016b0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b0e:	697b      	ldr	r3, [r7, #20]
 8016b10:	3348      	adds	r3, #72	@ 0x48
 8016b12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016b14:	69bb      	ldr	r3, [r7, #24]
 8016b16:	2200      	movs	r2, #0
 8016b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b1c:	79fa      	ldrb	r2, [r7, #7]
 8016b1e:	69bb      	ldr	r3, [r7, #24]
 8016b20:	9300      	str	r3, [sp, #0]
 8016b22:	4613      	mov	r3, r2
 8016b24:	697a      	ldr	r2, [r7, #20]
 8016b26:	68b9      	ldr	r1, [r7, #8]
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	f000 f805 	bl	8016b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8016b30:	4618      	mov	r0, r3
 8016b32:	3720      	adds	r7, #32
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}

08016b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b084      	sub	sp, #16
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	60f8      	str	r0, [r7, #12]
 8016b40:	60b9      	str	r1, [r7, #8]
 8016b42:	607a      	str	r2, [r7, #4]
 8016b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d103      	bne.n	8016b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	69ba      	ldr	r2, [r7, #24]
 8016b50:	601a      	str	r2, [r3, #0]
 8016b52:	e002      	b.n	8016b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016b54:	69bb      	ldr	r3, [r7, #24]
 8016b56:	687a      	ldr	r2, [r7, #4]
 8016b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016b5a:	69bb      	ldr	r3, [r7, #24]
 8016b5c:	68fa      	ldr	r2, [r7, #12]
 8016b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016b60:	69bb      	ldr	r3, [r7, #24]
 8016b62:	68ba      	ldr	r2, [r7, #8]
 8016b64:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016b66:	2101      	movs	r1, #1
 8016b68:	69b8      	ldr	r0, [r7, #24]
 8016b6a:	f7ff feaf 	bl	80168cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016b6e:	bf00      	nop
 8016b70:	3710      	adds	r7, #16
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}
	...

08016b78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b08e      	sub	sp, #56	@ 0x38
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	60f8      	str	r0, [r7, #12]
 8016b80:	60b9      	str	r1, [r7, #8]
 8016b82:	607a      	str	r2, [r7, #4]
 8016b84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016b86:	2300      	movs	r3, #0
 8016b88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8016b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d10d      	bne.n	8016bb0 <xQueueGenericSend+0x38>
	__asm volatile
 8016b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b98:	b672      	cpsid	i
 8016b9a:	f383 8811 	msr	BASEPRI, r3
 8016b9e:	f3bf 8f6f 	isb	sy
 8016ba2:	f3bf 8f4f 	dsb	sy
 8016ba6:	b662      	cpsie	i
 8016ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016baa:	bf00      	nop
 8016bac:	bf00      	nop
 8016bae:	e7fd      	b.n	8016bac <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d103      	bne.n	8016bbe <xQueueGenericSend+0x46>
 8016bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d101      	bne.n	8016bc2 <xQueueGenericSend+0x4a>
 8016bbe:	2301      	movs	r3, #1
 8016bc0:	e000      	b.n	8016bc4 <xQueueGenericSend+0x4c>
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d10d      	bne.n	8016be4 <xQueueGenericSend+0x6c>
	__asm volatile
 8016bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bcc:	b672      	cpsid	i
 8016bce:	f383 8811 	msr	BASEPRI, r3
 8016bd2:	f3bf 8f6f 	isb	sy
 8016bd6:	f3bf 8f4f 	dsb	sy
 8016bda:	b662      	cpsie	i
 8016bdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016bde:	bf00      	nop
 8016be0:	bf00      	nop
 8016be2:	e7fd      	b.n	8016be0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	2b02      	cmp	r3, #2
 8016be8:	d103      	bne.n	8016bf2 <xQueueGenericSend+0x7a>
 8016bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016bee:	2b01      	cmp	r3, #1
 8016bf0:	d101      	bne.n	8016bf6 <xQueueGenericSend+0x7e>
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	e000      	b.n	8016bf8 <xQueueGenericSend+0x80>
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d10d      	bne.n	8016c18 <xQueueGenericSend+0xa0>
	__asm volatile
 8016bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c00:	b672      	cpsid	i
 8016c02:	f383 8811 	msr	BASEPRI, r3
 8016c06:	f3bf 8f6f 	isb	sy
 8016c0a:	f3bf 8f4f 	dsb	sy
 8016c0e:	b662      	cpsie	i
 8016c10:	623b      	str	r3, [r7, #32]
}
 8016c12:	bf00      	nop
 8016c14:	bf00      	nop
 8016c16:	e7fd      	b.n	8016c14 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c18:	f001 fc30 	bl	801847c <xTaskGetSchedulerState>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d102      	bne.n	8016c28 <xQueueGenericSend+0xb0>
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d101      	bne.n	8016c2c <xQueueGenericSend+0xb4>
 8016c28:	2301      	movs	r3, #1
 8016c2a:	e000      	b.n	8016c2e <xQueueGenericSend+0xb6>
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d10d      	bne.n	8016c4e <xQueueGenericSend+0xd6>
	__asm volatile
 8016c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c36:	b672      	cpsid	i
 8016c38:	f383 8811 	msr	BASEPRI, r3
 8016c3c:	f3bf 8f6f 	isb	sy
 8016c40:	f3bf 8f4f 	dsb	sy
 8016c44:	b662      	cpsie	i
 8016c46:	61fb      	str	r3, [r7, #28]
}
 8016c48:	bf00      	nop
 8016c4a:	bf00      	nop
 8016c4c:	e7fd      	b.n	8016c4a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016c4e:	f001 ff65 	bl	8018b1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d302      	bcc.n	8016c64 <xQueueGenericSend+0xec>
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	2b02      	cmp	r3, #2
 8016c62:	d129      	bne.n	8016cb8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016c64:	683a      	ldr	r2, [r7, #0]
 8016c66:	68b9      	ldr	r1, [r7, #8]
 8016c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016c6a:	f000 fcad 	bl	80175c8 <prvCopyDataToQueue>
 8016c6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d010      	beq.n	8016c9a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c7a:	3324      	adds	r3, #36	@ 0x24
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f001 fa33 	bl	80180e8 <xTaskRemoveFromEventList>
 8016c82:	4603      	mov	r3, r0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d013      	beq.n	8016cb0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016c88:	4b3f      	ldr	r3, [pc, #252]	@ (8016d88 <xQueueGenericSend+0x210>)
 8016c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016c8e:	601a      	str	r2, [r3, #0]
 8016c90:	f3bf 8f4f 	dsb	sy
 8016c94:	f3bf 8f6f 	isb	sy
 8016c98:	e00a      	b.n	8016cb0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d007      	beq.n	8016cb0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016ca0:	4b39      	ldr	r3, [pc, #228]	@ (8016d88 <xQueueGenericSend+0x210>)
 8016ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016ca6:	601a      	str	r2, [r3, #0]
 8016ca8:	f3bf 8f4f 	dsb	sy
 8016cac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016cb0:	f001 ff6a 	bl	8018b88 <vPortExitCritical>
				return pdPASS;
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	e063      	b.n	8016d80 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d103      	bne.n	8016cc6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016cbe:	f001 ff63 	bl	8018b88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	e05c      	b.n	8016d80 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d106      	bne.n	8016cda <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016ccc:	f107 0314 	add.w	r3, r7, #20
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f001 fa6f 	bl	80181b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016cda:	f001 ff55 	bl	8018b88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016cde:	f000 ffcb 	bl	8017c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016ce2:	f001 ff1b 	bl	8018b1c <vPortEnterCritical>
 8016ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016cec:	b25b      	sxtb	r3, r3
 8016cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cf2:	d103      	bne.n	8016cfc <xQueueGenericSend+0x184>
 8016cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016d02:	b25b      	sxtb	r3, r3
 8016d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d08:	d103      	bne.n	8016d12 <xQueueGenericSend+0x19a>
 8016d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016d12:	f001 ff39 	bl	8018b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d16:	1d3a      	adds	r2, r7, #4
 8016d18:	f107 0314 	add.w	r3, r7, #20
 8016d1c:	4611      	mov	r1, r2
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f001 fa5e 	bl	80181e0 <xTaskCheckForTimeOut>
 8016d24:	4603      	mov	r3, r0
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d124      	bne.n	8016d74 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016d2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016d2c:	f000 fd44 	bl	80177b8 <prvIsQueueFull>
 8016d30:	4603      	mov	r3, r0
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d018      	beq.n	8016d68 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d38:	3310      	adds	r3, #16
 8016d3a:	687a      	ldr	r2, [r7, #4]
 8016d3c:	4611      	mov	r1, r2
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f001 f9aa 	bl	8018098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016d46:	f000 fccf 	bl	80176e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016d4a:	f000 ffa3 	bl	8017c94 <xTaskResumeAll>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	f47f af7c 	bne.w	8016c4e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8016d56:	4b0c      	ldr	r3, [pc, #48]	@ (8016d88 <xQueueGenericSend+0x210>)
 8016d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016d5c:	601a      	str	r2, [r3, #0]
 8016d5e:	f3bf 8f4f 	dsb	sy
 8016d62:	f3bf 8f6f 	isb	sy
 8016d66:	e772      	b.n	8016c4e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016d6a:	f000 fcbd 	bl	80176e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016d6e:	f000 ff91 	bl	8017c94 <xTaskResumeAll>
 8016d72:	e76c      	b.n	8016c4e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016d74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016d76:	f000 fcb7 	bl	80176e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016d7a:	f000 ff8b 	bl	8017c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016d7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3738      	adds	r7, #56	@ 0x38
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	e000ed04 	.word	0xe000ed04

08016d8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b08e      	sub	sp, #56	@ 0x38
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	60f8      	str	r0, [r7, #12]
 8016d94:	60b9      	str	r1, [r7, #8]
 8016d96:	607a      	str	r2, [r7, #4]
 8016d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8016d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d10d      	bne.n	8016dc0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8016da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016da8:	b672      	cpsid	i
 8016daa:	f383 8811 	msr	BASEPRI, r3
 8016dae:	f3bf 8f6f 	isb	sy
 8016db2:	f3bf 8f4f 	dsb	sy
 8016db6:	b662      	cpsie	i
 8016db8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016dba:	bf00      	nop
 8016dbc:	bf00      	nop
 8016dbe:	e7fd      	b.n	8016dbc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d103      	bne.n	8016dce <xQueueGenericSendFromISR+0x42>
 8016dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d101      	bne.n	8016dd2 <xQueueGenericSendFromISR+0x46>
 8016dce:	2301      	movs	r3, #1
 8016dd0:	e000      	b.n	8016dd4 <xQueueGenericSendFromISR+0x48>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d10d      	bne.n	8016df4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8016dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ddc:	b672      	cpsid	i
 8016dde:	f383 8811 	msr	BASEPRI, r3
 8016de2:	f3bf 8f6f 	isb	sy
 8016de6:	f3bf 8f4f 	dsb	sy
 8016dea:	b662      	cpsie	i
 8016dec:	623b      	str	r3, [r7, #32]
}
 8016dee:	bf00      	nop
 8016df0:	bf00      	nop
 8016df2:	e7fd      	b.n	8016df0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016df4:	683b      	ldr	r3, [r7, #0]
 8016df6:	2b02      	cmp	r3, #2
 8016df8:	d103      	bne.n	8016e02 <xQueueGenericSendFromISR+0x76>
 8016dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016dfe:	2b01      	cmp	r3, #1
 8016e00:	d101      	bne.n	8016e06 <xQueueGenericSendFromISR+0x7a>
 8016e02:	2301      	movs	r3, #1
 8016e04:	e000      	b.n	8016e08 <xQueueGenericSendFromISR+0x7c>
 8016e06:	2300      	movs	r3, #0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d10d      	bne.n	8016e28 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8016e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e10:	b672      	cpsid	i
 8016e12:	f383 8811 	msr	BASEPRI, r3
 8016e16:	f3bf 8f6f 	isb	sy
 8016e1a:	f3bf 8f4f 	dsb	sy
 8016e1e:	b662      	cpsie	i
 8016e20:	61fb      	str	r3, [r7, #28]
}
 8016e22:	bf00      	nop
 8016e24:	bf00      	nop
 8016e26:	e7fd      	b.n	8016e24 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e28:	f001 ff60 	bl	8018cec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016e2c:	f3ef 8211 	mrs	r2, BASEPRI
 8016e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e34:	b672      	cpsid	i
 8016e36:	f383 8811 	msr	BASEPRI, r3
 8016e3a:	f3bf 8f6f 	isb	sy
 8016e3e:	f3bf 8f4f 	dsb	sy
 8016e42:	b662      	cpsie	i
 8016e44:	61ba      	str	r2, [r7, #24]
 8016e46:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016e48:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d302      	bcc.n	8016e5e <xQueueGenericSendFromISR+0xd2>
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	2b02      	cmp	r3, #2
 8016e5c:	d12c      	bne.n	8016eb8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016e68:	683a      	ldr	r2, [r7, #0]
 8016e6a:	68b9      	ldr	r1, [r7, #8]
 8016e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016e6e:	f000 fbab 	bl	80175c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016e72:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8016e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e7a:	d112      	bne.n	8016ea2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d016      	beq.n	8016eb2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e86:	3324      	adds	r3, #36	@ 0x24
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f001 f92d 	bl	80180e8 <xTaskRemoveFromEventList>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d00e      	beq.n	8016eb2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d00b      	beq.n	8016eb2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2201      	movs	r2, #1
 8016e9e:	601a      	str	r2, [r3, #0]
 8016ea0:	e007      	b.n	8016eb2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	b2db      	uxtb	r3, r3
 8016eaa:	b25a      	sxtb	r2, r3
 8016eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8016eb2:	2301      	movs	r3, #1
 8016eb4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8016eb6:	e001      	b.n	8016ebc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016eb8:	2300      	movs	r3, #0
 8016eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ebe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016ec0:	693b      	ldr	r3, [r7, #16]
 8016ec2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016ec6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3738      	adds	r7, #56	@ 0x38
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}

08016ed2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016ed2:	b580      	push	{r7, lr}
 8016ed4:	b08e      	sub	sp, #56	@ 0x38
 8016ed6:	af00      	add	r7, sp, #0
 8016ed8:	6078      	str	r0, [r7, #4]
 8016eda:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d10d      	bne.n	8016f02 <xQueueGiveFromISR+0x30>
	__asm volatile
 8016ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016eea:	b672      	cpsid	i
 8016eec:	f383 8811 	msr	BASEPRI, r3
 8016ef0:	f3bf 8f6f 	isb	sy
 8016ef4:	f3bf 8f4f 	dsb	sy
 8016ef8:	b662      	cpsie	i
 8016efa:	623b      	str	r3, [r7, #32]
}
 8016efc:	bf00      	nop
 8016efe:	bf00      	nop
 8016f00:	e7fd      	b.n	8016efe <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d00d      	beq.n	8016f26 <xQueueGiveFromISR+0x54>
	__asm volatile
 8016f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f0e:	b672      	cpsid	i
 8016f10:	f383 8811 	msr	BASEPRI, r3
 8016f14:	f3bf 8f6f 	isb	sy
 8016f18:	f3bf 8f4f 	dsb	sy
 8016f1c:	b662      	cpsie	i
 8016f1e:	61fb      	str	r3, [r7, #28]
}
 8016f20:	bf00      	nop
 8016f22:	bf00      	nop
 8016f24:	e7fd      	b.n	8016f22 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d103      	bne.n	8016f36 <xQueueGiveFromISR+0x64>
 8016f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f30:	689b      	ldr	r3, [r3, #8]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d101      	bne.n	8016f3a <xQueueGiveFromISR+0x68>
 8016f36:	2301      	movs	r3, #1
 8016f38:	e000      	b.n	8016f3c <xQueueGiveFromISR+0x6a>
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d10d      	bne.n	8016f5c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8016f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f44:	b672      	cpsid	i
 8016f46:	f383 8811 	msr	BASEPRI, r3
 8016f4a:	f3bf 8f6f 	isb	sy
 8016f4e:	f3bf 8f4f 	dsb	sy
 8016f52:	b662      	cpsie	i
 8016f54:	61bb      	str	r3, [r7, #24]
}
 8016f56:	bf00      	nop
 8016f58:	bf00      	nop
 8016f5a:	e7fd      	b.n	8016f58 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f5c:	f001 fec6 	bl	8018cec <vPortValidateInterruptPriority>
	__asm volatile
 8016f60:	f3ef 8211 	mrs	r2, BASEPRI
 8016f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f68:	b672      	cpsid	i
 8016f6a:	f383 8811 	msr	BASEPRI, r3
 8016f6e:	f3bf 8f6f 	isb	sy
 8016f72:	f3bf 8f4f 	dsb	sy
 8016f76:	b662      	cpsie	i
 8016f78:	617a      	str	r2, [r7, #20]
 8016f7a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016f7c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f84:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d22b      	bcs.n	8016fe8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f9c:	1c5a      	adds	r2, r3, #1
 8016f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fa0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016fa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016faa:	d112      	bne.n	8016fd2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d016      	beq.n	8016fe2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fb6:	3324      	adds	r3, #36	@ 0x24
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f001 f895 	bl	80180e8 <xTaskRemoveFromEventList>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d00e      	beq.n	8016fe2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d00b      	beq.n	8016fe2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016fca:	683b      	ldr	r3, [r7, #0]
 8016fcc:	2201      	movs	r2, #1
 8016fce:	601a      	str	r2, [r3, #0]
 8016fd0:	e007      	b.n	8016fe2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	b2db      	uxtb	r3, r3
 8016fda:	b25a      	sxtb	r2, r3
 8016fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8016fe6:	e001      	b.n	8016fec <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8016fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	f383 8811 	msr	BASEPRI, r3
}
 8016ff6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3738      	adds	r7, #56	@ 0x38
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}
	...

08017004 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b08c      	sub	sp, #48	@ 0x30
 8017008:	af00      	add	r7, sp, #0
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017010:	2300      	movs	r3, #0
 8017012:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801701a:	2b00      	cmp	r3, #0
 801701c:	d10d      	bne.n	801703a <xQueueReceive+0x36>
	__asm volatile
 801701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017022:	b672      	cpsid	i
 8017024:	f383 8811 	msr	BASEPRI, r3
 8017028:	f3bf 8f6f 	isb	sy
 801702c:	f3bf 8f4f 	dsb	sy
 8017030:	b662      	cpsie	i
 8017032:	623b      	str	r3, [r7, #32]
}
 8017034:	bf00      	nop
 8017036:	bf00      	nop
 8017038:	e7fd      	b.n	8017036 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d103      	bne.n	8017048 <xQueueReceive+0x44>
 8017040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017044:	2b00      	cmp	r3, #0
 8017046:	d101      	bne.n	801704c <xQueueReceive+0x48>
 8017048:	2301      	movs	r3, #1
 801704a:	e000      	b.n	801704e <xQueueReceive+0x4a>
 801704c:	2300      	movs	r3, #0
 801704e:	2b00      	cmp	r3, #0
 8017050:	d10d      	bne.n	801706e <xQueueReceive+0x6a>
	__asm volatile
 8017052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017056:	b672      	cpsid	i
 8017058:	f383 8811 	msr	BASEPRI, r3
 801705c:	f3bf 8f6f 	isb	sy
 8017060:	f3bf 8f4f 	dsb	sy
 8017064:	b662      	cpsie	i
 8017066:	61fb      	str	r3, [r7, #28]
}
 8017068:	bf00      	nop
 801706a:	bf00      	nop
 801706c:	e7fd      	b.n	801706a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801706e:	f001 fa05 	bl	801847c <xTaskGetSchedulerState>
 8017072:	4603      	mov	r3, r0
 8017074:	2b00      	cmp	r3, #0
 8017076:	d102      	bne.n	801707e <xQueueReceive+0x7a>
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d101      	bne.n	8017082 <xQueueReceive+0x7e>
 801707e:	2301      	movs	r3, #1
 8017080:	e000      	b.n	8017084 <xQueueReceive+0x80>
 8017082:	2300      	movs	r3, #0
 8017084:	2b00      	cmp	r3, #0
 8017086:	d10d      	bne.n	80170a4 <xQueueReceive+0xa0>
	__asm volatile
 8017088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801708c:	b672      	cpsid	i
 801708e:	f383 8811 	msr	BASEPRI, r3
 8017092:	f3bf 8f6f 	isb	sy
 8017096:	f3bf 8f4f 	dsb	sy
 801709a:	b662      	cpsie	i
 801709c:	61bb      	str	r3, [r7, #24]
}
 801709e:	bf00      	nop
 80170a0:	bf00      	nop
 80170a2:	e7fd      	b.n	80170a0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80170a4:	f001 fd3a 	bl	8018b1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80170ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80170ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d01f      	beq.n	80170f4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80170b4:	68b9      	ldr	r1, [r7, #8]
 80170b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80170b8:	f000 faf0 	bl	801769c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80170bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170be:	1e5a      	subs	r2, r3, #1
 80170c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80170c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170c6:	691b      	ldr	r3, [r3, #16]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d00f      	beq.n	80170ec <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80170cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170ce:	3310      	adds	r3, #16
 80170d0:	4618      	mov	r0, r3
 80170d2:	f001 f809 	bl	80180e8 <xTaskRemoveFromEventList>
 80170d6:	4603      	mov	r3, r0
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d007      	beq.n	80170ec <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80170dc:	4b3c      	ldr	r3, [pc, #240]	@ (80171d0 <xQueueReceive+0x1cc>)
 80170de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170e2:	601a      	str	r2, [r3, #0]
 80170e4:	f3bf 8f4f 	dsb	sy
 80170e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80170ec:	f001 fd4c 	bl	8018b88 <vPortExitCritical>
				return pdPASS;
 80170f0:	2301      	movs	r3, #1
 80170f2:	e069      	b.n	80171c8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d103      	bne.n	8017102 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80170fa:	f001 fd45 	bl	8018b88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80170fe:	2300      	movs	r3, #0
 8017100:	e062      	b.n	80171c8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017104:	2b00      	cmp	r3, #0
 8017106:	d106      	bne.n	8017116 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017108:	f107 0310 	add.w	r3, r7, #16
 801710c:	4618      	mov	r0, r3
 801710e:	f001 f851 	bl	80181b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017112:	2301      	movs	r3, #1
 8017114:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017116:	f001 fd37 	bl	8018b88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801711a:	f000 fdad 	bl	8017c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801711e:	f001 fcfd 	bl	8018b1c <vPortEnterCritical>
 8017122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017128:	b25b      	sxtb	r3, r3
 801712a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801712e:	d103      	bne.n	8017138 <xQueueReceive+0x134>
 8017130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017132:	2200      	movs	r2, #0
 8017134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801713a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801713e:	b25b      	sxtb	r3, r3
 8017140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017144:	d103      	bne.n	801714e <xQueueReceive+0x14a>
 8017146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017148:	2200      	movs	r2, #0
 801714a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801714e:	f001 fd1b 	bl	8018b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017152:	1d3a      	adds	r2, r7, #4
 8017154:	f107 0310 	add.w	r3, r7, #16
 8017158:	4611      	mov	r1, r2
 801715a:	4618      	mov	r0, r3
 801715c:	f001 f840 	bl	80181e0 <xTaskCheckForTimeOut>
 8017160:	4603      	mov	r3, r0
 8017162:	2b00      	cmp	r3, #0
 8017164:	d123      	bne.n	80171ae <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017168:	f000 fb10 	bl	801778c <prvIsQueueEmpty>
 801716c:	4603      	mov	r3, r0
 801716e:	2b00      	cmp	r3, #0
 8017170:	d017      	beq.n	80171a2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017174:	3324      	adds	r3, #36	@ 0x24
 8017176:	687a      	ldr	r2, [r7, #4]
 8017178:	4611      	mov	r1, r2
 801717a:	4618      	mov	r0, r3
 801717c:	f000 ff8c 	bl	8018098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017182:	f000 fab1 	bl	80176e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017186:	f000 fd85 	bl	8017c94 <xTaskResumeAll>
 801718a:	4603      	mov	r3, r0
 801718c:	2b00      	cmp	r3, #0
 801718e:	d189      	bne.n	80170a4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8017190:	4b0f      	ldr	r3, [pc, #60]	@ (80171d0 <xQueueReceive+0x1cc>)
 8017192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017196:	601a      	str	r2, [r3, #0]
 8017198:	f3bf 8f4f 	dsb	sy
 801719c:	f3bf 8f6f 	isb	sy
 80171a0:	e780      	b.n	80170a4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80171a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80171a4:	f000 faa0 	bl	80176e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80171a8:	f000 fd74 	bl	8017c94 <xTaskResumeAll>
 80171ac:	e77a      	b.n	80170a4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80171ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80171b0:	f000 fa9a 	bl	80176e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80171b4:	f000 fd6e 	bl	8017c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80171b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80171ba:	f000 fae7 	bl	801778c <prvIsQueueEmpty>
 80171be:	4603      	mov	r3, r0
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	f43f af6f 	beq.w	80170a4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80171c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	3730      	adds	r7, #48	@ 0x30
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}
 80171d0:	e000ed04 	.word	0xe000ed04

080171d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b08e      	sub	sp, #56	@ 0x38
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
 80171dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80171de:	2300      	movs	r3, #0
 80171e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80171e6:	2300      	movs	r3, #0
 80171e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80171ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d10d      	bne.n	801720c <xQueueSemaphoreTake+0x38>
	__asm volatile
 80171f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171f4:	b672      	cpsid	i
 80171f6:	f383 8811 	msr	BASEPRI, r3
 80171fa:	f3bf 8f6f 	isb	sy
 80171fe:	f3bf 8f4f 	dsb	sy
 8017202:	b662      	cpsie	i
 8017204:	623b      	str	r3, [r7, #32]
}
 8017206:	bf00      	nop
 8017208:	bf00      	nop
 801720a:	e7fd      	b.n	8017208 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017210:	2b00      	cmp	r3, #0
 8017212:	d00d      	beq.n	8017230 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8017214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017218:	b672      	cpsid	i
 801721a:	f383 8811 	msr	BASEPRI, r3
 801721e:	f3bf 8f6f 	isb	sy
 8017222:	f3bf 8f4f 	dsb	sy
 8017226:	b662      	cpsie	i
 8017228:	61fb      	str	r3, [r7, #28]
}
 801722a:	bf00      	nop
 801722c:	bf00      	nop
 801722e:	e7fd      	b.n	801722c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017230:	f001 f924 	bl	801847c <xTaskGetSchedulerState>
 8017234:	4603      	mov	r3, r0
 8017236:	2b00      	cmp	r3, #0
 8017238:	d102      	bne.n	8017240 <xQueueSemaphoreTake+0x6c>
 801723a:	683b      	ldr	r3, [r7, #0]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d101      	bne.n	8017244 <xQueueSemaphoreTake+0x70>
 8017240:	2301      	movs	r3, #1
 8017242:	e000      	b.n	8017246 <xQueueSemaphoreTake+0x72>
 8017244:	2300      	movs	r3, #0
 8017246:	2b00      	cmp	r3, #0
 8017248:	d10d      	bne.n	8017266 <xQueueSemaphoreTake+0x92>
	__asm volatile
 801724a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801724e:	b672      	cpsid	i
 8017250:	f383 8811 	msr	BASEPRI, r3
 8017254:	f3bf 8f6f 	isb	sy
 8017258:	f3bf 8f4f 	dsb	sy
 801725c:	b662      	cpsie	i
 801725e:	61bb      	str	r3, [r7, #24]
}
 8017260:	bf00      	nop
 8017262:	bf00      	nop
 8017264:	e7fd      	b.n	8017262 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017266:	f001 fc59 	bl	8018b1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801726a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801726c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801726e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017272:	2b00      	cmp	r3, #0
 8017274:	d024      	beq.n	80172c0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017278:	1e5a      	subs	r2, r3, #1
 801727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801727c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d104      	bne.n	8017290 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017286:	f001 fac3 	bl	8018810 <pvTaskIncrementMutexHeldCount>
 801728a:	4602      	mov	r2, r0
 801728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801728e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017292:	691b      	ldr	r3, [r3, #16]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d00f      	beq.n	80172b8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801729a:	3310      	adds	r3, #16
 801729c:	4618      	mov	r0, r3
 801729e:	f000 ff23 	bl	80180e8 <xTaskRemoveFromEventList>
 80172a2:	4603      	mov	r3, r0
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d007      	beq.n	80172b8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80172a8:	4b55      	ldr	r3, [pc, #340]	@ (8017400 <xQueueSemaphoreTake+0x22c>)
 80172aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80172ae:	601a      	str	r2, [r3, #0]
 80172b0:	f3bf 8f4f 	dsb	sy
 80172b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80172b8:	f001 fc66 	bl	8018b88 <vPortExitCritical>
				return pdPASS;
 80172bc:	2301      	movs	r3, #1
 80172be:	e09a      	b.n	80173f6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d114      	bne.n	80172f0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80172c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d00d      	beq.n	80172e8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80172cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172d0:	b672      	cpsid	i
 80172d2:	f383 8811 	msr	BASEPRI, r3
 80172d6:	f3bf 8f6f 	isb	sy
 80172da:	f3bf 8f4f 	dsb	sy
 80172de:	b662      	cpsie	i
 80172e0:	617b      	str	r3, [r7, #20]
}
 80172e2:	bf00      	nop
 80172e4:	bf00      	nop
 80172e6:	e7fd      	b.n	80172e4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80172e8:	f001 fc4e 	bl	8018b88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80172ec:	2300      	movs	r3, #0
 80172ee:	e082      	b.n	80173f6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80172f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d106      	bne.n	8017304 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80172f6:	f107 030c 	add.w	r3, r7, #12
 80172fa:	4618      	mov	r0, r3
 80172fc:	f000 ff5a 	bl	80181b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017300:	2301      	movs	r3, #1
 8017302:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017304:	f001 fc40 	bl	8018b88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017308:	f000 fcb6 	bl	8017c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801730c:	f001 fc06 	bl	8018b1c <vPortEnterCritical>
 8017310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017312:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017316:	b25b      	sxtb	r3, r3
 8017318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801731c:	d103      	bne.n	8017326 <xQueueSemaphoreTake+0x152>
 801731e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017320:	2200      	movs	r2, #0
 8017322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017328:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801732c:	b25b      	sxtb	r3, r3
 801732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017332:	d103      	bne.n	801733c <xQueueSemaphoreTake+0x168>
 8017334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017336:	2200      	movs	r2, #0
 8017338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801733c:	f001 fc24 	bl	8018b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017340:	463a      	mov	r2, r7
 8017342:	f107 030c 	add.w	r3, r7, #12
 8017346:	4611      	mov	r1, r2
 8017348:	4618      	mov	r0, r3
 801734a:	f000 ff49 	bl	80181e0 <xTaskCheckForTimeOut>
 801734e:	4603      	mov	r3, r0
 8017350:	2b00      	cmp	r3, #0
 8017352:	d132      	bne.n	80173ba <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017354:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017356:	f000 fa19 	bl	801778c <prvIsQueueEmpty>
 801735a:	4603      	mov	r3, r0
 801735c:	2b00      	cmp	r3, #0
 801735e:	d026      	beq.n	80173ae <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d109      	bne.n	801737c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8017368:	f001 fbd8 	bl	8018b1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801736c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801736e:	689b      	ldr	r3, [r3, #8]
 8017370:	4618      	mov	r0, r3
 8017372:	f001 f8a1 	bl	80184b8 <xTaskPriorityInherit>
 8017376:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8017378:	f001 fc06 	bl	8018b88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801737e:	3324      	adds	r3, #36	@ 0x24
 8017380:	683a      	ldr	r2, [r7, #0]
 8017382:	4611      	mov	r1, r2
 8017384:	4618      	mov	r0, r3
 8017386:	f000 fe87 	bl	8018098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801738a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801738c:	f000 f9ac 	bl	80176e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017390:	f000 fc80 	bl	8017c94 <xTaskResumeAll>
 8017394:	4603      	mov	r3, r0
 8017396:	2b00      	cmp	r3, #0
 8017398:	f47f af65 	bne.w	8017266 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 801739c:	4b18      	ldr	r3, [pc, #96]	@ (8017400 <xQueueSemaphoreTake+0x22c>)
 801739e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80173a2:	601a      	str	r2, [r3, #0]
 80173a4:	f3bf 8f4f 	dsb	sy
 80173a8:	f3bf 8f6f 	isb	sy
 80173ac:	e75b      	b.n	8017266 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80173ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173b0:	f000 f99a 	bl	80176e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80173b4:	f000 fc6e 	bl	8017c94 <xTaskResumeAll>
 80173b8:	e755      	b.n	8017266 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80173ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173bc:	f000 f994 	bl	80176e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80173c0:	f000 fc68 	bl	8017c94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80173c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173c6:	f000 f9e1 	bl	801778c <prvIsQueueEmpty>
 80173ca:	4603      	mov	r3, r0
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	f43f af4a 	beq.w	8017266 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80173d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d00d      	beq.n	80173f4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80173d8:	f001 fba0 	bl	8018b1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80173dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173de:	f000 f8db 	bl	8017598 <prvGetDisinheritPriorityAfterTimeout>
 80173e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80173e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173e6:	689b      	ldr	r3, [r3, #8]
 80173e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80173ea:	4618      	mov	r0, r3
 80173ec:	f001 f970 	bl	80186d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80173f0:	f001 fbca 	bl	8018b88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80173f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3738      	adds	r7, #56	@ 0x38
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	e000ed04 	.word	0xe000ed04

08017404 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b08e      	sub	sp, #56	@ 0x38
 8017408:	af00      	add	r7, sp, #0
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8017414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017416:	2b00      	cmp	r3, #0
 8017418:	d10d      	bne.n	8017436 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801741e:	b672      	cpsid	i
 8017420:	f383 8811 	msr	BASEPRI, r3
 8017424:	f3bf 8f6f 	isb	sy
 8017428:	f3bf 8f4f 	dsb	sy
 801742c:	b662      	cpsie	i
 801742e:	623b      	str	r3, [r7, #32]
}
 8017430:	bf00      	nop
 8017432:	bf00      	nop
 8017434:	e7fd      	b.n	8017432 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017436:	68bb      	ldr	r3, [r7, #8]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d103      	bne.n	8017444 <xQueueReceiveFromISR+0x40>
 801743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801743e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017440:	2b00      	cmp	r3, #0
 8017442:	d101      	bne.n	8017448 <xQueueReceiveFromISR+0x44>
 8017444:	2301      	movs	r3, #1
 8017446:	e000      	b.n	801744a <xQueueReceiveFromISR+0x46>
 8017448:	2300      	movs	r3, #0
 801744a:	2b00      	cmp	r3, #0
 801744c:	d10d      	bne.n	801746a <xQueueReceiveFromISR+0x66>
	__asm volatile
 801744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017452:	b672      	cpsid	i
 8017454:	f383 8811 	msr	BASEPRI, r3
 8017458:	f3bf 8f6f 	isb	sy
 801745c:	f3bf 8f4f 	dsb	sy
 8017460:	b662      	cpsie	i
 8017462:	61fb      	str	r3, [r7, #28]
}
 8017464:	bf00      	nop
 8017466:	bf00      	nop
 8017468:	e7fd      	b.n	8017466 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801746a:	f001 fc3f 	bl	8018cec <vPortValidateInterruptPriority>
	__asm volatile
 801746e:	f3ef 8211 	mrs	r2, BASEPRI
 8017472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017476:	b672      	cpsid	i
 8017478:	f383 8811 	msr	BASEPRI, r3
 801747c:	f3bf 8f6f 	isb	sy
 8017480:	f3bf 8f4f 	dsb	sy
 8017484:	b662      	cpsie	i
 8017486:	61ba      	str	r2, [r7, #24]
 8017488:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801748a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801748c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017492:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017496:	2b00      	cmp	r3, #0
 8017498:	d02f      	beq.n	80174fa <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801749c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80174a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80174a4:	68b9      	ldr	r1, [r7, #8]
 80174a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80174a8:	f000 f8f8 	bl	801769c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80174ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ae:	1e5a      	subs	r2, r3, #1
 80174b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80174b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80174b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174bc:	d112      	bne.n	80174e4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80174be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174c0:	691b      	ldr	r3, [r3, #16]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d016      	beq.n	80174f4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80174c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174c8:	3310      	adds	r3, #16
 80174ca:	4618      	mov	r0, r3
 80174cc:	f000 fe0c 	bl	80180e8 <xTaskRemoveFromEventList>
 80174d0:	4603      	mov	r3, r0
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d00e      	beq.n	80174f4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d00b      	beq.n	80174f4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2201      	movs	r2, #1
 80174e0:	601a      	str	r2, [r3, #0]
 80174e2:	e007      	b.n	80174f4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80174e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80174e8:	3301      	adds	r3, #1
 80174ea:	b2db      	uxtb	r3, r3
 80174ec:	b25a      	sxtb	r2, r3
 80174ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80174f4:	2301      	movs	r3, #1
 80174f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80174f8:	e001      	b.n	80174fe <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80174fa:	2300      	movs	r3, #0
 80174fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80174fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017500:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017502:	693b      	ldr	r3, [r7, #16]
 8017504:	f383 8811 	msr	BASEPRI, r3
}
 8017508:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801750a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801750c:	4618      	mov	r0, r3
 801750e:	3738      	adds	r7, #56	@ 0x38
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}

08017514 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b084      	sub	sp, #16
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d10d      	bne.n	801753e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8017522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017526:	b672      	cpsid	i
 8017528:	f383 8811 	msr	BASEPRI, r3
 801752c:	f3bf 8f6f 	isb	sy
 8017530:	f3bf 8f4f 	dsb	sy
 8017534:	b662      	cpsie	i
 8017536:	60bb      	str	r3, [r7, #8]
}
 8017538:	bf00      	nop
 801753a:	bf00      	nop
 801753c:	e7fd      	b.n	801753a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 801753e:	f001 faed 	bl	8018b1c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017546:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8017548:	f001 fb1e 	bl	8018b88 <vPortExitCritical>

	return uxReturn;
 801754c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801754e:	4618      	mov	r0, r3
 8017550:	3710      	adds	r7, #16
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}

08017556 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8017556:	b480      	push	{r7}
 8017558:	b087      	sub	sp, #28
 801755a:	af00      	add	r7, sp, #0
 801755c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8017562:	697b      	ldr	r3, [r7, #20]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d10d      	bne.n	8017584 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8017568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801756c:	b672      	cpsid	i
 801756e:	f383 8811 	msr	BASEPRI, r3
 8017572:	f3bf 8f6f 	isb	sy
 8017576:	f3bf 8f4f 	dsb	sy
 801757a:	b662      	cpsie	i
 801757c:	60fb      	str	r3, [r7, #12]
}
 801757e:	bf00      	nop
 8017580:	bf00      	nop
 8017582:	e7fd      	b.n	8017580 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017588:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801758a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801758c:	4618      	mov	r0, r3
 801758e:	371c      	adds	r7, #28
 8017590:	46bd      	mov	sp, r7
 8017592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017596:	4770      	bx	lr

08017598 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017598:	b480      	push	{r7}
 801759a:	b085      	sub	sp, #20
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d006      	beq.n	80175b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	f1c3 0307 	rsb	r3, r3, #7
 80175b2:	60fb      	str	r3, [r7, #12]
 80175b4:	e001      	b.n	80175ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80175b6:	2300      	movs	r3, #0
 80175b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80175ba:	68fb      	ldr	r3, [r7, #12]
	}
 80175bc:	4618      	mov	r0, r3
 80175be:	3714      	adds	r7, #20
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr

080175c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b086      	sub	sp, #24
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	60f8      	str	r0, [r7, #12]
 80175d0:	60b9      	str	r1, [r7, #8]
 80175d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80175d4:	2300      	movs	r3, #0
 80175d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d10d      	bne.n	8017602 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d14d      	bne.n	801768a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	689b      	ldr	r3, [r3, #8]
 80175f2:	4618      	mov	r0, r3
 80175f4:	f000 ffe0 	bl	80185b8 <xTaskPriorityDisinherit>
 80175f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	2200      	movs	r2, #0
 80175fe:	609a      	str	r2, [r3, #8]
 8017600:	e043      	b.n	801768a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d119      	bne.n	801763c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	6858      	ldr	r0, [r3, #4]
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017610:	461a      	mov	r2, r3
 8017612:	68b9      	ldr	r1, [r7, #8]
 8017614:	f002 fa56 	bl	8019ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	685a      	ldr	r2, [r3, #4]
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017620:	441a      	add	r2, r3
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	685a      	ldr	r2, [r3, #4]
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	689b      	ldr	r3, [r3, #8]
 801762e:	429a      	cmp	r2, r3
 8017630:	d32b      	bcc.n	801768a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	681a      	ldr	r2, [r3, #0]
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	605a      	str	r2, [r3, #4]
 801763a:	e026      	b.n	801768a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	68d8      	ldr	r0, [r3, #12]
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017644:	461a      	mov	r2, r3
 8017646:	68b9      	ldr	r1, [r7, #8]
 8017648:	f002 fa3c 	bl	8019ac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	68da      	ldr	r2, [r3, #12]
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017654:	425b      	negs	r3, r3
 8017656:	441a      	add	r2, r3
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	68da      	ldr	r2, [r3, #12]
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	429a      	cmp	r2, r3
 8017666:	d207      	bcs.n	8017678 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	689a      	ldr	r2, [r3, #8]
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017670:	425b      	negs	r3, r3
 8017672:	441a      	add	r2, r3
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2b02      	cmp	r3, #2
 801767c:	d105      	bne.n	801768a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d002      	beq.n	801768a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	3b01      	subs	r3, #1
 8017688:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	1c5a      	adds	r2, r3, #1
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017692:	697b      	ldr	r3, [r7, #20]
}
 8017694:	4618      	mov	r0, r3
 8017696:	3718      	adds	r7, #24
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}

0801769c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b082      	sub	sp, #8
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d018      	beq.n	80176e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	68da      	ldr	r2, [r3, #12]
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176b6:	441a      	add	r2, r3
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	68da      	ldr	r2, [r3, #12]
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	689b      	ldr	r3, [r3, #8]
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d303      	bcc.n	80176d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681a      	ldr	r2, [r3, #0]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	68d9      	ldr	r1, [r3, #12]
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80176d8:	461a      	mov	r2, r3
 80176da:	6838      	ldr	r0, [r7, #0]
 80176dc:	f002 f9f2 	bl	8019ac4 <memcpy>
	}
}
 80176e0:	bf00      	nop
 80176e2:	3708      	adds	r7, #8
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}

080176e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80176f0:	f001 fa14 	bl	8018b1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80176fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80176fc:	e011      	b.n	8017722 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017702:	2b00      	cmp	r3, #0
 8017704:	d012      	beq.n	801772c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	3324      	adds	r3, #36	@ 0x24
 801770a:	4618      	mov	r0, r3
 801770c:	f000 fcec 	bl	80180e8 <xTaskRemoveFromEventList>
 8017710:	4603      	mov	r3, r0
 8017712:	2b00      	cmp	r3, #0
 8017714:	d001      	beq.n	801771a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017716:	f000 fdcb 	bl	80182b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801771a:	7bfb      	ldrb	r3, [r7, #15]
 801771c:	3b01      	subs	r3, #1
 801771e:	b2db      	uxtb	r3, r3
 8017720:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017726:	2b00      	cmp	r3, #0
 8017728:	dce9      	bgt.n	80176fe <prvUnlockQueue+0x16>
 801772a:	e000      	b.n	801772e <prvUnlockQueue+0x46>
					break;
 801772c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	22ff      	movs	r2, #255	@ 0xff
 8017732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8017736:	f001 fa27 	bl	8018b88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801773a:	f001 f9ef 	bl	8018b1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017744:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017746:	e011      	b.n	801776c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	691b      	ldr	r3, [r3, #16]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d012      	beq.n	8017776 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	3310      	adds	r3, #16
 8017754:	4618      	mov	r0, r3
 8017756:	f000 fcc7 	bl	80180e8 <xTaskRemoveFromEventList>
 801775a:	4603      	mov	r3, r0
 801775c:	2b00      	cmp	r3, #0
 801775e:	d001      	beq.n	8017764 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017760:	f000 fda6 	bl	80182b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017764:	7bbb      	ldrb	r3, [r7, #14]
 8017766:	3b01      	subs	r3, #1
 8017768:	b2db      	uxtb	r3, r3
 801776a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801776c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017770:	2b00      	cmp	r3, #0
 8017772:	dce9      	bgt.n	8017748 <prvUnlockQueue+0x60>
 8017774:	e000      	b.n	8017778 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017776:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	22ff      	movs	r2, #255	@ 0xff
 801777c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8017780:	f001 fa02 	bl	8018b88 <vPortExitCritical>
}
 8017784:	bf00      	nop
 8017786:	3710      	adds	r7, #16
 8017788:	46bd      	mov	sp, r7
 801778a:	bd80      	pop	{r7, pc}

0801778c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017794:	f001 f9c2 	bl	8018b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801779c:	2b00      	cmp	r3, #0
 801779e:	d102      	bne.n	80177a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80177a0:	2301      	movs	r3, #1
 80177a2:	60fb      	str	r3, [r7, #12]
 80177a4:	e001      	b.n	80177aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80177a6:	2300      	movs	r3, #0
 80177a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80177aa:	f001 f9ed 	bl	8018b88 <vPortExitCritical>

	return xReturn;
 80177ae:	68fb      	ldr	r3, [r7, #12]
}
 80177b0:	4618      	mov	r0, r3
 80177b2:	3710      	adds	r7, #16
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}

080177b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b084      	sub	sp, #16
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80177c0:	f001 f9ac 	bl	8018b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d102      	bne.n	80177d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80177d0:	2301      	movs	r3, #1
 80177d2:	60fb      	str	r3, [r7, #12]
 80177d4:	e001      	b.n	80177da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80177d6:	2300      	movs	r3, #0
 80177d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80177da:	f001 f9d5 	bl	8018b88 <vPortExitCritical>

	return xReturn;
 80177de:	68fb      	ldr	r3, [r7, #12]
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3710      	adds	r7, #16
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}

080177e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b08e      	sub	sp, #56	@ 0x38
 80177ec:	af04      	add	r7, sp, #16
 80177ee:	60f8      	str	r0, [r7, #12]
 80177f0:	60b9      	str	r1, [r7, #8]
 80177f2:	607a      	str	r2, [r7, #4]
 80177f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80177f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d10d      	bne.n	8017818 <xTaskCreateStatic+0x30>
	__asm volatile
 80177fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017800:	b672      	cpsid	i
 8017802:	f383 8811 	msr	BASEPRI, r3
 8017806:	f3bf 8f6f 	isb	sy
 801780a:	f3bf 8f4f 	dsb	sy
 801780e:	b662      	cpsie	i
 8017810:	623b      	str	r3, [r7, #32]
}
 8017812:	bf00      	nop
 8017814:	bf00      	nop
 8017816:	e7fd      	b.n	8017814 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8017818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801781a:	2b00      	cmp	r3, #0
 801781c:	d10d      	bne.n	801783a <xTaskCreateStatic+0x52>
	__asm volatile
 801781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017822:	b672      	cpsid	i
 8017824:	f383 8811 	msr	BASEPRI, r3
 8017828:	f3bf 8f6f 	isb	sy
 801782c:	f3bf 8f4f 	dsb	sy
 8017830:	b662      	cpsie	i
 8017832:	61fb      	str	r3, [r7, #28]
}
 8017834:	bf00      	nop
 8017836:	bf00      	nop
 8017838:	e7fd      	b.n	8017836 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801783a:	2358      	movs	r3, #88	@ 0x58
 801783c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801783e:	693b      	ldr	r3, [r7, #16]
 8017840:	2b58      	cmp	r3, #88	@ 0x58
 8017842:	d00d      	beq.n	8017860 <xTaskCreateStatic+0x78>
	__asm volatile
 8017844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017848:	b672      	cpsid	i
 801784a:	f383 8811 	msr	BASEPRI, r3
 801784e:	f3bf 8f6f 	isb	sy
 8017852:	f3bf 8f4f 	dsb	sy
 8017856:	b662      	cpsie	i
 8017858:	61bb      	str	r3, [r7, #24]
}
 801785a:	bf00      	nop
 801785c:	bf00      	nop
 801785e:	e7fd      	b.n	801785c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017860:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017864:	2b00      	cmp	r3, #0
 8017866:	d01e      	beq.n	80178a6 <xTaskCreateStatic+0xbe>
 8017868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801786a:	2b00      	cmp	r3, #0
 801786c:	d01b      	beq.n	80178a6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801786e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017870:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017874:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017876:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801787a:	2202      	movs	r2, #2
 801787c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017880:	2300      	movs	r3, #0
 8017882:	9303      	str	r3, [sp, #12]
 8017884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017886:	9302      	str	r3, [sp, #8]
 8017888:	f107 0314 	add.w	r3, r7, #20
 801788c:	9301      	str	r3, [sp, #4]
 801788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017890:	9300      	str	r3, [sp, #0]
 8017892:	683b      	ldr	r3, [r7, #0]
 8017894:	687a      	ldr	r2, [r7, #4]
 8017896:	68b9      	ldr	r1, [r7, #8]
 8017898:	68f8      	ldr	r0, [r7, #12]
 801789a:	f000 f850 	bl	801793e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801789e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80178a0:	f000 f8e2 	bl	8017a68 <prvAddNewTaskToReadyList>
 80178a4:	e001      	b.n	80178aa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80178a6:	2300      	movs	r3, #0
 80178a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80178aa:	697b      	ldr	r3, [r7, #20]
	}
 80178ac:	4618      	mov	r0, r3
 80178ae:	3728      	adds	r7, #40	@ 0x28
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}

080178b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b08c      	sub	sp, #48	@ 0x30
 80178b8:	af04      	add	r7, sp, #16
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	603b      	str	r3, [r7, #0]
 80178c0:	4613      	mov	r3, r2
 80178c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80178c4:	88fb      	ldrh	r3, [r7, #6]
 80178c6:	009b      	lsls	r3, r3, #2
 80178c8:	4618      	mov	r0, r3
 80178ca:	f001 fa55 	bl	8018d78 <pvPortMalloc>
 80178ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80178d0:	697b      	ldr	r3, [r7, #20]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d00e      	beq.n	80178f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80178d6:	2058      	movs	r0, #88	@ 0x58
 80178d8:	f001 fa4e 	bl	8018d78 <pvPortMalloc>
 80178dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80178de:	69fb      	ldr	r3, [r7, #28]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d003      	beq.n	80178ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80178e4:	69fb      	ldr	r3, [r7, #28]
 80178e6:	697a      	ldr	r2, [r7, #20]
 80178e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80178ea:	e005      	b.n	80178f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80178ec:	6978      	ldr	r0, [r7, #20]
 80178ee:	f001 fb15 	bl	8018f1c <vPortFree>
 80178f2:	e001      	b.n	80178f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80178f4:	2300      	movs	r3, #0
 80178f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80178f8:	69fb      	ldr	r3, [r7, #28]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d017      	beq.n	801792e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80178fe:	69fb      	ldr	r3, [r7, #28]
 8017900:	2200      	movs	r2, #0
 8017902:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017906:	88fa      	ldrh	r2, [r7, #6]
 8017908:	2300      	movs	r3, #0
 801790a:	9303      	str	r3, [sp, #12]
 801790c:	69fb      	ldr	r3, [r7, #28]
 801790e:	9302      	str	r3, [sp, #8]
 8017910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017912:	9301      	str	r3, [sp, #4]
 8017914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017916:	9300      	str	r3, [sp, #0]
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	68b9      	ldr	r1, [r7, #8]
 801791c:	68f8      	ldr	r0, [r7, #12]
 801791e:	f000 f80e 	bl	801793e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017922:	69f8      	ldr	r0, [r7, #28]
 8017924:	f000 f8a0 	bl	8017a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017928:	2301      	movs	r3, #1
 801792a:	61bb      	str	r3, [r7, #24]
 801792c:	e002      	b.n	8017934 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801792e:	f04f 33ff 	mov.w	r3, #4294967295
 8017932:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017934:	69bb      	ldr	r3, [r7, #24]
	}
 8017936:	4618      	mov	r0, r3
 8017938:	3720      	adds	r7, #32
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}

0801793e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801793e:	b580      	push	{r7, lr}
 8017940:	b088      	sub	sp, #32
 8017942:	af00      	add	r7, sp, #0
 8017944:	60f8      	str	r0, [r7, #12]
 8017946:	60b9      	str	r1, [r7, #8]
 8017948:	607a      	str	r2, [r7, #4]
 801794a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801794e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	009b      	lsls	r3, r3, #2
 8017954:	461a      	mov	r2, r3
 8017956:	21a5      	movs	r1, #165	@ 0xa5
 8017958:	f002 f846 	bl	80199e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801795e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017960:	6879      	ldr	r1, [r7, #4]
 8017962:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017966:	440b      	add	r3, r1
 8017968:	009b      	lsls	r3, r3, #2
 801796a:	4413      	add	r3, r2
 801796c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801796e:	69bb      	ldr	r3, [r7, #24]
 8017970:	f023 0307 	bic.w	r3, r3, #7
 8017974:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017976:	69bb      	ldr	r3, [r7, #24]
 8017978:	f003 0307 	and.w	r3, r3, #7
 801797c:	2b00      	cmp	r3, #0
 801797e:	d00d      	beq.n	801799c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8017980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017984:	b672      	cpsid	i
 8017986:	f383 8811 	msr	BASEPRI, r3
 801798a:	f3bf 8f6f 	isb	sy
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	b662      	cpsie	i
 8017994:	617b      	str	r3, [r7, #20]
}
 8017996:	bf00      	nop
 8017998:	bf00      	nop
 801799a:	e7fd      	b.n	8017998 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801799c:	68bb      	ldr	r3, [r7, #8]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d01f      	beq.n	80179e2 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80179a2:	2300      	movs	r3, #0
 80179a4:	61fb      	str	r3, [r7, #28]
 80179a6:	e012      	b.n	80179ce <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80179a8:	68ba      	ldr	r2, [r7, #8]
 80179aa:	69fb      	ldr	r3, [r7, #28]
 80179ac:	4413      	add	r3, r2
 80179ae:	7819      	ldrb	r1, [r3, #0]
 80179b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	4413      	add	r3, r2
 80179b6:	3334      	adds	r3, #52	@ 0x34
 80179b8:	460a      	mov	r2, r1
 80179ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80179bc:	68ba      	ldr	r2, [r7, #8]
 80179be:	69fb      	ldr	r3, [r7, #28]
 80179c0:	4413      	add	r3, r2
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d006      	beq.n	80179d6 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80179c8:	69fb      	ldr	r3, [r7, #28]
 80179ca:	3301      	adds	r3, #1
 80179cc:	61fb      	str	r3, [r7, #28]
 80179ce:	69fb      	ldr	r3, [r7, #28]
 80179d0:	2b0f      	cmp	r3, #15
 80179d2:	d9e9      	bls.n	80179a8 <prvInitialiseNewTask+0x6a>
 80179d4:	e000      	b.n	80179d8 <prvInitialiseNewTask+0x9a>
			{
				break;
 80179d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80179d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179da:	2200      	movs	r2, #0
 80179dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80179e0:	e003      	b.n	80179ea <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80179e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179e4:	2200      	movs	r2, #0
 80179e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80179ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179ec:	2b06      	cmp	r3, #6
 80179ee:	d901      	bls.n	80179f4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80179f0:	2306      	movs	r3, #6
 80179f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80179f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80179f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80179fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80179fe:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a02:	2200      	movs	r2, #0
 8017a04:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a08:	3304      	adds	r3, #4
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f7fe feca 	bl	80167a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a12:	3318      	adds	r3, #24
 8017a14:	4618      	mov	r0, r3
 8017a16:	f7fe fec5 	bl	80167a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017a1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a22:	f1c3 0207 	rsb	r2, r3, #7
 8017a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017a2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a32:	2200      	movs	r2, #0
 8017a34:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a38:	2200      	movs	r2, #0
 8017a3a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a3e:	2200      	movs	r2, #0
 8017a40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017a44:	683a      	ldr	r2, [r7, #0]
 8017a46:	68f9      	ldr	r1, [r7, #12]
 8017a48:	69b8      	ldr	r0, [r7, #24]
 8017a4a:	f000 ff5b 	bl	8018904 <pxPortInitialiseStack>
 8017a4e:	4602      	mov	r2, r0
 8017a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d002      	beq.n	8017a60 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017a5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017a60:	bf00      	nop
 8017a62:	3720      	adds	r7, #32
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}

08017a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017a70:	f001 f854 	bl	8018b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017a74:	4b2a      	ldr	r3, [pc, #168]	@ (8017b20 <prvAddNewTaskToReadyList+0xb8>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	3301      	adds	r3, #1
 8017a7a:	4a29      	ldr	r2, [pc, #164]	@ (8017b20 <prvAddNewTaskToReadyList+0xb8>)
 8017a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017a7e:	4b29      	ldr	r3, [pc, #164]	@ (8017b24 <prvAddNewTaskToReadyList+0xbc>)
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d109      	bne.n	8017a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017a86:	4a27      	ldr	r2, [pc, #156]	@ (8017b24 <prvAddNewTaskToReadyList+0xbc>)
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017a8c:	4b24      	ldr	r3, [pc, #144]	@ (8017b20 <prvAddNewTaskToReadyList+0xb8>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	2b01      	cmp	r3, #1
 8017a92:	d110      	bne.n	8017ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017a94:	f000 fc32 	bl	80182fc <prvInitialiseTaskLists>
 8017a98:	e00d      	b.n	8017ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017a9a:	4b23      	ldr	r3, [pc, #140]	@ (8017b28 <prvAddNewTaskToReadyList+0xc0>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d109      	bne.n	8017ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017aa2:	4b20      	ldr	r3, [pc, #128]	@ (8017b24 <prvAddNewTaskToReadyList+0xbc>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d802      	bhi.n	8017ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8017b24 <prvAddNewTaskToReadyList+0xbc>)
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8017b2c <prvAddNewTaskToReadyList+0xc4>)
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	3301      	adds	r3, #1
 8017abc:	4a1b      	ldr	r2, [pc, #108]	@ (8017b2c <prvAddNewTaskToReadyList+0xc4>)
 8017abe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ac4:	2201      	movs	r2, #1
 8017ac6:	409a      	lsls	r2, r3
 8017ac8:	4b19      	ldr	r3, [pc, #100]	@ (8017b30 <prvAddNewTaskToReadyList+0xc8>)
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	4313      	orrs	r3, r2
 8017ace:	4a18      	ldr	r2, [pc, #96]	@ (8017b30 <prvAddNewTaskToReadyList+0xc8>)
 8017ad0:	6013      	str	r3, [r2, #0]
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ad6:	4613      	mov	r3, r2
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	4413      	add	r3, r2
 8017adc:	009b      	lsls	r3, r3, #2
 8017ade:	4a15      	ldr	r2, [pc, #84]	@ (8017b34 <prvAddNewTaskToReadyList+0xcc>)
 8017ae0:	441a      	add	r2, r3
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	3304      	adds	r3, #4
 8017ae6:	4619      	mov	r1, r3
 8017ae8:	4610      	mov	r0, r2
 8017aea:	f7fe fe68 	bl	80167be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017aee:	f001 f84b 	bl	8018b88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017af2:	4b0d      	ldr	r3, [pc, #52]	@ (8017b28 <prvAddNewTaskToReadyList+0xc0>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d00e      	beq.n	8017b18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017afa:	4b0a      	ldr	r3, [pc, #40]	@ (8017b24 <prvAddNewTaskToReadyList+0xbc>)
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d207      	bcs.n	8017b18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017b08:	4b0b      	ldr	r3, [pc, #44]	@ (8017b38 <prvAddNewTaskToReadyList+0xd0>)
 8017b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017b0e:	601a      	str	r2, [r3, #0]
 8017b10:	f3bf 8f4f 	dsb	sy
 8017b14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017b18:	bf00      	nop
 8017b1a:	3708      	adds	r7, #8
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	200016c8 	.word	0x200016c8
 8017b24:	200015c8 	.word	0x200015c8
 8017b28:	200016d4 	.word	0x200016d4
 8017b2c:	200016e4 	.word	0x200016e4
 8017b30:	200016d0 	.word	0x200016d0
 8017b34:	200015cc 	.word	0x200015cc
 8017b38:	e000ed04 	.word	0xe000ed04

08017b3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b084      	sub	sp, #16
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017b44:	2300      	movs	r3, #0
 8017b46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d01a      	beq.n	8017b84 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017b4e:	4b15      	ldr	r3, [pc, #84]	@ (8017ba4 <vTaskDelay+0x68>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d00d      	beq.n	8017b72 <vTaskDelay+0x36>
	__asm volatile
 8017b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b5a:	b672      	cpsid	i
 8017b5c:	f383 8811 	msr	BASEPRI, r3
 8017b60:	f3bf 8f6f 	isb	sy
 8017b64:	f3bf 8f4f 	dsb	sy
 8017b68:	b662      	cpsie	i
 8017b6a:	60bb      	str	r3, [r7, #8]
}
 8017b6c:	bf00      	nop
 8017b6e:	bf00      	nop
 8017b70:	e7fd      	b.n	8017b6e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8017b72:	f000 f881 	bl	8017c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017b76:	2100      	movs	r1, #0
 8017b78:	6878      	ldr	r0, [r7, #4]
 8017b7a:	f000 fe5d 	bl	8018838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017b7e:	f000 f889 	bl	8017c94 <xTaskResumeAll>
 8017b82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d107      	bne.n	8017b9a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8017b8a:	4b07      	ldr	r3, [pc, #28]	@ (8017ba8 <vTaskDelay+0x6c>)
 8017b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017b90:	601a      	str	r2, [r3, #0]
 8017b92:	f3bf 8f4f 	dsb	sy
 8017b96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017b9a:	bf00      	nop
 8017b9c:	3710      	adds	r7, #16
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	200016f0 	.word	0x200016f0
 8017ba8:	e000ed04 	.word	0xe000ed04

08017bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b08a      	sub	sp, #40	@ 0x28
 8017bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017bba:	463a      	mov	r2, r7
 8017bbc:	1d39      	adds	r1, r7, #4
 8017bbe:	f107 0308 	add.w	r3, r7, #8
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f7e9 fb8c 	bl	80012e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017bc8:	6839      	ldr	r1, [r7, #0]
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	68ba      	ldr	r2, [r7, #8]
 8017bce:	9202      	str	r2, [sp, #8]
 8017bd0:	9301      	str	r3, [sp, #4]
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	9300      	str	r3, [sp, #0]
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	460a      	mov	r2, r1
 8017bda:	4921      	ldr	r1, [pc, #132]	@ (8017c60 <vTaskStartScheduler+0xb4>)
 8017bdc:	4821      	ldr	r0, [pc, #132]	@ (8017c64 <vTaskStartScheduler+0xb8>)
 8017bde:	f7ff fe03 	bl	80177e8 <xTaskCreateStatic>
 8017be2:	4603      	mov	r3, r0
 8017be4:	4a20      	ldr	r2, [pc, #128]	@ (8017c68 <vTaskStartScheduler+0xbc>)
 8017be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017be8:	4b1f      	ldr	r3, [pc, #124]	@ (8017c68 <vTaskStartScheduler+0xbc>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d002      	beq.n	8017bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	617b      	str	r3, [r7, #20]
 8017bf4:	e001      	b.n	8017bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d118      	bne.n	8017c32 <vTaskStartScheduler+0x86>
	__asm volatile
 8017c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c04:	b672      	cpsid	i
 8017c06:	f383 8811 	msr	BASEPRI, r3
 8017c0a:	f3bf 8f6f 	isb	sy
 8017c0e:	f3bf 8f4f 	dsb	sy
 8017c12:	b662      	cpsie	i
 8017c14:	613b      	str	r3, [r7, #16]
}
 8017c16:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017c18:	4b14      	ldr	r3, [pc, #80]	@ (8017c6c <vTaskStartScheduler+0xc0>)
 8017c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017c20:	4b13      	ldr	r3, [pc, #76]	@ (8017c70 <vTaskStartScheduler+0xc4>)
 8017c22:	2201      	movs	r2, #1
 8017c24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017c26:	4b13      	ldr	r3, [pc, #76]	@ (8017c74 <vTaskStartScheduler+0xc8>)
 8017c28:	2200      	movs	r2, #0
 8017c2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017c2c:	f000 fef8 	bl	8018a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017c30:	e011      	b.n	8017c56 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017c32:	697b      	ldr	r3, [r7, #20]
 8017c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c38:	d10d      	bne.n	8017c56 <vTaskStartScheduler+0xaa>
	__asm volatile
 8017c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c3e:	b672      	cpsid	i
 8017c40:	f383 8811 	msr	BASEPRI, r3
 8017c44:	f3bf 8f6f 	isb	sy
 8017c48:	f3bf 8f4f 	dsb	sy
 8017c4c:	b662      	cpsie	i
 8017c4e:	60fb      	str	r3, [r7, #12]
}
 8017c50:	bf00      	nop
 8017c52:	bf00      	nop
 8017c54:	e7fd      	b.n	8017c52 <vTaskStartScheduler+0xa6>
}
 8017c56:	bf00      	nop
 8017c58:	3718      	adds	r7, #24
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}
 8017c5e:	bf00      	nop
 8017c60:	0801c180 	.word	0x0801c180
 8017c64:	080182c9 	.word	0x080182c9
 8017c68:	200016ec 	.word	0x200016ec
 8017c6c:	200016e8 	.word	0x200016e8
 8017c70:	200016d4 	.word	0x200016d4
 8017c74:	200016cc 	.word	0x200016cc

08017c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017c78:	b480      	push	{r7}
 8017c7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017c7c:	4b04      	ldr	r3, [pc, #16]	@ (8017c90 <vTaskSuspendAll+0x18>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	3301      	adds	r3, #1
 8017c82:	4a03      	ldr	r2, [pc, #12]	@ (8017c90 <vTaskSuspendAll+0x18>)
 8017c84:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8017c86:	bf00      	nop
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8e:	4770      	bx	lr
 8017c90:	200016f0 	.word	0x200016f0

08017c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b084      	sub	sp, #16
 8017c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017ca2:	4b43      	ldr	r3, [pc, #268]	@ (8017db0 <xTaskResumeAll+0x11c>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d10d      	bne.n	8017cc6 <xTaskResumeAll+0x32>
	__asm volatile
 8017caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017cae:	b672      	cpsid	i
 8017cb0:	f383 8811 	msr	BASEPRI, r3
 8017cb4:	f3bf 8f6f 	isb	sy
 8017cb8:	f3bf 8f4f 	dsb	sy
 8017cbc:	b662      	cpsie	i
 8017cbe:	603b      	str	r3, [r7, #0]
}
 8017cc0:	bf00      	nop
 8017cc2:	bf00      	nop
 8017cc4:	e7fd      	b.n	8017cc2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017cc6:	f000 ff29 	bl	8018b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017cca:	4b39      	ldr	r3, [pc, #228]	@ (8017db0 <xTaskResumeAll+0x11c>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	3b01      	subs	r3, #1
 8017cd0:	4a37      	ldr	r2, [pc, #220]	@ (8017db0 <xTaskResumeAll+0x11c>)
 8017cd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017cd4:	4b36      	ldr	r3, [pc, #216]	@ (8017db0 <xTaskResumeAll+0x11c>)
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d161      	bne.n	8017da0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017cdc:	4b35      	ldr	r3, [pc, #212]	@ (8017db4 <xTaskResumeAll+0x120>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d05d      	beq.n	8017da0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017ce4:	e02e      	b.n	8017d44 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ce6:	4b34      	ldr	r3, [pc, #208]	@ (8017db8 <xTaskResumeAll+0x124>)
 8017ce8:	68db      	ldr	r3, [r3, #12]
 8017cea:	68db      	ldr	r3, [r3, #12]
 8017cec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	3318      	adds	r3, #24
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f7fe fdc0 	bl	8016878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	3304      	adds	r3, #4
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f7fe fdbb 	bl	8016878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d06:	2201      	movs	r2, #1
 8017d08:	409a      	lsls	r2, r3
 8017d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8017dbc <xTaskResumeAll+0x128>)
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	4313      	orrs	r3, r2
 8017d10:	4a2a      	ldr	r2, [pc, #168]	@ (8017dbc <xTaskResumeAll+0x128>)
 8017d12:	6013      	str	r3, [r2, #0]
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017d18:	4613      	mov	r3, r2
 8017d1a:	009b      	lsls	r3, r3, #2
 8017d1c:	4413      	add	r3, r2
 8017d1e:	009b      	lsls	r3, r3, #2
 8017d20:	4a27      	ldr	r2, [pc, #156]	@ (8017dc0 <xTaskResumeAll+0x12c>)
 8017d22:	441a      	add	r2, r3
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	3304      	adds	r3, #4
 8017d28:	4619      	mov	r1, r3
 8017d2a:	4610      	mov	r0, r2
 8017d2c:	f7fe fd47 	bl	80167be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017d34:	4b23      	ldr	r3, [pc, #140]	@ (8017dc4 <xTaskResumeAll+0x130>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	d302      	bcc.n	8017d44 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8017d3e:	4b22      	ldr	r3, [pc, #136]	@ (8017dc8 <xTaskResumeAll+0x134>)
 8017d40:	2201      	movs	r2, #1
 8017d42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017d44:	4b1c      	ldr	r3, [pc, #112]	@ (8017db8 <xTaskResumeAll+0x124>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d1cc      	bne.n	8017ce6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d001      	beq.n	8017d56 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017d52:	f000 fb73 	bl	801843c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017d56:	4b1d      	ldr	r3, [pc, #116]	@ (8017dcc <xTaskResumeAll+0x138>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d010      	beq.n	8017d84 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017d62:	f000 f859 	bl	8017e18 <xTaskIncrementTick>
 8017d66:	4603      	mov	r3, r0
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d002      	beq.n	8017d72 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8017d6c:	4b16      	ldr	r3, [pc, #88]	@ (8017dc8 <xTaskResumeAll+0x134>)
 8017d6e:	2201      	movs	r2, #1
 8017d70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	3b01      	subs	r3, #1
 8017d76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d1f1      	bne.n	8017d62 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8017d7e:	4b13      	ldr	r3, [pc, #76]	@ (8017dcc <xTaskResumeAll+0x138>)
 8017d80:	2200      	movs	r2, #0
 8017d82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017d84:	4b10      	ldr	r3, [pc, #64]	@ (8017dc8 <xTaskResumeAll+0x134>)
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d009      	beq.n	8017da0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017d90:	4b0f      	ldr	r3, [pc, #60]	@ (8017dd0 <xTaskResumeAll+0x13c>)
 8017d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017d96:	601a      	str	r2, [r3, #0]
 8017d98:	f3bf 8f4f 	dsb	sy
 8017d9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017da0:	f000 fef2 	bl	8018b88 <vPortExitCritical>

	return xAlreadyYielded;
 8017da4:	68bb      	ldr	r3, [r7, #8]
}
 8017da6:	4618      	mov	r0, r3
 8017da8:	3710      	adds	r7, #16
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}
 8017dae:	bf00      	nop
 8017db0:	200016f0 	.word	0x200016f0
 8017db4:	200016c8 	.word	0x200016c8
 8017db8:	20001688 	.word	0x20001688
 8017dbc:	200016d0 	.word	0x200016d0
 8017dc0:	200015cc 	.word	0x200015cc
 8017dc4:	200015c8 	.word	0x200015c8
 8017dc8:	200016dc 	.word	0x200016dc
 8017dcc:	200016d8 	.word	0x200016d8
 8017dd0:	e000ed04 	.word	0xe000ed04

08017dd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017dd4:	b480      	push	{r7}
 8017dd6:	b083      	sub	sp, #12
 8017dd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017dda:	4b05      	ldr	r3, [pc, #20]	@ (8017df0 <xTaskGetTickCount+0x1c>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017de0:	687b      	ldr	r3, [r7, #4]
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	370c      	adds	r7, #12
 8017de6:	46bd      	mov	sp, r7
 8017de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dec:	4770      	bx	lr
 8017dee:	bf00      	nop
 8017df0:	200016cc 	.word	0x200016cc

08017df4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b082      	sub	sp, #8
 8017df8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017dfa:	f000 ff77 	bl	8018cec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8017dfe:	2300      	movs	r3, #0
 8017e00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017e02:	4b04      	ldr	r3, [pc, #16]	@ (8017e14 <xTaskGetTickCountFromISR+0x20>)
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017e08:	683b      	ldr	r3, [r7, #0]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3708      	adds	r7, #8
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
 8017e12:	bf00      	nop
 8017e14:	200016cc 	.word	0x200016cc

08017e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b086      	sub	sp, #24
 8017e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017e22:	4b50      	ldr	r3, [pc, #320]	@ (8017f64 <xTaskIncrementTick+0x14c>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	f040 808b 	bne.w	8017f42 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8017f68 <xTaskIncrementTick+0x150>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	3301      	adds	r3, #1
 8017e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017e34:	4a4c      	ldr	r2, [pc, #304]	@ (8017f68 <xTaskIncrementTick+0x150>)
 8017e36:	693b      	ldr	r3, [r7, #16]
 8017e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d123      	bne.n	8017e88 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8017e40:	4b4a      	ldr	r3, [pc, #296]	@ (8017f6c <xTaskIncrementTick+0x154>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d00d      	beq.n	8017e66 <xTaskIncrementTick+0x4e>
	__asm volatile
 8017e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e4e:	b672      	cpsid	i
 8017e50:	f383 8811 	msr	BASEPRI, r3
 8017e54:	f3bf 8f6f 	isb	sy
 8017e58:	f3bf 8f4f 	dsb	sy
 8017e5c:	b662      	cpsie	i
 8017e5e:	603b      	str	r3, [r7, #0]
}
 8017e60:	bf00      	nop
 8017e62:	bf00      	nop
 8017e64:	e7fd      	b.n	8017e62 <xTaskIncrementTick+0x4a>
 8017e66:	4b41      	ldr	r3, [pc, #260]	@ (8017f6c <xTaskIncrementTick+0x154>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	60fb      	str	r3, [r7, #12]
 8017e6c:	4b40      	ldr	r3, [pc, #256]	@ (8017f70 <xTaskIncrementTick+0x158>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	4a3e      	ldr	r2, [pc, #248]	@ (8017f6c <xTaskIncrementTick+0x154>)
 8017e72:	6013      	str	r3, [r2, #0]
 8017e74:	4a3e      	ldr	r2, [pc, #248]	@ (8017f70 <xTaskIncrementTick+0x158>)
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	6013      	str	r3, [r2, #0]
 8017e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8017f74 <xTaskIncrementTick+0x15c>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	3301      	adds	r3, #1
 8017e80:	4a3c      	ldr	r2, [pc, #240]	@ (8017f74 <xTaskIncrementTick+0x15c>)
 8017e82:	6013      	str	r3, [r2, #0]
 8017e84:	f000 fada 	bl	801843c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017e88:	4b3b      	ldr	r3, [pc, #236]	@ (8017f78 <xTaskIncrementTick+0x160>)
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	693a      	ldr	r2, [r7, #16]
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d348      	bcc.n	8017f24 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017e92:	4b36      	ldr	r3, [pc, #216]	@ (8017f6c <xTaskIncrementTick+0x154>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d104      	bne.n	8017ea6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017e9c:	4b36      	ldr	r3, [pc, #216]	@ (8017f78 <xTaskIncrementTick+0x160>)
 8017e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8017ea2:	601a      	str	r2, [r3, #0]
					break;
 8017ea4:	e03e      	b.n	8017f24 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ea6:	4b31      	ldr	r3, [pc, #196]	@ (8017f6c <xTaskIncrementTick+0x154>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	68db      	ldr	r3, [r3, #12]
 8017eac:	68db      	ldr	r3, [r3, #12]
 8017eae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	685b      	ldr	r3, [r3, #4]
 8017eb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017eb6:	693a      	ldr	r2, [r7, #16]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d203      	bcs.n	8017ec6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8017f78 <xTaskIncrementTick+0x160>)
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017ec4:	e02e      	b.n	8017f24 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ec6:	68bb      	ldr	r3, [r7, #8]
 8017ec8:	3304      	adds	r3, #4
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f7fe fcd4 	bl	8016878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d004      	beq.n	8017ee2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	3318      	adds	r3, #24
 8017edc:	4618      	mov	r0, r3
 8017ede:	f7fe fccb 	bl	8016878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017ee2:	68bb      	ldr	r3, [r7, #8]
 8017ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	409a      	lsls	r2, r3
 8017eea:	4b24      	ldr	r3, [pc, #144]	@ (8017f7c <xTaskIncrementTick+0x164>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	4313      	orrs	r3, r2
 8017ef0:	4a22      	ldr	r2, [pc, #136]	@ (8017f7c <xTaskIncrementTick+0x164>)
 8017ef2:	6013      	str	r3, [r2, #0]
 8017ef4:	68bb      	ldr	r3, [r7, #8]
 8017ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ef8:	4613      	mov	r3, r2
 8017efa:	009b      	lsls	r3, r3, #2
 8017efc:	4413      	add	r3, r2
 8017efe:	009b      	lsls	r3, r3, #2
 8017f00:	4a1f      	ldr	r2, [pc, #124]	@ (8017f80 <xTaskIncrementTick+0x168>)
 8017f02:	441a      	add	r2, r3
 8017f04:	68bb      	ldr	r3, [r7, #8]
 8017f06:	3304      	adds	r3, #4
 8017f08:	4619      	mov	r1, r3
 8017f0a:	4610      	mov	r0, r2
 8017f0c:	f7fe fc57 	bl	80167be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017f10:	68bb      	ldr	r3, [r7, #8]
 8017f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017f14:	4b1b      	ldr	r3, [pc, #108]	@ (8017f84 <xTaskIncrementTick+0x16c>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d3b9      	bcc.n	8017e92 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8017f1e:	2301      	movs	r3, #1
 8017f20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017f22:	e7b6      	b.n	8017e92 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017f24:	4b17      	ldr	r3, [pc, #92]	@ (8017f84 <xTaskIncrementTick+0x16c>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017f2a:	4915      	ldr	r1, [pc, #84]	@ (8017f80 <xTaskIncrementTick+0x168>)
 8017f2c:	4613      	mov	r3, r2
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	4413      	add	r3, r2
 8017f32:	009b      	lsls	r3, r3, #2
 8017f34:	440b      	add	r3, r1
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	2b01      	cmp	r3, #1
 8017f3a:	d907      	bls.n	8017f4c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	617b      	str	r3, [r7, #20]
 8017f40:	e004      	b.n	8017f4c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8017f42:	4b11      	ldr	r3, [pc, #68]	@ (8017f88 <xTaskIncrementTick+0x170>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	3301      	adds	r3, #1
 8017f48:	4a0f      	ldr	r2, [pc, #60]	@ (8017f88 <xTaskIncrementTick+0x170>)
 8017f4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8017f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8017f8c <xTaskIncrementTick+0x174>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d001      	beq.n	8017f58 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8017f54:	2301      	movs	r3, #1
 8017f56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8017f58:	697b      	ldr	r3, [r7, #20]
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	3718      	adds	r7, #24
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}
 8017f62:	bf00      	nop
 8017f64:	200016f0 	.word	0x200016f0
 8017f68:	200016cc 	.word	0x200016cc
 8017f6c:	20001680 	.word	0x20001680
 8017f70:	20001684 	.word	0x20001684
 8017f74:	200016e0 	.word	0x200016e0
 8017f78:	200016e8 	.word	0x200016e8
 8017f7c:	200016d0 	.word	0x200016d0
 8017f80:	200015cc 	.word	0x200015cc
 8017f84:	200015c8 	.word	0x200015c8
 8017f88:	200016d8 	.word	0x200016d8
 8017f8c:	200016dc 	.word	0x200016dc

08017f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b088      	sub	sp, #32
 8017f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017f96:	4b3b      	ldr	r3, [pc, #236]	@ (8018084 <vTaskSwitchContext+0xf4>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d003      	beq.n	8017fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8018088 <vTaskSwitchContext+0xf8>)
 8017fa0:	2201      	movs	r2, #1
 8017fa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017fa4:	e069      	b.n	801807a <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8017fa6:	4b38      	ldr	r3, [pc, #224]	@ (8018088 <vTaskSwitchContext+0xf8>)
 8017fa8:	2200      	movs	r2, #0
 8017faa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017fac:	4b37      	ldr	r3, [pc, #220]	@ (801808c <vTaskSwitchContext+0xfc>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017fb2:	61fb      	str	r3, [r7, #28]
 8017fb4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8017fb8:	61bb      	str	r3, [r7, #24]
 8017fba:	69fb      	ldr	r3, [r7, #28]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	69ba      	ldr	r2, [r7, #24]
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d111      	bne.n	8017fe8 <vTaskSwitchContext+0x58>
 8017fc4:	69fb      	ldr	r3, [r7, #28]
 8017fc6:	3304      	adds	r3, #4
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	69ba      	ldr	r2, [r7, #24]
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	d10b      	bne.n	8017fe8 <vTaskSwitchContext+0x58>
 8017fd0:	69fb      	ldr	r3, [r7, #28]
 8017fd2:	3308      	adds	r3, #8
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	69ba      	ldr	r2, [r7, #24]
 8017fd8:	429a      	cmp	r2, r3
 8017fda:	d105      	bne.n	8017fe8 <vTaskSwitchContext+0x58>
 8017fdc:	69fb      	ldr	r3, [r7, #28]
 8017fde:	330c      	adds	r3, #12
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	69ba      	ldr	r2, [r7, #24]
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	d008      	beq.n	8017ffa <vTaskSwitchContext+0x6a>
 8017fe8:	4b28      	ldr	r3, [pc, #160]	@ (801808c <vTaskSwitchContext+0xfc>)
 8017fea:	681a      	ldr	r2, [r3, #0]
 8017fec:	4b27      	ldr	r3, [pc, #156]	@ (801808c <vTaskSwitchContext+0xfc>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	3334      	adds	r3, #52	@ 0x34
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	4610      	mov	r0, r2
 8017ff6:	f7e9 f961 	bl	80012bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ffa:	4b25      	ldr	r3, [pc, #148]	@ (8018090 <vTaskSwitchContext+0x100>)
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	fab3 f383 	clz	r3, r3
 8018006:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018008:	7afb      	ldrb	r3, [r7, #11]
 801800a:	f1c3 031f 	rsb	r3, r3, #31
 801800e:	617b      	str	r3, [r7, #20]
 8018010:	4920      	ldr	r1, [pc, #128]	@ (8018094 <vTaskSwitchContext+0x104>)
 8018012:	697a      	ldr	r2, [r7, #20]
 8018014:	4613      	mov	r3, r2
 8018016:	009b      	lsls	r3, r3, #2
 8018018:	4413      	add	r3, r2
 801801a:	009b      	lsls	r3, r3, #2
 801801c:	440b      	add	r3, r1
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d10d      	bne.n	8018040 <vTaskSwitchContext+0xb0>
	__asm volatile
 8018024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018028:	b672      	cpsid	i
 801802a:	f383 8811 	msr	BASEPRI, r3
 801802e:	f3bf 8f6f 	isb	sy
 8018032:	f3bf 8f4f 	dsb	sy
 8018036:	b662      	cpsie	i
 8018038:	607b      	str	r3, [r7, #4]
}
 801803a:	bf00      	nop
 801803c:	bf00      	nop
 801803e:	e7fd      	b.n	801803c <vTaskSwitchContext+0xac>
 8018040:	697a      	ldr	r2, [r7, #20]
 8018042:	4613      	mov	r3, r2
 8018044:	009b      	lsls	r3, r3, #2
 8018046:	4413      	add	r3, r2
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	4a12      	ldr	r2, [pc, #72]	@ (8018094 <vTaskSwitchContext+0x104>)
 801804c:	4413      	add	r3, r2
 801804e:	613b      	str	r3, [r7, #16]
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	685b      	ldr	r3, [r3, #4]
 8018054:	685a      	ldr	r2, [r3, #4]
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	605a      	str	r2, [r3, #4]
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	685a      	ldr	r2, [r3, #4]
 801805e:	693b      	ldr	r3, [r7, #16]
 8018060:	3308      	adds	r3, #8
 8018062:	429a      	cmp	r2, r3
 8018064:	d104      	bne.n	8018070 <vTaskSwitchContext+0xe0>
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	685a      	ldr	r2, [r3, #4]
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	605a      	str	r2, [r3, #4]
 8018070:	693b      	ldr	r3, [r7, #16]
 8018072:	685b      	ldr	r3, [r3, #4]
 8018074:	68db      	ldr	r3, [r3, #12]
 8018076:	4a05      	ldr	r2, [pc, #20]	@ (801808c <vTaskSwitchContext+0xfc>)
 8018078:	6013      	str	r3, [r2, #0]
}
 801807a:	bf00      	nop
 801807c:	3720      	adds	r7, #32
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}
 8018082:	bf00      	nop
 8018084:	200016f0 	.word	0x200016f0
 8018088:	200016dc 	.word	0x200016dc
 801808c:	200015c8 	.word	0x200015c8
 8018090:	200016d0 	.word	0x200016d0
 8018094:	200015cc 	.word	0x200015cc

08018098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b084      	sub	sp, #16
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
 80180a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d10d      	bne.n	80180c4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80180a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180ac:	b672      	cpsid	i
 80180ae:	f383 8811 	msr	BASEPRI, r3
 80180b2:	f3bf 8f6f 	isb	sy
 80180b6:	f3bf 8f4f 	dsb	sy
 80180ba:	b662      	cpsie	i
 80180bc:	60fb      	str	r3, [r7, #12]
}
 80180be:	bf00      	nop
 80180c0:	bf00      	nop
 80180c2:	e7fd      	b.n	80180c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80180c4:	4b07      	ldr	r3, [pc, #28]	@ (80180e4 <vTaskPlaceOnEventList+0x4c>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	3318      	adds	r3, #24
 80180ca:	4619      	mov	r1, r3
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	f7fe fb9a 	bl	8016806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80180d2:	2101      	movs	r1, #1
 80180d4:	6838      	ldr	r0, [r7, #0]
 80180d6:	f000 fbaf 	bl	8018838 <prvAddCurrentTaskToDelayedList>
}
 80180da:	bf00      	nop
 80180dc:	3710      	adds	r7, #16
 80180de:	46bd      	mov	sp, r7
 80180e0:	bd80      	pop	{r7, pc}
 80180e2:	bf00      	nop
 80180e4:	200015c8 	.word	0x200015c8

080180e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b086      	sub	sp, #24
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	68db      	ldr	r3, [r3, #12]
 80180f4:	68db      	ldr	r3, [r3, #12]
 80180f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80180f8:	693b      	ldr	r3, [r7, #16]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d10d      	bne.n	801811a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80180fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018102:	b672      	cpsid	i
 8018104:	f383 8811 	msr	BASEPRI, r3
 8018108:	f3bf 8f6f 	isb	sy
 801810c:	f3bf 8f4f 	dsb	sy
 8018110:	b662      	cpsie	i
 8018112:	60fb      	str	r3, [r7, #12]
}
 8018114:	bf00      	nop
 8018116:	bf00      	nop
 8018118:	e7fd      	b.n	8018116 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801811a:	693b      	ldr	r3, [r7, #16]
 801811c:	3318      	adds	r3, #24
 801811e:	4618      	mov	r0, r3
 8018120:	f7fe fbaa 	bl	8016878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018124:	4b1d      	ldr	r3, [pc, #116]	@ (801819c <xTaskRemoveFromEventList+0xb4>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d11c      	bne.n	8018166 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	3304      	adds	r3, #4
 8018130:	4618      	mov	r0, r3
 8018132:	f7fe fba1 	bl	8016878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018136:	693b      	ldr	r3, [r7, #16]
 8018138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801813a:	2201      	movs	r2, #1
 801813c:	409a      	lsls	r2, r3
 801813e:	4b18      	ldr	r3, [pc, #96]	@ (80181a0 <xTaskRemoveFromEventList+0xb8>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	4313      	orrs	r3, r2
 8018144:	4a16      	ldr	r2, [pc, #88]	@ (80181a0 <xTaskRemoveFromEventList+0xb8>)
 8018146:	6013      	str	r3, [r2, #0]
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801814c:	4613      	mov	r3, r2
 801814e:	009b      	lsls	r3, r3, #2
 8018150:	4413      	add	r3, r2
 8018152:	009b      	lsls	r3, r3, #2
 8018154:	4a13      	ldr	r2, [pc, #76]	@ (80181a4 <xTaskRemoveFromEventList+0xbc>)
 8018156:	441a      	add	r2, r3
 8018158:	693b      	ldr	r3, [r7, #16]
 801815a:	3304      	adds	r3, #4
 801815c:	4619      	mov	r1, r3
 801815e:	4610      	mov	r0, r2
 8018160:	f7fe fb2d 	bl	80167be <vListInsertEnd>
 8018164:	e005      	b.n	8018172 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018166:	693b      	ldr	r3, [r7, #16]
 8018168:	3318      	adds	r3, #24
 801816a:	4619      	mov	r1, r3
 801816c:	480e      	ldr	r0, [pc, #56]	@ (80181a8 <xTaskRemoveFromEventList+0xc0>)
 801816e:	f7fe fb26 	bl	80167be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018172:	693b      	ldr	r3, [r7, #16]
 8018174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018176:	4b0d      	ldr	r3, [pc, #52]	@ (80181ac <xTaskRemoveFromEventList+0xc4>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801817c:	429a      	cmp	r2, r3
 801817e:	d905      	bls.n	801818c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018180:	2301      	movs	r3, #1
 8018182:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018184:	4b0a      	ldr	r3, [pc, #40]	@ (80181b0 <xTaskRemoveFromEventList+0xc8>)
 8018186:	2201      	movs	r2, #1
 8018188:	601a      	str	r2, [r3, #0]
 801818a:	e001      	b.n	8018190 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 801818c:	2300      	movs	r3, #0
 801818e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018190:	697b      	ldr	r3, [r7, #20]
}
 8018192:	4618      	mov	r0, r3
 8018194:	3718      	adds	r7, #24
 8018196:	46bd      	mov	sp, r7
 8018198:	bd80      	pop	{r7, pc}
 801819a:	bf00      	nop
 801819c:	200016f0 	.word	0x200016f0
 80181a0:	200016d0 	.word	0x200016d0
 80181a4:	200015cc 	.word	0x200015cc
 80181a8:	20001688 	.word	0x20001688
 80181ac:	200015c8 	.word	0x200015c8
 80181b0:	200016dc 	.word	0x200016dc

080181b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80181b4:	b480      	push	{r7}
 80181b6:	b083      	sub	sp, #12
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80181bc:	4b06      	ldr	r3, [pc, #24]	@ (80181d8 <vTaskInternalSetTimeOutState+0x24>)
 80181be:	681a      	ldr	r2, [r3, #0]
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80181c4:	4b05      	ldr	r3, [pc, #20]	@ (80181dc <vTaskInternalSetTimeOutState+0x28>)
 80181c6:	681a      	ldr	r2, [r3, #0]
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	605a      	str	r2, [r3, #4]
}
 80181cc:	bf00      	nop
 80181ce:	370c      	adds	r7, #12
 80181d0:	46bd      	mov	sp, r7
 80181d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d6:	4770      	bx	lr
 80181d8:	200016e0 	.word	0x200016e0
 80181dc:	200016cc 	.word	0x200016cc

080181e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b088      	sub	sp, #32
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
 80181e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d10d      	bne.n	801820c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80181f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181f4:	b672      	cpsid	i
 80181f6:	f383 8811 	msr	BASEPRI, r3
 80181fa:	f3bf 8f6f 	isb	sy
 80181fe:	f3bf 8f4f 	dsb	sy
 8018202:	b662      	cpsie	i
 8018204:	613b      	str	r3, [r7, #16]
}
 8018206:	bf00      	nop
 8018208:	bf00      	nop
 801820a:	e7fd      	b.n	8018208 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801820c:	683b      	ldr	r3, [r7, #0]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d10d      	bne.n	801822e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8018212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018216:	b672      	cpsid	i
 8018218:	f383 8811 	msr	BASEPRI, r3
 801821c:	f3bf 8f6f 	isb	sy
 8018220:	f3bf 8f4f 	dsb	sy
 8018224:	b662      	cpsie	i
 8018226:	60fb      	str	r3, [r7, #12]
}
 8018228:	bf00      	nop
 801822a:	bf00      	nop
 801822c:	e7fd      	b.n	801822a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801822e:	f000 fc75 	bl	8018b1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018232:	4b1d      	ldr	r3, [pc, #116]	@ (80182a8 <xTaskCheckForTimeOut+0xc8>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	685b      	ldr	r3, [r3, #4]
 801823c:	69ba      	ldr	r2, [r7, #24]
 801823e:	1ad3      	subs	r3, r2, r3
 8018240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801824a:	d102      	bne.n	8018252 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801824c:	2300      	movs	r3, #0
 801824e:	61fb      	str	r3, [r7, #28]
 8018250:	e023      	b.n	801829a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681a      	ldr	r2, [r3, #0]
 8018256:	4b15      	ldr	r3, [pc, #84]	@ (80182ac <xTaskCheckForTimeOut+0xcc>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	429a      	cmp	r2, r3
 801825c:	d007      	beq.n	801826e <xTaskCheckForTimeOut+0x8e>
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	685b      	ldr	r3, [r3, #4]
 8018262:	69ba      	ldr	r2, [r7, #24]
 8018264:	429a      	cmp	r2, r3
 8018266:	d302      	bcc.n	801826e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018268:	2301      	movs	r3, #1
 801826a:	61fb      	str	r3, [r7, #28]
 801826c:	e015      	b.n	801829a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801826e:	683b      	ldr	r3, [r7, #0]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	697a      	ldr	r2, [r7, #20]
 8018274:	429a      	cmp	r2, r3
 8018276:	d20b      	bcs.n	8018290 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	681a      	ldr	r2, [r3, #0]
 801827c:	697b      	ldr	r3, [r7, #20]
 801827e:	1ad2      	subs	r2, r2, r3
 8018280:	683b      	ldr	r3, [r7, #0]
 8018282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f7ff ff95 	bl	80181b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801828a:	2300      	movs	r3, #0
 801828c:	61fb      	str	r3, [r7, #28]
 801828e:	e004      	b.n	801829a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	2200      	movs	r2, #0
 8018294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018296:	2301      	movs	r3, #1
 8018298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801829a:	f000 fc75 	bl	8018b88 <vPortExitCritical>

	return xReturn;
 801829e:	69fb      	ldr	r3, [r7, #28]
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	3720      	adds	r7, #32
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}
 80182a8:	200016cc 	.word	0x200016cc
 80182ac:	200016e0 	.word	0x200016e0

080182b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80182b0:	b480      	push	{r7}
 80182b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80182b4:	4b03      	ldr	r3, [pc, #12]	@ (80182c4 <vTaskMissedYield+0x14>)
 80182b6:	2201      	movs	r2, #1
 80182b8:	601a      	str	r2, [r3, #0]
}
 80182ba:	bf00      	nop
 80182bc:	46bd      	mov	sp, r7
 80182be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c2:	4770      	bx	lr
 80182c4:	200016dc 	.word	0x200016dc

080182c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b082      	sub	sp, #8
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80182d0:	f000 f854 	bl	801837c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80182d4:	4b07      	ldr	r3, [pc, #28]	@ (80182f4 <prvIdleTask+0x2c>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2b01      	cmp	r3, #1
 80182da:	d907      	bls.n	80182ec <prvIdleTask+0x24>
			{
				taskYIELD();
 80182dc:	4b06      	ldr	r3, [pc, #24]	@ (80182f8 <prvIdleTask+0x30>)
 80182de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80182e2:	601a      	str	r2, [r3, #0]
 80182e4:	f3bf 8f4f 	dsb	sy
 80182e8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80182ec:	f7e8 ffdf 	bl	80012ae <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80182f0:	e7ee      	b.n	80182d0 <prvIdleTask+0x8>
 80182f2:	bf00      	nop
 80182f4:	200015cc 	.word	0x200015cc
 80182f8:	e000ed04 	.word	0xe000ed04

080182fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b082      	sub	sp, #8
 8018300:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018302:	2300      	movs	r3, #0
 8018304:	607b      	str	r3, [r7, #4]
 8018306:	e00c      	b.n	8018322 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018308:	687a      	ldr	r2, [r7, #4]
 801830a:	4613      	mov	r3, r2
 801830c:	009b      	lsls	r3, r3, #2
 801830e:	4413      	add	r3, r2
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	4a12      	ldr	r2, [pc, #72]	@ (801835c <prvInitialiseTaskLists+0x60>)
 8018314:	4413      	add	r3, r2
 8018316:	4618      	mov	r0, r3
 8018318:	f7fe fa24 	bl	8016764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	3301      	adds	r3, #1
 8018320:	607b      	str	r3, [r7, #4]
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	2b06      	cmp	r3, #6
 8018326:	d9ef      	bls.n	8018308 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018328:	480d      	ldr	r0, [pc, #52]	@ (8018360 <prvInitialiseTaskLists+0x64>)
 801832a:	f7fe fa1b 	bl	8016764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801832e:	480d      	ldr	r0, [pc, #52]	@ (8018364 <prvInitialiseTaskLists+0x68>)
 8018330:	f7fe fa18 	bl	8016764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018334:	480c      	ldr	r0, [pc, #48]	@ (8018368 <prvInitialiseTaskLists+0x6c>)
 8018336:	f7fe fa15 	bl	8016764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801833a:	480c      	ldr	r0, [pc, #48]	@ (801836c <prvInitialiseTaskLists+0x70>)
 801833c:	f7fe fa12 	bl	8016764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018340:	480b      	ldr	r0, [pc, #44]	@ (8018370 <prvInitialiseTaskLists+0x74>)
 8018342:	f7fe fa0f 	bl	8016764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018346:	4b0b      	ldr	r3, [pc, #44]	@ (8018374 <prvInitialiseTaskLists+0x78>)
 8018348:	4a05      	ldr	r2, [pc, #20]	@ (8018360 <prvInitialiseTaskLists+0x64>)
 801834a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801834c:	4b0a      	ldr	r3, [pc, #40]	@ (8018378 <prvInitialiseTaskLists+0x7c>)
 801834e:	4a05      	ldr	r2, [pc, #20]	@ (8018364 <prvInitialiseTaskLists+0x68>)
 8018350:	601a      	str	r2, [r3, #0]
}
 8018352:	bf00      	nop
 8018354:	3708      	adds	r7, #8
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}
 801835a:	bf00      	nop
 801835c:	200015cc 	.word	0x200015cc
 8018360:	20001658 	.word	0x20001658
 8018364:	2000166c 	.word	0x2000166c
 8018368:	20001688 	.word	0x20001688
 801836c:	2000169c 	.word	0x2000169c
 8018370:	200016b4 	.word	0x200016b4
 8018374:	20001680 	.word	0x20001680
 8018378:	20001684 	.word	0x20001684

0801837c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b082      	sub	sp, #8
 8018380:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018382:	e019      	b.n	80183b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018384:	f000 fbca 	bl	8018b1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018388:	4b10      	ldr	r3, [pc, #64]	@ (80183cc <prvCheckTasksWaitingTermination+0x50>)
 801838a:	68db      	ldr	r3, [r3, #12]
 801838c:	68db      	ldr	r3, [r3, #12]
 801838e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	3304      	adds	r3, #4
 8018394:	4618      	mov	r0, r3
 8018396:	f7fe fa6f 	bl	8016878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801839a:	4b0d      	ldr	r3, [pc, #52]	@ (80183d0 <prvCheckTasksWaitingTermination+0x54>)
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	3b01      	subs	r3, #1
 80183a0:	4a0b      	ldr	r2, [pc, #44]	@ (80183d0 <prvCheckTasksWaitingTermination+0x54>)
 80183a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80183a4:	4b0b      	ldr	r3, [pc, #44]	@ (80183d4 <prvCheckTasksWaitingTermination+0x58>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	3b01      	subs	r3, #1
 80183aa:	4a0a      	ldr	r2, [pc, #40]	@ (80183d4 <prvCheckTasksWaitingTermination+0x58>)
 80183ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80183ae:	f000 fbeb 	bl	8018b88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80183b2:	6878      	ldr	r0, [r7, #4]
 80183b4:	f000 f810 	bl	80183d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80183b8:	4b06      	ldr	r3, [pc, #24]	@ (80183d4 <prvCheckTasksWaitingTermination+0x58>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d1e1      	bne.n	8018384 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80183c0:	bf00      	nop
 80183c2:	bf00      	nop
 80183c4:	3708      	adds	r7, #8
 80183c6:	46bd      	mov	sp, r7
 80183c8:	bd80      	pop	{r7, pc}
 80183ca:	bf00      	nop
 80183cc:	2000169c 	.word	0x2000169c
 80183d0:	200016c8 	.word	0x200016c8
 80183d4:	200016b0 	.word	0x200016b0

080183d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b084      	sub	sp, #16
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d108      	bne.n	80183fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183ee:	4618      	mov	r0, r3
 80183f0:	f000 fd94 	bl	8018f1c <vPortFree>
				vPortFree( pxTCB );
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f000 fd91 	bl	8018f1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80183fa:	e01b      	b.n	8018434 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018402:	2b01      	cmp	r3, #1
 8018404:	d103      	bne.n	801840e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018406:	6878      	ldr	r0, [r7, #4]
 8018408:	f000 fd88 	bl	8018f1c <vPortFree>
	}
 801840c:	e012      	b.n	8018434 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018414:	2b02      	cmp	r3, #2
 8018416:	d00d      	beq.n	8018434 <prvDeleteTCB+0x5c>
	__asm volatile
 8018418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801841c:	b672      	cpsid	i
 801841e:	f383 8811 	msr	BASEPRI, r3
 8018422:	f3bf 8f6f 	isb	sy
 8018426:	f3bf 8f4f 	dsb	sy
 801842a:	b662      	cpsie	i
 801842c:	60fb      	str	r3, [r7, #12]
}
 801842e:	bf00      	nop
 8018430:	bf00      	nop
 8018432:	e7fd      	b.n	8018430 <prvDeleteTCB+0x58>
	}
 8018434:	bf00      	nop
 8018436:	3710      	adds	r7, #16
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}

0801843c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801843c:	b480      	push	{r7}
 801843e:	b083      	sub	sp, #12
 8018440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018442:	4b0c      	ldr	r3, [pc, #48]	@ (8018474 <prvResetNextTaskUnblockTime+0x38>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d104      	bne.n	8018456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801844c:	4b0a      	ldr	r3, [pc, #40]	@ (8018478 <prvResetNextTaskUnblockTime+0x3c>)
 801844e:	f04f 32ff 	mov.w	r2, #4294967295
 8018452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018454:	e008      	b.n	8018468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018456:	4b07      	ldr	r3, [pc, #28]	@ (8018474 <prvResetNextTaskUnblockTime+0x38>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	68db      	ldr	r3, [r3, #12]
 801845c:	68db      	ldr	r3, [r3, #12]
 801845e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	4a04      	ldr	r2, [pc, #16]	@ (8018478 <prvResetNextTaskUnblockTime+0x3c>)
 8018466:	6013      	str	r3, [r2, #0]
}
 8018468:	bf00      	nop
 801846a:	370c      	adds	r7, #12
 801846c:	46bd      	mov	sp, r7
 801846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018472:	4770      	bx	lr
 8018474:	20001680 	.word	0x20001680
 8018478:	200016e8 	.word	0x200016e8

0801847c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801847c:	b480      	push	{r7}
 801847e:	b083      	sub	sp, #12
 8018480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018482:	4b0b      	ldr	r3, [pc, #44]	@ (80184b0 <xTaskGetSchedulerState+0x34>)
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d102      	bne.n	8018490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801848a:	2301      	movs	r3, #1
 801848c:	607b      	str	r3, [r7, #4]
 801848e:	e008      	b.n	80184a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018490:	4b08      	ldr	r3, [pc, #32]	@ (80184b4 <xTaskGetSchedulerState+0x38>)
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d102      	bne.n	801849e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018498:	2302      	movs	r3, #2
 801849a:	607b      	str	r3, [r7, #4]
 801849c:	e001      	b.n	80184a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801849e:	2300      	movs	r3, #0
 80184a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80184a2:	687b      	ldr	r3, [r7, #4]
	}
 80184a4:	4618      	mov	r0, r3
 80184a6:	370c      	adds	r7, #12
 80184a8:	46bd      	mov	sp, r7
 80184aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ae:	4770      	bx	lr
 80184b0:	200016d4 	.word	0x200016d4
 80184b4:	200016f0 	.word	0x200016f0

080184b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b084      	sub	sp, #16
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80184c4:	2300      	movs	r3, #0
 80184c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d069      	beq.n	80185a2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80184d2:	4b36      	ldr	r3, [pc, #216]	@ (80185ac <xTaskPriorityInherit+0xf4>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184d8:	429a      	cmp	r2, r3
 80184da:	d259      	bcs.n	8018590 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	699b      	ldr	r3, [r3, #24]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	db06      	blt.n	80184f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184e4:	4b31      	ldr	r3, [pc, #196]	@ (80185ac <xTaskPriorityInherit+0xf4>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184ea:	f1c3 0207 	rsb	r2, r3, #7
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	6959      	ldr	r1, [r3, #20]
 80184f6:	68bb      	ldr	r3, [r7, #8]
 80184f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80184fa:	4613      	mov	r3, r2
 80184fc:	009b      	lsls	r3, r3, #2
 80184fe:	4413      	add	r3, r2
 8018500:	009b      	lsls	r3, r3, #2
 8018502:	4a2b      	ldr	r2, [pc, #172]	@ (80185b0 <xTaskPriorityInherit+0xf8>)
 8018504:	4413      	add	r3, r2
 8018506:	4299      	cmp	r1, r3
 8018508:	d13a      	bne.n	8018580 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	3304      	adds	r3, #4
 801850e:	4618      	mov	r0, r3
 8018510:	f7fe f9b2 	bl	8016878 <uxListRemove>
 8018514:	4603      	mov	r3, r0
 8018516:	2b00      	cmp	r3, #0
 8018518:	d115      	bne.n	8018546 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801851a:	68bb      	ldr	r3, [r7, #8]
 801851c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801851e:	4924      	ldr	r1, [pc, #144]	@ (80185b0 <xTaskPriorityInherit+0xf8>)
 8018520:	4613      	mov	r3, r2
 8018522:	009b      	lsls	r3, r3, #2
 8018524:	4413      	add	r3, r2
 8018526:	009b      	lsls	r3, r3, #2
 8018528:	440b      	add	r3, r1
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d10a      	bne.n	8018546 <xTaskPriorityInherit+0x8e>
 8018530:	68bb      	ldr	r3, [r7, #8]
 8018532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018534:	2201      	movs	r2, #1
 8018536:	fa02 f303 	lsl.w	r3, r2, r3
 801853a:	43da      	mvns	r2, r3
 801853c:	4b1d      	ldr	r3, [pc, #116]	@ (80185b4 <xTaskPriorityInherit+0xfc>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	4013      	ands	r3, r2
 8018542:	4a1c      	ldr	r2, [pc, #112]	@ (80185b4 <xTaskPriorityInherit+0xfc>)
 8018544:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018546:	4b19      	ldr	r3, [pc, #100]	@ (80185ac <xTaskPriorityInherit+0xf4>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801854c:	68bb      	ldr	r3, [r7, #8]
 801854e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018550:	68bb      	ldr	r3, [r7, #8]
 8018552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018554:	2201      	movs	r2, #1
 8018556:	409a      	lsls	r2, r3
 8018558:	4b16      	ldr	r3, [pc, #88]	@ (80185b4 <xTaskPriorityInherit+0xfc>)
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	4313      	orrs	r3, r2
 801855e:	4a15      	ldr	r2, [pc, #84]	@ (80185b4 <xTaskPriorityInherit+0xfc>)
 8018560:	6013      	str	r3, [r2, #0]
 8018562:	68bb      	ldr	r3, [r7, #8]
 8018564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018566:	4613      	mov	r3, r2
 8018568:	009b      	lsls	r3, r3, #2
 801856a:	4413      	add	r3, r2
 801856c:	009b      	lsls	r3, r3, #2
 801856e:	4a10      	ldr	r2, [pc, #64]	@ (80185b0 <xTaskPriorityInherit+0xf8>)
 8018570:	441a      	add	r2, r3
 8018572:	68bb      	ldr	r3, [r7, #8]
 8018574:	3304      	adds	r3, #4
 8018576:	4619      	mov	r1, r3
 8018578:	4610      	mov	r0, r2
 801857a:	f7fe f920 	bl	80167be <vListInsertEnd>
 801857e:	e004      	b.n	801858a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018580:	4b0a      	ldr	r3, [pc, #40]	@ (80185ac <xTaskPriorityInherit+0xf4>)
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018586:	68bb      	ldr	r3, [r7, #8]
 8018588:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801858a:	2301      	movs	r3, #1
 801858c:	60fb      	str	r3, [r7, #12]
 801858e:	e008      	b.n	80185a2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018594:	4b05      	ldr	r3, [pc, #20]	@ (80185ac <xTaskPriorityInherit+0xf4>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801859a:	429a      	cmp	r2, r3
 801859c:	d201      	bcs.n	80185a2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801859e:	2301      	movs	r3, #1
 80185a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80185a2:	68fb      	ldr	r3, [r7, #12]
	}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3710      	adds	r7, #16
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}
 80185ac:	200015c8 	.word	0x200015c8
 80185b0:	200015cc 	.word	0x200015cc
 80185b4:	200016d0 	.word	0x200016d0

080185b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b086      	sub	sp, #24
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80185c4:	2300      	movs	r3, #0
 80185c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d074      	beq.n	80186b8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80185ce:	4b3d      	ldr	r3, [pc, #244]	@ (80186c4 <xTaskPriorityDisinherit+0x10c>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	693a      	ldr	r2, [r7, #16]
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d00d      	beq.n	80185f4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80185d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185dc:	b672      	cpsid	i
 80185de:	f383 8811 	msr	BASEPRI, r3
 80185e2:	f3bf 8f6f 	isb	sy
 80185e6:	f3bf 8f4f 	dsb	sy
 80185ea:	b662      	cpsie	i
 80185ec:	60fb      	str	r3, [r7, #12]
}
 80185ee:	bf00      	nop
 80185f0:	bf00      	nop
 80185f2:	e7fd      	b.n	80185f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80185f4:	693b      	ldr	r3, [r7, #16]
 80185f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d10d      	bne.n	8018618 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80185fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018600:	b672      	cpsid	i
 8018602:	f383 8811 	msr	BASEPRI, r3
 8018606:	f3bf 8f6f 	isb	sy
 801860a:	f3bf 8f4f 	dsb	sy
 801860e:	b662      	cpsie	i
 8018610:	60bb      	str	r3, [r7, #8]
}
 8018612:	bf00      	nop
 8018614:	bf00      	nop
 8018616:	e7fd      	b.n	8018614 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801861c:	1e5a      	subs	r2, r3, #1
 801861e:	693b      	ldr	r3, [r7, #16]
 8018620:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018622:	693b      	ldr	r3, [r7, #16]
 8018624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018626:	693b      	ldr	r3, [r7, #16]
 8018628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801862a:	429a      	cmp	r2, r3
 801862c:	d044      	beq.n	80186b8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801862e:	693b      	ldr	r3, [r7, #16]
 8018630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018632:	2b00      	cmp	r3, #0
 8018634:	d140      	bne.n	80186b8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	3304      	adds	r3, #4
 801863a:	4618      	mov	r0, r3
 801863c:	f7fe f91c 	bl	8016878 <uxListRemove>
 8018640:	4603      	mov	r3, r0
 8018642:	2b00      	cmp	r3, #0
 8018644:	d115      	bne.n	8018672 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801864a:	491f      	ldr	r1, [pc, #124]	@ (80186c8 <xTaskPriorityDisinherit+0x110>)
 801864c:	4613      	mov	r3, r2
 801864e:	009b      	lsls	r3, r3, #2
 8018650:	4413      	add	r3, r2
 8018652:	009b      	lsls	r3, r3, #2
 8018654:	440b      	add	r3, r1
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d10a      	bne.n	8018672 <xTaskPriorityDisinherit+0xba>
 801865c:	693b      	ldr	r3, [r7, #16]
 801865e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018660:	2201      	movs	r2, #1
 8018662:	fa02 f303 	lsl.w	r3, r2, r3
 8018666:	43da      	mvns	r2, r3
 8018668:	4b18      	ldr	r3, [pc, #96]	@ (80186cc <xTaskPriorityDisinherit+0x114>)
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	4013      	ands	r3, r2
 801866e:	4a17      	ldr	r2, [pc, #92]	@ (80186cc <xTaskPriorityDisinherit+0x114>)
 8018670:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018672:	693b      	ldr	r3, [r7, #16]
 8018674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018676:	693b      	ldr	r3, [r7, #16]
 8018678:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801867a:	693b      	ldr	r3, [r7, #16]
 801867c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801867e:	f1c3 0207 	rsb	r2, r3, #7
 8018682:	693b      	ldr	r3, [r7, #16]
 8018684:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018686:	693b      	ldr	r3, [r7, #16]
 8018688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801868a:	2201      	movs	r2, #1
 801868c:	409a      	lsls	r2, r3
 801868e:	4b0f      	ldr	r3, [pc, #60]	@ (80186cc <xTaskPriorityDisinherit+0x114>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	4313      	orrs	r3, r2
 8018694:	4a0d      	ldr	r2, [pc, #52]	@ (80186cc <xTaskPriorityDisinherit+0x114>)
 8018696:	6013      	str	r3, [r2, #0]
 8018698:	693b      	ldr	r3, [r7, #16]
 801869a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801869c:	4613      	mov	r3, r2
 801869e:	009b      	lsls	r3, r3, #2
 80186a0:	4413      	add	r3, r2
 80186a2:	009b      	lsls	r3, r3, #2
 80186a4:	4a08      	ldr	r2, [pc, #32]	@ (80186c8 <xTaskPriorityDisinherit+0x110>)
 80186a6:	441a      	add	r2, r3
 80186a8:	693b      	ldr	r3, [r7, #16]
 80186aa:	3304      	adds	r3, #4
 80186ac:	4619      	mov	r1, r3
 80186ae:	4610      	mov	r0, r2
 80186b0:	f7fe f885 	bl	80167be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80186b4:	2301      	movs	r3, #1
 80186b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80186b8:	697b      	ldr	r3, [r7, #20]
	}
 80186ba:	4618      	mov	r0, r3
 80186bc:	3718      	adds	r7, #24
 80186be:	46bd      	mov	sp, r7
 80186c0:	bd80      	pop	{r7, pc}
 80186c2:	bf00      	nop
 80186c4:	200015c8 	.word	0x200015c8
 80186c8:	200015cc 	.word	0x200015cc
 80186cc:	200016d0 	.word	0x200016d0

080186d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b088      	sub	sp, #32
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
 80186d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80186de:	2301      	movs	r3, #1
 80186e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	f000 8089 	beq.w	80187fc <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80186ea:	69bb      	ldr	r3, [r7, #24]
 80186ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d10d      	bne.n	801870e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80186f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186f6:	b672      	cpsid	i
 80186f8:	f383 8811 	msr	BASEPRI, r3
 80186fc:	f3bf 8f6f 	isb	sy
 8018700:	f3bf 8f4f 	dsb	sy
 8018704:	b662      	cpsie	i
 8018706:	60fb      	str	r3, [r7, #12]
}
 8018708:	bf00      	nop
 801870a:	bf00      	nop
 801870c:	e7fd      	b.n	801870a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801870e:	69bb      	ldr	r3, [r7, #24]
 8018710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018712:	683a      	ldr	r2, [r7, #0]
 8018714:	429a      	cmp	r2, r3
 8018716:	d902      	bls.n	801871e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018718:	683b      	ldr	r3, [r7, #0]
 801871a:	61fb      	str	r3, [r7, #28]
 801871c:	e002      	b.n	8018724 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801871e:	69bb      	ldr	r3, [r7, #24]
 8018720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018722:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018724:	69bb      	ldr	r3, [r7, #24]
 8018726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018728:	69fa      	ldr	r2, [r7, #28]
 801872a:	429a      	cmp	r2, r3
 801872c:	d066      	beq.n	80187fc <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801872e:	69bb      	ldr	r3, [r7, #24]
 8018730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018732:	697a      	ldr	r2, [r7, #20]
 8018734:	429a      	cmp	r2, r3
 8018736:	d161      	bne.n	80187fc <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018738:	4b32      	ldr	r3, [pc, #200]	@ (8018804 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	69ba      	ldr	r2, [r7, #24]
 801873e:	429a      	cmp	r2, r3
 8018740:	d10d      	bne.n	801875e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8018742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018746:	b672      	cpsid	i
 8018748:	f383 8811 	msr	BASEPRI, r3
 801874c:	f3bf 8f6f 	isb	sy
 8018750:	f3bf 8f4f 	dsb	sy
 8018754:	b662      	cpsie	i
 8018756:	60bb      	str	r3, [r7, #8]
}
 8018758:	bf00      	nop
 801875a:	bf00      	nop
 801875c:	e7fd      	b.n	801875a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801875e:	69bb      	ldr	r3, [r7, #24]
 8018760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018762:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018764:	69bb      	ldr	r3, [r7, #24]
 8018766:	69fa      	ldr	r2, [r7, #28]
 8018768:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801876a:	69bb      	ldr	r3, [r7, #24]
 801876c:	699b      	ldr	r3, [r3, #24]
 801876e:	2b00      	cmp	r3, #0
 8018770:	db04      	blt.n	801877c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	f1c3 0207 	rsb	r2, r3, #7
 8018778:	69bb      	ldr	r3, [r7, #24]
 801877a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801877c:	69bb      	ldr	r3, [r7, #24]
 801877e:	6959      	ldr	r1, [r3, #20]
 8018780:	693a      	ldr	r2, [r7, #16]
 8018782:	4613      	mov	r3, r2
 8018784:	009b      	lsls	r3, r3, #2
 8018786:	4413      	add	r3, r2
 8018788:	009b      	lsls	r3, r3, #2
 801878a:	4a1f      	ldr	r2, [pc, #124]	@ (8018808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801878c:	4413      	add	r3, r2
 801878e:	4299      	cmp	r1, r3
 8018790:	d134      	bne.n	80187fc <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018792:	69bb      	ldr	r3, [r7, #24]
 8018794:	3304      	adds	r3, #4
 8018796:	4618      	mov	r0, r3
 8018798:	f7fe f86e 	bl	8016878 <uxListRemove>
 801879c:	4603      	mov	r3, r0
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d115      	bne.n	80187ce <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80187a2:	69bb      	ldr	r3, [r7, #24]
 80187a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80187a6:	4918      	ldr	r1, [pc, #96]	@ (8018808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80187a8:	4613      	mov	r3, r2
 80187aa:	009b      	lsls	r3, r3, #2
 80187ac:	4413      	add	r3, r2
 80187ae:	009b      	lsls	r3, r3, #2
 80187b0:	440b      	add	r3, r1
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d10a      	bne.n	80187ce <vTaskPriorityDisinheritAfterTimeout+0xfe>
 80187b8:	69bb      	ldr	r3, [r7, #24]
 80187ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187bc:	2201      	movs	r2, #1
 80187be:	fa02 f303 	lsl.w	r3, r2, r3
 80187c2:	43da      	mvns	r2, r3
 80187c4:	4b11      	ldr	r3, [pc, #68]	@ (801880c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	4013      	ands	r3, r2
 80187ca:	4a10      	ldr	r2, [pc, #64]	@ (801880c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80187cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80187ce:	69bb      	ldr	r3, [r7, #24]
 80187d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187d2:	2201      	movs	r2, #1
 80187d4:	409a      	lsls	r2, r3
 80187d6:	4b0d      	ldr	r3, [pc, #52]	@ (801880c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	4313      	orrs	r3, r2
 80187dc:	4a0b      	ldr	r2, [pc, #44]	@ (801880c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80187de:	6013      	str	r3, [r2, #0]
 80187e0:	69bb      	ldr	r3, [r7, #24]
 80187e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80187e4:	4613      	mov	r3, r2
 80187e6:	009b      	lsls	r3, r3, #2
 80187e8:	4413      	add	r3, r2
 80187ea:	009b      	lsls	r3, r3, #2
 80187ec:	4a06      	ldr	r2, [pc, #24]	@ (8018808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80187ee:	441a      	add	r2, r3
 80187f0:	69bb      	ldr	r3, [r7, #24]
 80187f2:	3304      	adds	r3, #4
 80187f4:	4619      	mov	r1, r3
 80187f6:	4610      	mov	r0, r2
 80187f8:	f7fd ffe1 	bl	80167be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80187fc:	bf00      	nop
 80187fe:	3720      	adds	r7, #32
 8018800:	46bd      	mov	sp, r7
 8018802:	bd80      	pop	{r7, pc}
 8018804:	200015c8 	.word	0x200015c8
 8018808:	200015cc 	.word	0x200015cc
 801880c:	200016d0 	.word	0x200016d0

08018810 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018810:	b480      	push	{r7}
 8018812:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018814:	4b07      	ldr	r3, [pc, #28]	@ (8018834 <pvTaskIncrementMutexHeldCount+0x24>)
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d004      	beq.n	8018826 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801881c:	4b05      	ldr	r3, [pc, #20]	@ (8018834 <pvTaskIncrementMutexHeldCount+0x24>)
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018822:	3201      	adds	r2, #1
 8018824:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8018826:	4b03      	ldr	r3, [pc, #12]	@ (8018834 <pvTaskIncrementMutexHeldCount+0x24>)
 8018828:	681b      	ldr	r3, [r3, #0]
	}
 801882a:	4618      	mov	r0, r3
 801882c:	46bd      	mov	sp, r7
 801882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018832:	4770      	bx	lr
 8018834:	200015c8 	.word	0x200015c8

08018838 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b084      	sub	sp, #16
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
 8018840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018842:	4b29      	ldr	r3, [pc, #164]	@ (80188e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018848:	4b28      	ldr	r3, [pc, #160]	@ (80188ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	3304      	adds	r3, #4
 801884e:	4618      	mov	r0, r3
 8018850:	f7fe f812 	bl	8016878 <uxListRemove>
 8018854:	4603      	mov	r3, r0
 8018856:	2b00      	cmp	r3, #0
 8018858:	d10b      	bne.n	8018872 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801885a:	4b24      	ldr	r3, [pc, #144]	@ (80188ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018860:	2201      	movs	r2, #1
 8018862:	fa02 f303 	lsl.w	r3, r2, r3
 8018866:	43da      	mvns	r2, r3
 8018868:	4b21      	ldr	r3, [pc, #132]	@ (80188f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	4013      	ands	r3, r2
 801886e:	4a20      	ldr	r2, [pc, #128]	@ (80188f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018870:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018878:	d10a      	bne.n	8018890 <prvAddCurrentTaskToDelayedList+0x58>
 801887a:	683b      	ldr	r3, [r7, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d007      	beq.n	8018890 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018880:	4b1a      	ldr	r3, [pc, #104]	@ (80188ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	3304      	adds	r3, #4
 8018886:	4619      	mov	r1, r3
 8018888:	481a      	ldr	r0, [pc, #104]	@ (80188f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801888a:	f7fd ff98 	bl	80167be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801888e:	e026      	b.n	80188de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018890:	68fa      	ldr	r2, [r7, #12]
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	4413      	add	r3, r2
 8018896:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018898:	4b14      	ldr	r3, [pc, #80]	@ (80188ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	68ba      	ldr	r2, [r7, #8]
 801889e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80188a0:	68ba      	ldr	r2, [r7, #8]
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	429a      	cmp	r2, r3
 80188a6:	d209      	bcs.n	80188bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80188a8:	4b13      	ldr	r3, [pc, #76]	@ (80188f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80188aa:	681a      	ldr	r2, [r3, #0]
 80188ac:	4b0f      	ldr	r3, [pc, #60]	@ (80188ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	3304      	adds	r3, #4
 80188b2:	4619      	mov	r1, r3
 80188b4:	4610      	mov	r0, r2
 80188b6:	f7fd ffa6 	bl	8016806 <vListInsert>
}
 80188ba:	e010      	b.n	80188de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80188bc:	4b0f      	ldr	r3, [pc, #60]	@ (80188fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80188be:	681a      	ldr	r2, [r3, #0]
 80188c0:	4b0a      	ldr	r3, [pc, #40]	@ (80188ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	3304      	adds	r3, #4
 80188c6:	4619      	mov	r1, r3
 80188c8:	4610      	mov	r0, r2
 80188ca:	f7fd ff9c 	bl	8016806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80188ce:	4b0c      	ldr	r3, [pc, #48]	@ (8018900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	68ba      	ldr	r2, [r7, #8]
 80188d4:	429a      	cmp	r2, r3
 80188d6:	d202      	bcs.n	80188de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80188d8:	4a09      	ldr	r2, [pc, #36]	@ (8018900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	6013      	str	r3, [r2, #0]
}
 80188de:	bf00      	nop
 80188e0:	3710      	adds	r7, #16
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd80      	pop	{r7, pc}
 80188e6:	bf00      	nop
 80188e8:	200016cc 	.word	0x200016cc
 80188ec:	200015c8 	.word	0x200015c8
 80188f0:	200016d0 	.word	0x200016d0
 80188f4:	200016b4 	.word	0x200016b4
 80188f8:	20001684 	.word	0x20001684
 80188fc:	20001680 	.word	0x20001680
 8018900:	200016e8 	.word	0x200016e8

08018904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018904:	b480      	push	{r7}
 8018906:	b085      	sub	sp, #20
 8018908:	af00      	add	r7, sp, #0
 801890a:	60f8      	str	r0, [r7, #12]
 801890c:	60b9      	str	r1, [r7, #8]
 801890e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	3b04      	subs	r3, #4
 8018914:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801891c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	3b04      	subs	r3, #4
 8018922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018924:	68bb      	ldr	r3, [r7, #8]
 8018926:	f023 0201 	bic.w	r2, r3, #1
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	3b04      	subs	r3, #4
 8018932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018934:	4a0c      	ldr	r2, [pc, #48]	@ (8018968 <pxPortInitialiseStack+0x64>)
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	3b14      	subs	r3, #20
 801893e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018940:	687a      	ldr	r2, [r7, #4]
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	3b04      	subs	r3, #4
 801894a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	f06f 0202 	mvn.w	r2, #2
 8018952:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	3b20      	subs	r3, #32
 8018958:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801895a:	68fb      	ldr	r3, [r7, #12]
}
 801895c:	4618      	mov	r0, r3
 801895e:	3714      	adds	r7, #20
 8018960:	46bd      	mov	sp, r7
 8018962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018966:	4770      	bx	lr
 8018968:	0801896d 	.word	0x0801896d

0801896c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801896c:	b480      	push	{r7}
 801896e:	b085      	sub	sp, #20
 8018970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018972:	2300      	movs	r3, #0
 8018974:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018976:	4b15      	ldr	r3, [pc, #84]	@ (80189cc <prvTaskExitError+0x60>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801897e:	d00d      	beq.n	801899c <prvTaskExitError+0x30>
	__asm volatile
 8018980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018984:	b672      	cpsid	i
 8018986:	f383 8811 	msr	BASEPRI, r3
 801898a:	f3bf 8f6f 	isb	sy
 801898e:	f3bf 8f4f 	dsb	sy
 8018992:	b662      	cpsie	i
 8018994:	60fb      	str	r3, [r7, #12]
}
 8018996:	bf00      	nop
 8018998:	bf00      	nop
 801899a:	e7fd      	b.n	8018998 <prvTaskExitError+0x2c>
	__asm volatile
 801899c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189a0:	b672      	cpsid	i
 80189a2:	f383 8811 	msr	BASEPRI, r3
 80189a6:	f3bf 8f6f 	isb	sy
 80189aa:	f3bf 8f4f 	dsb	sy
 80189ae:	b662      	cpsie	i
 80189b0:	60bb      	str	r3, [r7, #8]
}
 80189b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80189b4:	bf00      	nop
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d0fc      	beq.n	80189b6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80189bc:	bf00      	nop
 80189be:	bf00      	nop
 80189c0:	3714      	adds	r7, #20
 80189c2:	46bd      	mov	sp, r7
 80189c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c8:	4770      	bx	lr
 80189ca:	bf00      	nop
 80189cc:	20000074 	.word	0x20000074

080189d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80189d0:	4b07      	ldr	r3, [pc, #28]	@ (80189f0 <pxCurrentTCBConst2>)
 80189d2:	6819      	ldr	r1, [r3, #0]
 80189d4:	6808      	ldr	r0, [r1, #0]
 80189d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189da:	f380 8809 	msr	PSP, r0
 80189de:	f3bf 8f6f 	isb	sy
 80189e2:	f04f 0000 	mov.w	r0, #0
 80189e6:	f380 8811 	msr	BASEPRI, r0
 80189ea:	4770      	bx	lr
 80189ec:	f3af 8000 	nop.w

080189f0 <pxCurrentTCBConst2>:
 80189f0:	200015c8 	.word	0x200015c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80189f4:	bf00      	nop
 80189f6:	bf00      	nop

080189f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80189f8:	4808      	ldr	r0, [pc, #32]	@ (8018a1c <prvPortStartFirstTask+0x24>)
 80189fa:	6800      	ldr	r0, [r0, #0]
 80189fc:	6800      	ldr	r0, [r0, #0]
 80189fe:	f380 8808 	msr	MSP, r0
 8018a02:	f04f 0000 	mov.w	r0, #0
 8018a06:	f380 8814 	msr	CONTROL, r0
 8018a0a:	b662      	cpsie	i
 8018a0c:	b661      	cpsie	f
 8018a0e:	f3bf 8f4f 	dsb	sy
 8018a12:	f3bf 8f6f 	isb	sy
 8018a16:	df00      	svc	0
 8018a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018a1a:	bf00      	nop
 8018a1c:	e000ed08 	.word	0xe000ed08

08018a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b084      	sub	sp, #16
 8018a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018a26:	4b37      	ldr	r3, [pc, #220]	@ (8018b04 <xPortStartScheduler+0xe4>)
 8018a28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	b2db      	uxtb	r3, r3
 8018a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	22ff      	movs	r2, #255	@ 0xff
 8018a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	781b      	ldrb	r3, [r3, #0]
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018a40:	78fb      	ldrb	r3, [r7, #3]
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018a48:	b2da      	uxtb	r2, r3
 8018a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8018b08 <xPortStartScheduler+0xe8>)
 8018a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8018b0c <xPortStartScheduler+0xec>)
 8018a50:	2207      	movs	r2, #7
 8018a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018a54:	e009      	b.n	8018a6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018a56:	4b2d      	ldr	r3, [pc, #180]	@ (8018b0c <xPortStartScheduler+0xec>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	3b01      	subs	r3, #1
 8018a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8018b0c <xPortStartScheduler+0xec>)
 8018a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018a60:	78fb      	ldrb	r3, [r7, #3]
 8018a62:	b2db      	uxtb	r3, r3
 8018a64:	005b      	lsls	r3, r3, #1
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018a6a:	78fb      	ldrb	r3, [r7, #3]
 8018a6c:	b2db      	uxtb	r3, r3
 8018a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018a72:	2b80      	cmp	r3, #128	@ 0x80
 8018a74:	d0ef      	beq.n	8018a56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018a76:	4b25      	ldr	r3, [pc, #148]	@ (8018b0c <xPortStartScheduler+0xec>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	f1c3 0307 	rsb	r3, r3, #7
 8018a7e:	2b04      	cmp	r3, #4
 8018a80:	d00d      	beq.n	8018a9e <xPortStartScheduler+0x7e>
	__asm volatile
 8018a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a86:	b672      	cpsid	i
 8018a88:	f383 8811 	msr	BASEPRI, r3
 8018a8c:	f3bf 8f6f 	isb	sy
 8018a90:	f3bf 8f4f 	dsb	sy
 8018a94:	b662      	cpsie	i
 8018a96:	60bb      	str	r3, [r7, #8]
}
 8018a98:	bf00      	nop
 8018a9a:	bf00      	nop
 8018a9c:	e7fd      	b.n	8018a9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8018b0c <xPortStartScheduler+0xec>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	021b      	lsls	r3, r3, #8
 8018aa4:	4a19      	ldr	r2, [pc, #100]	@ (8018b0c <xPortStartScheduler+0xec>)
 8018aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018aa8:	4b18      	ldr	r3, [pc, #96]	@ (8018b0c <xPortStartScheduler+0xec>)
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018ab0:	4a16      	ldr	r2, [pc, #88]	@ (8018b0c <xPortStartScheduler+0xec>)
 8018ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	b2da      	uxtb	r2, r3
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018abc:	4b14      	ldr	r3, [pc, #80]	@ (8018b10 <xPortStartScheduler+0xf0>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	4a13      	ldr	r2, [pc, #76]	@ (8018b10 <xPortStartScheduler+0xf0>)
 8018ac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018ac8:	4b11      	ldr	r3, [pc, #68]	@ (8018b10 <xPortStartScheduler+0xf0>)
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	4a10      	ldr	r2, [pc, #64]	@ (8018b10 <xPortStartScheduler+0xf0>)
 8018ace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018ad4:	f000 f8dc 	bl	8018c90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8018b14 <xPortStartScheduler+0xf4>)
 8018ada:	2200      	movs	r2, #0
 8018adc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018ade:	f000 f8fb 	bl	8018cd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8018b18 <xPortStartScheduler+0xf8>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8018b18 <xPortStartScheduler+0xf8>)
 8018ae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8018aec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018aee:	f7ff ff83 	bl	80189f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018af2:	f7ff fa4d 	bl	8017f90 <vTaskSwitchContext>
	prvTaskExitError();
 8018af6:	f7ff ff39 	bl	801896c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018afa:	2300      	movs	r3, #0
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	3710      	adds	r7, #16
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}
 8018b04:	e000e400 	.word	0xe000e400
 8018b08:	200016f4 	.word	0x200016f4
 8018b0c:	200016f8 	.word	0x200016f8
 8018b10:	e000ed20 	.word	0xe000ed20
 8018b14:	20000074 	.word	0x20000074
 8018b18:	e000ef34 	.word	0xe000ef34

08018b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018b1c:	b480      	push	{r7}
 8018b1e:	b083      	sub	sp, #12
 8018b20:	af00      	add	r7, sp, #0
	__asm volatile
 8018b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b26:	b672      	cpsid	i
 8018b28:	f383 8811 	msr	BASEPRI, r3
 8018b2c:	f3bf 8f6f 	isb	sy
 8018b30:	f3bf 8f4f 	dsb	sy
 8018b34:	b662      	cpsie	i
 8018b36:	607b      	str	r3, [r7, #4]
}
 8018b38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018b3a:	4b11      	ldr	r3, [pc, #68]	@ (8018b80 <vPortEnterCritical+0x64>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	3301      	adds	r3, #1
 8018b40:	4a0f      	ldr	r2, [pc, #60]	@ (8018b80 <vPortEnterCritical+0x64>)
 8018b42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018b44:	4b0e      	ldr	r3, [pc, #56]	@ (8018b80 <vPortEnterCritical+0x64>)
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	2b01      	cmp	r3, #1
 8018b4a:	d112      	bne.n	8018b72 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8018b84 <vPortEnterCritical+0x68>)
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	b2db      	uxtb	r3, r3
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d00d      	beq.n	8018b72 <vPortEnterCritical+0x56>
	__asm volatile
 8018b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b5a:	b672      	cpsid	i
 8018b5c:	f383 8811 	msr	BASEPRI, r3
 8018b60:	f3bf 8f6f 	isb	sy
 8018b64:	f3bf 8f4f 	dsb	sy
 8018b68:	b662      	cpsie	i
 8018b6a:	603b      	str	r3, [r7, #0]
}
 8018b6c:	bf00      	nop
 8018b6e:	bf00      	nop
 8018b70:	e7fd      	b.n	8018b6e <vPortEnterCritical+0x52>
	}
}
 8018b72:	bf00      	nop
 8018b74:	370c      	adds	r7, #12
 8018b76:	46bd      	mov	sp, r7
 8018b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7c:	4770      	bx	lr
 8018b7e:	bf00      	nop
 8018b80:	20000074 	.word	0x20000074
 8018b84:	e000ed04 	.word	0xe000ed04

08018b88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018b88:	b480      	push	{r7}
 8018b8a:	b083      	sub	sp, #12
 8018b8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018b8e:	4b13      	ldr	r3, [pc, #76]	@ (8018bdc <vPortExitCritical+0x54>)
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d10d      	bne.n	8018bb2 <vPortExitCritical+0x2a>
	__asm volatile
 8018b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b9a:	b672      	cpsid	i
 8018b9c:	f383 8811 	msr	BASEPRI, r3
 8018ba0:	f3bf 8f6f 	isb	sy
 8018ba4:	f3bf 8f4f 	dsb	sy
 8018ba8:	b662      	cpsie	i
 8018baa:	607b      	str	r3, [r7, #4]
}
 8018bac:	bf00      	nop
 8018bae:	bf00      	nop
 8018bb0:	e7fd      	b.n	8018bae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8018bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8018bdc <vPortExitCritical+0x54>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	3b01      	subs	r3, #1
 8018bb8:	4a08      	ldr	r2, [pc, #32]	@ (8018bdc <vPortExitCritical+0x54>)
 8018bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018bbc:	4b07      	ldr	r3, [pc, #28]	@ (8018bdc <vPortExitCritical+0x54>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d105      	bne.n	8018bd0 <vPortExitCritical+0x48>
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	f383 8811 	msr	BASEPRI, r3
}
 8018bce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018bd0:	bf00      	nop
 8018bd2:	370c      	adds	r7, #12
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bda:	4770      	bx	lr
 8018bdc:	20000074 	.word	0x20000074

08018be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018be0:	f3ef 8009 	mrs	r0, PSP
 8018be4:	f3bf 8f6f 	isb	sy
 8018be8:	4b15      	ldr	r3, [pc, #84]	@ (8018c40 <pxCurrentTCBConst>)
 8018bea:	681a      	ldr	r2, [r3, #0]
 8018bec:	f01e 0f10 	tst.w	lr, #16
 8018bf0:	bf08      	it	eq
 8018bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bfa:	6010      	str	r0, [r2, #0]
 8018bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018c00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8018c04:	b672      	cpsid	i
 8018c06:	f380 8811 	msr	BASEPRI, r0
 8018c0a:	f3bf 8f4f 	dsb	sy
 8018c0e:	f3bf 8f6f 	isb	sy
 8018c12:	b662      	cpsie	i
 8018c14:	f7ff f9bc 	bl	8017f90 <vTaskSwitchContext>
 8018c18:	f04f 0000 	mov.w	r0, #0
 8018c1c:	f380 8811 	msr	BASEPRI, r0
 8018c20:	bc09      	pop	{r0, r3}
 8018c22:	6819      	ldr	r1, [r3, #0]
 8018c24:	6808      	ldr	r0, [r1, #0]
 8018c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c2a:	f01e 0f10 	tst.w	lr, #16
 8018c2e:	bf08      	it	eq
 8018c30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018c34:	f380 8809 	msr	PSP, r0
 8018c38:	f3bf 8f6f 	isb	sy
 8018c3c:	4770      	bx	lr
 8018c3e:	bf00      	nop

08018c40 <pxCurrentTCBConst>:
 8018c40:	200015c8 	.word	0x200015c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018c44:	bf00      	nop
 8018c46:	bf00      	nop

08018c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b082      	sub	sp, #8
 8018c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8018c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c52:	b672      	cpsid	i
 8018c54:	f383 8811 	msr	BASEPRI, r3
 8018c58:	f3bf 8f6f 	isb	sy
 8018c5c:	f3bf 8f4f 	dsb	sy
 8018c60:	b662      	cpsie	i
 8018c62:	607b      	str	r3, [r7, #4]
}
 8018c64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018c66:	f7ff f8d7 	bl	8017e18 <xTaskIncrementTick>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d003      	beq.n	8018c78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018c70:	4b06      	ldr	r3, [pc, #24]	@ (8018c8c <SysTick_Handler+0x44>)
 8018c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018c76:	601a      	str	r2, [r3, #0]
 8018c78:	2300      	movs	r3, #0
 8018c7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	f383 8811 	msr	BASEPRI, r3
}
 8018c82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018c84:	bf00      	nop
 8018c86:	3708      	adds	r7, #8
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	bd80      	pop	{r7, pc}
 8018c8c:	e000ed04 	.word	0xe000ed04

08018c90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018c90:	b480      	push	{r7}
 8018c92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018c94:	4b0b      	ldr	r3, [pc, #44]	@ (8018cc4 <vPortSetupTimerInterrupt+0x34>)
 8018c96:	2200      	movs	r2, #0
 8018c98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8018cc8 <vPortSetupTimerInterrupt+0x38>)
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8018ccc <vPortSetupTimerInterrupt+0x3c>)
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8018cd0 <vPortSetupTimerInterrupt+0x40>)
 8018ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8018caa:	099b      	lsrs	r3, r3, #6
 8018cac:	4a09      	ldr	r2, [pc, #36]	@ (8018cd4 <vPortSetupTimerInterrupt+0x44>)
 8018cae:	3b01      	subs	r3, #1
 8018cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018cb2:	4b04      	ldr	r3, [pc, #16]	@ (8018cc4 <vPortSetupTimerInterrupt+0x34>)
 8018cb4:	2207      	movs	r2, #7
 8018cb6:	601a      	str	r2, [r3, #0]
}
 8018cb8:	bf00      	nop
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc0:	4770      	bx	lr
 8018cc2:	bf00      	nop
 8018cc4:	e000e010 	.word	0xe000e010
 8018cc8:	e000e018 	.word	0xe000e018
 8018ccc:	20000000 	.word	0x20000000
 8018cd0:	10624dd3 	.word	0x10624dd3
 8018cd4:	e000e014 	.word	0xe000e014

08018cd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018cd8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8018ce8 <vPortEnableVFP+0x10>
 8018cdc:	6801      	ldr	r1, [r0, #0]
 8018cde:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8018ce2:	6001      	str	r1, [r0, #0]
 8018ce4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018ce6:	bf00      	nop
 8018ce8:	e000ed88 	.word	0xe000ed88

08018cec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018cec:	b480      	push	{r7}
 8018cee:	b085      	sub	sp, #20
 8018cf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018cf2:	f3ef 8305 	mrs	r3, IPSR
 8018cf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	2b0f      	cmp	r3, #15
 8018cfc:	d917      	bls.n	8018d2e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8018d68 <vPortValidateInterruptPriority+0x7c>)
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	4413      	add	r3, r2
 8018d04:	781b      	ldrb	r3, [r3, #0]
 8018d06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018d08:	4b18      	ldr	r3, [pc, #96]	@ (8018d6c <vPortValidateInterruptPriority+0x80>)
 8018d0a:	781b      	ldrb	r3, [r3, #0]
 8018d0c:	7afa      	ldrb	r2, [r7, #11]
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	d20d      	bcs.n	8018d2e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8018d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d16:	b672      	cpsid	i
 8018d18:	f383 8811 	msr	BASEPRI, r3
 8018d1c:	f3bf 8f6f 	isb	sy
 8018d20:	f3bf 8f4f 	dsb	sy
 8018d24:	b662      	cpsie	i
 8018d26:	607b      	str	r3, [r7, #4]
}
 8018d28:	bf00      	nop
 8018d2a:	bf00      	nop
 8018d2c:	e7fd      	b.n	8018d2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018d2e:	4b10      	ldr	r3, [pc, #64]	@ (8018d70 <vPortValidateInterruptPriority+0x84>)
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8018d36:	4b0f      	ldr	r3, [pc, #60]	@ (8018d74 <vPortValidateInterruptPriority+0x88>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d90d      	bls.n	8018d5a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8018d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d42:	b672      	cpsid	i
 8018d44:	f383 8811 	msr	BASEPRI, r3
 8018d48:	f3bf 8f6f 	isb	sy
 8018d4c:	f3bf 8f4f 	dsb	sy
 8018d50:	b662      	cpsie	i
 8018d52:	603b      	str	r3, [r7, #0]
}
 8018d54:	bf00      	nop
 8018d56:	bf00      	nop
 8018d58:	e7fd      	b.n	8018d56 <vPortValidateInterruptPriority+0x6a>
	}
 8018d5a:	bf00      	nop
 8018d5c:	3714      	adds	r7, #20
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d64:	4770      	bx	lr
 8018d66:	bf00      	nop
 8018d68:	e000e3f0 	.word	0xe000e3f0
 8018d6c:	200016f4 	.word	0x200016f4
 8018d70:	e000ed0c 	.word	0xe000ed0c
 8018d74:	200016f8 	.word	0x200016f8

08018d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b08a      	sub	sp, #40	@ 0x28
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018d80:	2300      	movs	r3, #0
 8018d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018d84:	f7fe ff78 	bl	8017c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018d88:	4b5f      	ldr	r3, [pc, #380]	@ (8018f08 <pvPortMalloc+0x190>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d101      	bne.n	8018d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018d90:	f000 f924 	bl	8018fdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018d94:	4b5d      	ldr	r3, [pc, #372]	@ (8018f0c <pvPortMalloc+0x194>)
 8018d96:	681a      	ldr	r2, [r3, #0]
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	4013      	ands	r3, r2
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	f040 8094 	bne.w	8018eca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d020      	beq.n	8018dea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8018da8:	2208      	movs	r2, #8
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	4413      	add	r3, r2
 8018dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	f003 0307 	and.w	r3, r3, #7
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d017      	beq.n	8018dea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f023 0307 	bic.w	r3, r3, #7
 8018dc0:	3308      	adds	r3, #8
 8018dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	f003 0307 	and.w	r3, r3, #7
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d00d      	beq.n	8018dea <pvPortMalloc+0x72>
	__asm volatile
 8018dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dd2:	b672      	cpsid	i
 8018dd4:	f383 8811 	msr	BASEPRI, r3
 8018dd8:	f3bf 8f6f 	isb	sy
 8018ddc:	f3bf 8f4f 	dsb	sy
 8018de0:	b662      	cpsie	i
 8018de2:	617b      	str	r3, [r7, #20]
}
 8018de4:	bf00      	nop
 8018de6:	bf00      	nop
 8018de8:	e7fd      	b.n	8018de6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d06c      	beq.n	8018eca <pvPortMalloc+0x152>
 8018df0:	4b47      	ldr	r3, [pc, #284]	@ (8018f10 <pvPortMalloc+0x198>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	687a      	ldr	r2, [r7, #4]
 8018df6:	429a      	cmp	r2, r3
 8018df8:	d867      	bhi.n	8018eca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018dfa:	4b46      	ldr	r3, [pc, #280]	@ (8018f14 <pvPortMalloc+0x19c>)
 8018dfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018dfe:	4b45      	ldr	r3, [pc, #276]	@ (8018f14 <pvPortMalloc+0x19c>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e04:	e004      	b.n	8018e10 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8018e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e12:	685b      	ldr	r3, [r3, #4]
 8018e14:	687a      	ldr	r2, [r7, #4]
 8018e16:	429a      	cmp	r2, r3
 8018e18:	d903      	bls.n	8018e22 <pvPortMalloc+0xaa>
 8018e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d1f1      	bne.n	8018e06 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018e22:	4b39      	ldr	r3, [pc, #228]	@ (8018f08 <pvPortMalloc+0x190>)
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018e28:	429a      	cmp	r2, r3
 8018e2a:	d04e      	beq.n	8018eca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018e2c:	6a3b      	ldr	r3, [r7, #32]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	2208      	movs	r2, #8
 8018e32:	4413      	add	r3, r2
 8018e34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e38:	681a      	ldr	r2, [r3, #0]
 8018e3a:	6a3b      	ldr	r3, [r7, #32]
 8018e3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e40:	685a      	ldr	r2, [r3, #4]
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	1ad2      	subs	r2, r2, r3
 8018e46:	2308      	movs	r3, #8
 8018e48:	005b      	lsls	r3, r3, #1
 8018e4a:	429a      	cmp	r2, r3
 8018e4c:	d922      	bls.n	8018e94 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	4413      	add	r3, r2
 8018e54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e56:	69bb      	ldr	r3, [r7, #24]
 8018e58:	f003 0307 	and.w	r3, r3, #7
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d00d      	beq.n	8018e7c <pvPortMalloc+0x104>
	__asm volatile
 8018e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e64:	b672      	cpsid	i
 8018e66:	f383 8811 	msr	BASEPRI, r3
 8018e6a:	f3bf 8f6f 	isb	sy
 8018e6e:	f3bf 8f4f 	dsb	sy
 8018e72:	b662      	cpsie	i
 8018e74:	613b      	str	r3, [r7, #16]
}
 8018e76:	bf00      	nop
 8018e78:	bf00      	nop
 8018e7a:	e7fd      	b.n	8018e78 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e7e:	685a      	ldr	r2, [r3, #4]
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	1ad2      	subs	r2, r2, r3
 8018e84:	69bb      	ldr	r3, [r7, #24]
 8018e86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e8a:	687a      	ldr	r2, [r7, #4]
 8018e8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018e8e:	69b8      	ldr	r0, [r7, #24]
 8018e90:	f000 f906 	bl	80190a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e94:	4b1e      	ldr	r3, [pc, #120]	@ (8018f10 <pvPortMalloc+0x198>)
 8018e96:	681a      	ldr	r2, [r3, #0]
 8018e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e9a:	685b      	ldr	r3, [r3, #4]
 8018e9c:	1ad3      	subs	r3, r2, r3
 8018e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8018f10 <pvPortMalloc+0x198>)
 8018ea0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8018f10 <pvPortMalloc+0x198>)
 8018ea4:	681a      	ldr	r2, [r3, #0]
 8018ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8018f18 <pvPortMalloc+0x1a0>)
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	429a      	cmp	r2, r3
 8018eac:	d203      	bcs.n	8018eb6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018eae:	4b18      	ldr	r3, [pc, #96]	@ (8018f10 <pvPortMalloc+0x198>)
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	4a19      	ldr	r2, [pc, #100]	@ (8018f18 <pvPortMalloc+0x1a0>)
 8018eb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eb8:	685a      	ldr	r2, [r3, #4]
 8018eba:	4b14      	ldr	r3, [pc, #80]	@ (8018f0c <pvPortMalloc+0x194>)
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	431a      	orrs	r2, r3
 8018ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ec2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018eca:	f7fe fee3 	bl	8017c94 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8018ece:	69fb      	ldr	r3, [r7, #28]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d101      	bne.n	8018ed8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8018ed4:	f7e8 f9fd 	bl	80012d2 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018ed8:	69fb      	ldr	r3, [r7, #28]
 8018eda:	f003 0307 	and.w	r3, r3, #7
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d00d      	beq.n	8018efe <pvPortMalloc+0x186>
	__asm volatile
 8018ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ee6:	b672      	cpsid	i
 8018ee8:	f383 8811 	msr	BASEPRI, r3
 8018eec:	f3bf 8f6f 	isb	sy
 8018ef0:	f3bf 8f4f 	dsb	sy
 8018ef4:	b662      	cpsie	i
 8018ef6:	60fb      	str	r3, [r7, #12]
}
 8018ef8:	bf00      	nop
 8018efa:	bf00      	nop
 8018efc:	e7fd      	b.n	8018efa <pvPortMalloc+0x182>
	return pvReturn;
 8018efe:	69fb      	ldr	r3, [r7, #28]
}
 8018f00:	4618      	mov	r0, r3
 8018f02:	3728      	adds	r7, #40	@ 0x28
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}
 8018f08:	20009704 	.word	0x20009704
 8018f0c:	20009710 	.word	0x20009710
 8018f10:	20009708 	.word	0x20009708
 8018f14:	200096fc 	.word	0x200096fc
 8018f18:	2000970c 	.word	0x2000970c

08018f1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b086      	sub	sp, #24
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d04e      	beq.n	8018fcc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018f2e:	2308      	movs	r3, #8
 8018f30:	425b      	negs	r3, r3
 8018f32:	697a      	ldr	r2, [r7, #20]
 8018f34:	4413      	add	r3, r2
 8018f36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018f38:	697b      	ldr	r3, [r7, #20]
 8018f3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018f3c:	693b      	ldr	r3, [r7, #16]
 8018f3e:	685a      	ldr	r2, [r3, #4]
 8018f40:	4b24      	ldr	r3, [pc, #144]	@ (8018fd4 <vPortFree+0xb8>)
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	4013      	ands	r3, r2
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d10d      	bne.n	8018f66 <vPortFree+0x4a>
	__asm volatile
 8018f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f4e:	b672      	cpsid	i
 8018f50:	f383 8811 	msr	BASEPRI, r3
 8018f54:	f3bf 8f6f 	isb	sy
 8018f58:	f3bf 8f4f 	dsb	sy
 8018f5c:	b662      	cpsie	i
 8018f5e:	60fb      	str	r3, [r7, #12]
}
 8018f60:	bf00      	nop
 8018f62:	bf00      	nop
 8018f64:	e7fd      	b.n	8018f62 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018f66:	693b      	ldr	r3, [r7, #16]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d00d      	beq.n	8018f8a <vPortFree+0x6e>
	__asm volatile
 8018f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f72:	b672      	cpsid	i
 8018f74:	f383 8811 	msr	BASEPRI, r3
 8018f78:	f3bf 8f6f 	isb	sy
 8018f7c:	f3bf 8f4f 	dsb	sy
 8018f80:	b662      	cpsie	i
 8018f82:	60bb      	str	r3, [r7, #8]
}
 8018f84:	bf00      	nop
 8018f86:	bf00      	nop
 8018f88:	e7fd      	b.n	8018f86 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018f8a:	693b      	ldr	r3, [r7, #16]
 8018f8c:	685a      	ldr	r2, [r3, #4]
 8018f8e:	4b11      	ldr	r3, [pc, #68]	@ (8018fd4 <vPortFree+0xb8>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	4013      	ands	r3, r2
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d019      	beq.n	8018fcc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018f98:	693b      	ldr	r3, [r7, #16]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d115      	bne.n	8018fcc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018fa0:	693b      	ldr	r3, [r7, #16]
 8018fa2:	685a      	ldr	r2, [r3, #4]
 8018fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8018fd4 <vPortFree+0xb8>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	43db      	mvns	r3, r3
 8018faa:	401a      	ands	r2, r3
 8018fac:	693b      	ldr	r3, [r7, #16]
 8018fae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018fb0:	f7fe fe62 	bl	8017c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018fb4:	693b      	ldr	r3, [r7, #16]
 8018fb6:	685a      	ldr	r2, [r3, #4]
 8018fb8:	4b07      	ldr	r3, [pc, #28]	@ (8018fd8 <vPortFree+0xbc>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	4413      	add	r3, r2
 8018fbe:	4a06      	ldr	r2, [pc, #24]	@ (8018fd8 <vPortFree+0xbc>)
 8018fc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018fc2:	6938      	ldr	r0, [r7, #16]
 8018fc4:	f000 f86c 	bl	80190a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018fc8:	f7fe fe64 	bl	8017c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018fcc:	bf00      	nop
 8018fce:	3718      	adds	r7, #24
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}
 8018fd4:	20009710 	.word	0x20009710
 8018fd8:	20009708 	.word	0x20009708

08018fdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018fdc:	b480      	push	{r7}
 8018fde:	b085      	sub	sp, #20
 8018fe0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018fe6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018fe8:	4b27      	ldr	r3, [pc, #156]	@ (8019088 <prvHeapInit+0xac>)
 8018fea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	f003 0307 	and.w	r3, r3, #7
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d00c      	beq.n	8019010 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	3307      	adds	r3, #7
 8018ffa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	f023 0307 	bic.w	r3, r3, #7
 8019002:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019004:	68ba      	ldr	r2, [r7, #8]
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	1ad3      	subs	r3, r2, r3
 801900a:	4a1f      	ldr	r2, [pc, #124]	@ (8019088 <prvHeapInit+0xac>)
 801900c:	4413      	add	r3, r2
 801900e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019014:	4a1d      	ldr	r2, [pc, #116]	@ (801908c <prvHeapInit+0xb0>)
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801901a:	4b1c      	ldr	r3, [pc, #112]	@ (801908c <prvHeapInit+0xb0>)
 801901c:	2200      	movs	r2, #0
 801901e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	68ba      	ldr	r2, [r7, #8]
 8019024:	4413      	add	r3, r2
 8019026:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019028:	2208      	movs	r2, #8
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	1a9b      	subs	r3, r3, r2
 801902e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	f023 0307 	bic.w	r3, r3, #7
 8019036:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	4a15      	ldr	r2, [pc, #84]	@ (8019090 <prvHeapInit+0xb4>)
 801903c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801903e:	4b14      	ldr	r3, [pc, #80]	@ (8019090 <prvHeapInit+0xb4>)
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	2200      	movs	r2, #0
 8019044:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019046:	4b12      	ldr	r3, [pc, #72]	@ (8019090 <prvHeapInit+0xb4>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	2200      	movs	r2, #0
 801904c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	68fa      	ldr	r2, [r7, #12]
 8019056:	1ad2      	subs	r2, r2, r3
 8019058:	683b      	ldr	r3, [r7, #0]
 801905a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801905c:	4b0c      	ldr	r3, [pc, #48]	@ (8019090 <prvHeapInit+0xb4>)
 801905e:	681a      	ldr	r2, [r3, #0]
 8019060:	683b      	ldr	r3, [r7, #0]
 8019062:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	685b      	ldr	r3, [r3, #4]
 8019068:	4a0a      	ldr	r2, [pc, #40]	@ (8019094 <prvHeapInit+0xb8>)
 801906a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801906c:	683b      	ldr	r3, [r7, #0]
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	4a09      	ldr	r2, [pc, #36]	@ (8019098 <prvHeapInit+0xbc>)
 8019072:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019074:	4b09      	ldr	r3, [pc, #36]	@ (801909c <prvHeapInit+0xc0>)
 8019076:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801907a:	601a      	str	r2, [r3, #0]
}
 801907c:	bf00      	nop
 801907e:	3714      	adds	r7, #20
 8019080:	46bd      	mov	sp, r7
 8019082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019086:	4770      	bx	lr
 8019088:	200016fc 	.word	0x200016fc
 801908c:	200096fc 	.word	0x200096fc
 8019090:	20009704 	.word	0x20009704
 8019094:	2000970c 	.word	0x2000970c
 8019098:	20009708 	.word	0x20009708
 801909c:	20009710 	.word	0x20009710

080190a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80190a0:	b480      	push	{r7}
 80190a2:	b085      	sub	sp, #20
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80190a8:	4b28      	ldr	r3, [pc, #160]	@ (801914c <prvInsertBlockIntoFreeList+0xac>)
 80190aa:	60fb      	str	r3, [r7, #12]
 80190ac:	e002      	b.n	80190b4 <prvInsertBlockIntoFreeList+0x14>
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	60fb      	str	r3, [r7, #12]
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	687a      	ldr	r2, [r7, #4]
 80190ba:	429a      	cmp	r2, r3
 80190bc:	d8f7      	bhi.n	80190ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	685b      	ldr	r3, [r3, #4]
 80190c6:	68ba      	ldr	r2, [r7, #8]
 80190c8:	4413      	add	r3, r2
 80190ca:	687a      	ldr	r2, [r7, #4]
 80190cc:	429a      	cmp	r2, r3
 80190ce:	d108      	bne.n	80190e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	685a      	ldr	r2, [r3, #4]
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	685b      	ldr	r3, [r3, #4]
 80190d8:	441a      	add	r2, r3
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	68ba      	ldr	r2, [r7, #8]
 80190ec:	441a      	add	r2, r3
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	429a      	cmp	r2, r3
 80190f4:	d118      	bne.n	8019128 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	681a      	ldr	r2, [r3, #0]
 80190fa:	4b15      	ldr	r3, [pc, #84]	@ (8019150 <prvInsertBlockIntoFreeList+0xb0>)
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	429a      	cmp	r2, r3
 8019100:	d00d      	beq.n	801911e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	685a      	ldr	r2, [r3, #4]
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	685b      	ldr	r3, [r3, #4]
 801910c:	441a      	add	r2, r3
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	681a      	ldr	r2, [r3, #0]
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	601a      	str	r2, [r3, #0]
 801911c:	e008      	b.n	8019130 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801911e:	4b0c      	ldr	r3, [pc, #48]	@ (8019150 <prvInsertBlockIntoFreeList+0xb0>)
 8019120:	681a      	ldr	r2, [r3, #0]
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	601a      	str	r2, [r3, #0]
 8019126:	e003      	b.n	8019130 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	681a      	ldr	r2, [r3, #0]
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019130:	68fa      	ldr	r2, [r7, #12]
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	429a      	cmp	r2, r3
 8019136:	d002      	beq.n	801913e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	687a      	ldr	r2, [r7, #4]
 801913c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801913e:	bf00      	nop
 8019140:	3714      	adds	r7, #20
 8019142:	46bd      	mov	sp, r7
 8019144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019148:	4770      	bx	lr
 801914a:	bf00      	nop
 801914c:	200096fc 	.word	0x200096fc
 8019150:	20009704 	.word	0x20009704

08019154 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019154:	b580      	push	{r7, lr}
 8019156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8019158:	2201      	movs	r2, #1
 801915a:	490e      	ldr	r1, [pc, #56]	@ (8019194 <MX_USB_HOST_Init+0x40>)
 801915c:	480e      	ldr	r0, [pc, #56]	@ (8019198 <MX_USB_HOST_Init+0x44>)
 801915e:	f7f9 f8ad 	bl	80122bc <USBH_Init>
 8019162:	4603      	mov	r3, r0
 8019164:	2b00      	cmp	r3, #0
 8019166:	d001      	beq.n	801916c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019168:	f7ea f8e6 	bl	8003338 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801916c:	490b      	ldr	r1, [pc, #44]	@ (801919c <MX_USB_HOST_Init+0x48>)
 801916e:	480a      	ldr	r0, [pc, #40]	@ (8019198 <MX_USB_HOST_Init+0x44>)
 8019170:	f7f9 f977 	bl	8012462 <USBH_RegisterClass>
 8019174:	4603      	mov	r3, r0
 8019176:	2b00      	cmp	r3, #0
 8019178:	d001      	beq.n	801917e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801917a:	f7ea f8dd 	bl	8003338 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801917e:	4806      	ldr	r0, [pc, #24]	@ (8019198 <MX_USB_HOST_Init+0x44>)
 8019180:	f7f9 f9fb 	bl	801257a <USBH_Start>
 8019184:	4603      	mov	r3, r0
 8019186:	2b00      	cmp	r3, #0
 8019188:	d001      	beq.n	801918e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801918a:	f7ea f8d5 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801918e:	bf00      	nop
 8019190:	bd80      	pop	{r7, pc}
 8019192:	bf00      	nop
 8019194:	080191a1 	.word	0x080191a1
 8019198:	20009714 	.word	0x20009714
 801919c:	20000054 	.word	0x20000054

080191a0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80191a0:	b480      	push	{r7}
 80191a2:	b083      	sub	sp, #12
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
 80191a8:	460b      	mov	r3, r1
 80191aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80191ac:	78fb      	ldrb	r3, [r7, #3]
 80191ae:	3b01      	subs	r3, #1
 80191b0:	2b04      	cmp	r3, #4
 80191b2:	d819      	bhi.n	80191e8 <USBH_UserProcess+0x48>
 80191b4:	a201      	add	r2, pc, #4	@ (adr r2, 80191bc <USBH_UserProcess+0x1c>)
 80191b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191ba:	bf00      	nop
 80191bc:	080191e9 	.word	0x080191e9
 80191c0:	080191d9 	.word	0x080191d9
 80191c4:	080191e9 	.word	0x080191e9
 80191c8:	080191e1 	.word	0x080191e1
 80191cc:	080191d1 	.word	0x080191d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80191d0:	4b09      	ldr	r3, [pc, #36]	@ (80191f8 <USBH_UserProcess+0x58>)
 80191d2:	2203      	movs	r2, #3
 80191d4:	701a      	strb	r2, [r3, #0]
  break;
 80191d6:	e008      	b.n	80191ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80191d8:	4b07      	ldr	r3, [pc, #28]	@ (80191f8 <USBH_UserProcess+0x58>)
 80191da:	2202      	movs	r2, #2
 80191dc:	701a      	strb	r2, [r3, #0]
  break;
 80191de:	e004      	b.n	80191ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80191e0:	4b05      	ldr	r3, [pc, #20]	@ (80191f8 <USBH_UserProcess+0x58>)
 80191e2:	2201      	movs	r2, #1
 80191e4:	701a      	strb	r2, [r3, #0]
  break;
 80191e6:	e000      	b.n	80191ea <USBH_UserProcess+0x4a>

  default:
  break;
 80191e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80191ea:	bf00      	nop
 80191ec:	370c      	adds	r7, #12
 80191ee:	46bd      	mov	sp, r7
 80191f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f4:	4770      	bx	lr
 80191f6:	bf00      	nop
 80191f8:	20009af8 	.word	0x20009af8

080191fc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b08a      	sub	sp, #40	@ 0x28
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019204:	f107 0314 	add.w	r3, r7, #20
 8019208:	2200      	movs	r2, #0
 801920a:	601a      	str	r2, [r3, #0]
 801920c:	605a      	str	r2, [r3, #4]
 801920e:	609a      	str	r2, [r3, #8]
 8019210:	60da      	str	r2, [r3, #12]
 8019212:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801921c:	d13c      	bne.n	8019298 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801921e:	4b20      	ldr	r3, [pc, #128]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 8019220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019222:	4a1f      	ldr	r2, [pc, #124]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 8019224:	f043 0301 	orr.w	r3, r3, #1
 8019228:	6313      	str	r3, [r2, #48]	@ 0x30
 801922a:	4b1d      	ldr	r3, [pc, #116]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 801922c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801922e:	f003 0301 	and.w	r3, r3, #1
 8019232:	613b      	str	r3, [r7, #16]
 8019234:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8019236:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801923a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801923c:	2302      	movs	r3, #2
 801923e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019240:	2300      	movs	r3, #0
 8019242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019244:	2303      	movs	r3, #3
 8019246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019248:	230a      	movs	r3, #10
 801924a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801924c:	f107 0314 	add.w	r3, r7, #20
 8019250:	4619      	mov	r1, r3
 8019252:	4814      	ldr	r0, [pc, #80]	@ (80192a4 <HAL_HCD_MspInit+0xa8>)
 8019254:	f7ed fdf6 	bl	8006e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019258:	4b11      	ldr	r3, [pc, #68]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 801925a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801925c:	4a10      	ldr	r2, [pc, #64]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 801925e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019262:	6353      	str	r3, [r2, #52]	@ 0x34
 8019264:	4b0e      	ldr	r3, [pc, #56]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 8019266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801926c:	60fb      	str	r3, [r7, #12]
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	4b0b      	ldr	r3, [pc, #44]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 8019272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019274:	4a0a      	ldr	r2, [pc, #40]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 8019276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801927a:	6453      	str	r3, [r2, #68]	@ 0x44
 801927c:	4b08      	ldr	r3, [pc, #32]	@ (80192a0 <HAL_HCD_MspInit+0xa4>)
 801927e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019284:	60bb      	str	r3, [r7, #8]
 8019286:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019288:	2200      	movs	r2, #0
 801928a:	2105      	movs	r1, #5
 801928c:	2043      	movs	r0, #67	@ 0x43
 801928e:	f7ec fa95 	bl	80057bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019292:	2043      	movs	r0, #67	@ 0x43
 8019294:	f7ec faae 	bl	80057f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019298:	bf00      	nop
 801929a:	3728      	adds	r7, #40	@ 0x28
 801929c:	46bd      	mov	sp, r7
 801929e:	bd80      	pop	{r7, pc}
 80192a0:	40023800 	.word	0x40023800
 80192a4:	40020000 	.word	0x40020000

080192a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b082      	sub	sp, #8
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7f9 fd97 	bl	8012dea <USBH_LL_IncTimer>
}
 80192bc:	bf00      	nop
 80192be:	3708      	adds	r7, #8
 80192c0:	46bd      	mov	sp, r7
 80192c2:	bd80      	pop	{r7, pc}

080192c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b082      	sub	sp, #8
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80192d2:	4618      	mov	r0, r3
 80192d4:	f7f9 fdd7 	bl	8012e86 <USBH_LL_Connect>
}
 80192d8:	bf00      	nop
 80192da:	3708      	adds	r7, #8
 80192dc:	46bd      	mov	sp, r7
 80192de:	bd80      	pop	{r7, pc}

080192e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b082      	sub	sp, #8
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7f9 fde4 	bl	8012ebc <USBH_LL_Disconnect>
}
 80192f4:	bf00      	nop
 80192f6:	3708      	adds	r7, #8
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}

080192fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b082      	sub	sp, #8
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	460b      	mov	r3, r1
 8019306:	70fb      	strb	r3, [r7, #3]
 8019308:	4613      	mov	r3, r2
 801930a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019312:	4618      	mov	r0, r3
 8019314:	f7f9 fe38 	bl	8012f88 <USBH_LL_NotifyURBChange>
#endif
}
 8019318:	bf00      	nop
 801931a:	3708      	adds	r7, #8
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}

08019320 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b082      	sub	sp, #8
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801932e:	4618      	mov	r0, r3
 8019330:	f7f9 fd85 	bl	8012e3e <USBH_LL_PortEnabled>
}
 8019334:	bf00      	nop
 8019336:	3708      	adds	r7, #8
 8019338:	46bd      	mov	sp, r7
 801933a:	bd80      	pop	{r7, pc}

0801933c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b082      	sub	sp, #8
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801934a:	4618      	mov	r0, r3
 801934c:	f7f9 fd89 	bl	8012e62 <USBH_LL_PortDisabled>
}
 8019350:	bf00      	nop
 8019352:	3708      	adds	r7, #8
 8019354:	46bd      	mov	sp, r7
 8019356:	bd80      	pop	{r7, pc}

08019358 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019358:	b580      	push	{r7, lr}
 801935a:	b082      	sub	sp, #8
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8019366:	2b01      	cmp	r3, #1
 8019368:	d12a      	bne.n	80193c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801936a:	4a18      	ldr	r2, [pc, #96]	@ (80193cc <USBH_LL_Init+0x74>)
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	4a15      	ldr	r2, [pc, #84]	@ (80193cc <USBH_LL_Init+0x74>)
 8019376:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801937a:	4b14      	ldr	r3, [pc, #80]	@ (80193cc <USBH_LL_Init+0x74>)
 801937c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8019380:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019382:	4b12      	ldr	r3, [pc, #72]	@ (80193cc <USBH_LL_Init+0x74>)
 8019384:	2208      	movs	r2, #8
 8019386:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019388:	4b10      	ldr	r3, [pc, #64]	@ (80193cc <USBH_LL_Init+0x74>)
 801938a:	2201      	movs	r2, #1
 801938c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801938e:	4b0f      	ldr	r3, [pc, #60]	@ (80193cc <USBH_LL_Init+0x74>)
 8019390:	2200      	movs	r2, #0
 8019392:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019394:	4b0d      	ldr	r3, [pc, #52]	@ (80193cc <USBH_LL_Init+0x74>)
 8019396:	2202      	movs	r2, #2
 8019398:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801939a:	4b0c      	ldr	r3, [pc, #48]	@ (80193cc <USBH_LL_Init+0x74>)
 801939c:	2200      	movs	r2, #0
 801939e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80193a0:	480a      	ldr	r0, [pc, #40]	@ (80193cc <USBH_LL_Init+0x74>)
 80193a2:	f7ed ff14 	bl	80071ce <HAL_HCD_Init>
 80193a6:	4603      	mov	r3, r0
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d001      	beq.n	80193b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80193ac:	f7e9 ffc4 	bl	8003338 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80193b0:	4806      	ldr	r0, [pc, #24]	@ (80193cc <USBH_LL_Init+0x74>)
 80193b2:	f7ee fb75 	bl	8007aa0 <HAL_HCD_GetCurrentFrame>
 80193b6:	4603      	mov	r3, r0
 80193b8:	4619      	mov	r1, r3
 80193ba:	6878      	ldr	r0, [r7, #4]
 80193bc:	f7f9 fd06 	bl	8012dcc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80193c0:	2300      	movs	r3, #0
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3708      	adds	r7, #8
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	bf00      	nop
 80193cc:	20009afc 	.word	0x20009afc

080193d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b084      	sub	sp, #16
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193d8:	2300      	movs	r3, #0
 80193da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80193dc:	2300      	movs	r3, #0
 80193de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7ee fae2 	bl	80079b0 <HAL_HCD_Start>
 80193ec:	4603      	mov	r3, r0
 80193ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80193f0:	7bfb      	ldrb	r3, [r7, #15]
 80193f2:	4618      	mov	r0, r3
 80193f4:	f000 f95e 	bl	80196b4 <USBH_Get_USB_Status>
 80193f8:	4603      	mov	r3, r0
 80193fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80193fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80193fe:	4618      	mov	r0, r3
 8019400:	3710      	adds	r7, #16
 8019402:	46bd      	mov	sp, r7
 8019404:	bd80      	pop	{r7, pc}

08019406 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019406:	b580      	push	{r7, lr}
 8019408:	b084      	sub	sp, #16
 801940a:	af00      	add	r7, sp, #0
 801940c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801940e:	2300      	movs	r3, #0
 8019410:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019412:	2300      	movs	r3, #0
 8019414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801941c:	4618      	mov	r0, r3
 801941e:	f7ee faea 	bl	80079f6 <HAL_HCD_Stop>
 8019422:	4603      	mov	r3, r0
 8019424:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019426:	7bfb      	ldrb	r3, [r7, #15]
 8019428:	4618      	mov	r0, r3
 801942a:	f000 f943 	bl	80196b4 <USBH_Get_USB_Status>
 801942e:	4603      	mov	r3, r0
 8019430:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019432:	7bbb      	ldrb	r3, [r7, #14]
}
 8019434:	4618      	mov	r0, r3
 8019436:	3710      	adds	r7, #16
 8019438:	46bd      	mov	sp, r7
 801943a:	bd80      	pop	{r7, pc}

0801943c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b084      	sub	sp, #16
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019444:	2301      	movs	r3, #1
 8019446:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801944e:	4618      	mov	r0, r3
 8019450:	f7ee fb34 	bl	8007abc <HAL_HCD_GetCurrentSpeed>
 8019454:	4603      	mov	r3, r0
 8019456:	2b02      	cmp	r3, #2
 8019458:	d00c      	beq.n	8019474 <USBH_LL_GetSpeed+0x38>
 801945a:	2b02      	cmp	r3, #2
 801945c:	d80d      	bhi.n	801947a <USBH_LL_GetSpeed+0x3e>
 801945e:	2b00      	cmp	r3, #0
 8019460:	d002      	beq.n	8019468 <USBH_LL_GetSpeed+0x2c>
 8019462:	2b01      	cmp	r3, #1
 8019464:	d003      	beq.n	801946e <USBH_LL_GetSpeed+0x32>
 8019466:	e008      	b.n	801947a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019468:	2300      	movs	r3, #0
 801946a:	73fb      	strb	r3, [r7, #15]
    break;
 801946c:	e008      	b.n	8019480 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801946e:	2301      	movs	r3, #1
 8019470:	73fb      	strb	r3, [r7, #15]
    break;
 8019472:	e005      	b.n	8019480 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019474:	2302      	movs	r3, #2
 8019476:	73fb      	strb	r3, [r7, #15]
    break;
 8019478:	e002      	b.n	8019480 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801947a:	2301      	movs	r3, #1
 801947c:	73fb      	strb	r3, [r7, #15]
    break;
 801947e:	bf00      	nop
  }
  return  speed;
 8019480:	7bfb      	ldrb	r3, [r7, #15]
}
 8019482:	4618      	mov	r0, r3
 8019484:	3710      	adds	r7, #16
 8019486:	46bd      	mov	sp, r7
 8019488:	bd80      	pop	{r7, pc}

0801948a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801948a:	b580      	push	{r7, lr}
 801948c:	b084      	sub	sp, #16
 801948e:	af00      	add	r7, sp, #0
 8019490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019492:	2300      	movs	r3, #0
 8019494:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019496:	2300      	movs	r3, #0
 8019498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7ee fac5 	bl	8007a30 <HAL_HCD_ResetPort>
 80194a6:	4603      	mov	r3, r0
 80194a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80194aa:	7bfb      	ldrb	r3, [r7, #15]
 80194ac:	4618      	mov	r0, r3
 80194ae:	f000 f901 	bl	80196b4 <USBH_Get_USB_Status>
 80194b2:	4603      	mov	r3, r0
 80194b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80194b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80194b8:	4618      	mov	r0, r3
 80194ba:	3710      	adds	r7, #16
 80194bc:	46bd      	mov	sp, r7
 80194be:	bd80      	pop	{r7, pc}

080194c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b082      	sub	sp, #8
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
 80194c8:	460b      	mov	r3, r1
 80194ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80194d2:	78fa      	ldrb	r2, [r7, #3]
 80194d4:	4611      	mov	r1, r2
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7ee facd 	bl	8007a76 <HAL_HCD_HC_GetXferCount>
 80194dc:	4603      	mov	r3, r0
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3708      	adds	r7, #8
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}

080194e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80194e6:	b590      	push	{r4, r7, lr}
 80194e8:	b089      	sub	sp, #36	@ 0x24
 80194ea:	af04      	add	r7, sp, #16
 80194ec:	6078      	str	r0, [r7, #4]
 80194ee:	4608      	mov	r0, r1
 80194f0:	4611      	mov	r1, r2
 80194f2:	461a      	mov	r2, r3
 80194f4:	4603      	mov	r3, r0
 80194f6:	70fb      	strb	r3, [r7, #3]
 80194f8:	460b      	mov	r3, r1
 80194fa:	70bb      	strb	r3, [r7, #2]
 80194fc:	4613      	mov	r3, r2
 80194fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019500:	2300      	movs	r3, #0
 8019502:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019504:	2300      	movs	r3, #0
 8019506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801950e:	787c      	ldrb	r4, [r7, #1]
 8019510:	78ba      	ldrb	r2, [r7, #2]
 8019512:	78f9      	ldrb	r1, [r7, #3]
 8019514:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019516:	9302      	str	r3, [sp, #8]
 8019518:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801951c:	9301      	str	r3, [sp, #4]
 801951e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019522:	9300      	str	r3, [sp, #0]
 8019524:	4623      	mov	r3, r4
 8019526:	f7ed feb9 	bl	800729c <HAL_HCD_HC_Init>
 801952a:	4603      	mov	r3, r0
 801952c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801952e:	7bfb      	ldrb	r3, [r7, #15]
 8019530:	4618      	mov	r0, r3
 8019532:	f000 f8bf 	bl	80196b4 <USBH_Get_USB_Status>
 8019536:	4603      	mov	r3, r0
 8019538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801953a:	7bbb      	ldrb	r3, [r7, #14]
}
 801953c:	4618      	mov	r0, r3
 801953e:	3714      	adds	r7, #20
 8019540:	46bd      	mov	sp, r7
 8019542:	bd90      	pop	{r4, r7, pc}

08019544 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b084      	sub	sp, #16
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	460b      	mov	r3, r1
 801954e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019550:	2300      	movs	r3, #0
 8019552:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019554:	2300      	movs	r3, #0
 8019556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801955e:	78fa      	ldrb	r2, [r7, #3]
 8019560:	4611      	mov	r1, r2
 8019562:	4618      	mov	r0, r3
 8019564:	f7ed ff52 	bl	800740c <HAL_HCD_HC_Halt>
 8019568:	4603      	mov	r3, r0
 801956a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801956c:	7bfb      	ldrb	r3, [r7, #15]
 801956e:	4618      	mov	r0, r3
 8019570:	f000 f8a0 	bl	80196b4 <USBH_Get_USB_Status>
 8019574:	4603      	mov	r3, r0
 8019576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019578:	7bbb      	ldrb	r3, [r7, #14]
}
 801957a:	4618      	mov	r0, r3
 801957c:	3710      	adds	r7, #16
 801957e:	46bd      	mov	sp, r7
 8019580:	bd80      	pop	{r7, pc}

08019582 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019582:	b590      	push	{r4, r7, lr}
 8019584:	b089      	sub	sp, #36	@ 0x24
 8019586:	af04      	add	r7, sp, #16
 8019588:	6078      	str	r0, [r7, #4]
 801958a:	4608      	mov	r0, r1
 801958c:	4611      	mov	r1, r2
 801958e:	461a      	mov	r2, r3
 8019590:	4603      	mov	r3, r0
 8019592:	70fb      	strb	r3, [r7, #3]
 8019594:	460b      	mov	r3, r1
 8019596:	70bb      	strb	r3, [r7, #2]
 8019598:	4613      	mov	r3, r2
 801959a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801959c:	2300      	movs	r3, #0
 801959e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80195a0:	2300      	movs	r3, #0
 80195a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80195aa:	787c      	ldrb	r4, [r7, #1]
 80195ac:	78ba      	ldrb	r2, [r7, #2]
 80195ae:	78f9      	ldrb	r1, [r7, #3]
 80195b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80195b4:	9303      	str	r3, [sp, #12]
 80195b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80195b8:	9302      	str	r3, [sp, #8]
 80195ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195bc:	9301      	str	r3, [sp, #4]
 80195be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80195c2:	9300      	str	r3, [sp, #0]
 80195c4:	4623      	mov	r3, r4
 80195c6:	f7ed ff45 	bl	8007454 <HAL_HCD_HC_SubmitRequest>
 80195ca:	4603      	mov	r3, r0
 80195cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80195ce:	7bfb      	ldrb	r3, [r7, #15]
 80195d0:	4618      	mov	r0, r3
 80195d2:	f000 f86f 	bl	80196b4 <USBH_Get_USB_Status>
 80195d6:	4603      	mov	r3, r0
 80195d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80195da:	7bbb      	ldrb	r3, [r7, #14]
}
 80195dc:	4618      	mov	r0, r3
 80195de:	3714      	adds	r7, #20
 80195e0:	46bd      	mov	sp, r7
 80195e2:	bd90      	pop	{r4, r7, pc}

080195e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80195e4:	b580      	push	{r7, lr}
 80195e6:	b082      	sub	sp, #8
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	6078      	str	r0, [r7, #4]
 80195ec:	460b      	mov	r3, r1
 80195ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80195f6:	78fa      	ldrb	r2, [r7, #3]
 80195f8:	4611      	mov	r1, r2
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7ee fa26 	bl	8007a4c <HAL_HCD_HC_GetURBState>
 8019600:	4603      	mov	r3, r0
}
 8019602:	4618      	mov	r0, r3
 8019604:	3708      	adds	r7, #8
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}

0801960a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801960a:	b580      	push	{r7, lr}
 801960c:	b082      	sub	sp, #8
 801960e:	af00      	add	r7, sp, #0
 8019610:	6078      	str	r0, [r7, #4]
 8019612:	460b      	mov	r3, r1
 8019614:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801961c:	2b01      	cmp	r3, #1
 801961e:	d103      	bne.n	8019628 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019620:	78fb      	ldrb	r3, [r7, #3]
 8019622:	4618      	mov	r0, r3
 8019624:	f000 f872 	bl	801970c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019628:	20c8      	movs	r0, #200	@ 0xc8
 801962a:	f7eb fd53 	bl	80050d4 <HAL_Delay>
  return USBH_OK;
 801962e:	2300      	movs	r3, #0
}
 8019630:	4618      	mov	r0, r3
 8019632:	3708      	adds	r7, #8
 8019634:	46bd      	mov	sp, r7
 8019636:	bd80      	pop	{r7, pc}

08019638 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019638:	b480      	push	{r7}
 801963a:	b085      	sub	sp, #20
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
 8019640:	460b      	mov	r3, r1
 8019642:	70fb      	strb	r3, [r7, #3]
 8019644:	4613      	mov	r3, r2
 8019646:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801964e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019650:	78fa      	ldrb	r2, [r7, #3]
 8019652:	68f9      	ldr	r1, [r7, #12]
 8019654:	4613      	mov	r3, r2
 8019656:	011b      	lsls	r3, r3, #4
 8019658:	1a9b      	subs	r3, r3, r2
 801965a:	009b      	lsls	r3, r3, #2
 801965c:	440b      	add	r3, r1
 801965e:	3317      	adds	r3, #23
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d00a      	beq.n	801967c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019666:	78fa      	ldrb	r2, [r7, #3]
 8019668:	68f9      	ldr	r1, [r7, #12]
 801966a:	4613      	mov	r3, r2
 801966c:	011b      	lsls	r3, r3, #4
 801966e:	1a9b      	subs	r3, r3, r2
 8019670:	009b      	lsls	r3, r3, #2
 8019672:	440b      	add	r3, r1
 8019674:	333c      	adds	r3, #60	@ 0x3c
 8019676:	78ba      	ldrb	r2, [r7, #2]
 8019678:	701a      	strb	r2, [r3, #0]
 801967a:	e009      	b.n	8019690 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801967c:	78fa      	ldrb	r2, [r7, #3]
 801967e:	68f9      	ldr	r1, [r7, #12]
 8019680:	4613      	mov	r3, r2
 8019682:	011b      	lsls	r3, r3, #4
 8019684:	1a9b      	subs	r3, r3, r2
 8019686:	009b      	lsls	r3, r3, #2
 8019688:	440b      	add	r3, r1
 801968a:	333d      	adds	r3, #61	@ 0x3d
 801968c:	78ba      	ldrb	r2, [r7, #2]
 801968e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019690:	2300      	movs	r3, #0
}
 8019692:	4618      	mov	r0, r3
 8019694:	3714      	adds	r7, #20
 8019696:	46bd      	mov	sp, r7
 8019698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969c:	4770      	bx	lr

0801969e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801969e:	b580      	push	{r7, lr}
 80196a0:	b082      	sub	sp, #8
 80196a2:	af00      	add	r7, sp, #0
 80196a4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80196a6:	6878      	ldr	r0, [r7, #4]
 80196a8:	f7eb fd14 	bl	80050d4 <HAL_Delay>
}
 80196ac:	bf00      	nop
 80196ae:	3708      	adds	r7, #8
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bd80      	pop	{r7, pc}

080196b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80196b4:	b480      	push	{r7}
 80196b6:	b085      	sub	sp, #20
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	4603      	mov	r3, r0
 80196bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80196be:	2300      	movs	r3, #0
 80196c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80196c2:	79fb      	ldrb	r3, [r7, #7]
 80196c4:	2b03      	cmp	r3, #3
 80196c6:	d817      	bhi.n	80196f8 <USBH_Get_USB_Status+0x44>
 80196c8:	a201      	add	r2, pc, #4	@ (adr r2, 80196d0 <USBH_Get_USB_Status+0x1c>)
 80196ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196ce:	bf00      	nop
 80196d0:	080196e1 	.word	0x080196e1
 80196d4:	080196e7 	.word	0x080196e7
 80196d8:	080196ed 	.word	0x080196ed
 80196dc:	080196f3 	.word	0x080196f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80196e0:	2300      	movs	r3, #0
 80196e2:	73fb      	strb	r3, [r7, #15]
    break;
 80196e4:	e00b      	b.n	80196fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80196e6:	2302      	movs	r3, #2
 80196e8:	73fb      	strb	r3, [r7, #15]
    break;
 80196ea:	e008      	b.n	80196fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80196ec:	2301      	movs	r3, #1
 80196ee:	73fb      	strb	r3, [r7, #15]
    break;
 80196f0:	e005      	b.n	80196fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80196f2:	2302      	movs	r3, #2
 80196f4:	73fb      	strb	r3, [r7, #15]
    break;
 80196f6:	e002      	b.n	80196fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80196f8:	2302      	movs	r3, #2
 80196fa:	73fb      	strb	r3, [r7, #15]
    break;
 80196fc:	bf00      	nop
  }
  return usb_status;
 80196fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8019700:	4618      	mov	r0, r3
 8019702:	3714      	adds	r7, #20
 8019704:	46bd      	mov	sp, r7
 8019706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801970a:	4770      	bx	lr

0801970c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b084      	sub	sp, #16
 8019710:	af00      	add	r7, sp, #0
 8019712:	4603      	mov	r3, r0
 8019714:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019716:	79fb      	ldrb	r3, [r7, #7]
 8019718:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801971a:	79fb      	ldrb	r3, [r7, #7]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d102      	bne.n	8019726 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8019720:	2300      	movs	r3, #0
 8019722:	73fb      	strb	r3, [r7, #15]
 8019724:	e001      	b.n	801972a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8019726:	2301      	movs	r3, #1
 8019728:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801972a:	7bfb      	ldrb	r3, [r7, #15]
 801972c:	461a      	mov	r2, r3
 801972e:	2120      	movs	r1, #32
 8019730:	4803      	ldr	r0, [pc, #12]	@ (8019740 <MX_DriverVbusFS+0x34>)
 8019732:	f7ed fd33 	bl	800719c <HAL_GPIO_WritePin>
}
 8019736:	bf00      	nop
 8019738:	3710      	adds	r7, #16
 801973a:	46bd      	mov	sp, r7
 801973c:	bd80      	pop	{r7, pc}
 801973e:	bf00      	nop
 8019740:	40020c00 	.word	0x40020c00

08019744 <malloc>:
 8019744:	4b02      	ldr	r3, [pc, #8]	@ (8019750 <malloc+0xc>)
 8019746:	4601      	mov	r1, r0
 8019748:	6818      	ldr	r0, [r3, #0]
 801974a:	f000 b82d 	b.w	80197a8 <_malloc_r>
 801974e:	bf00      	nop
 8019750:	20000078 	.word	0x20000078

08019754 <free>:
 8019754:	4b02      	ldr	r3, [pc, #8]	@ (8019760 <free+0xc>)
 8019756:	4601      	mov	r1, r0
 8019758:	6818      	ldr	r0, [r3, #0]
 801975a:	f000 b9c1 	b.w	8019ae0 <_free_r>
 801975e:	bf00      	nop
 8019760:	20000078 	.word	0x20000078

08019764 <sbrk_aligned>:
 8019764:	b570      	push	{r4, r5, r6, lr}
 8019766:	4e0f      	ldr	r6, [pc, #60]	@ (80197a4 <sbrk_aligned+0x40>)
 8019768:	460c      	mov	r4, r1
 801976a:	6831      	ldr	r1, [r6, #0]
 801976c:	4605      	mov	r5, r0
 801976e:	b911      	cbnz	r1, 8019776 <sbrk_aligned+0x12>
 8019770:	f000 f96c 	bl	8019a4c <_sbrk_r>
 8019774:	6030      	str	r0, [r6, #0]
 8019776:	4621      	mov	r1, r4
 8019778:	4628      	mov	r0, r5
 801977a:	f000 f967 	bl	8019a4c <_sbrk_r>
 801977e:	1c43      	adds	r3, r0, #1
 8019780:	d103      	bne.n	801978a <sbrk_aligned+0x26>
 8019782:	f04f 34ff 	mov.w	r4, #4294967295
 8019786:	4620      	mov	r0, r4
 8019788:	bd70      	pop	{r4, r5, r6, pc}
 801978a:	1cc4      	adds	r4, r0, #3
 801978c:	f024 0403 	bic.w	r4, r4, #3
 8019790:	42a0      	cmp	r0, r4
 8019792:	d0f8      	beq.n	8019786 <sbrk_aligned+0x22>
 8019794:	1a21      	subs	r1, r4, r0
 8019796:	4628      	mov	r0, r5
 8019798:	f000 f958 	bl	8019a4c <_sbrk_r>
 801979c:	3001      	adds	r0, #1
 801979e:	d1f2      	bne.n	8019786 <sbrk_aligned+0x22>
 80197a0:	e7ef      	b.n	8019782 <sbrk_aligned+0x1e>
 80197a2:	bf00      	nop
 80197a4:	20009edc 	.word	0x20009edc

080197a8 <_malloc_r>:
 80197a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197ac:	1ccd      	adds	r5, r1, #3
 80197ae:	f025 0503 	bic.w	r5, r5, #3
 80197b2:	3508      	adds	r5, #8
 80197b4:	2d0c      	cmp	r5, #12
 80197b6:	bf38      	it	cc
 80197b8:	250c      	movcc	r5, #12
 80197ba:	2d00      	cmp	r5, #0
 80197bc:	4606      	mov	r6, r0
 80197be:	db01      	blt.n	80197c4 <_malloc_r+0x1c>
 80197c0:	42a9      	cmp	r1, r5
 80197c2:	d904      	bls.n	80197ce <_malloc_r+0x26>
 80197c4:	230c      	movs	r3, #12
 80197c6:	6033      	str	r3, [r6, #0]
 80197c8:	2000      	movs	r0, #0
 80197ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80198a4 <_malloc_r+0xfc>
 80197d2:	f000 f869 	bl	80198a8 <__malloc_lock>
 80197d6:	f8d8 3000 	ldr.w	r3, [r8]
 80197da:	461c      	mov	r4, r3
 80197dc:	bb44      	cbnz	r4, 8019830 <_malloc_r+0x88>
 80197de:	4629      	mov	r1, r5
 80197e0:	4630      	mov	r0, r6
 80197e2:	f7ff ffbf 	bl	8019764 <sbrk_aligned>
 80197e6:	1c43      	adds	r3, r0, #1
 80197e8:	4604      	mov	r4, r0
 80197ea:	d158      	bne.n	801989e <_malloc_r+0xf6>
 80197ec:	f8d8 4000 	ldr.w	r4, [r8]
 80197f0:	4627      	mov	r7, r4
 80197f2:	2f00      	cmp	r7, #0
 80197f4:	d143      	bne.n	801987e <_malloc_r+0xd6>
 80197f6:	2c00      	cmp	r4, #0
 80197f8:	d04b      	beq.n	8019892 <_malloc_r+0xea>
 80197fa:	6823      	ldr	r3, [r4, #0]
 80197fc:	4639      	mov	r1, r7
 80197fe:	4630      	mov	r0, r6
 8019800:	eb04 0903 	add.w	r9, r4, r3
 8019804:	f000 f922 	bl	8019a4c <_sbrk_r>
 8019808:	4581      	cmp	r9, r0
 801980a:	d142      	bne.n	8019892 <_malloc_r+0xea>
 801980c:	6821      	ldr	r1, [r4, #0]
 801980e:	1a6d      	subs	r5, r5, r1
 8019810:	4629      	mov	r1, r5
 8019812:	4630      	mov	r0, r6
 8019814:	f7ff ffa6 	bl	8019764 <sbrk_aligned>
 8019818:	3001      	adds	r0, #1
 801981a:	d03a      	beq.n	8019892 <_malloc_r+0xea>
 801981c:	6823      	ldr	r3, [r4, #0]
 801981e:	442b      	add	r3, r5
 8019820:	6023      	str	r3, [r4, #0]
 8019822:	f8d8 3000 	ldr.w	r3, [r8]
 8019826:	685a      	ldr	r2, [r3, #4]
 8019828:	bb62      	cbnz	r2, 8019884 <_malloc_r+0xdc>
 801982a:	f8c8 7000 	str.w	r7, [r8]
 801982e:	e00f      	b.n	8019850 <_malloc_r+0xa8>
 8019830:	6822      	ldr	r2, [r4, #0]
 8019832:	1b52      	subs	r2, r2, r5
 8019834:	d420      	bmi.n	8019878 <_malloc_r+0xd0>
 8019836:	2a0b      	cmp	r2, #11
 8019838:	d917      	bls.n	801986a <_malloc_r+0xc2>
 801983a:	1961      	adds	r1, r4, r5
 801983c:	42a3      	cmp	r3, r4
 801983e:	6025      	str	r5, [r4, #0]
 8019840:	bf18      	it	ne
 8019842:	6059      	strne	r1, [r3, #4]
 8019844:	6863      	ldr	r3, [r4, #4]
 8019846:	bf08      	it	eq
 8019848:	f8c8 1000 	streq.w	r1, [r8]
 801984c:	5162      	str	r2, [r4, r5]
 801984e:	604b      	str	r3, [r1, #4]
 8019850:	4630      	mov	r0, r6
 8019852:	f000 f82f 	bl	80198b4 <__malloc_unlock>
 8019856:	f104 000b 	add.w	r0, r4, #11
 801985a:	1d23      	adds	r3, r4, #4
 801985c:	f020 0007 	bic.w	r0, r0, #7
 8019860:	1ac2      	subs	r2, r0, r3
 8019862:	bf1c      	itt	ne
 8019864:	1a1b      	subne	r3, r3, r0
 8019866:	50a3      	strne	r3, [r4, r2]
 8019868:	e7af      	b.n	80197ca <_malloc_r+0x22>
 801986a:	6862      	ldr	r2, [r4, #4]
 801986c:	42a3      	cmp	r3, r4
 801986e:	bf0c      	ite	eq
 8019870:	f8c8 2000 	streq.w	r2, [r8]
 8019874:	605a      	strne	r2, [r3, #4]
 8019876:	e7eb      	b.n	8019850 <_malloc_r+0xa8>
 8019878:	4623      	mov	r3, r4
 801987a:	6864      	ldr	r4, [r4, #4]
 801987c:	e7ae      	b.n	80197dc <_malloc_r+0x34>
 801987e:	463c      	mov	r4, r7
 8019880:	687f      	ldr	r7, [r7, #4]
 8019882:	e7b6      	b.n	80197f2 <_malloc_r+0x4a>
 8019884:	461a      	mov	r2, r3
 8019886:	685b      	ldr	r3, [r3, #4]
 8019888:	42a3      	cmp	r3, r4
 801988a:	d1fb      	bne.n	8019884 <_malloc_r+0xdc>
 801988c:	2300      	movs	r3, #0
 801988e:	6053      	str	r3, [r2, #4]
 8019890:	e7de      	b.n	8019850 <_malloc_r+0xa8>
 8019892:	230c      	movs	r3, #12
 8019894:	6033      	str	r3, [r6, #0]
 8019896:	4630      	mov	r0, r6
 8019898:	f000 f80c 	bl	80198b4 <__malloc_unlock>
 801989c:	e794      	b.n	80197c8 <_malloc_r+0x20>
 801989e:	6005      	str	r5, [r0, #0]
 80198a0:	e7d6      	b.n	8019850 <_malloc_r+0xa8>
 80198a2:	bf00      	nop
 80198a4:	20009ee0 	.word	0x20009ee0

080198a8 <__malloc_lock>:
 80198a8:	4801      	ldr	r0, [pc, #4]	@ (80198b0 <__malloc_lock+0x8>)
 80198aa:	f000 b909 	b.w	8019ac0 <__retarget_lock_acquire_recursive>
 80198ae:	bf00      	nop
 80198b0:	2000a020 	.word	0x2000a020

080198b4 <__malloc_unlock>:
 80198b4:	4801      	ldr	r0, [pc, #4]	@ (80198bc <__malloc_unlock+0x8>)
 80198b6:	f000 b904 	b.w	8019ac2 <__retarget_lock_release_recursive>
 80198ba:	bf00      	nop
 80198bc:	2000a020 	.word	0x2000a020

080198c0 <sniprintf>:
 80198c0:	b40c      	push	{r2, r3}
 80198c2:	b530      	push	{r4, r5, lr}
 80198c4:	4b18      	ldr	r3, [pc, #96]	@ (8019928 <sniprintf+0x68>)
 80198c6:	1e0c      	subs	r4, r1, #0
 80198c8:	681d      	ldr	r5, [r3, #0]
 80198ca:	b09d      	sub	sp, #116	@ 0x74
 80198cc:	da08      	bge.n	80198e0 <sniprintf+0x20>
 80198ce:	238b      	movs	r3, #139	@ 0x8b
 80198d0:	602b      	str	r3, [r5, #0]
 80198d2:	f04f 30ff 	mov.w	r0, #4294967295
 80198d6:	b01d      	add	sp, #116	@ 0x74
 80198d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198dc:	b002      	add	sp, #8
 80198de:	4770      	bx	lr
 80198e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80198e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80198e8:	f04f 0300 	mov.w	r3, #0
 80198ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 80198ee:	bf14      	ite	ne
 80198f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80198f4:	4623      	moveq	r3, r4
 80198f6:	9304      	str	r3, [sp, #16]
 80198f8:	9307      	str	r3, [sp, #28]
 80198fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80198fe:	9002      	str	r0, [sp, #8]
 8019900:	9006      	str	r0, [sp, #24]
 8019902:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019906:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019908:	ab21      	add	r3, sp, #132	@ 0x84
 801990a:	a902      	add	r1, sp, #8
 801990c:	4628      	mov	r0, r5
 801990e:	9301      	str	r3, [sp, #4]
 8019910:	f000 f98c 	bl	8019c2c <_svfiprintf_r>
 8019914:	1c43      	adds	r3, r0, #1
 8019916:	bfbc      	itt	lt
 8019918:	238b      	movlt	r3, #139	@ 0x8b
 801991a:	602b      	strlt	r3, [r5, #0]
 801991c:	2c00      	cmp	r4, #0
 801991e:	d0da      	beq.n	80198d6 <sniprintf+0x16>
 8019920:	9b02      	ldr	r3, [sp, #8]
 8019922:	2200      	movs	r2, #0
 8019924:	701a      	strb	r2, [r3, #0]
 8019926:	e7d6      	b.n	80198d6 <sniprintf+0x16>
 8019928:	20000078 	.word	0x20000078

0801992c <siprintf>:
 801992c:	b40e      	push	{r1, r2, r3}
 801992e:	b510      	push	{r4, lr}
 8019930:	b09d      	sub	sp, #116	@ 0x74
 8019932:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019934:	9002      	str	r0, [sp, #8]
 8019936:	9006      	str	r0, [sp, #24]
 8019938:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801993c:	480a      	ldr	r0, [pc, #40]	@ (8019968 <siprintf+0x3c>)
 801993e:	9107      	str	r1, [sp, #28]
 8019940:	9104      	str	r1, [sp, #16]
 8019942:	490a      	ldr	r1, [pc, #40]	@ (801996c <siprintf+0x40>)
 8019944:	f853 2b04 	ldr.w	r2, [r3], #4
 8019948:	9105      	str	r1, [sp, #20]
 801994a:	2400      	movs	r4, #0
 801994c:	a902      	add	r1, sp, #8
 801994e:	6800      	ldr	r0, [r0, #0]
 8019950:	9301      	str	r3, [sp, #4]
 8019952:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019954:	f000 f96a 	bl	8019c2c <_svfiprintf_r>
 8019958:	9b02      	ldr	r3, [sp, #8]
 801995a:	701c      	strb	r4, [r3, #0]
 801995c:	b01d      	add	sp, #116	@ 0x74
 801995e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019962:	b003      	add	sp, #12
 8019964:	4770      	bx	lr
 8019966:	bf00      	nop
 8019968:	20000078 	.word	0x20000078
 801996c:	ffff0208 	.word	0xffff0208

08019970 <_vsniprintf_r>:
 8019970:	b530      	push	{r4, r5, lr}
 8019972:	4614      	mov	r4, r2
 8019974:	2c00      	cmp	r4, #0
 8019976:	b09b      	sub	sp, #108	@ 0x6c
 8019978:	4605      	mov	r5, r0
 801997a:	461a      	mov	r2, r3
 801997c:	da05      	bge.n	801998a <_vsniprintf_r+0x1a>
 801997e:	238b      	movs	r3, #139	@ 0x8b
 8019980:	6003      	str	r3, [r0, #0]
 8019982:	f04f 30ff 	mov.w	r0, #4294967295
 8019986:	b01b      	add	sp, #108	@ 0x6c
 8019988:	bd30      	pop	{r4, r5, pc}
 801998a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801998e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019992:	f04f 0300 	mov.w	r3, #0
 8019996:	9319      	str	r3, [sp, #100]	@ 0x64
 8019998:	bf14      	ite	ne
 801999a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801999e:	4623      	moveq	r3, r4
 80199a0:	9302      	str	r3, [sp, #8]
 80199a2:	9305      	str	r3, [sp, #20]
 80199a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199a8:	9100      	str	r1, [sp, #0]
 80199aa:	9104      	str	r1, [sp, #16]
 80199ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80199b0:	4669      	mov	r1, sp
 80199b2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80199b4:	f000 f93a 	bl	8019c2c <_svfiprintf_r>
 80199b8:	1c43      	adds	r3, r0, #1
 80199ba:	bfbc      	itt	lt
 80199bc:	238b      	movlt	r3, #139	@ 0x8b
 80199be:	602b      	strlt	r3, [r5, #0]
 80199c0:	2c00      	cmp	r4, #0
 80199c2:	d0e0      	beq.n	8019986 <_vsniprintf_r+0x16>
 80199c4:	9b00      	ldr	r3, [sp, #0]
 80199c6:	2200      	movs	r2, #0
 80199c8:	701a      	strb	r2, [r3, #0]
 80199ca:	e7dc      	b.n	8019986 <_vsniprintf_r+0x16>

080199cc <vsniprintf>:
 80199cc:	b507      	push	{r0, r1, r2, lr}
 80199ce:	9300      	str	r3, [sp, #0]
 80199d0:	4613      	mov	r3, r2
 80199d2:	460a      	mov	r2, r1
 80199d4:	4601      	mov	r1, r0
 80199d6:	4803      	ldr	r0, [pc, #12]	@ (80199e4 <vsniprintf+0x18>)
 80199d8:	6800      	ldr	r0, [r0, #0]
 80199da:	f7ff ffc9 	bl	8019970 <_vsniprintf_r>
 80199de:	b003      	add	sp, #12
 80199e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80199e4:	20000078 	.word	0x20000078

080199e8 <memset>:
 80199e8:	4402      	add	r2, r0
 80199ea:	4603      	mov	r3, r0
 80199ec:	4293      	cmp	r3, r2
 80199ee:	d100      	bne.n	80199f2 <memset+0xa>
 80199f0:	4770      	bx	lr
 80199f2:	f803 1b01 	strb.w	r1, [r3], #1
 80199f6:	e7f9      	b.n	80199ec <memset+0x4>

080199f8 <strncpy>:
 80199f8:	b510      	push	{r4, lr}
 80199fa:	3901      	subs	r1, #1
 80199fc:	4603      	mov	r3, r0
 80199fe:	b132      	cbz	r2, 8019a0e <strncpy+0x16>
 8019a00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019a04:	f803 4b01 	strb.w	r4, [r3], #1
 8019a08:	3a01      	subs	r2, #1
 8019a0a:	2c00      	cmp	r4, #0
 8019a0c:	d1f7      	bne.n	80199fe <strncpy+0x6>
 8019a0e:	441a      	add	r2, r3
 8019a10:	2100      	movs	r1, #0
 8019a12:	4293      	cmp	r3, r2
 8019a14:	d100      	bne.n	8019a18 <strncpy+0x20>
 8019a16:	bd10      	pop	{r4, pc}
 8019a18:	f803 1b01 	strb.w	r1, [r3], #1
 8019a1c:	e7f9      	b.n	8019a12 <strncpy+0x1a>

08019a1e <strstr>:
 8019a1e:	780a      	ldrb	r2, [r1, #0]
 8019a20:	b570      	push	{r4, r5, r6, lr}
 8019a22:	b96a      	cbnz	r2, 8019a40 <strstr+0x22>
 8019a24:	bd70      	pop	{r4, r5, r6, pc}
 8019a26:	429a      	cmp	r2, r3
 8019a28:	d109      	bne.n	8019a3e <strstr+0x20>
 8019a2a:	460c      	mov	r4, r1
 8019a2c:	4605      	mov	r5, r0
 8019a2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d0f6      	beq.n	8019a24 <strstr+0x6>
 8019a36:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019a3a:	429e      	cmp	r6, r3
 8019a3c:	d0f7      	beq.n	8019a2e <strstr+0x10>
 8019a3e:	3001      	adds	r0, #1
 8019a40:	7803      	ldrb	r3, [r0, #0]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d1ef      	bne.n	8019a26 <strstr+0x8>
 8019a46:	4618      	mov	r0, r3
 8019a48:	e7ec      	b.n	8019a24 <strstr+0x6>
	...

08019a4c <_sbrk_r>:
 8019a4c:	b538      	push	{r3, r4, r5, lr}
 8019a4e:	4d06      	ldr	r5, [pc, #24]	@ (8019a68 <_sbrk_r+0x1c>)
 8019a50:	2300      	movs	r3, #0
 8019a52:	4604      	mov	r4, r0
 8019a54:	4608      	mov	r0, r1
 8019a56:	602b      	str	r3, [r5, #0]
 8019a58:	f7ea fe50 	bl	80046fc <_sbrk>
 8019a5c:	1c43      	adds	r3, r0, #1
 8019a5e:	d102      	bne.n	8019a66 <_sbrk_r+0x1a>
 8019a60:	682b      	ldr	r3, [r5, #0]
 8019a62:	b103      	cbz	r3, 8019a66 <_sbrk_r+0x1a>
 8019a64:	6023      	str	r3, [r4, #0]
 8019a66:	bd38      	pop	{r3, r4, r5, pc}
 8019a68:	2000a01c 	.word	0x2000a01c

08019a6c <__errno>:
 8019a6c:	4b01      	ldr	r3, [pc, #4]	@ (8019a74 <__errno+0x8>)
 8019a6e:	6818      	ldr	r0, [r3, #0]
 8019a70:	4770      	bx	lr
 8019a72:	bf00      	nop
 8019a74:	20000078 	.word	0x20000078

08019a78 <__libc_init_array>:
 8019a78:	b570      	push	{r4, r5, r6, lr}
 8019a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8019ab0 <__libc_init_array+0x38>)
 8019a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8019ab4 <__libc_init_array+0x3c>)
 8019a7e:	1b64      	subs	r4, r4, r5
 8019a80:	10a4      	asrs	r4, r4, #2
 8019a82:	2600      	movs	r6, #0
 8019a84:	42a6      	cmp	r6, r4
 8019a86:	d109      	bne.n	8019a9c <__libc_init_array+0x24>
 8019a88:	4d0b      	ldr	r5, [pc, #44]	@ (8019ab8 <__libc_init_array+0x40>)
 8019a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8019abc <__libc_init_array+0x44>)
 8019a8c:	f000 fba6 	bl	801a1dc <_init>
 8019a90:	1b64      	subs	r4, r4, r5
 8019a92:	10a4      	asrs	r4, r4, #2
 8019a94:	2600      	movs	r6, #0
 8019a96:	42a6      	cmp	r6, r4
 8019a98:	d105      	bne.n	8019aa6 <__libc_init_array+0x2e>
 8019a9a:	bd70      	pop	{r4, r5, r6, pc}
 8019a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019aa0:	4798      	blx	r3
 8019aa2:	3601      	adds	r6, #1
 8019aa4:	e7ee      	b.n	8019a84 <__libc_init_array+0xc>
 8019aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019aaa:	4798      	blx	r3
 8019aac:	3601      	adds	r6, #1
 8019aae:	e7f2      	b.n	8019a96 <__libc_init_array+0x1e>
 8019ab0:	0801c278 	.word	0x0801c278
 8019ab4:	0801c278 	.word	0x0801c278
 8019ab8:	0801c278 	.word	0x0801c278
 8019abc:	0801c27c 	.word	0x0801c27c

08019ac0 <__retarget_lock_acquire_recursive>:
 8019ac0:	4770      	bx	lr

08019ac2 <__retarget_lock_release_recursive>:
 8019ac2:	4770      	bx	lr

08019ac4 <memcpy>:
 8019ac4:	440a      	add	r2, r1
 8019ac6:	4291      	cmp	r1, r2
 8019ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8019acc:	d100      	bne.n	8019ad0 <memcpy+0xc>
 8019ace:	4770      	bx	lr
 8019ad0:	b510      	push	{r4, lr}
 8019ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019ada:	4291      	cmp	r1, r2
 8019adc:	d1f9      	bne.n	8019ad2 <memcpy+0xe>
 8019ade:	bd10      	pop	{r4, pc}

08019ae0 <_free_r>:
 8019ae0:	b538      	push	{r3, r4, r5, lr}
 8019ae2:	4605      	mov	r5, r0
 8019ae4:	2900      	cmp	r1, #0
 8019ae6:	d041      	beq.n	8019b6c <_free_r+0x8c>
 8019ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019aec:	1f0c      	subs	r4, r1, #4
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	bfb8      	it	lt
 8019af2:	18e4      	addlt	r4, r4, r3
 8019af4:	f7ff fed8 	bl	80198a8 <__malloc_lock>
 8019af8:	4a1d      	ldr	r2, [pc, #116]	@ (8019b70 <_free_r+0x90>)
 8019afa:	6813      	ldr	r3, [r2, #0]
 8019afc:	b933      	cbnz	r3, 8019b0c <_free_r+0x2c>
 8019afe:	6063      	str	r3, [r4, #4]
 8019b00:	6014      	str	r4, [r2, #0]
 8019b02:	4628      	mov	r0, r5
 8019b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b08:	f7ff bed4 	b.w	80198b4 <__malloc_unlock>
 8019b0c:	42a3      	cmp	r3, r4
 8019b0e:	d908      	bls.n	8019b22 <_free_r+0x42>
 8019b10:	6820      	ldr	r0, [r4, #0]
 8019b12:	1821      	adds	r1, r4, r0
 8019b14:	428b      	cmp	r3, r1
 8019b16:	bf01      	itttt	eq
 8019b18:	6819      	ldreq	r1, [r3, #0]
 8019b1a:	685b      	ldreq	r3, [r3, #4]
 8019b1c:	1809      	addeq	r1, r1, r0
 8019b1e:	6021      	streq	r1, [r4, #0]
 8019b20:	e7ed      	b.n	8019afe <_free_r+0x1e>
 8019b22:	461a      	mov	r2, r3
 8019b24:	685b      	ldr	r3, [r3, #4]
 8019b26:	b10b      	cbz	r3, 8019b2c <_free_r+0x4c>
 8019b28:	42a3      	cmp	r3, r4
 8019b2a:	d9fa      	bls.n	8019b22 <_free_r+0x42>
 8019b2c:	6811      	ldr	r1, [r2, #0]
 8019b2e:	1850      	adds	r0, r2, r1
 8019b30:	42a0      	cmp	r0, r4
 8019b32:	d10b      	bne.n	8019b4c <_free_r+0x6c>
 8019b34:	6820      	ldr	r0, [r4, #0]
 8019b36:	4401      	add	r1, r0
 8019b38:	1850      	adds	r0, r2, r1
 8019b3a:	4283      	cmp	r3, r0
 8019b3c:	6011      	str	r1, [r2, #0]
 8019b3e:	d1e0      	bne.n	8019b02 <_free_r+0x22>
 8019b40:	6818      	ldr	r0, [r3, #0]
 8019b42:	685b      	ldr	r3, [r3, #4]
 8019b44:	6053      	str	r3, [r2, #4]
 8019b46:	4408      	add	r0, r1
 8019b48:	6010      	str	r0, [r2, #0]
 8019b4a:	e7da      	b.n	8019b02 <_free_r+0x22>
 8019b4c:	d902      	bls.n	8019b54 <_free_r+0x74>
 8019b4e:	230c      	movs	r3, #12
 8019b50:	602b      	str	r3, [r5, #0]
 8019b52:	e7d6      	b.n	8019b02 <_free_r+0x22>
 8019b54:	6820      	ldr	r0, [r4, #0]
 8019b56:	1821      	adds	r1, r4, r0
 8019b58:	428b      	cmp	r3, r1
 8019b5a:	bf04      	itt	eq
 8019b5c:	6819      	ldreq	r1, [r3, #0]
 8019b5e:	685b      	ldreq	r3, [r3, #4]
 8019b60:	6063      	str	r3, [r4, #4]
 8019b62:	bf04      	itt	eq
 8019b64:	1809      	addeq	r1, r1, r0
 8019b66:	6021      	streq	r1, [r4, #0]
 8019b68:	6054      	str	r4, [r2, #4]
 8019b6a:	e7ca      	b.n	8019b02 <_free_r+0x22>
 8019b6c:	bd38      	pop	{r3, r4, r5, pc}
 8019b6e:	bf00      	nop
 8019b70:	20009ee0 	.word	0x20009ee0

08019b74 <__ssputs_r>:
 8019b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b78:	688e      	ldr	r6, [r1, #8]
 8019b7a:	461f      	mov	r7, r3
 8019b7c:	42be      	cmp	r6, r7
 8019b7e:	680b      	ldr	r3, [r1, #0]
 8019b80:	4682      	mov	sl, r0
 8019b82:	460c      	mov	r4, r1
 8019b84:	4690      	mov	r8, r2
 8019b86:	d82d      	bhi.n	8019be4 <__ssputs_r+0x70>
 8019b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019b8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019b90:	d026      	beq.n	8019be0 <__ssputs_r+0x6c>
 8019b92:	6965      	ldr	r5, [r4, #20]
 8019b94:	6909      	ldr	r1, [r1, #16]
 8019b96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b9a:	eba3 0901 	sub.w	r9, r3, r1
 8019b9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019ba2:	1c7b      	adds	r3, r7, #1
 8019ba4:	444b      	add	r3, r9
 8019ba6:	106d      	asrs	r5, r5, #1
 8019ba8:	429d      	cmp	r5, r3
 8019baa:	bf38      	it	cc
 8019bac:	461d      	movcc	r5, r3
 8019bae:	0553      	lsls	r3, r2, #21
 8019bb0:	d527      	bpl.n	8019c02 <__ssputs_r+0x8e>
 8019bb2:	4629      	mov	r1, r5
 8019bb4:	f7ff fdf8 	bl	80197a8 <_malloc_r>
 8019bb8:	4606      	mov	r6, r0
 8019bba:	b360      	cbz	r0, 8019c16 <__ssputs_r+0xa2>
 8019bbc:	6921      	ldr	r1, [r4, #16]
 8019bbe:	464a      	mov	r2, r9
 8019bc0:	f7ff ff80 	bl	8019ac4 <memcpy>
 8019bc4:	89a3      	ldrh	r3, [r4, #12]
 8019bc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019bce:	81a3      	strh	r3, [r4, #12]
 8019bd0:	6126      	str	r6, [r4, #16]
 8019bd2:	6165      	str	r5, [r4, #20]
 8019bd4:	444e      	add	r6, r9
 8019bd6:	eba5 0509 	sub.w	r5, r5, r9
 8019bda:	6026      	str	r6, [r4, #0]
 8019bdc:	60a5      	str	r5, [r4, #8]
 8019bde:	463e      	mov	r6, r7
 8019be0:	42be      	cmp	r6, r7
 8019be2:	d900      	bls.n	8019be6 <__ssputs_r+0x72>
 8019be4:	463e      	mov	r6, r7
 8019be6:	6820      	ldr	r0, [r4, #0]
 8019be8:	4632      	mov	r2, r6
 8019bea:	4641      	mov	r1, r8
 8019bec:	f000 faa6 	bl	801a13c <memmove>
 8019bf0:	68a3      	ldr	r3, [r4, #8]
 8019bf2:	1b9b      	subs	r3, r3, r6
 8019bf4:	60a3      	str	r3, [r4, #8]
 8019bf6:	6823      	ldr	r3, [r4, #0]
 8019bf8:	4433      	add	r3, r6
 8019bfa:	6023      	str	r3, [r4, #0]
 8019bfc:	2000      	movs	r0, #0
 8019bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c02:	462a      	mov	r2, r5
 8019c04:	f000 fab4 	bl	801a170 <_realloc_r>
 8019c08:	4606      	mov	r6, r0
 8019c0a:	2800      	cmp	r0, #0
 8019c0c:	d1e0      	bne.n	8019bd0 <__ssputs_r+0x5c>
 8019c0e:	6921      	ldr	r1, [r4, #16]
 8019c10:	4650      	mov	r0, sl
 8019c12:	f7ff ff65 	bl	8019ae0 <_free_r>
 8019c16:	230c      	movs	r3, #12
 8019c18:	f8ca 3000 	str.w	r3, [sl]
 8019c1c:	89a3      	ldrh	r3, [r4, #12]
 8019c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c22:	81a3      	strh	r3, [r4, #12]
 8019c24:	f04f 30ff 	mov.w	r0, #4294967295
 8019c28:	e7e9      	b.n	8019bfe <__ssputs_r+0x8a>
	...

08019c2c <_svfiprintf_r>:
 8019c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c30:	4698      	mov	r8, r3
 8019c32:	898b      	ldrh	r3, [r1, #12]
 8019c34:	061b      	lsls	r3, r3, #24
 8019c36:	b09d      	sub	sp, #116	@ 0x74
 8019c38:	4607      	mov	r7, r0
 8019c3a:	460d      	mov	r5, r1
 8019c3c:	4614      	mov	r4, r2
 8019c3e:	d510      	bpl.n	8019c62 <_svfiprintf_r+0x36>
 8019c40:	690b      	ldr	r3, [r1, #16]
 8019c42:	b973      	cbnz	r3, 8019c62 <_svfiprintf_r+0x36>
 8019c44:	2140      	movs	r1, #64	@ 0x40
 8019c46:	f7ff fdaf 	bl	80197a8 <_malloc_r>
 8019c4a:	6028      	str	r0, [r5, #0]
 8019c4c:	6128      	str	r0, [r5, #16]
 8019c4e:	b930      	cbnz	r0, 8019c5e <_svfiprintf_r+0x32>
 8019c50:	230c      	movs	r3, #12
 8019c52:	603b      	str	r3, [r7, #0]
 8019c54:	f04f 30ff 	mov.w	r0, #4294967295
 8019c58:	b01d      	add	sp, #116	@ 0x74
 8019c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c5e:	2340      	movs	r3, #64	@ 0x40
 8019c60:	616b      	str	r3, [r5, #20]
 8019c62:	2300      	movs	r3, #0
 8019c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c66:	2320      	movs	r3, #32
 8019c68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c70:	2330      	movs	r3, #48	@ 0x30
 8019c72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019e10 <_svfiprintf_r+0x1e4>
 8019c76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019c7a:	f04f 0901 	mov.w	r9, #1
 8019c7e:	4623      	mov	r3, r4
 8019c80:	469a      	mov	sl, r3
 8019c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c86:	b10a      	cbz	r2, 8019c8c <_svfiprintf_r+0x60>
 8019c88:	2a25      	cmp	r2, #37	@ 0x25
 8019c8a:	d1f9      	bne.n	8019c80 <_svfiprintf_r+0x54>
 8019c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8019c90:	d00b      	beq.n	8019caa <_svfiprintf_r+0x7e>
 8019c92:	465b      	mov	r3, fp
 8019c94:	4622      	mov	r2, r4
 8019c96:	4629      	mov	r1, r5
 8019c98:	4638      	mov	r0, r7
 8019c9a:	f7ff ff6b 	bl	8019b74 <__ssputs_r>
 8019c9e:	3001      	adds	r0, #1
 8019ca0:	f000 80a7 	beq.w	8019df2 <_svfiprintf_r+0x1c6>
 8019ca4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ca6:	445a      	add	r2, fp
 8019ca8:	9209      	str	r2, [sp, #36]	@ 0x24
 8019caa:	f89a 3000 	ldrb.w	r3, [sl]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	f000 809f 	beq.w	8019df2 <_svfiprintf_r+0x1c6>
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8019cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019cbe:	f10a 0a01 	add.w	sl, sl, #1
 8019cc2:	9304      	str	r3, [sp, #16]
 8019cc4:	9307      	str	r3, [sp, #28]
 8019cc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019cca:	931a      	str	r3, [sp, #104]	@ 0x68
 8019ccc:	4654      	mov	r4, sl
 8019cce:	2205      	movs	r2, #5
 8019cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cd4:	484e      	ldr	r0, [pc, #312]	@ (8019e10 <_svfiprintf_r+0x1e4>)
 8019cd6:	f7e6 fab3 	bl	8000240 <memchr>
 8019cda:	9a04      	ldr	r2, [sp, #16]
 8019cdc:	b9d8      	cbnz	r0, 8019d16 <_svfiprintf_r+0xea>
 8019cde:	06d0      	lsls	r0, r2, #27
 8019ce0:	bf44      	itt	mi
 8019ce2:	2320      	movmi	r3, #32
 8019ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019ce8:	0711      	lsls	r1, r2, #28
 8019cea:	bf44      	itt	mi
 8019cec:	232b      	movmi	r3, #43	@ 0x2b
 8019cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8019cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8019cf8:	d015      	beq.n	8019d26 <_svfiprintf_r+0xfa>
 8019cfa:	9a07      	ldr	r2, [sp, #28]
 8019cfc:	4654      	mov	r4, sl
 8019cfe:	2000      	movs	r0, #0
 8019d00:	f04f 0c0a 	mov.w	ip, #10
 8019d04:	4621      	mov	r1, r4
 8019d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d0a:	3b30      	subs	r3, #48	@ 0x30
 8019d0c:	2b09      	cmp	r3, #9
 8019d0e:	d94b      	bls.n	8019da8 <_svfiprintf_r+0x17c>
 8019d10:	b1b0      	cbz	r0, 8019d40 <_svfiprintf_r+0x114>
 8019d12:	9207      	str	r2, [sp, #28]
 8019d14:	e014      	b.n	8019d40 <_svfiprintf_r+0x114>
 8019d16:	eba0 0308 	sub.w	r3, r0, r8
 8019d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8019d1e:	4313      	orrs	r3, r2
 8019d20:	9304      	str	r3, [sp, #16]
 8019d22:	46a2      	mov	sl, r4
 8019d24:	e7d2      	b.n	8019ccc <_svfiprintf_r+0xa0>
 8019d26:	9b03      	ldr	r3, [sp, #12]
 8019d28:	1d19      	adds	r1, r3, #4
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	9103      	str	r1, [sp, #12]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	bfbb      	ittet	lt
 8019d32:	425b      	neglt	r3, r3
 8019d34:	f042 0202 	orrlt.w	r2, r2, #2
 8019d38:	9307      	strge	r3, [sp, #28]
 8019d3a:	9307      	strlt	r3, [sp, #28]
 8019d3c:	bfb8      	it	lt
 8019d3e:	9204      	strlt	r2, [sp, #16]
 8019d40:	7823      	ldrb	r3, [r4, #0]
 8019d42:	2b2e      	cmp	r3, #46	@ 0x2e
 8019d44:	d10a      	bne.n	8019d5c <_svfiprintf_r+0x130>
 8019d46:	7863      	ldrb	r3, [r4, #1]
 8019d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8019d4a:	d132      	bne.n	8019db2 <_svfiprintf_r+0x186>
 8019d4c:	9b03      	ldr	r3, [sp, #12]
 8019d4e:	1d1a      	adds	r2, r3, #4
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	9203      	str	r2, [sp, #12]
 8019d54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019d58:	3402      	adds	r4, #2
 8019d5a:	9305      	str	r3, [sp, #20]
 8019d5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019e20 <_svfiprintf_r+0x1f4>
 8019d60:	7821      	ldrb	r1, [r4, #0]
 8019d62:	2203      	movs	r2, #3
 8019d64:	4650      	mov	r0, sl
 8019d66:	f7e6 fa6b 	bl	8000240 <memchr>
 8019d6a:	b138      	cbz	r0, 8019d7c <_svfiprintf_r+0x150>
 8019d6c:	9b04      	ldr	r3, [sp, #16]
 8019d6e:	eba0 000a 	sub.w	r0, r0, sl
 8019d72:	2240      	movs	r2, #64	@ 0x40
 8019d74:	4082      	lsls	r2, r0
 8019d76:	4313      	orrs	r3, r2
 8019d78:	3401      	adds	r4, #1
 8019d7a:	9304      	str	r3, [sp, #16]
 8019d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d80:	4824      	ldr	r0, [pc, #144]	@ (8019e14 <_svfiprintf_r+0x1e8>)
 8019d82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019d86:	2206      	movs	r2, #6
 8019d88:	f7e6 fa5a 	bl	8000240 <memchr>
 8019d8c:	2800      	cmp	r0, #0
 8019d8e:	d036      	beq.n	8019dfe <_svfiprintf_r+0x1d2>
 8019d90:	4b21      	ldr	r3, [pc, #132]	@ (8019e18 <_svfiprintf_r+0x1ec>)
 8019d92:	bb1b      	cbnz	r3, 8019ddc <_svfiprintf_r+0x1b0>
 8019d94:	9b03      	ldr	r3, [sp, #12]
 8019d96:	3307      	adds	r3, #7
 8019d98:	f023 0307 	bic.w	r3, r3, #7
 8019d9c:	3308      	adds	r3, #8
 8019d9e:	9303      	str	r3, [sp, #12]
 8019da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019da2:	4433      	add	r3, r6
 8019da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8019da6:	e76a      	b.n	8019c7e <_svfiprintf_r+0x52>
 8019da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8019dac:	460c      	mov	r4, r1
 8019dae:	2001      	movs	r0, #1
 8019db0:	e7a8      	b.n	8019d04 <_svfiprintf_r+0xd8>
 8019db2:	2300      	movs	r3, #0
 8019db4:	3401      	adds	r4, #1
 8019db6:	9305      	str	r3, [sp, #20]
 8019db8:	4619      	mov	r1, r3
 8019dba:	f04f 0c0a 	mov.w	ip, #10
 8019dbe:	4620      	mov	r0, r4
 8019dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019dc4:	3a30      	subs	r2, #48	@ 0x30
 8019dc6:	2a09      	cmp	r2, #9
 8019dc8:	d903      	bls.n	8019dd2 <_svfiprintf_r+0x1a6>
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d0c6      	beq.n	8019d5c <_svfiprintf_r+0x130>
 8019dce:	9105      	str	r1, [sp, #20]
 8019dd0:	e7c4      	b.n	8019d5c <_svfiprintf_r+0x130>
 8019dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8019dd6:	4604      	mov	r4, r0
 8019dd8:	2301      	movs	r3, #1
 8019dda:	e7f0      	b.n	8019dbe <_svfiprintf_r+0x192>
 8019ddc:	ab03      	add	r3, sp, #12
 8019dde:	9300      	str	r3, [sp, #0]
 8019de0:	462a      	mov	r2, r5
 8019de2:	4b0e      	ldr	r3, [pc, #56]	@ (8019e1c <_svfiprintf_r+0x1f0>)
 8019de4:	a904      	add	r1, sp, #16
 8019de6:	4638      	mov	r0, r7
 8019de8:	f3af 8000 	nop.w
 8019dec:	1c42      	adds	r2, r0, #1
 8019dee:	4606      	mov	r6, r0
 8019df0:	d1d6      	bne.n	8019da0 <_svfiprintf_r+0x174>
 8019df2:	89ab      	ldrh	r3, [r5, #12]
 8019df4:	065b      	lsls	r3, r3, #25
 8019df6:	f53f af2d 	bmi.w	8019c54 <_svfiprintf_r+0x28>
 8019dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019dfc:	e72c      	b.n	8019c58 <_svfiprintf_r+0x2c>
 8019dfe:	ab03      	add	r3, sp, #12
 8019e00:	9300      	str	r3, [sp, #0]
 8019e02:	462a      	mov	r2, r5
 8019e04:	4b05      	ldr	r3, [pc, #20]	@ (8019e1c <_svfiprintf_r+0x1f0>)
 8019e06:	a904      	add	r1, sp, #16
 8019e08:	4638      	mov	r0, r7
 8019e0a:	f000 f879 	bl	8019f00 <_printf_i>
 8019e0e:	e7ed      	b.n	8019dec <_svfiprintf_r+0x1c0>
 8019e10:	0801c23c 	.word	0x0801c23c
 8019e14:	0801c246 	.word	0x0801c246
 8019e18:	00000000 	.word	0x00000000
 8019e1c:	08019b75 	.word	0x08019b75
 8019e20:	0801c242 	.word	0x0801c242

08019e24 <_printf_common>:
 8019e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e28:	4616      	mov	r6, r2
 8019e2a:	4698      	mov	r8, r3
 8019e2c:	688a      	ldr	r2, [r1, #8]
 8019e2e:	690b      	ldr	r3, [r1, #16]
 8019e30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019e34:	4293      	cmp	r3, r2
 8019e36:	bfb8      	it	lt
 8019e38:	4613      	movlt	r3, r2
 8019e3a:	6033      	str	r3, [r6, #0]
 8019e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019e40:	4607      	mov	r7, r0
 8019e42:	460c      	mov	r4, r1
 8019e44:	b10a      	cbz	r2, 8019e4a <_printf_common+0x26>
 8019e46:	3301      	adds	r3, #1
 8019e48:	6033      	str	r3, [r6, #0]
 8019e4a:	6823      	ldr	r3, [r4, #0]
 8019e4c:	0699      	lsls	r1, r3, #26
 8019e4e:	bf42      	ittt	mi
 8019e50:	6833      	ldrmi	r3, [r6, #0]
 8019e52:	3302      	addmi	r3, #2
 8019e54:	6033      	strmi	r3, [r6, #0]
 8019e56:	6825      	ldr	r5, [r4, #0]
 8019e58:	f015 0506 	ands.w	r5, r5, #6
 8019e5c:	d106      	bne.n	8019e6c <_printf_common+0x48>
 8019e5e:	f104 0a19 	add.w	sl, r4, #25
 8019e62:	68e3      	ldr	r3, [r4, #12]
 8019e64:	6832      	ldr	r2, [r6, #0]
 8019e66:	1a9b      	subs	r3, r3, r2
 8019e68:	42ab      	cmp	r3, r5
 8019e6a:	dc26      	bgt.n	8019eba <_printf_common+0x96>
 8019e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019e70:	6822      	ldr	r2, [r4, #0]
 8019e72:	3b00      	subs	r3, #0
 8019e74:	bf18      	it	ne
 8019e76:	2301      	movne	r3, #1
 8019e78:	0692      	lsls	r2, r2, #26
 8019e7a:	d42b      	bmi.n	8019ed4 <_printf_common+0xb0>
 8019e7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019e80:	4641      	mov	r1, r8
 8019e82:	4638      	mov	r0, r7
 8019e84:	47c8      	blx	r9
 8019e86:	3001      	adds	r0, #1
 8019e88:	d01e      	beq.n	8019ec8 <_printf_common+0xa4>
 8019e8a:	6823      	ldr	r3, [r4, #0]
 8019e8c:	6922      	ldr	r2, [r4, #16]
 8019e8e:	f003 0306 	and.w	r3, r3, #6
 8019e92:	2b04      	cmp	r3, #4
 8019e94:	bf02      	ittt	eq
 8019e96:	68e5      	ldreq	r5, [r4, #12]
 8019e98:	6833      	ldreq	r3, [r6, #0]
 8019e9a:	1aed      	subeq	r5, r5, r3
 8019e9c:	68a3      	ldr	r3, [r4, #8]
 8019e9e:	bf0c      	ite	eq
 8019ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ea4:	2500      	movne	r5, #0
 8019ea6:	4293      	cmp	r3, r2
 8019ea8:	bfc4      	itt	gt
 8019eaa:	1a9b      	subgt	r3, r3, r2
 8019eac:	18ed      	addgt	r5, r5, r3
 8019eae:	2600      	movs	r6, #0
 8019eb0:	341a      	adds	r4, #26
 8019eb2:	42b5      	cmp	r5, r6
 8019eb4:	d11a      	bne.n	8019eec <_printf_common+0xc8>
 8019eb6:	2000      	movs	r0, #0
 8019eb8:	e008      	b.n	8019ecc <_printf_common+0xa8>
 8019eba:	2301      	movs	r3, #1
 8019ebc:	4652      	mov	r2, sl
 8019ebe:	4641      	mov	r1, r8
 8019ec0:	4638      	mov	r0, r7
 8019ec2:	47c8      	blx	r9
 8019ec4:	3001      	adds	r0, #1
 8019ec6:	d103      	bne.n	8019ed0 <_printf_common+0xac>
 8019ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8019ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ed0:	3501      	adds	r5, #1
 8019ed2:	e7c6      	b.n	8019e62 <_printf_common+0x3e>
 8019ed4:	18e1      	adds	r1, r4, r3
 8019ed6:	1c5a      	adds	r2, r3, #1
 8019ed8:	2030      	movs	r0, #48	@ 0x30
 8019eda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019ede:	4422      	add	r2, r4
 8019ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019ee4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019ee8:	3302      	adds	r3, #2
 8019eea:	e7c7      	b.n	8019e7c <_printf_common+0x58>
 8019eec:	2301      	movs	r3, #1
 8019eee:	4622      	mov	r2, r4
 8019ef0:	4641      	mov	r1, r8
 8019ef2:	4638      	mov	r0, r7
 8019ef4:	47c8      	blx	r9
 8019ef6:	3001      	adds	r0, #1
 8019ef8:	d0e6      	beq.n	8019ec8 <_printf_common+0xa4>
 8019efa:	3601      	adds	r6, #1
 8019efc:	e7d9      	b.n	8019eb2 <_printf_common+0x8e>
	...

08019f00 <_printf_i>:
 8019f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f04:	7e0f      	ldrb	r7, [r1, #24]
 8019f06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019f08:	2f78      	cmp	r7, #120	@ 0x78
 8019f0a:	4691      	mov	r9, r2
 8019f0c:	4680      	mov	r8, r0
 8019f0e:	460c      	mov	r4, r1
 8019f10:	469a      	mov	sl, r3
 8019f12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019f16:	d807      	bhi.n	8019f28 <_printf_i+0x28>
 8019f18:	2f62      	cmp	r7, #98	@ 0x62
 8019f1a:	d80a      	bhi.n	8019f32 <_printf_i+0x32>
 8019f1c:	2f00      	cmp	r7, #0
 8019f1e:	f000 80d1 	beq.w	801a0c4 <_printf_i+0x1c4>
 8019f22:	2f58      	cmp	r7, #88	@ 0x58
 8019f24:	f000 80b8 	beq.w	801a098 <_printf_i+0x198>
 8019f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019f2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019f30:	e03a      	b.n	8019fa8 <_printf_i+0xa8>
 8019f32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019f36:	2b15      	cmp	r3, #21
 8019f38:	d8f6      	bhi.n	8019f28 <_printf_i+0x28>
 8019f3a:	a101      	add	r1, pc, #4	@ (adr r1, 8019f40 <_printf_i+0x40>)
 8019f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f40:	08019f99 	.word	0x08019f99
 8019f44:	08019fad 	.word	0x08019fad
 8019f48:	08019f29 	.word	0x08019f29
 8019f4c:	08019f29 	.word	0x08019f29
 8019f50:	08019f29 	.word	0x08019f29
 8019f54:	08019f29 	.word	0x08019f29
 8019f58:	08019fad 	.word	0x08019fad
 8019f5c:	08019f29 	.word	0x08019f29
 8019f60:	08019f29 	.word	0x08019f29
 8019f64:	08019f29 	.word	0x08019f29
 8019f68:	08019f29 	.word	0x08019f29
 8019f6c:	0801a0ab 	.word	0x0801a0ab
 8019f70:	08019fd7 	.word	0x08019fd7
 8019f74:	0801a065 	.word	0x0801a065
 8019f78:	08019f29 	.word	0x08019f29
 8019f7c:	08019f29 	.word	0x08019f29
 8019f80:	0801a0cd 	.word	0x0801a0cd
 8019f84:	08019f29 	.word	0x08019f29
 8019f88:	08019fd7 	.word	0x08019fd7
 8019f8c:	08019f29 	.word	0x08019f29
 8019f90:	08019f29 	.word	0x08019f29
 8019f94:	0801a06d 	.word	0x0801a06d
 8019f98:	6833      	ldr	r3, [r6, #0]
 8019f9a:	1d1a      	adds	r2, r3, #4
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	6032      	str	r2, [r6, #0]
 8019fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019fa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019fa8:	2301      	movs	r3, #1
 8019faa:	e09c      	b.n	801a0e6 <_printf_i+0x1e6>
 8019fac:	6833      	ldr	r3, [r6, #0]
 8019fae:	6820      	ldr	r0, [r4, #0]
 8019fb0:	1d19      	adds	r1, r3, #4
 8019fb2:	6031      	str	r1, [r6, #0]
 8019fb4:	0606      	lsls	r6, r0, #24
 8019fb6:	d501      	bpl.n	8019fbc <_printf_i+0xbc>
 8019fb8:	681d      	ldr	r5, [r3, #0]
 8019fba:	e003      	b.n	8019fc4 <_printf_i+0xc4>
 8019fbc:	0645      	lsls	r5, r0, #25
 8019fbe:	d5fb      	bpl.n	8019fb8 <_printf_i+0xb8>
 8019fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019fc4:	2d00      	cmp	r5, #0
 8019fc6:	da03      	bge.n	8019fd0 <_printf_i+0xd0>
 8019fc8:	232d      	movs	r3, #45	@ 0x2d
 8019fca:	426d      	negs	r5, r5
 8019fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019fd0:	4858      	ldr	r0, [pc, #352]	@ (801a134 <_printf_i+0x234>)
 8019fd2:	230a      	movs	r3, #10
 8019fd4:	e011      	b.n	8019ffa <_printf_i+0xfa>
 8019fd6:	6821      	ldr	r1, [r4, #0]
 8019fd8:	6833      	ldr	r3, [r6, #0]
 8019fda:	0608      	lsls	r0, r1, #24
 8019fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8019fe0:	d402      	bmi.n	8019fe8 <_printf_i+0xe8>
 8019fe2:	0649      	lsls	r1, r1, #25
 8019fe4:	bf48      	it	mi
 8019fe6:	b2ad      	uxthmi	r5, r5
 8019fe8:	2f6f      	cmp	r7, #111	@ 0x6f
 8019fea:	4852      	ldr	r0, [pc, #328]	@ (801a134 <_printf_i+0x234>)
 8019fec:	6033      	str	r3, [r6, #0]
 8019fee:	bf14      	ite	ne
 8019ff0:	230a      	movne	r3, #10
 8019ff2:	2308      	moveq	r3, #8
 8019ff4:	2100      	movs	r1, #0
 8019ff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019ffa:	6866      	ldr	r6, [r4, #4]
 8019ffc:	60a6      	str	r6, [r4, #8]
 8019ffe:	2e00      	cmp	r6, #0
 801a000:	db05      	blt.n	801a00e <_printf_i+0x10e>
 801a002:	6821      	ldr	r1, [r4, #0]
 801a004:	432e      	orrs	r6, r5
 801a006:	f021 0104 	bic.w	r1, r1, #4
 801a00a:	6021      	str	r1, [r4, #0]
 801a00c:	d04b      	beq.n	801a0a6 <_printf_i+0x1a6>
 801a00e:	4616      	mov	r6, r2
 801a010:	fbb5 f1f3 	udiv	r1, r5, r3
 801a014:	fb03 5711 	mls	r7, r3, r1, r5
 801a018:	5dc7      	ldrb	r7, [r0, r7]
 801a01a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a01e:	462f      	mov	r7, r5
 801a020:	42bb      	cmp	r3, r7
 801a022:	460d      	mov	r5, r1
 801a024:	d9f4      	bls.n	801a010 <_printf_i+0x110>
 801a026:	2b08      	cmp	r3, #8
 801a028:	d10b      	bne.n	801a042 <_printf_i+0x142>
 801a02a:	6823      	ldr	r3, [r4, #0]
 801a02c:	07df      	lsls	r7, r3, #31
 801a02e:	d508      	bpl.n	801a042 <_printf_i+0x142>
 801a030:	6923      	ldr	r3, [r4, #16]
 801a032:	6861      	ldr	r1, [r4, #4]
 801a034:	4299      	cmp	r1, r3
 801a036:	bfde      	ittt	le
 801a038:	2330      	movle	r3, #48	@ 0x30
 801a03a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a03e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a042:	1b92      	subs	r2, r2, r6
 801a044:	6122      	str	r2, [r4, #16]
 801a046:	f8cd a000 	str.w	sl, [sp]
 801a04a:	464b      	mov	r3, r9
 801a04c:	aa03      	add	r2, sp, #12
 801a04e:	4621      	mov	r1, r4
 801a050:	4640      	mov	r0, r8
 801a052:	f7ff fee7 	bl	8019e24 <_printf_common>
 801a056:	3001      	adds	r0, #1
 801a058:	d14a      	bne.n	801a0f0 <_printf_i+0x1f0>
 801a05a:	f04f 30ff 	mov.w	r0, #4294967295
 801a05e:	b004      	add	sp, #16
 801a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a064:	6823      	ldr	r3, [r4, #0]
 801a066:	f043 0320 	orr.w	r3, r3, #32
 801a06a:	6023      	str	r3, [r4, #0]
 801a06c:	4832      	ldr	r0, [pc, #200]	@ (801a138 <_printf_i+0x238>)
 801a06e:	2778      	movs	r7, #120	@ 0x78
 801a070:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a074:	6823      	ldr	r3, [r4, #0]
 801a076:	6831      	ldr	r1, [r6, #0]
 801a078:	061f      	lsls	r7, r3, #24
 801a07a:	f851 5b04 	ldr.w	r5, [r1], #4
 801a07e:	d402      	bmi.n	801a086 <_printf_i+0x186>
 801a080:	065f      	lsls	r7, r3, #25
 801a082:	bf48      	it	mi
 801a084:	b2ad      	uxthmi	r5, r5
 801a086:	6031      	str	r1, [r6, #0]
 801a088:	07d9      	lsls	r1, r3, #31
 801a08a:	bf44      	itt	mi
 801a08c:	f043 0320 	orrmi.w	r3, r3, #32
 801a090:	6023      	strmi	r3, [r4, #0]
 801a092:	b11d      	cbz	r5, 801a09c <_printf_i+0x19c>
 801a094:	2310      	movs	r3, #16
 801a096:	e7ad      	b.n	8019ff4 <_printf_i+0xf4>
 801a098:	4826      	ldr	r0, [pc, #152]	@ (801a134 <_printf_i+0x234>)
 801a09a:	e7e9      	b.n	801a070 <_printf_i+0x170>
 801a09c:	6823      	ldr	r3, [r4, #0]
 801a09e:	f023 0320 	bic.w	r3, r3, #32
 801a0a2:	6023      	str	r3, [r4, #0]
 801a0a4:	e7f6      	b.n	801a094 <_printf_i+0x194>
 801a0a6:	4616      	mov	r6, r2
 801a0a8:	e7bd      	b.n	801a026 <_printf_i+0x126>
 801a0aa:	6833      	ldr	r3, [r6, #0]
 801a0ac:	6825      	ldr	r5, [r4, #0]
 801a0ae:	6961      	ldr	r1, [r4, #20]
 801a0b0:	1d18      	adds	r0, r3, #4
 801a0b2:	6030      	str	r0, [r6, #0]
 801a0b4:	062e      	lsls	r6, r5, #24
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	d501      	bpl.n	801a0be <_printf_i+0x1be>
 801a0ba:	6019      	str	r1, [r3, #0]
 801a0bc:	e002      	b.n	801a0c4 <_printf_i+0x1c4>
 801a0be:	0668      	lsls	r0, r5, #25
 801a0c0:	d5fb      	bpl.n	801a0ba <_printf_i+0x1ba>
 801a0c2:	8019      	strh	r1, [r3, #0]
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	6123      	str	r3, [r4, #16]
 801a0c8:	4616      	mov	r6, r2
 801a0ca:	e7bc      	b.n	801a046 <_printf_i+0x146>
 801a0cc:	6833      	ldr	r3, [r6, #0]
 801a0ce:	1d1a      	adds	r2, r3, #4
 801a0d0:	6032      	str	r2, [r6, #0]
 801a0d2:	681e      	ldr	r6, [r3, #0]
 801a0d4:	6862      	ldr	r2, [r4, #4]
 801a0d6:	2100      	movs	r1, #0
 801a0d8:	4630      	mov	r0, r6
 801a0da:	f7e6 f8b1 	bl	8000240 <memchr>
 801a0de:	b108      	cbz	r0, 801a0e4 <_printf_i+0x1e4>
 801a0e0:	1b80      	subs	r0, r0, r6
 801a0e2:	6060      	str	r0, [r4, #4]
 801a0e4:	6863      	ldr	r3, [r4, #4]
 801a0e6:	6123      	str	r3, [r4, #16]
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a0ee:	e7aa      	b.n	801a046 <_printf_i+0x146>
 801a0f0:	6923      	ldr	r3, [r4, #16]
 801a0f2:	4632      	mov	r2, r6
 801a0f4:	4649      	mov	r1, r9
 801a0f6:	4640      	mov	r0, r8
 801a0f8:	47d0      	blx	sl
 801a0fa:	3001      	adds	r0, #1
 801a0fc:	d0ad      	beq.n	801a05a <_printf_i+0x15a>
 801a0fe:	6823      	ldr	r3, [r4, #0]
 801a100:	079b      	lsls	r3, r3, #30
 801a102:	d413      	bmi.n	801a12c <_printf_i+0x22c>
 801a104:	68e0      	ldr	r0, [r4, #12]
 801a106:	9b03      	ldr	r3, [sp, #12]
 801a108:	4298      	cmp	r0, r3
 801a10a:	bfb8      	it	lt
 801a10c:	4618      	movlt	r0, r3
 801a10e:	e7a6      	b.n	801a05e <_printf_i+0x15e>
 801a110:	2301      	movs	r3, #1
 801a112:	4632      	mov	r2, r6
 801a114:	4649      	mov	r1, r9
 801a116:	4640      	mov	r0, r8
 801a118:	47d0      	blx	sl
 801a11a:	3001      	adds	r0, #1
 801a11c:	d09d      	beq.n	801a05a <_printf_i+0x15a>
 801a11e:	3501      	adds	r5, #1
 801a120:	68e3      	ldr	r3, [r4, #12]
 801a122:	9903      	ldr	r1, [sp, #12]
 801a124:	1a5b      	subs	r3, r3, r1
 801a126:	42ab      	cmp	r3, r5
 801a128:	dcf2      	bgt.n	801a110 <_printf_i+0x210>
 801a12a:	e7eb      	b.n	801a104 <_printf_i+0x204>
 801a12c:	2500      	movs	r5, #0
 801a12e:	f104 0619 	add.w	r6, r4, #25
 801a132:	e7f5      	b.n	801a120 <_printf_i+0x220>
 801a134:	0801c24d 	.word	0x0801c24d
 801a138:	0801c25e 	.word	0x0801c25e

0801a13c <memmove>:
 801a13c:	4288      	cmp	r0, r1
 801a13e:	b510      	push	{r4, lr}
 801a140:	eb01 0402 	add.w	r4, r1, r2
 801a144:	d902      	bls.n	801a14c <memmove+0x10>
 801a146:	4284      	cmp	r4, r0
 801a148:	4623      	mov	r3, r4
 801a14a:	d807      	bhi.n	801a15c <memmove+0x20>
 801a14c:	1e43      	subs	r3, r0, #1
 801a14e:	42a1      	cmp	r1, r4
 801a150:	d008      	beq.n	801a164 <memmove+0x28>
 801a152:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a156:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a15a:	e7f8      	b.n	801a14e <memmove+0x12>
 801a15c:	4402      	add	r2, r0
 801a15e:	4601      	mov	r1, r0
 801a160:	428a      	cmp	r2, r1
 801a162:	d100      	bne.n	801a166 <memmove+0x2a>
 801a164:	bd10      	pop	{r4, pc}
 801a166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a16a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a16e:	e7f7      	b.n	801a160 <memmove+0x24>

0801a170 <_realloc_r>:
 801a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a174:	4607      	mov	r7, r0
 801a176:	4614      	mov	r4, r2
 801a178:	460d      	mov	r5, r1
 801a17a:	b921      	cbnz	r1, 801a186 <_realloc_r+0x16>
 801a17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a180:	4611      	mov	r1, r2
 801a182:	f7ff bb11 	b.w	80197a8 <_malloc_r>
 801a186:	b92a      	cbnz	r2, 801a194 <_realloc_r+0x24>
 801a188:	f7ff fcaa 	bl	8019ae0 <_free_r>
 801a18c:	4625      	mov	r5, r4
 801a18e:	4628      	mov	r0, r5
 801a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a194:	f000 f81a 	bl	801a1cc <_malloc_usable_size_r>
 801a198:	4284      	cmp	r4, r0
 801a19a:	4606      	mov	r6, r0
 801a19c:	d802      	bhi.n	801a1a4 <_realloc_r+0x34>
 801a19e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a1a2:	d8f4      	bhi.n	801a18e <_realloc_r+0x1e>
 801a1a4:	4621      	mov	r1, r4
 801a1a6:	4638      	mov	r0, r7
 801a1a8:	f7ff fafe 	bl	80197a8 <_malloc_r>
 801a1ac:	4680      	mov	r8, r0
 801a1ae:	b908      	cbnz	r0, 801a1b4 <_realloc_r+0x44>
 801a1b0:	4645      	mov	r5, r8
 801a1b2:	e7ec      	b.n	801a18e <_realloc_r+0x1e>
 801a1b4:	42b4      	cmp	r4, r6
 801a1b6:	4622      	mov	r2, r4
 801a1b8:	4629      	mov	r1, r5
 801a1ba:	bf28      	it	cs
 801a1bc:	4632      	movcs	r2, r6
 801a1be:	f7ff fc81 	bl	8019ac4 <memcpy>
 801a1c2:	4629      	mov	r1, r5
 801a1c4:	4638      	mov	r0, r7
 801a1c6:	f7ff fc8b 	bl	8019ae0 <_free_r>
 801a1ca:	e7f1      	b.n	801a1b0 <_realloc_r+0x40>

0801a1cc <_malloc_usable_size_r>:
 801a1cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1d0:	1f18      	subs	r0, r3, #4
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	bfbc      	itt	lt
 801a1d6:	580b      	ldrlt	r3, [r1, r0]
 801a1d8:	18c0      	addlt	r0, r0, r3
 801a1da:	4770      	bx	lr

0801a1dc <_init>:
 801a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1de:	bf00      	nop
 801a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1e2:	bc08      	pop	{r3}
 801a1e4:	469e      	mov	lr, r3
 801a1e6:	4770      	bx	lr

0801a1e8 <_fini>:
 801a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ea:	bf00      	nop
 801a1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1ee:	bc08      	pop	{r3}
 801a1f0:	469e      	mov	lr, r3
 801a1f2:	4770      	bx	lr
