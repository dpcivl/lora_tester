
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c664  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d84  0801c834  0801c834  0001d834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f5b8  0801f5b8  00021224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f5b8  0801f5b8  000205b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f5c0  0801f5c0  00021224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f5c0  0801f5c0  000205c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f5c4  0801f5c4  000205c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  0801f5c8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000e4  0801f6ac  000210e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000184  0801f74c  00021184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ad44  20000224  0801f7ec  00021224  2**2
                  ALLOC
 12 ._user_heap_stack 00000c00  2000af68  0801f7ec  00021f68  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00021224  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045efc  00000000  00000000  00021254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009dd6  00000000  00000000  00067150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003998  00000000  00000000  00070f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002cb2  00000000  00000000  000748c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000397d5  00000000  00000000  00077572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000511a4  00000000  00000000  000b0d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d5d3  00000000  00000000  00101eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022f4be  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f8ac  00000000  00000000  0022f504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0023edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000224 	.word	0x20000224
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c81c 	.word	0x0801c81c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000228 	.word	0x20000228
 800020c:	0801c81c 	.word	0x0801c81c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fb14 	bl	8004c58 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f01b fcf2 	bl	801c028 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f01b fc46 	bl	801bf00 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 fae4 	bl	8004c58 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 fbb5 	bl	8004e00 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 fad6 	bl	8004c58 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 face 	bl	8004c58 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 fac9 	bl	8004c58 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0801c834 	.word	0x0801c834
 80006d4:	0801c850 	.word	0x0801c850
 80006d8:	0801c858 	.word	0x0801c858
 80006dc:	0801c870 	.word	0x0801c870
 80006e0:	0801c8a0 	.word	0x0801c8a0
 80006e4:	0801c8d8 	.word	0x0801c8d8

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0801c944 	.word	0x0801c944
 800076c:	0801c94c 	.word	0x0801c94c
 8000770:	0801c958 	.word	0x0801c958
 8000774:	0801c960 	.word	0x0801c960
 8000778:	0801c96c 	.word	0x0801c96c
 800077c:	0801c97c 	.word	0x0801c97c
 8000780:	0801c98c 	.word	0x0801c98c
 8000784:	0801c9a0 	.word	0x0801c9a0
 8000788:	0801c9b4 	.word	0x0801c9b4
 800078c:	0801c9c0 	.word	0x0801c9c0
 8000790:	0801c9c8 	.word	0x0801c9c8
 8000794:	0801c9d0 	.word	0x0801c9d0

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 fa26 	bl	8004c58 <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	0801c9f4 	.word	0x0801c9f4
 8000820:	000493e0 	.word	0x000493e0
 8000824:	0801c9fc 	.word	0x0801c9fc

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8283 	beq.w	8000d40 <LoraStarter_Process+0x518>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 825b 	bhi.w	8000d02 <LoraStarter_Process+0x4da>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c29 	.word	0x08000c29
 8000874:	08000c8f 	.word	0x08000c8f
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 f9ca 	bl	8004c58 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e224      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 f9b0 	bl	8004c58 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e1fd      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1f9      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f1 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa91 	bl	8000e4c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 f98c 	bl	8004c58 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1d9      	b.n	8000d06 <LoraStarter_Process+0x4de>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f01b fb82 	bl	801c05e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f01b fb7b 	bl	801c05e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81cb 	beq.w	8000d06 <LoraStarter_Process+0x4de>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 f96c 	bl	8004c58 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 f959 	bl	8004c58 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1ab      	b.n	8000d06 <LoraStarter_Process+0x4de>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 f94d 	bl	8004c58 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e197      	b.n	8000d06 <LoraStarter_Process+0x4de>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2001      	movs	r0, #1
 80009da:	f004 f93d 	bl	8004c58 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e191      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 818b 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa91 	bl	8000f1c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 8184 	beq.w	8000d0a <LoraStarter_Process+0x4e2>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2001      	movs	r0, #1
 8000a06:	f004 f927 	bl	8004c58 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2001      	movs	r0, #1
 8000a34:	f004 f910 	bl	8004c58 <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e167      	b.n	8000d0a <LoraStarter_Process+0x4e2>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f01b fa74 	bl	801bf6c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f01b fa1f 	bl	801bf00 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f004 f8c5 	bl	8004c58 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 f8b1 	bl	8004c58 <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e10b      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8107 	beq.w	8000d0e <LoraStarter_Process+0x4e6>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa8f 	bl	8001024 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8080 	bgt.w	8000c1a <LoraStarter_Process+0x3f2>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e07a      	b.n	8000c1a <LoraStarter_Process+0x3f2>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2001      	movs	r0, #1
 8000b28:	f004 f896 	bl	8004c58 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f004 f820 	bl	8004b84 <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e06c      	b.n	8000c26 <LoraStarter_Process+0x3fe>
 8000b4c:	0801ca3c 	.word	0x0801ca3c
 8000b50:	0801ca44 	.word	0x0801ca44
 8000b54:	0801ca7c 	.word	0x0801ca7c
 8000b58:	0801caa0 	.word	0x0801caa0
 8000b5c:	0801c9c8 	.word	0x0801c9c8
 8000b60:	0801cac0 	.word	0x0801cac0
 8000b64:	0801cad8 	.word	0x0801cad8
 8000b68:	0801caf8 	.word	0x0801caf8
 8000b6c:	0801cb24 	.word	0x0801cb24
 8000b70:	0801cb60 	.word	0x0801cb60
 8000b74:	0801cb7c 	.word	0x0801cb7c
 8000b78:	0801cb88 	.word	0x0801cb88
 8000b7c:	0801cba0 	.word	0x0801cba0
 8000b80:	0801cbd0 	.word	0x0801cbd0
 8000b84:	0801cbd8 	.word	0x0801cbd8
 8000b88:	0801cbe8 	.word	0x0801cbe8
 8000b8c:	0801cc00 	.word	0x0801cc00
 8000b90:	0801cc18 	.word	0x0801cc18
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496c      	ldr	r1, [pc, #432]	@ (8000d48 <LoraStarter_Process+0x520>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f004 f85e 	bl	8004c58 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f003 ffe8 	bl	8004b84 <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e034      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a63      	ldr	r2, [pc, #396]	@ (8000d4c <LoraStarter_Process+0x524>)
 8000bbe:	4964      	ldr	r1, [pc, #400]	@ (8000d50 <LoraStarter_Process+0x528>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f004 f849 	bl	8004c58 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	495f      	ldr	r1, [pc, #380]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f004 f83d 	bl	8004c58 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da0b      	bge.n	8000c0a <LoraStarter_Process+0x3e2>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	4957      	ldr	r1, [pc, #348]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f004 f82b 	bl	8004c58 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2208      	movs	r2, #8
 8000c06:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c08:	e00d      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c0a:	4954      	ldr	r1, [pc, #336]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f004 f823 	bl	8004c58 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	220a      	movs	r2, #10
 8000c16:	701a      	strb	r2, [r3, #0]
                        break;
 8000c18:	e005      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4950      	ldr	r1, [pc, #320]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f004 f81a 	bl	8004c58 <LOGGER_SendFormatted>
                        break;
 8000c24:	bf00      	nop
                }
            }
            break;
 8000c26:	e072      	b.n	8000d0e <LoraStarter_Process+0x4e6>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c28:	f003 ffac 	bl	8004b84 <TIME_GetCurrentMs>
 8000c2c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <LoraStarter_Process+0x416>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	e001      	b.n	8000c42 <LoraStarter_Process+0x41a>
 8000c3e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d809      	bhi.n	8000c6c <LoraStarter_Process+0x444>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c5c:	4941      	ldr	r1, [pc, #260]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f003 fffa 	bl	8004c58 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2205      	movs	r2, #5
 8000c68:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c6a:	e051      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c80:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c84:	4938      	ldr	r1, [pc, #224]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f003 ffe6 	bl	8004c58 <LOGGER_SendFormatted>
            break;
 8000c8c:	e040      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c8e:	f003 ff79 	bl	8004b84 <TIME_GetCurrentMs>
 8000c92:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10b      	bne.n	8000cb6 <LoraStarter_Process+0x48e>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c9e:	4933      	ldr	r1, [pc, #204]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f003 ffd9 	bl	8004c58 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cb4:	e02c      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d30e      	bcc.n	8000ce6 <LoraStarter_Process+0x4be>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 ffc1 	bl	8004c58 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	701a      	strb	r2, [r3, #0]
            break;
 8000ce4:	e014      	b.n	8000d10 <LoraStarter_Process+0x4e8>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	491e      	ldr	r1, [pc, #120]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f003 ffac 	bl	8004c58 <LOGGER_SendFormatted>
            break;
 8000d00:	e006      	b.n	8000d10 <LoraStarter_Process+0x4e8>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d02:	bf00      	nop
 8000d04:	e004      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d06:	bf00      	nop
 8000d08:	e002      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <LoraStarter_Process+0x4e8>
            break;
 8000d0e:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d012      	beq.n	8000d42 <LoraStarter_Process+0x51a>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d1c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fce1 	bl	80006e8 <get_state_name>
 8000d26:	4604      	mov	r4, r0
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4622      	mov	r2, r4
 8000d36:	4910      	ldr	r1, [pc, #64]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f003 ff8d 	bl	8004c58 <LOGGER_SendFormatted>
 8000d3e:	e000      	b.n	8000d42 <LoraStarter_Process+0x51a>
    if (ctx == NULL) return;
 8000d40:	bf00      	nop
    }
}
 8000d42:	37f4      	adds	r7, #244	@ 0xf4
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	0801cc30 	.word	0x0801cc30
 8000d4c:	0801cc44 	.word	0x0801cc44
 8000d50:	0801cc54 	.word	0x0801cc54
 8000d54:	0801cc6c 	.word	0x0801cc6c
 8000d58:	0801cc84 	.word	0x0801cc84
 8000d5c:	0801cca0 	.word	0x0801cca0
 8000d60:	0801ccc4 	.word	0x0801ccc4
 8000d64:	0801cce0 	.word	0x0801cce0
 8000d68:	0801cd1c 	.word	0x0801cd1c
 8000d6c:	0801cd50 	.word	0x0801cd50
 8000d70:	0801cd68 	.word	0x0801cd68
 8000d74:	0801cd90 	.word	0x0801cd90
 8000d78:	0801cdc4 	.word	0x0801cdc4

08000d7c <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <Network_SendBinary+0x8c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000d94:	f06f 0301 	mvn.w	r3, #1
 8000d98:	e032      	b.n	8000e00 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <Network_SendBinary+0x2a>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000da6:	f06f 0303 	mvn.w	r3, #3
 8000daa:	e029      	b.n	8000e00 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <Network_SendBinary+0x90>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <Network_SendBinary+0x3e>
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d002      	beq.n	8000dbe <Network_SendBinary+0x42>
 8000db8:	e020      	b.n	8000dfc <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e020      	b.n	8000e00 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 faad 	bl	8001320 <SDStorage_WriteLog>
 8000dc6:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <Network_SendBinary+0x6a>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dc10      	bgt.n	8000df6 <Network_SendBinary+0x7a>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f113 0f05 	cmn.w	r3, #5
 8000dda:	d009      	beq.n	8000df0 <Network_SendBinary+0x74>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f113 0f02 	cmn.w	r3, #2
 8000de2:	d002      	beq.n	8000dea <Network_SendBinary+0x6e>
 8000de4:	e007      	b.n	8000df6 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e00a      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000dea:	f06f 0301 	mvn.w	r3, #1
 8000dee:	e007      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000df0:	f06f 0303 	mvn.w	r3, #3
 8000df4:	e004      	b.n	8000e00 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e001      	b.n	8000e00 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000240 	.word	0x20000240
 8000e0c:	20000241 	.word	0x20000241

08000e10 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <Network_IsConnected+0x34>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d10f      	bne.n	8000e3c <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <Network_IsConnected+0x38>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <Network_IsConnected+0x22>
 8000e24:	f000 fae8 	bl	80013f8 <SDStorage_IsReady>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <Network_IsConnected+0x22>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <Network_IsConnected+0x24>
 8000e32:	2300      	movs	r3, #0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	e001      	b.n	8000e40 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	@ (8000e48 <Network_IsConnected+0x38>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000241 	.word	0x20000241
 8000e48:	20000240 	.word	0x20000240

08000e4c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000e5a:	4925      	ldr	r1, [pc, #148]	@ (8000ef0 <is_response_ok+0xa4>)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f003 fefb 	bl	8004c58 <LOGGER_SendFormatted>
        return false;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e03f      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4922      	ldr	r1, [pc, #136]	@ (8000ef4 <is_response_ok+0xa8>)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f003 fef4 	bl	8004c58 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000e70:	4921      	ldr	r1, [pc, #132]	@ (8000ef8 <is_response_ok+0xac>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9cc 	bl	8000210 <strcmp>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d105      	bne.n	8000e8a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000e7e:	491f      	ldr	r1, [pc, #124]	@ (8000efc <is_response_ok+0xb0>)
 8000e80:	2000      	movs	r0, #0
 8000e82:	f003 fee9 	bl	8004c58 <LOGGER_SendFormatted>
        return true;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e02d      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000e8a:	491d      	ldr	r1, [pc, #116]	@ (8000f00 <is_response_ok+0xb4>)
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff f9bf 	bl	8000210 <strcmp>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d105      	bne.n	8000ea4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000e98:	491a      	ldr	r1, [pc, #104]	@ (8000f04 <is_response_ok+0xb8>)
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f003 fedc 	bl	8004c58 <LOGGER_SendFormatted>
        return true;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e020      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000ea4:	4918      	ldr	r1, [pc, #96]	@ (8000f08 <is_response_ok+0xbc>)
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff f9b2 	bl	8000210 <strcmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d105      	bne.n	8000ebe <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000eb2:	4916      	ldr	r1, [pc, #88]	@ (8000f0c <is_response_ok+0xc0>)
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f003 fecf 	bl	8004c58 <LOGGER_SendFormatted>
        return true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e013      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000ebe:	4914      	ldr	r1, [pc, #80]	@ (8000f10 <is_response_ok+0xc4>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f01b f8cc 	bl	801c05e <strstr>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4911      	ldr	r1, [pc, #68]	@ (8000f14 <is_response_ok+0xc8>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f003 fec1 	bl	8004c58 <LOGGER_SendFormatted>
        return true;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e005      	b.n	8000ee6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	490e      	ldr	r1, [pc, #56]	@ (8000f18 <is_response_ok+0xcc>)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f003 feba 	bl	8004c58 <LOGGER_SendFormatted>
    return false;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	0801cde4 	.word	0x0801cde4
 8000ef4:	0801ce14 	.word	0x0801ce14
 8000ef8:	0801ce44 	.word	0x0801ce44
 8000efc:	0801ce48 	.word	0x0801ce48
 8000f00:	0801ce70 	.word	0x0801ce70
 8000f04:	0801ce78 	.word	0x0801ce78
 8000f08:	0801ceac 	.word	0x0801ceac
 8000f0c:	0801ceb0 	.word	0x0801ceb0
 8000f10:	0801cee4 	.word	0x0801cee4
 8000f14:	0801ceec 	.word	0x0801ceec
 8000f18:	0801cf20 	.word	0x0801cf20

08000f1c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f2c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f32:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f3c:	4934      	ldr	r1, [pc, #208]	@ (8001010 <is_join_response_ok+0xf4>)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f003 fe8a 	bl	8004c58 <LOGGER_SendFormatted>
        return false;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e05e      	b.n	8001006 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f48:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f4c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4930      	ldr	r1, [pc, #192]	@ (8001014 <is_join_response_ok+0xf8>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f003 fe7f 	bl	8004c58 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000f5a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f5e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f62:	f107 0008 	add.w	r0, r7, #8
 8000f66:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	f01b f864 	bl	801c038 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000f70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f74:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f86:	e013      	b.n	8000fb0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000f88:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b0d      	cmp	r3, #13
 8000f90:	d004      	beq.n	8000f9c <is_join_response_ok+0x80>
 8000f92:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b0a      	cmp	r3, #10
 8000f9a:	d104      	bne.n	8000fa6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000f9c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
            break;
 8000fa4:	e009      	b.n	8000fba <is_join_response_ok+0x9e>
        }
        pos++;
 8000fa6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000faa:	3301      	adds	r3, #1
 8000fac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fb0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1e6      	bne.n	8000f88 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4916      	ldr	r1, [pc, #88]	@ (8001018 <is_join_response_ok+0xfc>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f925 	bl	8000210 <strcmp>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf0c      	ite	eq
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	2300      	movne	r3, #0
 8000fd0:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000fd4:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d009      	beq.n	8000ff0 <is_join_response_ok+0xd4>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 8000fdc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fe0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <is_join_response_ok+0x100>)
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f003 fe35 	bl	8004c58 <LOGGER_SendFormatted>
 8000fee:	e008      	b.n	8001002 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000ff0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ff4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4909      	ldr	r1, [pc, #36]	@ (8001020 <is_join_response_ok+0x104>)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f003 fe2b 	bl	8004c58 <LOGGER_SendFormatted>
    }
    
    return result;
 8001002:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001006:	4618      	mov	r0, r3
 8001008:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801cf4c 	.word	0x0801cf4c
 8001014:	0801cf84 	.word	0x0801cf84
 8001018:	0801cfb4 	.word	0x0801cfb4
 800101c:	0801cfc0 	.word	0x0801cfc0
 8001020:	0801cff0 	.word	0x0801cff0

08001024 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8001032:	491e      	ldr	r1, [pc, #120]	@ (80010ac <ResponseHandler_ParseSendResponse+0x88>)
 8001034:	2000      	movs	r0, #0
 8001036:	f003 fe0f 	bl	8004c58 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 800103a:	2303      	movs	r3, #3
 800103c:	e031      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	491b      	ldr	r1, [pc, #108]	@ (80010b0 <ResponseHandler_ParseSendResponse+0x8c>)
 8001042:	2000      	movs	r0, #0
 8001044:	f003 fe08 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8001048:	491a      	ldr	r1, [pc, #104]	@ (80010b4 <ResponseHandler_ParseSendResponse+0x90>)
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f01b f807 	bl	801c05e <strstr>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8001056:	4918      	ldr	r1, [pc, #96]	@ (80010b8 <ResponseHandler_ParseSendResponse+0x94>)
 8001058:	2001      	movs	r0, #1
 800105a:	f003 fdfd 	bl	8004c58 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e01f      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8001062:	4916      	ldr	r1, [pc, #88]	@ (80010bc <ResponseHandler_ParseSendResponse+0x98>)
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f01a fffa 	bl	801c05e <strstr>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001070:	4913      	ldr	r1, [pc, #76]	@ (80010c0 <ResponseHandler_ParseSendResponse+0x9c>)
 8001072:	2002      	movs	r0, #2
 8001074:	f003 fdf0 	bl	8004c58 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e012      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 800107c:	4911      	ldr	r1, [pc, #68]	@ (80010c4 <ResponseHandler_ParseSendResponse+0xa0>)
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff f8c6 	bl	8000210 <strcmp>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d105      	bne.n	8001096 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800108a:	490f      	ldr	r1, [pc, #60]	@ (80010c8 <ResponseHandler_ParseSendResponse+0xa4>)
 800108c:	2002      	movs	r0, #2
 800108e:	f003 fde3 	bl	8004c58 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001092:	2302      	movs	r3, #2
 8001094:	e005      	b.n	80010a2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <ResponseHandler_ParseSendResponse+0xa8>)
 800109a:	2000      	movs	r0, #0
 800109c:	f003 fddc 	bl	8004c58 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 80010a0:	2303      	movs	r3, #3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0801d01c 	.word	0x0801d01c
 80010b0:	0801d050 	.word	0x0801d050
 80010b4:	0801d080 	.word	0x0801d080
 80010b8:	0801d098 	.word	0x0801d098
 80010bc:	0801d0c8 	.word	0x0801d0c8
 80010c0:	0801d0e4 	.word	0x0801d0e4
 80010c4:	0801d118 	.word	0x0801d118
 80010c8:	0801d120 	.word	0x0801d120
 80010cc:	0801d14c 	.word	0x0801d14c

080010d0 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
static uint32_t _get_current_timestamp(void);

int SDStorage_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: BSP 기반 FatFs 통합 초기화
    LOG_INFO("[SDStorage] Starting BSP-based SD card initialization...");
 80010d6:	4975      	ldr	r1, [pc, #468]	@ (80012ac <SDStorage_Init+0x1dc>)
 80010d8:	2001      	movs	r0, #1
 80010da:	f003 fdbd 	bl	8004c58 <LOGGER_SendFormatted>
    
    // 1. BSP SD 드라이버 초기화 (FatFs와 완전 통합)
    uint8_t bsp_result = BSP_SD_Init();
 80010de:	f011 fd9d 	bl	8012c1c <BSP_SD_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
    LOG_INFO("[SDStorage] BSP_SD_Init result: %d (0=OK, 1=ERROR, 2=NOT_PRESENT)", bsp_result);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4971      	ldr	r1, [pc, #452]	@ (80012b0 <SDStorage_Init+0x1e0>)
 80010ec:	2001      	movs	r0, #1
 80010ee:	f003 fdb3 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (bsp_result != MSD_OK) {
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00e      	beq.n	8001116 <SDStorage_Init+0x46>
        if (bsp_result == MSD_ERROR_SD_NOT_PRESENT) {
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d104      	bne.n	8001108 <SDStorage_Init+0x38>
            LOG_ERROR("[SDStorage] SD card not detected - check physical connection");
 80010fe:	496d      	ldr	r1, [pc, #436]	@ (80012b4 <SDStorage_Init+0x1e4>)
 8001100:	2003      	movs	r0, #3
 8001102:	f003 fda9 	bl	8004c58 <LOGGER_SendFormatted>
 8001106:	e003      	b.n	8001110 <SDStorage_Init+0x40>
        } else {
            LOG_ERROR("[SDStorage] BSP SD initialization failed");
 8001108:	496b      	ldr	r1, [pc, #428]	@ (80012b8 <SDStorage_Init+0x1e8>)
 800110a:	2003      	movs	r0, #3
 800110c:	f003 fda4 	bl	8004c58 <LOGGER_SendFormatted>
        }
        return SDSTORAGE_ERROR;
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	e0c5      	b.n	80012a2 <SDStorage_Init+0x1d2>
    }
    
    // 2. BSP SD 카드 상태 확인
    uint8_t card_state = BSP_SD_GetCardState();
 8001116:	f011 fe17 	bl	8012d48 <BSP_SD_GetCardState>
 800111a:	4603      	mov	r3, r0
 800111c:	73bb      	strb	r3, [r7, #14]
    LOG_INFO("[SDStorage] BSP SD card state: %d (0=TRANSFER_OK, 1=TRANSFER_BUSY)", card_state);
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	461a      	mov	r2, r3
 8001122:	4966      	ldr	r1, [pc, #408]	@ (80012bc <SDStorage_Init+0x1ec>)
 8001124:	2001      	movs	r0, #1
 8001126:	f003 fd97 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (card_state != SD_TRANSFER_OK) {
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d012      	beq.n	8001156 <SDStorage_Init+0x86>
        LOG_WARN("[SDStorage] SD card not ready for transfer - state: %d", card_state);
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	461a      	mov	r2, r3
 8001134:	4962      	ldr	r1, [pc, #392]	@ (80012c0 <SDStorage_Init+0x1f0>)
 8001136:	2002      	movs	r0, #2
 8001138:	f003 fd8e 	bl	8004c58 <LOGGER_SendFormatted>
        // 잠시 대기 후 재확인
        HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	@ 0x64
 800113e:	f004 f9b9 	bl	80054b4 <HAL_Delay>
        card_state = BSP_SD_GetCardState();
 8001142:	f011 fe01 	bl	8012d48 <BSP_SD_GetCardState>
 8001146:	4603      	mov	r3, r0
 8001148:	73bb      	strb	r3, [r7, #14]
        LOG_INFO("[SDStorage] SD card state after delay: %d", card_state);
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	461a      	mov	r2, r3
 800114e:	495d      	ldr	r1, [pc, #372]	@ (80012c4 <SDStorage_Init+0x1f4>)
 8001150:	2001      	movs	r0, #1
 8001152:	f003 fd81 	bl	8004c58 <LOGGER_SendFormatted>
    }
    
    // 3. FatFs disk_initialize (BSP와 완전 통합됨)
    DSTATUS disk_status = disk_initialize(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f014 f9e6 	bl	8015528 <disk_initialize>
 800115c:	4603      	mov	r3, r0
 800115e:	737b      	strb	r3, [r7, #13]
    LOG_INFO("[SDStorage] FatFs disk_initialize result: 0x%02X (0x00=OK)", disk_status);
 8001160:	7b7b      	ldrb	r3, [r7, #13]
 8001162:	461a      	mov	r2, r3
 8001164:	4958      	ldr	r1, [pc, #352]	@ (80012c8 <SDStorage_Init+0x1f8>)
 8001166:	2001      	movs	r0, #1
 8001168:	f003 fd76 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (disk_status != 0) {
 800116c:	7b7b      	ldrb	r3, [r7, #13]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d008      	beq.n	8001184 <SDStorage_Init+0xb4>
        LOG_ERROR("[SDStorage] FatFs disk initialization failed - code: 0x%02X", disk_status);
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	461a      	mov	r2, r3
 8001176:	4955      	ldr	r1, [pc, #340]	@ (80012cc <SDStorage_Init+0x1fc>)
 8001178:	2003      	movs	r0, #3
 800117a:	f003 fd6d 	bl	8004c58 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e08e      	b.n	80012a2 <SDStorage_Init+0x1d2>
    }
    
    // 4. 파일시스템 마운트 (즉시 마운트로 변경 - BSP 안정성 확보됨)
    LOG_INFO("[SDStorage] Mounting file system with BSP integration...");
 8001184:	4952      	ldr	r1, [pc, #328]	@ (80012d0 <SDStorage_Init+0x200>)
 8001186:	2001      	movs	r0, #1
 8001188:	f003 fd66 	bl	8004c58 <LOGGER_SendFormatted>
    FRESULT mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 800118c:	2201      	movs	r2, #1
 800118e:	4951      	ldr	r1, [pc, #324]	@ (80012d4 <SDStorage_Init+0x204>)
 8001190:	4851      	ldr	r0, [pc, #324]	@ (80012d8 <SDStorage_Init+0x208>)
 8001192:	f015 ffb1 	bl	80170f8 <f_mount>
 8001196:	4603      	mov	r3, r0
 8001198:	733b      	strb	r3, [r7, #12]
    LOG_INFO("[SDStorage] f_mount result: %d (0=FR_OK)", mount_result);
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	461a      	mov	r2, r3
 800119e:	494f      	ldr	r1, [pc, #316]	@ (80012dc <SDStorage_Init+0x20c>)
 80011a0:	2001      	movs	r0, #1
 80011a2:	f003 fd59 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (mount_result != FR_OK) {
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d04d      	beq.n	8001248 <SDStorage_Init+0x178>
        LOG_WARN("[SDStorage] Mount failed, attempting file system creation...");
 80011ac:	494c      	ldr	r1, [pc, #304]	@ (80012e0 <SDStorage_Init+0x210>)
 80011ae:	2002      	movs	r0, #2
 80011b0:	f003 fd52 	bl	8004c58 <LOGGER_SendFormatted>
        
        // 파일시스템 자동 생성 시도
        if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 80011b4:	7b3b      	ldrb	r3, [r7, #12]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d002      	beq.n	80011c0 <SDStorage_Init+0xf0>
 80011ba:	7b3b      	ldrb	r3, [r7, #12]
 80011bc:	2b0d      	cmp	r3, #13
 80011be:	d139      	bne.n	8001234 <SDStorage_Init+0x164>
            static BYTE work[_MAX_SS];
            
            LOG_INFO("[SDStorage] Creating file system...");
 80011c0:	4948      	ldr	r1, [pc, #288]	@ (80012e4 <SDStorage_Init+0x214>)
 80011c2:	2001      	movs	r0, #1
 80011c4:	f003 fd48 	bl	8004c58 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 80011c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	4b46      	ldr	r3, [pc, #280]	@ (80012e8 <SDStorage_Init+0x218>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	2107      	movs	r1, #7
 80011d4:	483f      	ldr	r0, [pc, #252]	@ (80012d4 <SDStorage_Init+0x204>)
 80011d6:	f016 fdd1 	bl	8017d7c <f_mkfs>
 80011da:	4603      	mov	r3, r0
 80011dc:	72fb      	strb	r3, [r7, #11]
            LOG_INFO("[SDStorage] f_mkfs result: %d", mkfs_result);
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4942      	ldr	r1, [pc, #264]	@ (80012ec <SDStorage_Init+0x21c>)
 80011e4:	2001      	movs	r0, #1
 80011e6:	f003 fd37 	bl	8004c58 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 80011ea:	7afb      	ldrb	r3, [r7, #11]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <SDStorage_Init+0x132>
                LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	461a      	mov	r2, r3
 80011f4:	493e      	ldr	r1, [pc, #248]	@ (80012f0 <SDStorage_Init+0x220>)
 80011f6:	2003      	movs	r0, #3
 80011f8:	f003 fd2e 	bl	8004c58 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	e04f      	b.n	80012a2 <SDStorage_Init+0x1d2>
            }
            
            // 재마운트
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001202:	2201      	movs	r2, #1
 8001204:	4933      	ldr	r1, [pc, #204]	@ (80012d4 <SDStorage_Init+0x204>)
 8001206:	4834      	ldr	r0, [pc, #208]	@ (80012d8 <SDStorage_Init+0x208>)
 8001208:	f015 ff76 	bl	80170f8 <f_mount>
 800120c:	4603      	mov	r3, r0
 800120e:	733b      	strb	r3, [r7, #12]
            LOG_INFO("[SDStorage] Re-mount after mkfs: %d", mount_result);
 8001210:	7b3b      	ldrb	r3, [r7, #12]
 8001212:	461a      	mov	r2, r3
 8001214:	4937      	ldr	r1, [pc, #220]	@ (80012f4 <SDStorage_Init+0x224>)
 8001216:	2001      	movs	r0, #1
 8001218:	f003 fd1e 	bl	8004c58 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d011      	beq.n	8001246 <SDStorage_Init+0x176>
                LOG_ERROR("[SDStorage] Re-mount failed: %d", mount_result);
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	461a      	mov	r2, r3
 8001226:	4934      	ldr	r1, [pc, #208]	@ (80012f8 <SDStorage_Init+0x228>)
 8001228:	2003      	movs	r0, #3
 800122a:	f003 fd15 	bl	8004c58 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e036      	b.n	80012a2 <SDStorage_Init+0x1d2>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with error: %d", mount_result);
 8001234:	7b3b      	ldrb	r3, [r7, #12]
 8001236:	461a      	mov	r2, r3
 8001238:	4930      	ldr	r1, [pc, #192]	@ (80012fc <SDStorage_Init+0x22c>)
 800123a:	2003      	movs	r0, #3
 800123c:	f003 fd0c 	bl	8004c58 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	e02d      	b.n	80012a2 <SDStorage_Init+0x1d2>
        if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001246:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] BSP-FatFs integration successful");
 8001248:	492d      	ldr	r1, [pc, #180]	@ (8001300 <SDStorage_Init+0x230>)
 800124a:	2001      	movs	r0, #1
 800124c:	f003 fd04 	bl	8004c58 <LOGGER_SendFormatted>
    // PC/테스트 환경: 시뮬레이션
    LOG_INFO("[SDStorage] Test environment - simulating BSP initialization");
#endif

    // 로그 디렉토리 생성
    LOG_INFO("[SDStorage] Creating log directory...");
 8001250:	492c      	ldr	r1, [pc, #176]	@ (8001304 <SDStorage_Init+0x234>)
 8001252:	2001      	movs	r0, #1
 8001254:	f003 fd00 	bl	8004c58 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 8001258:	f000 f976 	bl	8001548 <_create_log_directory>
 800125c:	6078      	str	r0, [r7, #4]
    if (dir_result != SDSTORAGE_OK) {
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00d      	beq.n	8001280 <SDStorage_Init+0x1b0>
        LOG_ERROR("[SDStorage] Failed to create log directory");
 8001264:	4928      	ldr	r1, [pc, #160]	@ (8001308 <SDStorage_Init+0x238>)
 8001266:	2003      	movs	r0, #3
 8001268:	f003 fcf6 	bl	8004c58 <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] Continuing with terminal-only logging");
 800126c:	4927      	ldr	r1, [pc, #156]	@ (800130c <SDStorage_Init+0x23c>)
 800126e:	2002      	movs	r0, #2
 8001270:	f003 fcf2 	bl	8004c58 <LOGGER_SendFormatted>
        g_sd_ready = false;
 8001274:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <SDStorage_Init+0x240>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_ERROR;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e010      	b.n	80012a2 <SDStorage_Init+0x1d2>
    }
    
    g_sd_ready = true;
 8001280:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <SDStorage_Init+0x240>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <SDStorage_Init+0x244>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 800128c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001290:	2100      	movs	r1, #0
 8001292:	4821      	ldr	r0, [pc, #132]	@ (8001318 <SDStorage_Init+0x248>)
 8001294:	f01a fec8 	bl	801c028 <memset>
    
    LOG_INFO("[SDStorage] BSP-based SD storage initialization completed successfully");
 8001298:	4920      	ldr	r1, [pc, #128]	@ (800131c <SDStorage_Init+0x24c>)
 800129a:	2001      	movs	r0, #1
 800129c:	f003 fcdc 	bl	8004c58 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	0801d17c 	.word	0x0801d17c
 80012b0:	0801d1b8 	.word	0x0801d1b8
 80012b4:	0801d1fc 	.word	0x0801d1fc
 80012b8:	0801d23c 	.word	0x0801d23c
 80012bc:	0801d268 	.word	0x0801d268
 80012c0:	0801d2ac 	.word	0x0801d2ac
 80012c4:	0801d2e4 	.word	0x0801d2e4
 80012c8:	0801d310 	.word	0x0801d310
 80012cc:	0801d34c 	.word	0x0801d34c
 80012d0:	0801d388 	.word	0x0801d388
 80012d4:	2000225c 	.word	0x2000225c
 80012d8:	20002260 	.word	0x20002260
 80012dc:	0801d3c4 	.word	0x0801d3c4
 80012e0:	0801d3f0 	.word	0x0801d3f0
 80012e4:	0801d430 	.word	0x0801d430
 80012e8:	2000057c 	.word	0x2000057c
 80012ec:	0801d454 	.word	0x0801d454
 80012f0:	0801d474 	.word	0x0801d474
 80012f4:	0801d4a0 	.word	0x0801d4a0
 80012f8:	0801d4c4 	.word	0x0801d4c4
 80012fc:	0801d4e4 	.word	0x0801d4e4
 8001300:	0801d50c 	.word	0x0801d50c
 8001304:	0801d53c 	.word	0x0801d53c
 8001308:	0801d564 	.word	0x0801d564
 800130c:	0801d590 	.word	0x0801d590
 8001310:	20000242 	.word	0x20000242
 8001314:	20000344 	.word	0x20000344
 8001318:	20000244 	.word	0x20000244
 800131c:	0801d5c4 	.word	0x0801d5c4

08001320 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800132a:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <SDStorage_WriteLog+0xc4>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f083 0301 	eor.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 8001338:	f06f 0301 	mvn.w	r3, #1
 800133c:	e04e      	b.n	80013dc <SDStorage_WriteLog+0xbc>
    }
    
    if (data == NULL || size == 0) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <SDStorage_WriteLog+0x2a>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 800134a:	f06f 0304 	mvn.w	r3, #4
 800134e:	e045      	b.n	80013dc <SDStorage_WriteLog+0xbc>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <SDStorage_WriteLog+0xc8>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <SDStorage_WriteLog+0xcc>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 8001360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001364:	d907      	bls.n	8001376 <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 8001366:	f000 f853 	bl	8001410 <SDStorage_CreateNewLogFile>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 8001370:	f06f 0302 	mvn.w	r3, #2
 8001374:	e032      	b.n	80013dc <SDStorage_WriteLog+0xbc>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs를 사용한 파일 쓰기
    if (!g_file_open) {
 8001376:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <SDStorage_WriteLog+0xd0>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00d      	beq.n	80013a0 <SDStorage_WriteLog+0x80>
        if (f_open(&g_log_file, g_current_log_file, FA_WRITE | FA_OPEN_APPEND) != FR_OK) {
 8001384:	2232      	movs	r2, #50	@ 0x32
 8001386:	4918      	ldr	r1, [pc, #96]	@ (80013e8 <SDStorage_WriteLog+0xc8>)
 8001388:	481a      	ldr	r0, [pc, #104]	@ (80013f4 <SDStorage_WriteLog+0xd4>)
 800138a:	f015 ff19 	bl	80171c0 <f_open>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <SDStorage_WriteLog+0x7a>
            return SDSTORAGE_FILE_ERROR;
 8001394:	f06f 0302 	mvn.w	r3, #2
 8001398:	e020      	b.n	80013dc <SDStorage_WriteLog+0xbc>
        }
        g_file_open = true;
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <SDStorage_WriteLog+0xd0>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
    }
    
    UINT bytes_written;
    if (f_write(&g_log_file, data, size, &bytes_written) != FR_OK) {
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4812      	ldr	r0, [pc, #72]	@ (80013f4 <SDStorage_WriteLog+0xd4>)
 80013aa:	f016 f8ca 	bl	8017542 <f_write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <SDStorage_WriteLog+0x9a>
        return SDSTORAGE_FILE_ERROR;
 80013b4:	f06f 0302 	mvn.w	r3, #2
 80013b8:	e010      	b.n	80013dc <SDStorage_WriteLog+0xbc>
    }
    
    if (bytes_written != size) {
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d002      	beq.n	80013c8 <SDStorage_WriteLog+0xa8>
        return SDSTORAGE_DISK_FULL;
 80013c2:	f06f 0303 	mvn.w	r3, #3
 80013c6:	e009      	b.n	80013dc <SDStorage_WriteLog+0xbc>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    f_sync(&g_log_file);
 80013c8:	480a      	ldr	r0, [pc, #40]	@ (80013f4 <SDStorage_WriteLog+0xd4>)
 80013ca:	f016 fa5e 	bl	801788a <f_sync>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <SDStorage_WriteLog+0xcc>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <SDStorage_WriteLog+0xcc>)
 80013d8:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000242 	.word	0x20000242
 80013e8:	20000244 	.word	0x20000244
 80013ec:	20000344 	.word	0x20000344
 80013f0:	20000578 	.word	0x20000578
 80013f4:	20000348 	.word	0x20000348

080013f8 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
    return g_sd_ready;
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <SDStorage_IsReady+0x14>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000242 	.word	0x20000242

08001410 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001416:	4b40      	ldr	r3, [pc, #256]	@ (8001518 <SDStorage_CreateNewLogFile+0x108>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f083 0301 	eor.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <SDStorage_CreateNewLogFile+0x1a>
        return SDSTORAGE_NOT_READY;
 8001424:	f06f 0301 	mvn.w	r3, #1
 8001428:	e071      	b.n	800150e <SDStorage_CreateNewLogFile+0xfe>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 800142a:	4b3c      	ldr	r3, [pc, #240]	@ (800151c <SDStorage_CreateNewLogFile+0x10c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <SDStorage_CreateNewLogFile+0x2e>
        f_close(&g_log_file);
 8001432:	483b      	ldr	r0, [pc, #236]	@ (8001520 <SDStorage_CreateNewLogFile+0x110>)
 8001434:	f016 fab2 	bl	801799c <f_close>
        g_file_open = false;
 8001438:	4b38      	ldr	r3, [pc, #224]	@ (800151c <SDStorage_CreateNewLogFile+0x10c>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 800143e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001442:	4838      	ldr	r0, [pc, #224]	@ (8001524 <SDStorage_CreateNewLogFile+0x114>)
 8001444:	f000 fa20 	bl	8001888 <_generate_log_filename>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <SDStorage_CreateNewLogFile+0x44>
        return SDSTORAGE_ERROR;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	e05c      	b.n	800150e <SDStorage_CreateNewLogFile+0xfe>
    }
    
    // BSP 기반 파일 생성
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Creating log file with BSP integration: %s", g_current_log_file);
 8001454:	4a33      	ldr	r2, [pc, #204]	@ (8001524 <SDStorage_CreateNewLogFile+0x114>)
 8001456:	4934      	ldr	r1, [pc, #208]	@ (8001528 <SDStorage_CreateNewLogFile+0x118>)
 8001458:	2001      	movs	r0, #1
 800145a:	f003 fbfd 	bl	8004c58 <LOGGER_SendFormatted>
    
    FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE);
 800145e:	2206      	movs	r2, #6
 8001460:	4930      	ldr	r1, [pc, #192]	@ (8001524 <SDStorage_CreateNewLogFile+0x114>)
 8001462:	482f      	ldr	r0, [pc, #188]	@ (8001520 <SDStorage_CreateNewLogFile+0x110>)
 8001464:	f015 feac 	bl	80171c0 <f_open>
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] f_open result: %d (0=FR_OK)", open_result);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	461a      	mov	r2, r3
 8001470:	492e      	ldr	r1, [pc, #184]	@ (800152c <SDStorage_CreateNewLogFile+0x11c>)
 8001472:	2001      	movs	r0, #1
 8001474:	f003 fbf0 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d039      	beq.n	80014f2 <SDStorage_CreateNewLogFile+0xe2>
        if (open_result == FR_EXIST) {
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d12a      	bne.n	80014da <SDStorage_CreateNewLogFile+0xca>
            LOG_WARN("[SDStorage] File already exists - trying with different timestamp");
 8001484:	492a      	ldr	r1, [pc, #168]	@ (8001530 <SDStorage_CreateNewLogFile+0x120>)
 8001486:	2002      	movs	r0, #2
 8001488:	f003 fbe6 	bl	8004c58 <LOGGER_SendFormatted>
            // 타임스탬프 재생성으로 재시도
            HAL_Delay(1000);  // 1초 대기로 다른 타임스탬프 확보
 800148c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001490:	f004 f810 	bl	80054b4 <HAL_Delay>
            if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) == SDSTORAGE_OK) {
 8001494:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001498:	4822      	ldr	r0, [pc, #136]	@ (8001524 <SDStorage_CreateNewLogFile+0x114>)
 800149a:	f000 f9f5 	bl	8001888 <_generate_log_filename>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d126      	bne.n	80014f2 <SDStorage_CreateNewLogFile+0xe2>
                open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE);
 80014a4:	2206      	movs	r2, #6
 80014a6:	491f      	ldr	r1, [pc, #124]	@ (8001524 <SDStorage_CreateNewLogFile+0x114>)
 80014a8:	481d      	ldr	r0, [pc, #116]	@ (8001520 <SDStorage_CreateNewLogFile+0x110>)
 80014aa:	f015 fe89 	bl	80171c0 <f_open>
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
                if (open_result == FR_OK) {
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d104      	bne.n	80014c2 <SDStorage_CreateNewLogFile+0xb2>
                    LOG_INFO("[SDStorage] File created with new timestamp");
 80014b8:	491e      	ldr	r1, [pc, #120]	@ (8001534 <SDStorage_CreateNewLogFile+0x124>)
 80014ba:	2001      	movs	r0, #1
 80014bc:	f003 fbcc 	bl	8004c58 <LOGGER_SendFormatted>
 80014c0:	e017      	b.n	80014f2 <SDStorage_CreateNewLogFile+0xe2>
                } else {
                    LOG_ERROR("[SDStorage] File creation failed even with new timestamp: %d", open_result);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	461a      	mov	r2, r3
 80014c6:	491c      	ldr	r1, [pc, #112]	@ (8001538 <SDStorage_CreateNewLogFile+0x128>)
 80014c8:	2003      	movs	r0, #3
 80014ca:	f003 fbc5 	bl	8004c58 <LOGGER_SendFormatted>
                    g_sd_ready = false;
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <SDStorage_CreateNewLogFile+0x108>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
                    return SDSTORAGE_FILE_ERROR;
 80014d4:	f06f 0302 	mvn.w	r3, #2
 80014d8:	e019      	b.n	800150e <SDStorage_CreateNewLogFile+0xfe>
                }
            }
        } else {
            LOG_ERROR("[SDStorage] File creation failed: %d", open_result);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	461a      	mov	r2, r3
 80014de:	4917      	ldr	r1, [pc, #92]	@ (800153c <SDStorage_CreateNewLogFile+0x12c>)
 80014e0:	2003      	movs	r0, #3
 80014e2:	f003 fbb9 	bl	8004c58 <LOGGER_SendFormatted>
            g_sd_ready = false;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <SDStorage_CreateNewLogFile+0x108>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
            return SDSTORAGE_FILE_ERROR;
 80014ec:	f06f 0302 	mvn.w	r3, #2
 80014f0:	e00d      	b.n	800150e <SDStorage_CreateNewLogFile+0xfe>
        }
    }
    
    // 파일 생성 성공 - 닫기
    f_close(&g_log_file);
 80014f2:	480b      	ldr	r0, [pc, #44]	@ (8001520 <SDStorage_CreateNewLogFile+0x110>)
 80014f4:	f016 fa52 	bl	801799c <f_close>
    g_file_open = false;
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <SDStorage_CreateNewLogFile+0x10c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[SDStorage] BSP-based log file created successfully");
 80014fe:	4910      	ldr	r1, [pc, #64]	@ (8001540 <SDStorage_CreateNewLogFile+0x130>)
 8001500:	2001      	movs	r0, #1
 8001502:	f003 fba9 	bl	8004c58 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 시뮬레이션
    LOG_INFO("[SDStorage] Test environment - BSP file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <SDStorage_CreateNewLogFile+0x134>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000242 	.word	0x20000242
 800151c:	20000578 	.word	0x20000578
 8001520:	20000348 	.word	0x20000348
 8001524:	20000244 	.word	0x20000244
 8001528:	0801d60c 	.word	0x0801d60c
 800152c:	0801d644 	.word	0x0801d644
 8001530:	0801d66c 	.word	0x0801d66c
 8001534:	0801d6b0 	.word	0x0801d6b0
 8001538:	0801d6dc 	.word	0x0801d6dc
 800153c:	0801d71c 	.word	0x0801d71c
 8001540:	0801d744 	.word	0x0801d744
 8001544:	20000344 	.word	0x20000344

08001548 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 800154e:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // STM32: BSP 기반 SD 카드 테스트
    LOG_INFO("[SDStorage] Testing SD card functionality with BSP drivers...");
 8001550:	49b0      	ldr	r1, [pc, #704]	@ (8001814 <_create_log_directory+0x2cc>)
 8001552:	2001      	movs	r0, #1
 8001554:	f003 fb80 	bl	8004c58 <LOGGER_SendFormatted>
    
    // 1. BSP SD 카드 읽기 테스트
    static uint32_t read_buffer[128];  // 512 bytes = 128 uint32_t
    uint8_t read_result = BSP_SD_ReadBlocks(read_buffer, 0, 1, 5000);
 8001558:	f241 3388 	movw	r3, #5000	@ 0x1388
 800155c:	2201      	movs	r2, #1
 800155e:	2100      	movs	r1, #0
 8001560:	48ad      	ldr	r0, [pc, #692]	@ (8001818 <_create_log_directory+0x2d0>)
 8001562:	f011 fb81 	bl	8012c68 <BSP_SD_ReadBlocks>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
    LOG_INFO("[SDStorage] BSP_SD_ReadBlocks result: %d (0=OK)", read_result);
 800156c:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001570:	461a      	mov	r2, r3
 8001572:	49aa      	ldr	r1, [pc, #680]	@ (800181c <_create_log_directory+0x2d4>)
 8001574:	2001      	movs	r0, #1
 8001576:	f003 fb6f 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (read_result != MSD_OK) {
 800157a:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <_create_log_directory+0x48>
        LOG_ERROR("[SDStorage] BSP SD read test failed - hardware problem");
 8001582:	49a7      	ldr	r1, [pc, #668]	@ (8001820 <_create_log_directory+0x2d8>)
 8001584:	2003      	movs	r0, #3
 8001586:	f003 fb67 	bl	8004c58 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e13b      	b.n	8001808 <_create_log_directory+0x2c0>
    }
    
    // 2. BSP SD 카드 쓰기 테스트 (안전한 섹터 사용)
    static uint32_t write_buffer[128];
    memset(write_buffer, 0xAA, 512);  // 테스트 패턴
 8001590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001594:	21aa      	movs	r1, #170	@ 0xaa
 8001596:	48a3      	ldr	r0, [pc, #652]	@ (8001824 <_create_log_directory+0x2dc>)
 8001598:	f01a fd46 	bl	801c028 <memset>
    
    LOG_INFO("[SDStorage] Testing BSP SD write capability...");
 800159c:	49a2      	ldr	r1, [pc, #648]	@ (8001828 <_create_log_directory+0x2e0>)
 800159e:	2001      	movs	r0, #1
 80015a0:	f003 fb5a 	bl	8004c58 <LOGGER_SendFormatted>
    uint8_t write_result = BSP_SD_WriteBlocks(write_buffer, 1000, 1, 5000);
 80015a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015ae:	489d      	ldr	r0, [pc, #628]	@ (8001824 <_create_log_directory+0x2dc>)
 80015b0:	f011 fb78 	bl	8012ca4 <BSP_SD_WriteBlocks>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f887 34ba 	strb.w	r3, [r7, #1210]	@ 0x4ba
    LOG_INFO("[SDStorage] BSP_SD_WriteBlocks result: %d (0=OK)", write_result);
 80015ba:	f897 34ba 	ldrb.w	r3, [r7, #1210]	@ 0x4ba
 80015be:	461a      	mov	r2, r3
 80015c0:	499a      	ldr	r1, [pc, #616]	@ (800182c <_create_log_directory+0x2e4>)
 80015c2:	2001      	movs	r0, #1
 80015c4:	f003 fb48 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (write_result != MSD_OK) {
 80015c8:	f897 34ba 	ldrb.w	r3, [r7, #1210]	@ 0x4ba
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <_create_log_directory+0x96>
        LOG_ERROR("[SDStorage] BSP SD write test failed - card may be write-protected");
 80015d0:	4997      	ldr	r1, [pc, #604]	@ (8001830 <_create_log_directory+0x2e8>)
 80015d2:	2003      	movs	r0, #3
 80015d4:	f003 fb40 	bl	8004c58 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	e114      	b.n	8001808 <_create_log_directory+0x2c0>
    }
    
    // 3. 쓰기 완료 대기 및 상태 확인
    LOG_INFO("[SDStorage] Waiting for write completion...");
 80015de:	4995      	ldr	r1, [pc, #596]	@ (8001834 <_create_log_directory+0x2ec>)
 80015e0:	2001      	movs	r0, #1
 80015e2:	f003 fb39 	bl	8004c58 <LOGGER_SendFormatted>
    HAL_Delay(100);  // 쓰기 안정화 대기
 80015e6:	2064      	movs	r0, #100	@ 0x64
 80015e8:	f003 ff64 	bl	80054b4 <HAL_Delay>
    
    uint8_t card_state = BSP_SD_GetCardState();
 80015ec:	f011 fbac 	bl	8012d48 <BSP_SD_GetCardState>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f887 34b9 	strb.w	r3, [r7, #1209]	@ 0x4b9
    LOG_INFO("[SDStorage] Card state after write: %d (0=TRANSFER_OK)", card_state);
 80015f6:	f897 34b9 	ldrb.w	r3, [r7, #1209]	@ 0x4b9
 80015fa:	461a      	mov	r2, r3
 80015fc:	498e      	ldr	r1, [pc, #568]	@ (8001838 <_create_log_directory+0x2f0>)
 80015fe:	2001      	movs	r0, #1
 8001600:	f003 fb2a 	bl	8004c58 <LOGGER_SendFormatted>
    
    // 4. 쓰기 검증
    static uint32_t verify_buffer[128];
    uint8_t verify_result = BSP_SD_ReadBlocks(verify_buffer, 1000, 1, 5000);
 8001604:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800160e:	488b      	ldr	r0, [pc, #556]	@ (800183c <_create_log_directory+0x2f4>)
 8001610:	f011 fb2a 	bl	8012c68 <BSP_SD_ReadBlocks>
 8001614:	4603      	mov	r3, r0
 8001616:	f887 34b8 	strb.w	r3, [r7, #1208]	@ 0x4b8
    LOG_INFO("[SDStorage] BSP_SD_ReadBlocks(verify) result: %d", verify_result);
 800161a:	f897 34b8 	ldrb.w	r3, [r7, #1208]	@ 0x4b8
 800161e:	461a      	mov	r2, r3
 8001620:	4987      	ldr	r1, [pc, #540]	@ (8001840 <_create_log_directory+0x2f8>)
 8001622:	2001      	movs	r0, #1
 8001624:	f003 fb18 	bl	8004c58 <LOGGER_SendFormatted>
    
    bool verification_ok = false;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
    if (verify_result == MSD_OK) {
 800162e:	f897 34b8 	ldrb.w	r3, [r7, #1208]	@ 0x4b8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d136      	bne.n	80016a4 <_create_log_directory+0x15c>
        int mismatch_count = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
        for (int i = 0; i < 128; i++) {
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001642:	e015      	b.n	8001670 <_create_log_directory+0x128>
            if (write_buffer[i] != verify_buffer[i]) {
 8001644:	4a77      	ldr	r2, [pc, #476]	@ (8001824 <_create_log_directory+0x2dc>)
 8001646:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800164a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800164e:	497b      	ldr	r1, [pc, #492]	@ (800183c <_create_log_directory+0x2f4>)
 8001650:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001654:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001658:	429a      	cmp	r2, r3
 800165a:	d004      	beq.n	8001666 <_create_log_directory+0x11e>
                mismatch_count++;
 800165c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8001660:	3301      	adds	r3, #1
 8001662:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
        for (int i = 0; i < 128; i++) {
 8001666:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800166a:	3301      	adds	r3, #1
 800166c:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001670:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001674:	2b7f      	cmp	r3, #127	@ 0x7f
 8001676:	dde5      	ble.n	8001644 <_create_log_directory+0xfc>
            }
        }
        
        if (mismatch_count == 0) {
 8001678:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <_create_log_directory+0x148>
            LOG_INFO("[SDStorage] ✅ BSP SD read/write test successful");
 8001680:	4970      	ldr	r1, [pc, #448]	@ (8001844 <_create_log_directory+0x2fc>)
 8001682:	2001      	movs	r0, #1
 8001684:	f003 fae8 	bl	8004c58 <LOGGER_SendFormatted>
            verification_ok = true;
 8001688:	2301      	movs	r3, #1
 800168a:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
 800168e:	e010      	b.n	80016b2 <_create_log_directory+0x16a>
        } else {
            LOG_WARN("[SDStorage] ⚠️ BSP SD data verification failed - %d mismatches", mismatch_count);
 8001690:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	@ 0x4c0
 8001694:	496c      	ldr	r1, [pc, #432]	@ (8001848 <_create_log_directory+0x300>)
 8001696:	2002      	movs	r0, #2
 8001698:	f003 fade 	bl	8004c58 <LOGGER_SendFormatted>
            verification_ok = false;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
 80016a2:	e006      	b.n	80016b2 <_create_log_directory+0x16a>
        }
    } else {
        LOG_ERROR("[SDStorage] BSP SD verify read failed");
 80016a4:	4969      	ldr	r1, [pc, #420]	@ (800184c <_create_log_directory+0x304>)
 80016a6:	2003      	movs	r0, #3
 80016a8:	f003 fad6 	bl	8004c58 <LOGGER_SendFormatted>
        verification_ok = false;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
    }
    
    // 5. 하드웨어 테스트 결과 평가
    if (write_result != MSD_OK || verify_result != MSD_OK || !verification_ok) {
 80016b2:	f897 34ba 	ldrb.w	r3, [r7, #1210]	@ 0x4ba
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10a      	bne.n	80016d0 <_create_log_directory+0x188>
 80016ba:	f897 34b8 	ldrb.w	r3, [r7, #1208]	@ 0x4b8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <_create_log_directory+0x188>
 80016c2:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 80016c6:	f083 0301 	eor.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <_create_log_directory+0x192>
        LOG_WARN("[SDStorage] BSP hardware test failed - attempting simple file test");
 80016d0:	495f      	ldr	r1, [pc, #380]	@ (8001850 <_create_log_directory+0x308>)
 80016d2:	2002      	movs	r0, #2
 80016d4:	f003 fac0 	bl	8004c58 <LOGGER_SendFormatted>
 80016d8:	e003      	b.n	80016e2 <_create_log_directory+0x19a>
    } else {
        LOG_INFO("[SDStorage] BSP hardware test passed - proceeding with directory creation");
 80016da:	495e      	ldr	r1, [pc, #376]	@ (8001854 <_create_log_directory+0x30c>)
 80016dc:	2001      	movs	r0, #1
 80016de:	f003 fabb 	bl	8004c58 <LOGGER_SendFormatted>
    }
    
    // 6. FatFs 레벨 테스트 - 로그 디렉토리 생성
    LOG_INFO("[SDStorage] Creating log directory: %s", SDSTORAGE_LOG_DIR);
 80016e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001858 <_create_log_directory+0x310>)
 80016e4:	495d      	ldr	r1, [pc, #372]	@ (800185c <_create_log_directory+0x314>)
 80016e6:	2001      	movs	r0, #1
 80016e8:	f003 fab6 	bl	8004c58 <LOGGER_SendFormatted>
    FRESULT mkdir_result = f_mkdir(SDSTORAGE_LOG_DIR);
 80016ec:	485a      	ldr	r0, [pc, #360]	@ (8001858 <_create_log_directory+0x310>)
 80016ee:	f016 fa36 	bl	8017b5e <f_mkdir>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
    LOG_INFO("[SDStorage] f_mkdir result: %d (0=OK, 8=FR_EXIST)", mkdir_result);
 80016f8:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 80016fc:	461a      	mov	r2, r3
 80016fe:	4958      	ldr	r1, [pc, #352]	@ (8001860 <_create_log_directory+0x318>)
 8001700:	2001      	movs	r0, #1
 8001702:	f003 faa9 	bl	8004c58 <LOGGER_SendFormatted>
    
    if (mkdir_result != FR_OK && mkdir_result != FR_EXIST) {
 8001706:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 800170a:	2b00      	cmp	r3, #0
 800170c:	d03d      	beq.n	800178a <_create_log_directory+0x242>
 800170e:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 8001712:	2b08      	cmp	r3, #8
 8001714:	d039      	beq.n	800178a <_create_log_directory+0x242>
        LOG_WARN("[SDStorage] Directory creation failed: %d, testing root directory access", mkdir_result);
 8001716:	f897 34b7 	ldrb.w	r3, [r7, #1207]	@ 0x4b7
 800171a:	461a      	mov	r2, r3
 800171c:	4951      	ldr	r1, [pc, #324]	@ (8001864 <_create_log_directory+0x31c>)
 800171e:	2002      	movs	r0, #2
 8001720:	f003 fa9a 	bl	8004c58 <LOGGER_SendFormatted>
        
        // 루트 디렉토리에서 테스트 파일 생성
        FIL test_file;
        FRESULT test_result = f_open(&test_file, "bsp_test.txt", FA_CREATE_NEW | FA_WRITE);
 8001724:	463b      	mov	r3, r7
 8001726:	2206      	movs	r2, #6
 8001728:	494f      	ldr	r1, [pc, #316]	@ (8001868 <_create_log_directory+0x320>)
 800172a:	4618      	mov	r0, r3
 800172c:	f015 fd48 	bl	80171c0 <f_open>
 8001730:	4603      	mov	r3, r0
 8001732:	f887 34b6 	strb.w	r3, [r7, #1206]	@ 0x4b6
        
        if (test_result == FR_OK) {
 8001736:	f897 34b6 	ldrb.w	r3, [r7, #1206]	@ 0x4b6
 800173a:	2b00      	cmp	r3, #0
 800173c:	d11b      	bne.n	8001776 <_create_log_directory+0x22e>
            const char* test_data = "BSP Test\n";
 800173e:	4b4b      	ldr	r3, [pc, #300]	@ (800186c <_create_log_directory+0x324>)
 8001740:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
            UINT bytes_written;
            f_write(&test_file, test_data, strlen(test_data), &bytes_written);
 8001744:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	@ 0x4b0
 8001748:	f7fe fd6c 	bl	8000224 <strlen>
 800174c:	4602      	mov	r2, r0
 800174e:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001752:	4638      	mov	r0, r7
 8001754:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 8001758:	f015 fef3 	bl	8017542 <f_write>
            f_close(&test_file);
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f016 f91c 	bl	801799c <f_close>
            f_unlink("bsp_test.txt");  // 정리
 8001764:	4840      	ldr	r0, [pc, #256]	@ (8001868 <_create_log_directory+0x320>)
 8001766:	f016 f948 	bl	80179fa <f_unlink>
            
            LOG_INFO("[SDStorage] ✅ Root directory file test successful");
 800176a:	4941      	ldr	r1, [pc, #260]	@ (8001870 <_create_log_directory+0x328>)
 800176c:	2001      	movs	r0, #1
 800176e:	f003 fa73 	bl	8004c58 <LOGGER_SendFormatted>
            return SDSTORAGE_OK;  // 루트에서 파일 생성 가능
 8001772:	2300      	movs	r3, #0
 8001774:	e048      	b.n	8001808 <_create_log_directory+0x2c0>
        } else {
            LOG_ERROR("[SDStorage] Root directory file test failed: %d", test_result);
 8001776:	f897 34b6 	ldrb.w	r3, [r7, #1206]	@ 0x4b6
 800177a:	461a      	mov	r2, r3
 800177c:	493d      	ldr	r1, [pc, #244]	@ (8001874 <_create_log_directory+0x32c>)
 800177e:	2003      	movs	r0, #3
 8001780:	f003 fa6a 	bl	8004c58 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	e03e      	b.n	8001808 <_create_log_directory+0x2c0>
    }
    
    // 7. 디렉토리 생성 성공 - 추가 테스트
    FIL test_file;
    char test_path[64];
    snprintf(test_path, sizeof(test_path), "%s/bsp_test.txt", SDSTORAGE_LOG_DIR);
 800178a:	f507 700e 	add.w	r0, r7, #568	@ 0x238
 800178e:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <_create_log_directory+0x310>)
 8001790:	4a39      	ldr	r2, [pc, #228]	@ (8001878 <_create_log_directory+0x330>)
 8001792:	2140      	movs	r1, #64	@ 0x40
 8001794:	f01a fbb4 	bl	801bf00 <sniprintf>
    
    FRESULT file_test = f_open(&test_file, test_path, FA_CREATE_NEW | FA_WRITE);
 8001798:	f507 710e 	add.w	r1, r7, #568	@ 0x238
 800179c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80017a0:	2206      	movs	r2, #6
 80017a2:	4618      	mov	r0, r3
 80017a4:	f015 fd0c 	bl	80171c0 <f_open>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (file_test == FR_OK) {
 80017ae:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d11f      	bne.n	80017f6 <_create_log_directory+0x2ae>
        const char* test_data = "BSP Directory Test\n";
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <_create_log_directory+0x334>)
 80017b8:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
        UINT bytes_written;
        f_write(&test_file, test_data, strlen(test_data), &bytes_written);
 80017bc:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	@ 0x4a8
 80017c0:	f7fe fd30 	bl	8000224 <strlen>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80017ca:	f507 701e 	add.w	r0, r7, #632	@ 0x278
 80017ce:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	@ 0x4a8
 80017d2:	f015 feb6 	bl	8017542 <f_write>
        f_close(&test_file);
 80017d6:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 80017da:	4618      	mov	r0, r3
 80017dc:	f016 f8de 	bl	801799c <f_close>
        f_unlink(test_path);  // 정리
 80017e0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80017e4:	4618      	mov	r0, r3
 80017e6:	f016 f908 	bl	80179fa <f_unlink>
        
        LOG_INFO("[SDStorage] ✅ Directory and file creation fully functional");
 80017ea:	4925      	ldr	r1, [pc, #148]	@ (8001880 <_create_log_directory+0x338>)
 80017ec:	2001      	movs	r0, #1
 80017ee:	f003 fa33 	bl	8004c58 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e008      	b.n	8001808 <_create_log_directory+0x2c0>
    } else {
        LOG_ERROR("[SDStorage] Directory file test failed: %d", file_test);
 80017f6:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80017fa:	461a      	mov	r2, r3
 80017fc:	4921      	ldr	r1, [pc, #132]	@ (8001884 <_create_log_directory+0x33c>)
 80017fe:	2003      	movs	r0, #3
 8001800:	f003 fa2a 	bl	8004c58 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: 시뮬레이션
    LOG_INFO("[SDStorage] Test environment - BSP directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001808:	4618      	mov	r0, r3
 800180a:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0801d778 	.word	0x0801d778
 8001818:	2000077c 	.word	0x2000077c
 800181c:	0801d7b8 	.word	0x0801d7b8
 8001820:	0801d7e8 	.word	0x0801d7e8
 8001824:	2000097c 	.word	0x2000097c
 8001828:	0801d820 	.word	0x0801d820
 800182c:	0801d850 	.word	0x0801d850
 8001830:	0801d884 	.word	0x0801d884
 8001834:	0801d8c8 	.word	0x0801d8c8
 8001838:	0801d8f4 	.word	0x0801d8f4
 800183c:	20000b7c 	.word	0x20000b7c
 8001840:	0801d92c 	.word	0x0801d92c
 8001844:	0801d960 	.word	0x0801d960
 8001848:	0801d994 	.word	0x0801d994
 800184c:	0801d9d8 	.word	0x0801d9d8
 8001850:	0801da00 	.word	0x0801da00
 8001854:	0801da44 	.word	0x0801da44
 8001858:	0801da90 	.word	0x0801da90
 800185c:	0801da9c 	.word	0x0801da9c
 8001860:	0801dac4 	.word	0x0801dac4
 8001864:	0801daf8 	.word	0x0801daf8
 8001868:	0801db44 	.word	0x0801db44
 800186c:	0801db54 	.word	0x0801db54
 8001870:	0801db60 	.word	0x0801db60
 8001874:	0801db94 	.word	0x0801db94
 8001878:	0801dbc4 	.word	0x0801dbc4
 800187c:	0801dbd4 	.word	0x0801dbd4
 8001880:	0801dbe8 	.word	0x0801dbe8
 8001884:	0801dc28 	.word	0x0801dc28

08001888 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 8001888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188a:	b095      	sub	sp, #84	@ 0x54
 800188c:	af08      	add	r7, sp, #32
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
    // 타임스탬프는 향후 확장용으로 유지
    uint32_t timestamp = _get_current_timestamp();
 8001892:	f000 f86f 	bl	8001974 <_get_current_timestamp>
 8001896:	6278      	str	r0, [r7, #36]	@ 0x24
    (void)timestamp;  // 경고 방지용
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 8001898:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 800189c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	4826      	ldr	r0, [pc, #152]	@ (8001960 <_generate_log_filename+0xd8>)
 80018c6:	f00a f82f 	bl	800b928 <HAL_RTC_GetTime>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11c      	bne.n	800190a <_generate_log_filename+0x82>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	4821      	ldr	r0, [pc, #132]	@ (8001960 <_generate_log_filename+0xd8>)
 80018da:	f00a f907 	bl	800baec <HAL_RTC_GetDate>
 80018de:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d112      	bne.n	800190a <_generate_log_filename+0x82>
        year = 2000 + sDate.Year;
 80018e4:	7afb      	ldrb	r3, [r7, #11]
 80018e6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80018ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 80018ec:	7a7b      	ldrb	r3, [r7, #9]
 80018ee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 80018f2:	7abb      	ldrb	r3, [r7, #10]
 80018f4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 80018f8:	7b3b      	ldrb	r3, [r7, #12]
 80018fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 80018fe:	7b7b      	ldrb	r3, [r7, #13]
 8001900:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    // 디렉토리 포함하여 파일 생성 (클럭 최적화 후 정상 동작 기대)
    int result = snprintf(filename, max_len, 
 800190a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800190c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001910:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001914:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8001918:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 800191c:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 8001920:	4e10      	ldr	r6, [pc, #64]	@ (8001964 <_generate_log_filename+0xdc>)
 8001922:	9607      	str	r6, [sp, #28]
 8001924:	9506      	str	r5, [sp, #24]
 8001926:	9405      	str	r4, [sp, #20]
 8001928:	9004      	str	r0, [sp, #16]
 800192a:	9103      	str	r1, [sp, #12]
 800192c:	9202      	str	r2, [sp, #8]
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <_generate_log_filename+0xe0>)
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <_generate_log_filename+0xe4>)
 8001936:	4a0e      	ldr	r2, [pc, #56]	@ (8001970 <_generate_log_filename+0xe8>)
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f01a fae0 	bl	801bf00 <sniprintf>
 8001940:	6238      	str	r0, [r7, #32]
                         SDSTORAGE_LOG_DIR,
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db03      	blt.n	8001950 <_generate_log_filename+0xc8>
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d802      	bhi.n	8001956 <_generate_log_filename+0xce>
        return SDSTORAGE_ERROR;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	e000      	b.n	8001958 <_generate_log_filename+0xd0>
    }
    
    return SDSTORAGE_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3734      	adds	r7, #52	@ 0x34
 800195c:	46bd      	mov	sp, r7
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001960:	20001354 	.word	0x20001354
 8001964:	0801dc78 	.word	0x0801dc78
 8001968:	0801dc80 	.word	0x0801dc80
 800196c:	0801da90 	.word	0x0801da90
 8001970:	0801dc54 	.word	0x0801dc54

08001974 <_get_current_timestamp>:

static uint32_t _get_current_timestamp(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    return HAL_GetTick();
 8001978:	f003 fd90 	bl	800549c <HAL_GetTick>
 800197c:	4603      	mov	r3, r0
#else
    return (uint32_t)time(NULL);
#endif
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}

08001982 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80019c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <vApplicationGetIdleTaskMemory+0x30>)
 80019ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000d7c 	.word	0x20000d7c
 80019e4:	20000dd4 	.word	0x20000dd4

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b090      	sub	sp, #64	@ 0x40
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 80019ee:	4b68      	ldr	r3, [pc, #416]	@ (8001b90 <main+0x1a8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	4a66      	ldr	r2, [pc, #408]	@ (8001b90 <main+0x1a8>)
 80019f6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f8:	f003 fd2f 	bl	800545a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fc:	f000 f8ec 	bl	8001bd8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a00:	f000 f95c 	bl	8001cbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a04:	f001 f960 	bl	8002cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a08:	f001 f8e8 	bl	8002bdc <MX_DMA_Init>
  MX_ADC3_Init();
 8001a0c:	f000 f988 	bl	8001d20 <MX_ADC3_Init>
  MX_CRC_Init();
 8001a10:	f000 f9d8 	bl	8001dc4 <MX_CRC_Init>
  MX_DCMI_Init();
 8001a14:	f000 f9f8 	bl	8001e08 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001a18:	f000 fa2a 	bl	8001e70 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001a1c:	f000 fa5a 	bl	8001ed4 <MX_ETH_Init>
  MX_FMC_Init();
 8001a20:	f001 f902 	bl	8002c28 <MX_FMC_Init>
  MX_I2C1_Init();
 8001a24:	f000 faa4 	bl	8001f70 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001a28:	f000 fae2 	bl	8001ff0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001a2c:	f000 fb20 	bl	8002070 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001a30:	f000 fba0 	bl	8002174 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001a34:	f000 fbca 	bl	80021cc <MX_RTC_Init>
  MX_SAI2_Init();
 8001a38:	f000 fc6c 	bl	8002314 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001a3c:	f000 fd12 	bl	8002464 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001a40:	f000 fd52 	bl	80024e8 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001a44:	f000 fd80 	bl	8002548 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001a48:	f000 fdbc 	bl	80025c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a4c:	f000 fe66 	bl	800271c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a50:	f000 feda 	bl	8002808 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001a54:	f000 ff50 	bl	80028f8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001a58:	f000 ffc6 	bl	80029e8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001a5c:	f001 f818 	bl	8002a90 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001a60:	f001 f85c 	bl	8002b1c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001a64:	f001 f88a 	bl	8002b7c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001a68:	f011 f8be 	bl	8012be8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4849      	ldr	r0, [pc, #292]	@ (8001b94 <main+0x1ac>)
 8001a70:	f003 f896 	bl	8004ba0 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001a74:	4b46      	ldr	r3, [pc, #280]	@ (8001b90 <main+0x1a8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4947      	ldr	r1, [pc, #284]	@ (8001b98 <main+0x1b0>)
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f003 f8eb 	bl	8004c58 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001a82:	4b46      	ldr	r3, [pc, #280]	@ (8001b9c <main+0x1b4>)
 8001a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <main+0xae>
 8001a8e:	4944      	ldr	r1, [pc, #272]	@ (8001ba0 <main+0x1b8>)
 8001a90:	2002      	movs	r0, #2
 8001a92:	f003 f8e1 	bl	8004c58 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001a96:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <main+0x1b4>)
 8001a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <main+0xc2>
 8001aa2:	4940      	ldr	r1, [pc, #256]	@ (8001ba4 <main+0x1bc>)
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	f003 f8d7 	bl	8004c58 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8001b9c <main+0x1b4>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <main+0xd6>
 8001ab6:	493c      	ldr	r1, [pc, #240]	@ (8001ba8 <main+0x1c0>)
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f003 f8cd 	bl	8004c58 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001abe:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <main+0x1b4>)
 8001ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <main+0xea>
 8001aca:	4938      	ldr	r1, [pc, #224]	@ (8001bac <main+0x1c4>)
 8001acc:	2002      	movs	r0, #2
 8001ace:	f003 f8c3 	bl	8004c58 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001ad2:	4b32      	ldr	r3, [pc, #200]	@ (8001b9c <main+0x1b4>)
 8001ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <main+0xfe>
 8001ade:	4934      	ldr	r1, [pc, #208]	@ (8001bb0 <main+0x1c8>)
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f003 f8b9 	bl	8004c58 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <main+0x1b4>)
 8001ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <main+0x112>
 8001af2:	4930      	ldr	r1, [pc, #192]	@ (8001bb4 <main+0x1cc>)
 8001af4:	2002      	movs	r0, #2
 8001af6:	f003 f8af 	bl	8004c58 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001afa:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <main+0x1b4>)
 8001afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da03      	bge.n	8001b0a <main+0x122>
 8001b02:	492d      	ldr	r1, [pc, #180]	@ (8001bb8 <main+0x1d0>)
 8001b04:	2002      	movs	r0, #2
 8001b06:	f003 f8a7 	bl	8004c58 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <main+0x1b4>)
 8001b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b0e:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <main+0x1b4>)
 8001b10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b14:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 8001b16:	4929      	ldr	r1, [pc, #164]	@ (8001bbc <main+0x1d4>)
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f003 f89d 	bl	8004c58 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001b1e:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <main+0x1d8>)
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화
  LOG_INFO("🔄 Initializing UART DMA after SD preparation...");
 8001b26:	4927      	ldr	r1, [pc, #156]	@ (8001bc4 <main+0x1dc>)
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f003 f895 	bl	8004c58 <LOGGER_SendFormatted>
  MX_USART6_DMA_Init();
 8001b2e:	f001 fd57 	bl	80035e0 <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <main+0x1e0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <main+0x1e0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0210 	orr.w	r2, r2, #16
 8001b40:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001b42:	4b22      	ldr	r3, [pc, #136]	@ (8001bcc <main+0x1e4>)
 8001b44:	f107 0420 	add.w	r4, r7, #32
 8001b48:	461d      	mov	r5, r3
 8001b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f016 fe2d 	bl	80187bc <osThreadCreate>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd0 <main+0x1e8>)
 8001b66:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <main+0x1ec>)
 8001b6a:	1d3c      	adds	r4, r7, #4
 8001b6c:	461d      	mov	r5, r3
 8001b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadId receiveTaskHandle_local = osThreadCreate(osThread(receiveTask), NULL);
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f016 fe1c 	bl	80187bc <osThreadCreate>
 8001b84:	63f8      	str	r0, [r7, #60]	@ 0x3c
  (void)receiveTaskHandle_local;  // 사용하지 않는 변수 경고 방지
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b86:	f016 fdf6 	bl	8018776 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b8a:	bf00      	nop
 8001b8c:	e7fd      	b.n	8001b8a <main+0x1a2>
 8001b8e:	bf00      	nop
 8001b90:	20001be4 	.word	0x20001be4
 8001b94:	0801dc8c 	.word	0x0801dc8c
 8001b98:	0801dc94 	.word	0x0801dc94
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	0801dcb8 	.word	0x0801dcb8
 8001ba4:	0801dcd0 	.word	0x0801dcd0
 8001ba8:	0801dce8 	.word	0x0801dce8
 8001bac:	0801dd00 	.word	0x0801dd00
 8001bb0:	0801dd10 	.word	0x0801dd10
 8001bb4:	0801dd28 	.word	0x0801dd28
 8001bb8:	0801dd48 	.word	0x0801dd48
 8001bbc:	0801dd60 	.word	0x0801dd60
 8001bc0:	20000014 	.word	0x20000014
 8001bc4:	0801dda0 	.word	0x0801dda0
 8001bc8:	200018c0 	.word	0x200018c0
 8001bcc:	0801dde0 	.word	0x0801dde0
 8001bd0:	200019dc 	.word	0x200019dc
 8001bd4:	0801de08 	.word	0x0801de08

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	@ 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2230      	movs	r2, #48	@ 0x30
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f01a fa1e 	bl	801c028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bfc:	f008 fa6a 	bl	800a0d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <SystemClock_Config+0xdc>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb4 <SystemClock_Config+0xdc>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0c:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <SystemClock_Config+0xdc>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <SystemClock_Config+0xe0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a26      	ldr	r2, [pc, #152]	@ (8001cb8 <SystemClock_Config+0xe0>)
 8001c1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <SystemClock_Config+0xe0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c30:	2309      	movs	r3, #9
 8001c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c48:	2319      	movs	r3, #25
 8001c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001c4c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001c50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c52:	2302      	movs	r3, #2
 8001c54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001c56:	2309      	movs	r3, #9
 8001c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5a:	f107 0320 	add.w	r3, r7, #32
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f008 fb5a 	bl	800a318 <HAL_RCC_OscConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c6a:	f001 fd1b 	bl	80036a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c6e:	f008 fa41 	bl	800a0f4 <HAL_PWREx_EnableOverDrive>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001c78:	f001 fd14 	bl	80036a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c80:	2302      	movs	r3, #2
 8001c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2106      	movs	r1, #6
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f008 fde0 	bl	800a860 <HAL_RCC_ClockConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001ca6:	f001 fcfd 	bl	80036a4 <Error_Handler>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3750      	adds	r7, #80	@ 0x50
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40007000 	.word	0x40007000

08001cbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0a2      	sub	sp, #136	@ 0x88
 8001cc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2284      	movs	r2, #132	@ 0x84
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f01a f9ad 	bl	801c028 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <PeriphCommonClock_Config+0x60>)
 8001cd0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001cd2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001cd6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001cd8:	2305      	movs	r3, #5
 8001cda:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001ce8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001cf2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4618      	mov	r0, r3
 8001d04:	f008 ffc4 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001d0e:	f001 fcc9 	bl	80036a4 <Error_Handler>
  }
}
 8001d12:	bf00      	nop
 8001d14:	3788      	adds	r7, #136	@ 0x88
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	00b00008 	.word	0x00b00008

08001d20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d26:	463b      	mov	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001d32:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d34:	4a21      	ldr	r2, [pc, #132]	@ (8001dbc <MX_ADC3_Init+0x9c>)
 8001d36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d62:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <MX_ADC3_Init+0xa0>)
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d66:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d80:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001d82:	f003 fbbb 	bl	80054fc <HAL_ADC_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001d8c:	f001 fc8a 	bl	80036a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d90:	2304      	movs	r3, #4
 8001d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_ADC3_Init+0x98>)
 8001da2:	f003 fbef 	bl	8005584 <HAL_ADC_ConfigChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001dac:	f001 fc7a 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000100c 	.word	0x2000100c
 8001dbc:	40012200 	.word	0x40012200
 8001dc0:	0f000001 	.word	0x0f000001

08001dc4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <MX_CRC_Init+0x3c>)
 8001dca:	4a0e      	ldr	r2, [pc, #56]	@ (8001e04 <MX_CRC_Init+0x40>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <MX_CRC_Init+0x3c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <MX_CRC_Init+0x3c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <MX_CRC_Init+0x3c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <MX_CRC_Init+0x3c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <MX_CRC_Init+0x3c>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001dec:	4804      	ldr	r0, [pc, #16]	@ (8001e00 <MX_CRC_Init+0x3c>)
 8001dee:	f003 feff 	bl	8005bf0 <HAL_CRC_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001df8:	f001 fc54 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20001054 	.word	0x20001054
 8001e04:	40023000 	.word	0x40023000

08001e08 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e0e:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <MX_DCMI_Init+0x64>)
 8001e10:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001e48:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <MX_DCMI_Init+0x60>)
 8001e56:	f003 ffbd 	bl	8005dd4 <HAL_DCMI_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f001 fc20 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20001078 	.word	0x20001078
 8001e6c:	50050000 	.word	0x50050000

08001e70 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001e74:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001e76:	4a16      	ldr	r2, [pc, #88]	@ (8001ed0 <MX_DMA2D_Init+0x60>)
 8001e78:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001ea4:	4809      	ldr	r0, [pc, #36]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001ea6:	f004 fc83 	bl	80067b0 <HAL_DMA2D_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001eb0:	f001 fbf8 	bl	80036a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <MX_DMA2D_Init+0x5c>)
 8001eb8:	f004 fdd4 	bl	8006a64 <HAL_DMA2D_ConfigLayer>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001ec2:	f001 fbef 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200010c8 	.word	0x200010c8
 8001ed0:	4002b000 	.word	0x4002b000

08001ed4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <MX_ETH_Init+0x84>)
 8001eda:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <MX_ETH_Init+0x88>)
 8001edc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ede:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <MX_ETH_Init+0x8c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <MX_ETH_Init+0x8c>)
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <MX_ETH_Init+0x8c>)
 8001eec:	22e1      	movs	r2, #225	@ 0xe1
 8001eee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <MX_ETH_Init+0x8c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_ETH_Init+0x8c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001efc:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <MX_ETH_Init+0x8c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <MX_ETH_Init+0x84>)
 8001f04:	4a16      	ldr	r2, [pc, #88]	@ (8001f60 <MX_ETH_Init+0x8c>)
 8001f06:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <MX_ETH_Init+0x84>)
 8001f0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f0e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_ETH_Init+0x84>)
 8001f12:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <MX_ETH_Init+0x90>)
 8001f14:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <MX_ETH_Init+0x84>)
 8001f18:	4a13      	ldr	r2, [pc, #76]	@ (8001f68 <MX_ETH_Init+0x94>)
 8001f1a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_ETH_Init+0x84>)
 8001f1e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001f22:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f24:	480c      	ldr	r0, [pc, #48]	@ (8001f58 <MX_ETH_Init+0x84>)
 8001f26:	f004 fe2f 	bl	8006b88 <HAL_ETH_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001f30:	f001 fbb8 	bl	80036a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001f34:	2238      	movs	r2, #56	@ 0x38
 8001f36:	2100      	movs	r1, #0
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <MX_ETH_Init+0x98>)
 8001f3a:	f01a f875 	bl	801c028 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <MX_ETH_Init+0x98>)
 8001f40:	2221      	movs	r2, #33	@ 0x21
 8001f42:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_ETH_Init+0x98>)
 8001f46:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001f4a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <MX_ETH_Init+0x98>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20001108 	.word	0x20001108
 8001f5c:	40028000 	.word	0x40028000
 8001f60:	20001be8 	.word	0x20001be8
 8001f64:	20000184 	.word	0x20000184
 8001f68:	200000e4 	.word	0x200000e4
 8001f6c:	20000fd4 	.word	0x20000fd4

08001f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001f76:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe8 <MX_I2C1_Init+0x78>)
 8001f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fec <MX_I2C1_Init+0x7c>)
 8001f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f80:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f86:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f8c:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001faa:	480e      	ldr	r0, [pc, #56]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001fac:	f007 fc4c 	bl	8009848 <HAL_I2C_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fb6:	f001 fb75 	bl	80036a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4809      	ldr	r0, [pc, #36]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001fbe:	f007 fcdf 	bl	8009980 <HAL_I2CEx_ConfigAnalogFilter>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fc8:	f001 fb6c 	bl	80036a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4805      	ldr	r0, [pc, #20]	@ (8001fe4 <MX_I2C1_Init+0x74>)
 8001fd0:	f007 fd21 	bl	8009a16 <HAL_I2CEx_ConfigDigitalFilter>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fda:	f001 fb63 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200011b8 	.word	0x200011b8
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	00c0eaff 	.word	0x00c0eaff

08001ff0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <MX_I2C3_Init+0x74>)
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8002068 <MX_I2C3_Init+0x78>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <MX_I2C3_Init+0x74>)
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <MX_I2C3_Init+0x7c>)
 8001ffe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <MX_I2C3_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <MX_I2C3_Init+0x74>)
 8002008:	2201      	movs	r2, #1
 800200a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800200c:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <MX_I2C3_Init+0x74>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <MX_I2C3_Init+0x74>)
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <MX_I2C3_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_I2C3_Init+0x74>)
 8002020:	2200      	movs	r2, #0
 8002022:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <MX_I2C3_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800202a:	480e      	ldr	r0, [pc, #56]	@ (8002064 <MX_I2C3_Init+0x74>)
 800202c:	f007 fc0c 	bl	8009848 <HAL_I2C_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002036:	f001 fb35 	bl	80036a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800203a:	2100      	movs	r1, #0
 800203c:	4809      	ldr	r0, [pc, #36]	@ (8002064 <MX_I2C3_Init+0x74>)
 800203e:	f007 fc9f 	bl	8009980 <HAL_I2CEx_ConfigAnalogFilter>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002048:	f001 fb2c 	bl	80036a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800204c:	2100      	movs	r1, #0
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_I2C3_Init+0x74>)
 8002050:	f007 fce1 	bl	8009a16 <HAL_I2CEx_ConfigDigitalFilter>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800205a:	f001 fb23 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000120c 	.word	0x2000120c
 8002068:	40005c00 	.word	0x40005c00
 800206c:	00c0eaff 	.word	0x00c0eaff

08002070 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	@ 0x38
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2234      	movs	r2, #52	@ 0x34
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f019 ffd3 	bl	801c028 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002082:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <MX_LTDC_Init+0xfc>)
 8002084:	4a3a      	ldr	r2, [pc, #232]	@ (8002170 <MX_LTDC_Init+0x100>)
 8002086:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002088:	4b38      	ldr	r3, [pc, #224]	@ (800216c <MX_LTDC_Init+0xfc>)
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800208e:	4b37      	ldr	r3, [pc, #220]	@ (800216c <MX_LTDC_Init+0xfc>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002094:	4b35      	ldr	r3, [pc, #212]	@ (800216c <MX_LTDC_Init+0xfc>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800209a:	4b34      	ldr	r3, [pc, #208]	@ (800216c <MX_LTDC_Init+0xfc>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020a2:	2228      	movs	r2, #40	@ 0x28
 80020a4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80020a6:	4b31      	ldr	r3, [pc, #196]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020a8:	2209      	movs	r2, #9
 80020aa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80020ac:	4b2f      	ldr	r3, [pc, #188]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020ae:	2235      	movs	r2, #53	@ 0x35
 80020b0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80020b2:	4b2e      	ldr	r3, [pc, #184]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020b4:	220b      	movs	r2, #11
 80020b6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80020b8:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020ba:	f240 2215 	movw	r2, #533	@ 0x215
 80020be:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80020c0:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020c2:	f240 121b 	movw	r2, #283	@ 0x11b
 80020c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80020c8:	4b28      	ldr	r3, [pc, #160]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020ca:	f240 2235 	movw	r2, #565	@ 0x235
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80020d0:	4b26      	ldr	r3, [pc, #152]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020d2:	f240 121d 	movw	r2, #285	@ 0x11d
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80020d8:	4b24      	ldr	r3, [pc, #144]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80020e8:	4b20      	ldr	r3, [pc, #128]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80020f0:	481e      	ldr	r0, [pc, #120]	@ (800216c <MX_LTDC_Init+0xfc>)
 80020f2:	f007 fcdc 	bl	8009aae <HAL_LTDC_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80020fc:	f001 fad2 	bl	80036a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002104:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002108:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800210e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002112:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002114:	2302      	movs	r3, #2
 8002116:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002118:	23ff      	movs	r3, #255	@ 0xff
 800211a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002120:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002124:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002126:	2307      	movs	r3, #7
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800212a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002130:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002136:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800213a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <MX_LTDC_Init+0xfc>)
 8002156:	f007 fe09 	bl	8009d6c <HAL_LTDC_ConfigLayer>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002160:	f001 faa0 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	@ 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20001260 	.word	0x20001260
 8002170:	40016800 	.word	0x40016800

08002174 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 800217a:	4a13      	ldr	r2, [pc, #76]	@ (80021c8 <MX_QUADSPI_Init+0x54>)
 800217c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 8002180:	2201      	movs	r2, #1
 8002182:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 8002186:	2204      	movs	r2, #4
 8002188:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800218a:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 800218c:	2210      	movs	r2, #16
 800218e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 8002192:	2218      	movs	r2, #24
 8002194:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 8002198:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800219c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80021a4:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	@ (80021c4 <MX_QUADSPI_Init+0x50>)
 80021b2:	f007 ffef 	bl	800a194 <HAL_QSPI_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80021bc:	f001 fa72 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20001308 	.word	0x20001308
 80021c8:	a0001000 	.word	0xa0001000

080021cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b090      	sub	sp, #64	@ 0x40
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80021d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80021e2:	2300      	movs	r3, #0
 80021e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2228      	movs	r2, #40	@ 0x28
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f019 ff1b 	bl	801c028 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021f2:	4b46      	ldr	r3, [pc, #280]	@ (800230c <MX_RTC_Init+0x140>)
 80021f4:	4a46      	ldr	r2, [pc, #280]	@ (8002310 <MX_RTC_Init+0x144>)
 80021f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021f8:	4b44      	ldr	r3, [pc, #272]	@ (800230c <MX_RTC_Init+0x140>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021fe:	4b43      	ldr	r3, [pc, #268]	@ (800230c <MX_RTC_Init+0x140>)
 8002200:	227f      	movs	r2, #127	@ 0x7f
 8002202:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002204:	4b41      	ldr	r3, [pc, #260]	@ (800230c <MX_RTC_Init+0x140>)
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800220a:	4b40      	ldr	r3, [pc, #256]	@ (800230c <MX_RTC_Init+0x140>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002210:	4b3e      	ldr	r3, [pc, #248]	@ (800230c <MX_RTC_Init+0x140>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002216:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <MX_RTC_Init+0x140>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800221c:	483b      	ldr	r0, [pc, #236]	@ (800230c <MX_RTC_Init+0x140>)
 800221e:	f009 fa67 	bl	800b6f0 <HAL_RTC_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002228:	f001 fa3c 	bl	80036a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800222c:	2300      	movs	r3, #0
 800222e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800223e:	2300      	movs	r3, #0
 8002240:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002246:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800224a:	2201      	movs	r2, #1
 800224c:	4619      	mov	r1, r3
 800224e:	482f      	ldr	r0, [pc, #188]	@ (800230c <MX_RTC_Init+0x140>)
 8002250:	f009 fad0 	bl	800b7f4 <HAL_RTC_SetTime>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800225a:	f001 fa23 	bl	80036a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002270:	2300      	movs	r3, #0
 8002272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800227a:	2201      	movs	r2, #1
 800227c:	4619      	mov	r1, r3
 800227e:	4823      	ldr	r0, [pc, #140]	@ (800230c <MX_RTC_Init+0x140>)
 8002280:	f009 fbb0 	bl	800b9e4 <HAL_RTC_SetDate>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800228a:	f001 fa0b 	bl	80036a4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800228e:	2300      	movs	r3, #0
 8002290:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002292:	2300      	movs	r3, #0
 8002294:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002296:	2300      	movs	r3, #0
 8002298:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80022b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	4811      	ldr	r0, [pc, #68]	@ (800230c <MX_RTC_Init+0x140>)
 80022c6:	f009 fc61 	bl	800bb8c <HAL_RTC_SetAlarm>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80022d0:	f001 f9e8 	bl	80036a4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80022d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022da:	463b      	mov	r3, r7
 80022dc:	2201      	movs	r2, #1
 80022de:	4619      	mov	r1, r3
 80022e0:	480a      	ldr	r0, [pc, #40]	@ (800230c <MX_RTC_Init+0x140>)
 80022e2:	f009 fc53 	bl	800bb8c <HAL_RTC_SetAlarm>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80022ec:	f001 f9da 	bl	80036a4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80022f0:	2202      	movs	r2, #2
 80022f2:	2100      	movs	r1, #0
 80022f4:	4805      	ldr	r0, [pc, #20]	@ (800230c <MX_RTC_Init+0x140>)
 80022f6:	f009 fe31 	bl	800bf5c <HAL_RTCEx_SetTimeStamp>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002300:	f001 f9d0 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	3740      	adds	r7, #64	@ 0x40
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20001354 	.word	0x20001354
 8002310:	40002800 	.word	0x40002800

08002314 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002318:	4b4d      	ldr	r3, [pc, #308]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800231a:	4a4e      	ldr	r2, [pc, #312]	@ (8002454 <MX_SAI2_Init+0x140>)
 800231c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800231e:	4b4c      	ldr	r3, [pc, #304]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002324:	4b4a      	ldr	r3, [pc, #296]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800232a:	4b49      	ldr	r3, [pc, #292]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800232c:	2240      	movs	r2, #64	@ 0x40
 800232e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002330:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002332:	2200      	movs	r2, #0
 8002334:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002336:	4b46      	ldr	r3, [pc, #280]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002338:	2200      	movs	r2, #0
 800233a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800233c:	4b44      	ldr	r3, [pc, #272]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002342:	4b43      	ldr	r3, [pc, #268]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002348:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800234e:	4b40      	ldr	r3, [pc, #256]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002354:	4b3e      	ldr	r3, [pc, #248]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002356:	4a40      	ldr	r2, [pc, #256]	@ (8002458 <MX_SAI2_Init+0x144>)
 8002358:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002360:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002366:	4b3a      	ldr	r3, [pc, #232]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002368:	2200      	movs	r2, #0
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800236c:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800236e:	2200      	movs	r2, #0
 8002370:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002372:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002374:	2208      	movs	r2, #8
 8002376:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002378:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800237a:	2201      	movs	r2, #1
 800237c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800237e:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002380:	2200      	movs	r2, #0
 8002382:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002384:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002386:	2200      	movs	r2, #0
 8002388:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800238a:	4b31      	ldr	r3, [pc, #196]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800238c:	2200      	movs	r2, #0
 800238e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002390:	4b2f      	ldr	r3, [pc, #188]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002392:	2200      	movs	r2, #0
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002396:	4b2e      	ldr	r3, [pc, #184]	@ (8002450 <MX_SAI2_Init+0x13c>)
 8002398:	2200      	movs	r2, #0
 800239a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800239c:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <MX_SAI2_Init+0x13c>)
 800239e:	2201      	movs	r2, #1
 80023a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80023a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <MX_SAI2_Init+0x13c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80023a8:	4829      	ldr	r0, [pc, #164]	@ (8002450 <MX_SAI2_Init+0x13c>)
 80023aa:	f009 fe3f 	bl	800c02c <HAL_SAI_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80023b4:	f001 f976 	bl	80036a4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <MX_SAI2_Init+0x148>)
 80023ba:	4a29      	ldr	r2, [pc, #164]	@ (8002460 <MX_SAI2_Init+0x14c>)
 80023bc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80023be:	4b27      	ldr	r3, [pc, #156]	@ (800245c <MX_SAI2_Init+0x148>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80023c4:	4b25      	ldr	r3, [pc, #148]	@ (800245c <MX_SAI2_Init+0x148>)
 80023c6:	2203      	movs	r2, #3
 80023c8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80023ca:	4b24      	ldr	r3, [pc, #144]	@ (800245c <MX_SAI2_Init+0x148>)
 80023cc:	2240      	movs	r2, #64	@ 0x40
 80023ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80023d0:	4b22      	ldr	r3, [pc, #136]	@ (800245c <MX_SAI2_Init+0x148>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <MX_SAI2_Init+0x148>)
 80023d8:	2200      	movs	r2, #0
 80023da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80023dc:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <MX_SAI2_Init+0x148>)
 80023de:	2201      	movs	r2, #1
 80023e0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80023e2:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <MX_SAI2_Init+0x148>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80023e8:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <MX_SAI2_Init+0x148>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80023ee:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <MX_SAI2_Init+0x148>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <MX_SAI2_Init+0x148>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80023fa:	4b18      	ldr	r3, [pc, #96]	@ (800245c <MX_SAI2_Init+0x148>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002400:	4b16      	ldr	r3, [pc, #88]	@ (800245c <MX_SAI2_Init+0x148>)
 8002402:	2200      	movs	r2, #0
 8002404:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <MX_SAI2_Init+0x148>)
 8002408:	2208      	movs	r2, #8
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <MX_SAI2_Init+0x148>)
 800240e:	2201      	movs	r2, #1
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <MX_SAI2_Init+0x148>)
 8002414:	2200      	movs	r2, #0
 8002416:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <MX_SAI2_Init+0x148>)
 800241a:	2200      	movs	r2, #0
 800241c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800241e:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <MX_SAI2_Init+0x148>)
 8002420:	2200      	movs	r2, #0
 8002422:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <MX_SAI2_Init+0x148>)
 8002426:	2200      	movs	r2, #0
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800242a:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <MX_SAI2_Init+0x148>)
 800242c:	2200      	movs	r2, #0
 800242e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <MX_SAI2_Init+0x148>)
 8002432:	2201      	movs	r2, #1
 8002434:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <MX_SAI2_Init+0x148>)
 8002438:	2200      	movs	r2, #0
 800243a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800243c:	4807      	ldr	r0, [pc, #28]	@ (800245c <MX_SAI2_Init+0x148>)
 800243e:	f009 fdf5 	bl	800c02c <HAL_SAI_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002448:	f001 f92c 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20001374 	.word	0x20001374
 8002454:	40015c04 	.word	0x40015c04
 8002458:	0002ee00 	.word	0x0002ee00
 800245c:	200013f8 	.word	0x200013f8
 8002460:	40015c24 	.word	0x40015c24

08002464 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <MX_SDMMC1_SD_Init+0x70>)
 800246c:	4a1a      	ldr	r2, [pc, #104]	@ (80024d8 <MX_SDMMC1_SD_Init+0x74>)
 800246e:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002470:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <MX_SDMMC1_SD_Init+0x70>)
 8002472:	2200      	movs	r2, #0
 8002474:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002476:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <MX_SDMMC1_SD_Init+0x70>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800247c:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <MX_SDMMC1_SD_Init+0x70>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <MX_SDMMC1_SD_Init+0x70>)
 8002484:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002488:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800248a:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <MX_SDMMC1_SD_Init+0x70>)
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002490:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <MX_SDMMC1_SD_Init+0x70>)
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with BSP (replaces HAL for FatFs integration)
  // Note: BSP_SD_Init() will call HAL_SD_Init() internally
  // This ensures proper integration with FatFs middleware
  uint8_t bsp_result = BSP_SD_Init();
 8002496:	f010 fbc1 	bl	8012c1c <BSP_SD_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if (bsp_result != MSD_OK)
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <MX_SDMMC1_SD_Init+0x5e>
  {
    // BSP initialization failed - more detailed error handling
    if (bsp_result == MSD_ERROR_SD_NOT_PRESENT) {
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d104      	bne.n	80024b4 <MX_SDMMC1_SD_Init+0x50>
      // SD card not detected - continue without SD
      LOG_ERROR("SD card not detected during BSP initialization");
 80024aa:	490c      	ldr	r1, [pc, #48]	@ (80024dc <MX_SDMMC1_SD_Init+0x78>)
 80024ac:	2003      	movs	r0, #3
 80024ae:	f002 fbd3 	bl	8004c58 <LOGGER_SendFormatted>
    LOG_INFO("BSP SD initialization successful - ready for FatFs integration");
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 80024b2:	e00a      	b.n	80024ca <MX_SDMMC1_SD_Init+0x66>
      LOG_ERROR("BSP SD initialization failed with code: %d", bsp_result);
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4909      	ldr	r1, [pc, #36]	@ (80024e0 <MX_SDMMC1_SD_Init+0x7c>)
 80024ba:	2003      	movs	r0, #3
 80024bc:	f002 fbcc 	bl	8004c58 <LOGGER_SendFormatted>
}
 80024c0:	e003      	b.n	80024ca <MX_SDMMC1_SD_Init+0x66>
    LOG_INFO("BSP SD initialization successful - ready for FatFs integration");
 80024c2:	4908      	ldr	r1, [pc, #32]	@ (80024e4 <MX_SDMMC1_SD_Init+0x80>)
 80024c4:	2001      	movs	r0, #1
 80024c6:	f002 fbc7 	bl	8004c58 <LOGGER_SendFormatted>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000147c 	.word	0x2000147c
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	0801de24 	.word	0x0801de24
 80024e0:	0801de54 	.word	0x0801de54
 80024e4:	0801de80 	.word	0x0801de80

080024e8 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80024ec:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 80024ee:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80024f2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80024f4:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002500:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002506:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800250c:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002512:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002518:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002524:	4b07      	ldr	r3, [pc, #28]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 800252c:	2200      	movs	r2, #0
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002530:	4804      	ldr	r0, [pc, #16]	@ (8002544 <MX_SPDIFRX_Init+0x5c>)
 8002532:	f00b fded 	bl	800e110 <HAL_SPDIFRX_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800253c:	f001 f8b2 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200015c0 	.word	0x200015c0

08002548 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <MX_SPI2_Init+0x74>)
 800254e:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <MX_SPI2_Init+0x78>)
 8002550:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002552:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <MX_SPI2_Init+0x74>)
 8002554:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002558:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800255a:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <MX_SPI2_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002560:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <MX_SPI2_Init+0x74>)
 8002562:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002566:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <MX_SPI2_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800256e:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <MX_SPI2_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <MX_SPI2_Init+0x74>)
 8002576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800257a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800257c:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <MX_SPI2_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <MX_SPI2_Init+0x74>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <MX_SPI2_Init+0x74>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <MX_SPI2_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <MX_SPI2_Init+0x74>)
 8002596:	2207      	movs	r2, #7
 8002598:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <MX_SPI2_Init+0x74>)
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <MX_SPI2_Init+0x74>)
 80025a2:	2208      	movs	r2, #8
 80025a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025a6:	4805      	ldr	r0, [pc, #20]	@ (80025bc <MX_SPI2_Init+0x74>)
 80025a8:	f00b fe0e 	bl	800e1c8 <HAL_SPI_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025b2:	f001 f877 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2000160c 	.word	0x2000160c
 80025c0:	40003800 	.word	0x40003800

080025c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b09a      	sub	sp, #104	@ 0x68
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
 80025f4:	615a      	str	r2, [r3, #20]
 80025f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	222c      	movs	r2, #44	@ 0x2c
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f019 fd12 	bl	801c028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002604:	4b43      	ldr	r3, [pc, #268]	@ (8002714 <MX_TIM1_Init+0x150>)
 8002606:	4a44      	ldr	r2, [pc, #272]	@ (8002718 <MX_TIM1_Init+0x154>)
 8002608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800260a:	4b42      	ldr	r3, [pc, #264]	@ (8002714 <MX_TIM1_Init+0x150>)
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002610:	4b40      	ldr	r3, [pc, #256]	@ (8002714 <MX_TIM1_Init+0x150>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002616:	4b3f      	ldr	r3, [pc, #252]	@ (8002714 <MX_TIM1_Init+0x150>)
 8002618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800261c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261e:	4b3d      	ldr	r3, [pc, #244]	@ (8002714 <MX_TIM1_Init+0x150>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002624:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <MX_TIM1_Init+0x150>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b3a      	ldr	r3, [pc, #232]	@ (8002714 <MX_TIM1_Init+0x150>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002630:	4838      	ldr	r0, [pc, #224]	@ (8002714 <MX_TIM1_Init+0x150>)
 8002632:	f00b fe74 	bl	800e31e <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800263c:	f001 f832 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002644:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002646:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800264a:	4619      	mov	r1, r3
 800264c:	4831      	ldr	r0, [pc, #196]	@ (8002714 <MX_TIM1_Init+0x150>)
 800264e:	f00c f9a7 	bl	800e9a0 <HAL_TIM_ConfigClockSource>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002658:	f001 f824 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800265c:	482d      	ldr	r0, [pc, #180]	@ (8002714 <MX_TIM1_Init+0x150>)
 800265e:	f00b ff2d 	bl	800e4bc <HAL_TIM_PWM_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002668:	f001 f81c 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002678:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800267c:	4619      	mov	r1, r3
 800267e:	4825      	ldr	r0, [pc, #148]	@ (8002714 <MX_TIM1_Init+0x150>)
 8002680:	f00c fe1e 	bl	800f2c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800268a:	f001 f80b 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800268e:	2360      	movs	r3, #96	@ 0x60
 8002690:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002696:	2300      	movs	r3, #0
 8002698:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800269a:	2300      	movs	r3, #0
 800269c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026ae:	2200      	movs	r2, #0
 80026b0:	4619      	mov	r1, r3
 80026b2:	4818      	ldr	r0, [pc, #96]	@ (8002714 <MX_TIM1_Init+0x150>)
 80026b4:	f00c f860 	bl	800e778 <HAL_TIM_PWM_ConfigChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80026be:	f000 fff1 	bl	80036a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4807      	ldr	r0, [pc, #28]	@ (8002714 <MX_TIM1_Init+0x150>)
 80026f8:	f00c fe70 	bl	800f3dc <HAL_TIMEx_ConfigBreakDeadTime>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002702:	f000 ffcf 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002706:	4803      	ldr	r0, [pc, #12]	@ (8002714 <MX_TIM1_Init+0x150>)
 8002708:	f001 fe5c 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 800270c:	bf00      	nop
 800270e:	3768      	adds	r7, #104	@ 0x68
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20001670 	.word	0x20001670
 8002718:	40010000 	.word	0x40010000

0800271c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	@ 0x38
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800273c:	463b      	mov	r3, r7
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	611a      	str	r2, [r3, #16]
 800274a:	615a      	str	r2, [r3, #20]
 800274c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800274e:	4b2d      	ldr	r3, [pc, #180]	@ (8002804 <MX_TIM2_Init+0xe8>)
 8002750:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002754:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002756:	4b2b      	ldr	r3, [pc, #172]	@ (8002804 <MX_TIM2_Init+0xe8>)
 8002758:	2200      	movs	r2, #0
 800275a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <MX_TIM2_Init+0xe8>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002762:	4b28      	ldr	r3, [pc, #160]	@ (8002804 <MX_TIM2_Init+0xe8>)
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276a:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <MX_TIM2_Init+0xe8>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002770:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <MX_TIM2_Init+0xe8>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002776:	4823      	ldr	r0, [pc, #140]	@ (8002804 <MX_TIM2_Init+0xe8>)
 8002778:	f00b fdd1 	bl	800e31e <HAL_TIM_Base_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002782:	f000 ff8f 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002790:	4619      	mov	r1, r3
 8002792:	481c      	ldr	r0, [pc, #112]	@ (8002804 <MX_TIM2_Init+0xe8>)
 8002794:	f00c f904 	bl	800e9a0 <HAL_TIM_ConfigClockSource>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800279e:	f000 ff81 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027a2:	4818      	ldr	r0, [pc, #96]	@ (8002804 <MX_TIM2_Init+0xe8>)
 80027a4:	f00b fe8a 	bl	800e4bc <HAL_TIM_PWM_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80027ae:	f000 ff79 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	4619      	mov	r1, r3
 80027c0:	4810      	ldr	r0, [pc, #64]	@ (8002804 <MX_TIM2_Init+0xe8>)
 80027c2:	f00c fd7d 	bl	800f2c0 <HAL_TIMEx_MasterConfigSynchronization>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80027cc:	f000 ff6a 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d0:	2360      	movs	r3, #96	@ 0x60
 80027d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e0:	463b      	mov	r3, r7
 80027e2:	2200      	movs	r2, #0
 80027e4:	4619      	mov	r1, r3
 80027e6:	4807      	ldr	r0, [pc, #28]	@ (8002804 <MX_TIM2_Init+0xe8>)
 80027e8:	f00b ffc6 	bl	800e778 <HAL_TIM_PWM_ConfigChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80027f2:	f000 ff57 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027f6:	4803      	ldr	r0, [pc, #12]	@ (8002804 <MX_TIM2_Init+0xe8>)
 80027f8:	f001 fde4 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 80027fc:	bf00      	nop
 80027fe:	3738      	adds	r7, #56	@ 0x38
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200016bc 	.word	0x200016bc

08002808 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08e      	sub	sp, #56	@ 0x38
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002828:	463b      	mov	r3, r7
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	615a      	str	r2, [r3, #20]
 8002838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800283a:	4b2d      	ldr	r3, [pc, #180]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 800283c:	4a2d      	ldr	r2, [pc, #180]	@ (80028f4 <MX_TIM3_Init+0xec>)
 800283e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002840:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 8002842:	2200      	movs	r2, #0
 8002844:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002846:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800284c:	4b28      	ldr	r3, [pc, #160]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 800284e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002854:	4b26      	ldr	r3, [pc, #152]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285a:	4b25      	ldr	r3, [pc, #148]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002860:	4823      	ldr	r0, [pc, #140]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 8002862:	f00b fd5c 	bl	800e31e <HAL_TIM_Base_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800286c:	f000 ff1a 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800287a:	4619      	mov	r1, r3
 800287c:	481c      	ldr	r0, [pc, #112]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 800287e:	f00c f88f 	bl	800e9a0 <HAL_TIM_ConfigClockSource>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002888:	f000 ff0c 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800288c:	4818      	ldr	r0, [pc, #96]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 800288e:	f00b fe15 	bl	800e4bc <HAL_TIM_PWM_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002898:	f000 ff04 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	4619      	mov	r1, r3
 80028aa:	4811      	ldr	r0, [pc, #68]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 80028ac:	f00c fd08 	bl	800f2c0 <HAL_TIMEx_MasterConfigSynchronization>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80028b6:	f000 fef5 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ba:	2360      	movs	r3, #96	@ 0x60
 80028bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ca:	463b      	mov	r3, r7
 80028cc:	2200      	movs	r2, #0
 80028ce:	4619      	mov	r1, r3
 80028d0:	4807      	ldr	r0, [pc, #28]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 80028d2:	f00b ff51 	bl	800e778 <HAL_TIM_PWM_ConfigChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80028dc:	f000 fee2 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028e0:	4803      	ldr	r0, [pc, #12]	@ (80028f0 <MX_TIM3_Init+0xe8>)
 80028e2:	f001 fd6f 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 80028e6:	bf00      	nop
 80028e8:	3738      	adds	r7, #56	@ 0x38
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20001708 	.word	0x20001708
 80028f4:	40000400 	.word	0x40000400

080028f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08e      	sub	sp, #56	@ 0x38
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002918:	463b      	mov	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	615a      	str	r2, [r3, #20]
 8002928:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800292a:	4b2d      	ldr	r3, [pc, #180]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 800292c:	4a2d      	ldr	r2, [pc, #180]	@ (80029e4 <MX_TIM5_Init+0xec>)
 800292e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002930:	4b2b      	ldr	r3, [pc, #172]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 8002932:	2200      	movs	r2, #0
 8002934:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b2a      	ldr	r3, [pc, #168]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800293c:	4b28      	ldr	r3, [pc, #160]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294a:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002950:	4823      	ldr	r0, [pc, #140]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 8002952:	f00b fce4 	bl	800e31e <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800295c:	f000 fea2 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800296a:	4619      	mov	r1, r3
 800296c:	481c      	ldr	r0, [pc, #112]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 800296e:	f00c f817 	bl	800e9a0 <HAL_TIM_ConfigClockSource>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002978:	f000 fe94 	bl	80036a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800297c:	4818      	ldr	r0, [pc, #96]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 800297e:	f00b fd9d 	bl	800e4bc <HAL_TIM_PWM_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002988:	f000 fe8c 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	4811      	ldr	r0, [pc, #68]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 800299c:	f00c fc90 	bl	800f2c0 <HAL_TIMEx_MasterConfigSynchronization>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80029a6:	f000 fe7d 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029aa:	2360      	movs	r3, #96	@ 0x60
 80029ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029ba:	463b      	mov	r3, r7
 80029bc:	220c      	movs	r2, #12
 80029be:	4619      	mov	r1, r3
 80029c0:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 80029c2:	f00b fed9 	bl	800e778 <HAL_TIM_PWM_ConfigChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80029cc:	f000 fe6a 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80029d0:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <MX_TIM5_Init+0xe8>)
 80029d2:	f001 fcf7 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 80029d6:	bf00      	nop
 80029d8:	3738      	adds	r7, #56	@ 0x38
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20001754 	.word	0x20001754
 80029e4:	40000c00 	.word	0x40000c00

080029e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a06:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a08:	4a20      	ldr	r2, [pc, #128]	@ (8002a8c <MX_TIM8_Init+0xa4>)
 8002a0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a26:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a32:	4815      	ldr	r0, [pc, #84]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a34:	f00b fc73 	bl	800e31e <HAL_TIM_Base_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002a3e:	f000 fe31 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	480e      	ldr	r0, [pc, #56]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a50:	f00b ffa6 	bl	800e9a0 <HAL_TIM_ConfigClockSource>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002a5a:	f000 fe23 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4806      	ldr	r0, [pc, #24]	@ (8002a88 <MX_TIM8_Init+0xa0>)
 8002a70:	f00c fc26 	bl	800f2c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002a7a:	f000 fe13 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200017a0 	.word	0x200017a0
 8002a8c:	40010400 	.word	0x40010400

08002a90 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
 8002aa4:	615a      	str	r2, [r3, #20]
 8002aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8002b18 <MX_TIM12_Init+0x88>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002aae:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002aba:	4b16      	ldr	r3, [pc, #88]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ac0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002ace:	4811      	ldr	r0, [pc, #68]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002ad0:	f00b fcf4 	bl	800e4bc <HAL_TIM_PWM_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002ada:	f000 fde3 	bl	80036a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ade:	2360      	movs	r3, #96	@ 0x60
 8002ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2200      	movs	r2, #0
 8002af2:	4619      	mov	r1, r3
 8002af4:	4807      	ldr	r0, [pc, #28]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002af6:	f00b fe3f 	bl	800e778 <HAL_TIM_PWM_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002b00:	f000 fdd0 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002b04:	4803      	ldr	r0, [pc, #12]	@ (8002b14 <MX_TIM12_Init+0x84>)
 8002b06:	f001 fc5d 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200017ec 	.word	0x200017ec
 8002b18:	40001800 	.word	0x40001800

08002b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b22:	4a15      	ldr	r2, [pc, #84]	@ (8002b78 <MX_USART1_UART_Init+0x5c>)
 8002b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b42:	220c      	movs	r2, #12
 8002b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b5e:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <MX_USART1_UART_Init+0x58>)
 8002b60:	f00c fcd8 	bl	800f514 <HAL_UART_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b6a:	f000 fd9b 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20001838 	.word	0x20001838
 8002b78:	40011000 	.word	0x40011000

08002b7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b80:	4b14      	ldr	r3, [pc, #80]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002b82:	4a15      	ldr	r2, [pc, #84]	@ (8002bd8 <MX_USART6_UART_Init+0x5c>)
 8002b84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b86:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bac:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb2:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bbe:	4805      	ldr	r0, [pc, #20]	@ (8002bd4 <MX_USART6_UART_Init+0x58>)
 8002bc0:	f00c fca8 	bl	800f514 <HAL_UART_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002bca:	f000 fd6b 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200018c0 	.word	0x200018c0
 8002bd8:	40011400 	.word	0x40011400

08002bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002be2:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <MX_DMA_Init+0x48>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c24 <MX_DMA_Init+0x48>)
 8002be8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <MX_DMA_Init+0x48>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2105      	movs	r1, #5
 8002bfe:	203b      	movs	r0, #59	@ 0x3b
 8002c00:	f002 ffcc 	bl	8005b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002c04:	203b      	movs	r0, #59	@ 0x3b
 8002c06:	f002 ffe5 	bl	8005bd4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2105      	movs	r1, #5
 8002c0e:	2045      	movs	r0, #69	@ 0x45
 8002c10:	f002 ffc4 	bl	8005b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002c14:	2045      	movs	r0, #69	@ 0x45
 8002c16:	f002 ffdd 	bl	8005bd4 <HAL_NVIC_EnableIRQ>

}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	615a      	str	r2, [r3, #20]
 8002c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c42:	4a20      	ldr	r2, [pc, #128]	@ (8002cc4 <MX_FMC_Init+0x9c>)
 8002c44:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c54:	2204      	movs	r2, #4
 8002c56:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002c58:	4b19      	ldr	r3, [pc, #100]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c5e:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c60:	2240      	movs	r2, #64	@ 0x40
 8002c62:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002c64:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c66:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c6a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002c72:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c78:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002c82:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002c8c:	2307      	movs	r3, #7
 8002c8e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002c90:	2304      	movs	r3, #4
 8002c92:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002c94:	2307      	movs	r3, #7
 8002c96:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	@ (8002cc0 <MX_FMC_Init+0x98>)
 8002caa:	f00b f9fc 	bl	800e0a6 <HAL_SDRAM_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002cb4:	f000 fcf6 	bl	80036a4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002cb8:	bf00      	nop
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200019a8 	.word	0x200019a8
 8002cc4:	a0000140 	.word	0xa0000140

08002cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b090      	sub	sp, #64	@ 0x40
 8002ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cde:	4bb0      	ldr	r3, [pc, #704]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4aaf      	ldr	r2, [pc, #700]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4bad      	ldr	r3, [pc, #692]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cf6:	4baa      	ldr	r3, [pc, #680]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	4aa9      	ldr	r2, [pc, #676]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d02:	4ba7      	ldr	r3, [pc, #668]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	4ba4      	ldr	r3, [pc, #656]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4aa3      	ldr	r2, [pc, #652]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4ba1      	ldr	r3, [pc, #644]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d26:	4b9e      	ldr	r3, [pc, #632]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a9d      	ldr	r2, [pc, #628]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b9b      	ldr	r3, [pc, #620]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3e:	4b98      	ldr	r3, [pc, #608]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	4a97      	ldr	r2, [pc, #604]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4a:	4b95      	ldr	r3, [pc, #596]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	4b92      	ldr	r3, [pc, #584]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	4a91      	ldr	r2, [pc, #580]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d62:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d6e:	4b8c      	ldr	r3, [pc, #560]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	4a8b      	ldr	r2, [pc, #556]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7a:	4b89      	ldr	r3, [pc, #548]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d86:	4b86      	ldr	r3, [pc, #536]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a85      	ldr	r2, [pc, #532]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b83      	ldr	r3, [pc, #524]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d9e:	4b80      	ldr	r3, [pc, #512]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a7f      	ldr	r2, [pc, #508]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002da4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b7d      	ldr	r3, [pc, #500]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db6:	4b7a      	ldr	r3, [pc, #488]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	4a79      	ldr	r2, [pc, #484]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002dbc:	f043 0320 	orr.w	r3, r3, #32
 8002dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc2:	4b77      	ldr	r3, [pc, #476]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dce:	4b74      	ldr	r3, [pc, #464]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a73      	ldr	r2, [pc, #460]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b71      	ldr	r3, [pc, #452]	@ (8002fa0 <MX_GPIO_Init+0x2d8>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002de6:	2201      	movs	r2, #1
 8002de8:	2120      	movs	r1, #32
 8002dea:	486e      	ldr	r0, [pc, #440]	@ (8002fa4 <MX_GPIO_Init+0x2dc>)
 8002dec:	f004 fbde 	bl	80075ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002df0:	2200      	movs	r2, #0
 8002df2:	210c      	movs	r1, #12
 8002df4:	486c      	ldr	r0, [pc, #432]	@ (8002fa8 <MX_GPIO_Init+0x2e0>)
 8002df6:	f004 fbd9 	bl	80075ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	2108      	movs	r1, #8
 8002dfe:	486b      	ldr	r0, [pc, #428]	@ (8002fac <MX_GPIO_Init+0x2e4>)
 8002e00:	f004 fbd4 	bl	80075ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002e04:	2201      	movs	r2, #1
 8002e06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e0a:	4867      	ldr	r0, [pc, #412]	@ (8002fa8 <MX_GPIO_Init+0x2e0>)
 8002e0c:	f004 fbce 	bl	80075ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002e10:	2200      	movs	r2, #0
 8002e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e16:	4866      	ldr	r0, [pc, #408]	@ (8002fb0 <MX_GPIO_Init+0x2e8>)
 8002e18:	f004 fbc8 	bl	80075ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	21c8      	movs	r1, #200	@ 0xc8
 8002e20:	4864      	ldr	r0, [pc, #400]	@ (8002fb4 <MX_GPIO_Init+0x2ec>)
 8002e22:	f004 fbc3 	bl	80075ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002e26:	2308      	movs	r3, #8
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e36:	4619      	mov	r1, r3
 8002e38:	485f      	ldr	r0, [pc, #380]	@ (8002fb8 <MX_GPIO_Init+0x2f0>)
 8002e3a:	f004 f9f3 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002e3e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e50:	230a      	movs	r3, #10
 8002e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4858      	ldr	r0, [pc, #352]	@ (8002fbc <MX_GPIO_Init+0x2f4>)
 8002e5c:	f004 f9e2 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e66:	2300      	movs	r3, #0
 8002e68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e72:	4619      	mov	r1, r3
 8002e74:	4852      	ldr	r0, [pc, #328]	@ (8002fc0 <MX_GPIO_Init+0x2f8>)
 8002e76:	f004 f9d5 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002e7a:	2340      	movs	r3, #64	@ 0x40
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e7e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002e88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4845      	ldr	r0, [pc, #276]	@ (8002fa4 <MX_GPIO_Init+0x2dc>)
 8002e90:	f004 f9c8 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002e94:	2320      	movs	r3, #32
 8002e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ea4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	483e      	ldr	r0, [pc, #248]	@ (8002fa4 <MX_GPIO_Init+0x2dc>)
 8002eac:	f004 f9ba 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002eb0:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ec2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4837      	ldr	r0, [pc, #220]	@ (8002fa8 <MX_GPIO_Init+0x2e0>)
 8002eca:	f004 f9ab 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002edc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4838      	ldr	r0, [pc, #224]	@ (8002fc4 <MX_GPIO_Init+0x2fc>)
 8002ee4:	f004 f99e 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002ee8:	2308      	movs	r3, #8
 8002eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eec:	2301      	movs	r3, #1
 8002eee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002efc:	4619      	mov	r1, r3
 8002efe:	482b      	ldr	r0, [pc, #172]	@ (8002fac <MX_GPIO_Init+0x2e4>)
 8002f00:	f004 f990 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002f04:	2310      	movs	r3, #16
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f14:	4619      	mov	r1, r3
 8002f16:	4823      	ldr	r0, [pc, #140]	@ (8002fa4 <MX_GPIO_Init+0x2dc>)
 8002f18:	f004 f984 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002f1c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f22:	2300      	movs	r3, #0
 8002f24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f2e:	4619      	mov	r1, r3
 8002f30:	481f      	ldr	r0, [pc, #124]	@ (8002fb0 <MX_GPIO_Init+0x2e8>)
 8002f32:	f004 f977 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002f36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002f48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4818      	ldr	r0, [pc, #96]	@ (8002fb0 <MX_GPIO_Init+0x2e8>)
 8002f50:	f004 f968 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f5a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f68:	4619      	mov	r1, r3
 8002f6a:	480f      	ldr	r0, [pc, #60]	@ (8002fa8 <MX_GPIO_Init+0x2e0>)
 8002f6c:	f004 f95a 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002f70:	2310      	movs	r3, #16
 8002f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002f80:	230a      	movs	r3, #10
 8002f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4809      	ldr	r0, [pc, #36]	@ (8002fb0 <MX_GPIO_Init+0x2e8>)
 8002f8c:	f004 f94a 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002f90:	23c8      	movs	r3, #200	@ 0xc8
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f94:	2301      	movs	r3, #1
 8002f96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f9c:	e014      	b.n	8002fc8 <MX_GPIO_Init+0x300>
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020c00 	.word	0x40020c00
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40022800 	.word	0x40022800
 8002fb0:	40021c00 	.word	0x40021c00
 8002fb4:	40021800 	.word	0x40021800
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40020400 	.word	0x40020400
 8002fc0:	40022400 	.word	0x40022400
 8002fc4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4819      	ldr	r0, [pc, #100]	@ (8003038 <MX_GPIO_Init+0x370>)
 8002fd4:	f004 f926 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002fd8:	2305      	movs	r3, #5
 8002fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002fe8:	230a      	movs	r3, #10
 8002fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4812      	ldr	r0, [pc, #72]	@ (800303c <MX_GPIO_Init+0x374>)
 8002ff4:	f004 f916 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003008:	4619      	mov	r1, r3
 800300a:	480b      	ldr	r0, [pc, #44]	@ (8003038 <MX_GPIO_Init+0x370>)
 800300c:	f004 f90a 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003010:	2328      	movs	r3, #40	@ 0x28
 8003012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003020:	230a      	movs	r3, #10
 8003022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003028:	4619      	mov	r1, r3
 800302a:	4805      	ldr	r0, [pc, #20]	@ (8003040 <MX_GPIO_Init+0x378>)
 800302c:	f004 f8fa 	bl	8007224 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003030:	bf00      	nop
 8003032:	3740      	adds	r7, #64	@ 0x40
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021800 	.word	0x40021800
 800303c:	40020800 	.word	0x40020800
 8003040:	40020000 	.word	0x40020000

08003044 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b0a0      	sub	sp, #128	@ 0x80
 8003048:	af02      	add	r7, sp, #8
 800304a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800304c:	f018 fba2 	bl	801b794 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 8003050:	49b6      	ldr	r1, [pc, #728]	@ (800332c <StartDefaultTask+0x2e8>)
 8003052:	2001      	movs	r0, #1
 8003054:	f001 fe00 	bl	8004c58 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8003058:	49b5      	ldr	r1, [pc, #724]	@ (8003330 <StartDefaultTask+0x2ec>)
 800305a:	2001      	movs	r0, #1
 800305c:	f001 fdfc 	bl	8004c58 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8003060:	4bb4      	ldr	r3, [pc, #720]	@ (8003334 <StartDefaultTask+0x2f0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4ab4      	ldr	r2, [pc, #720]	@ (8003338 <StartDefaultTask+0x2f4>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	461a      	mov	r2, r3
 800306e:	49b3      	ldr	r1, [pc, #716]	@ (800333c <StartDefaultTask+0x2f8>)
 8003070:	2001      	movs	r0, #1
 8003072:	f001 fdf1 	bl	8004c58 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8003076:	49b2      	ldr	r1, [pc, #712]	@ (8003340 <StartDefaultTask+0x2fc>)
 8003078:	2001      	movs	r0, #1
 800307a:	f001 fded 	bl	8004c58 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 800307e:	49b1      	ldr	r1, [pc, #708]	@ (8003344 <StartDefaultTask+0x300>)
 8003080:	2001      	movs	r0, #1
 8003082:	f001 fde9 	bl	8004c58 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8003086:	49b0      	ldr	r1, [pc, #704]	@ (8003348 <StartDefaultTask+0x304>)
 8003088:	2001      	movs	r0, #1
 800308a:	f001 fde5 	bl	8004c58 <LOGGER_SendFormatted>
  
  // FreeRTOS 커널 시작 후 SD카드 초기화
  LOG_INFO("📤 [TX_TASK] Initializing SD card storage (after FreeRTOS start)...");
 800308e:	49af      	ldr	r1, [pc, #700]	@ (800334c <StartDefaultTask+0x308>)
 8003090:	2001      	movs	r0, #1
 8003092:	f001 fde1 	bl	8004c58 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 8003096:	f7fe f81b 	bl	80010d0 <SDStorage_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	4aac      	ldr	r2, [pc, #688]	@ (8003350 <StartDefaultTask+0x30c>)
 800309e:	6013      	str	r3, [r2, #0]
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80030a0:	4bab      	ldr	r3, [pc, #684]	@ (8003350 <StartDefaultTask+0x30c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <StartDefaultTask+0x6e>
    LOG_INFO("📤 [TX_TASK] ✅ SD card initialized successfully - dual logging enabled");
 80030a8:	49aa      	ldr	r1, [pc, #680]	@ (8003354 <StartDefaultTask+0x310>)
 80030aa:	2001      	movs	r0, #1
 80030ac:	f001 fdd4 	bl	8004c58 <LOGGER_SendFormatted>
 80030b0:	e006      	b.n	80030c0 <StartDefaultTask+0x7c>
  } else {
    LOG_WARN("📤 [TX_TASK] ⚠️ SD card init failed (code: %d) - terminal logging only", g_sd_initialization_result);
 80030b2:	4ba7      	ldr	r3, [pc, #668]	@ (8003350 <StartDefaultTask+0x30c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	49a7      	ldr	r1, [pc, #668]	@ (8003358 <StartDefaultTask+0x314>)
 80030ba:	2002      	movs	r0, #2
 80030bc:	f001 fdcc 	bl	8004c58 <LOGGER_SendFormatted>
  }

  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 80030c0:	49a6      	ldr	r1, [pc, #664]	@ (800335c <StartDefaultTask+0x318>)
 80030c2:	2001      	movs	r0, #1
 80030c4:	f001 fdc8 	bl	8004c58 <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 80030c8:	48a5      	ldr	r0, [pc, #660]	@ (8003360 <StartDefaultTask+0x31c>)
 80030ca:	f001 fe61 	bl	8004d90 <UART_Connect>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (uart_status == UART_STATUS_OK) {
 80030d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <StartDefaultTask+0xac>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 80030dc:	49a1      	ldr	r1, [pc, #644]	@ (8003364 <StartDefaultTask+0x320>)
 80030de:	2001      	movs	r0, #1
 80030e0:	f001 fdba 	bl	8004c58 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 80030e4:	f001 fed0 	bl	8004e88 <UART_IsConnected>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d035      	beq.n	800315a <StartDefaultTask+0x116>
 80030ee:	e00b      	b.n	8003108 <StartDefaultTask+0xc4>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 80030f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80030f4:	461a      	mov	r2, r3
 80030f6:	499c      	ldr	r1, [pc, #624]	@ (8003368 <StartDefaultTask+0x324>)
 80030f8:	2003      	movs	r0, #3
 80030fa:	f001 fdad 	bl	8004c58 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 80030fe:	499b      	ldr	r1, [pc, #620]	@ (800336c <StartDefaultTask+0x328>)
 8003100:	2003      	movs	r0, #3
 8003102:	f001 fda9 	bl	8004c58 <LOGGER_SendFormatted>
    goto idle_loop;
 8003106:	e21d      	b.n	8003544 <StartDefaultTask+0x500>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 8003108:	4999      	ldr	r1, [pc, #612]	@ (8003370 <StartDefaultTask+0x32c>)
 800310a:	2001      	movs	r0, #1
 800310c:	f001 fda4 	bl	8004c58 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003110:	4998      	ldr	r1, [pc, #608]	@ (8003374 <StartDefaultTask+0x330>)
 8003112:	2001      	movs	r0, #1
 8003114:	f001 fda0 	bl	8004c58 <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 8003118:	4997      	ldr	r1, [pc, #604]	@ (8003378 <StartDefaultTask+0x334>)
 800311a:	2001      	movs	r0, #1
 800311c:	f001 fd9c 	bl	8004c58 <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8003120:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003124:	f015 fb96 	bl	8018854 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 8003128:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800312c:	4993      	ldr	r1, [pc, #588]	@ (800337c <StartDefaultTask+0x338>)
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fb32 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 8003134:	4992      	ldr	r1, [pc, #584]	@ (8003380 <StartDefaultTask+0x33c>)
 8003136:	2001      	movs	r0, #1
 8003138:	f001 fd8e 	bl	8004c58 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 800313c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800313e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	460b      	mov	r3, r1
 8003146:	498f      	ldr	r1, [pc, #572]	@ (8003384 <StartDefaultTask+0x340>)
 8003148:	2001      	movs	r0, #1
 800314a:	f001 fd85 	bl	8004c58 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 기본 쓰기 기능 테스트 (BSP 기반)
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 800314e:	4b80      	ldr	r3, [pc, #512]	@ (8003350 <StartDefaultTask+0x30c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8167 	bne.w	8003426 <StartDefaultTask+0x3e2>
 8003158:	e008      	b.n	800316c <StartDefaultTask+0x128>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 800315a:	498b      	ldr	r1, [pc, #556]	@ (8003388 <StartDefaultTask+0x344>)
 800315c:	2003      	movs	r0, #3
 800315e:	f001 fd7b 	bl	8004c58 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8003162:	4982      	ldr	r1, [pc, #520]	@ (800336c <StartDefaultTask+0x328>)
 8003164:	2003      	movs	r0, #3
 8003166:	f001 fd77 	bl	8004c58 <LOGGER_SendFormatted>
    goto idle_loop;
 800316a:	e1eb      	b.n	8003544 <StartDefaultTask+0x500>
    LOG_INFO("🧪 Testing basic SD card write functionality with BSP drivers...");
 800316c:	4987      	ldr	r1, [pc, #540]	@ (800338c <StartDefaultTask+0x348>)
 800316e:	2001      	movs	r0, #1
 8003170:	f001 fd72 	bl	8004c58 <LOGGER_SendFormatted>
    // BSP 레벨 쓰기/읽기 테스트
    static uint32_t test_write_buffer[128];  // 512 bytes = 128 uint32_t
    static uint32_t test_read_buffer[128];
    
    // 테스트 데이터 준비 (간단한 패턴)
    for(int i = 0; i < 128; i++) {
 8003174:	2300      	movs	r3, #0
 8003176:	677b      	str	r3, [r7, #116]	@ 0x74
 8003178:	e009      	b.n	800318e <StartDefaultTask+0x14a>
      test_write_buffer[i] = (uint32_t)(0xAA55AA55 + i);  // 테스트 패턴
 800317a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800317c:	4b84      	ldr	r3, [pc, #528]	@ (8003390 <StartDefaultTask+0x34c>)
 800317e:	4413      	add	r3, r2
 8003180:	4984      	ldr	r1, [pc, #528]	@ (8003394 <StartDefaultTask+0x350>)
 8003182:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003184:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    for(int i = 0; i < 128; i++) {
 8003188:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800318a:	3301      	adds	r3, #1
 800318c:	677b      	str	r3, [r7, #116]	@ 0x74
 800318e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003190:	2b7f      	cmp	r3, #127	@ 0x7f
 8003192:	ddf2      	ble.n	800317a <StartDefaultTask+0x136>
    }
    
    // BSP SD 카드 상태 확인
    uint8_t card_state = BSP_SD_GetCardState();
 8003194:	f00f fdd8 	bl	8012d48 <BSP_SD_GetCardState>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    LOG_INFO("📋 BSP SD card state: %d (0=TRANSFER_OK, 1=TRANSFER_BUSY)", card_state);
 800319e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80031a2:	461a      	mov	r2, r3
 80031a4:	497c      	ldr	r1, [pc, #496]	@ (8003398 <StartDefaultTask+0x354>)
 80031a6:	2001      	movs	r0, #1
 80031a8:	f001 fd56 	bl	8004c58 <LOGGER_SendFormatted>
    
    // BSP SD 카드 정보 확인
    BSP_SD_CardInfo card_info;
    BSP_SD_GetCardInfo(&card_info);
 80031ac:	f107 0308 	add.w	r3, r7, #8
 80031b0:	4618      	mov	r0, r3
 80031b2:	f00f fdd9 	bl	8012d68 <BSP_SD_GetCardInfo>
    LOG_INFO("📋 Card LogBlockNbr: %lu, LogBlockSize: %lu", card_info.LogBlockNbr, card_info.LogBlockSize);
 80031b6:	6a3a      	ldr	r2, [r7, #32]
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	4978      	ldr	r1, [pc, #480]	@ (800339c <StartDefaultTask+0x358>)
 80031bc:	2001      	movs	r0, #1
 80031be:	f001 fd4b 	bl	8004c58 <LOGGER_SendFormatted>
    LOG_INFO("📋 Card Type: %lu, Class: %lu", card_info.CardType, card_info.Class);
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4976      	ldr	r1, [pc, #472]	@ (80033a0 <StartDefaultTask+0x35c>)
 80031c8:	2001      	movs	r0, #1
 80031ca:	f001 fd45 	bl	8004c58 <LOGGER_SendFormatted>
    
    LOG_INFO("📝 Writing test pattern to sector 2000 using BSP...");
 80031ce:	4975      	ldr	r1, [pc, #468]	@ (80033a4 <StartDefaultTask+0x360>)
 80031d0:	2001      	movs	r0, #1
 80031d2:	f001 fd41 	bl	8004c58 <LOGGER_SendFormatted>
    uint8_t write_result = BSP_SD_WriteBlocks(test_write_buffer, 2000, 1, 5000);
 80031d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80031da:	2201      	movs	r2, #1
 80031dc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80031e0:	486c      	ldr	r0, [pc, #432]	@ (8003394 <StartDefaultTask+0x350>)
 80031e2:	f00f fd5f 	bl	8012ca4 <BSP_SD_WriteBlocks>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    LOG_INFO("📝 BSP_SD_WriteBlocks result: %d (0=MSD_OK)", write_result);
 80031ec:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80031f0:	461a      	mov	r2, r3
 80031f2:	496d      	ldr	r1, [pc, #436]	@ (80033a8 <StartDefaultTask+0x364>)
 80031f4:	2001      	movs	r0, #1
 80031f6:	f001 fd2f 	bl	8004c58 <LOGGER_SendFormatted>
    
    // BSP 쓰기 실패 시 에러 분석
    if(write_result != MSD_OK) {
 80031fa:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d024      	beq.n	800324c <StartDefaultTask+0x208>
      uint8_t card_state_after = BSP_SD_GetCardState();
 8003202:	f00f fda1 	bl	8012d48 <BSP_SD_GetCardState>
 8003206:	4603      	mov	r3, r0
 8003208:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
      LOG_ERROR("📋 BSP SD card state after failed write: %d", card_state_after);
 800320c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8003210:	461a      	mov	r2, r3
 8003212:	4966      	ldr	r1, [pc, #408]	@ (80033ac <StartDefaultTask+0x368>)
 8003214:	2003      	movs	r0, #3
 8003216:	f001 fd1f 	bl	8004c58 <LOGGER_SendFormatted>
      
      // BSP 에러 코드 해석
      switch(write_result) {
 800321a:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800321e:	2b01      	cmp	r3, #1
 8003220:	d002      	beq.n	8003228 <StartDefaultTask+0x1e4>
 8003222:	2b02      	cmp	r3, #2
 8003224:	d005      	beq.n	8003232 <StartDefaultTask+0x1ee>
 8003226:	e009      	b.n	800323c <StartDefaultTask+0x1f8>
        case MSD_ERROR:
          LOG_ERROR("📋 MSD_ERROR - General BSP error occurred");
 8003228:	4961      	ldr	r1, [pc, #388]	@ (80033b0 <StartDefaultTask+0x36c>)
 800322a:	2003      	movs	r0, #3
 800322c:	f001 fd14 	bl	8004c58 <LOGGER_SendFormatted>
          break;
 8003230:	e010      	b.n	8003254 <StartDefaultTask+0x210>
        case MSD_ERROR_SD_NOT_PRESENT:
          LOG_ERROR("📋 MSD_ERROR_SD_NOT_PRESENT - SD card not present");
 8003232:	4960      	ldr	r1, [pc, #384]	@ (80033b4 <StartDefaultTask+0x370>)
 8003234:	2003      	movs	r0, #3
 8003236:	f001 fd0f 	bl	8004c58 <LOGGER_SendFormatted>
          break;
 800323a:	e00b      	b.n	8003254 <StartDefaultTask+0x210>
        default:
          LOG_ERROR("📋 Unknown BSP status: %d", write_result);
 800323c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8003240:	461a      	mov	r2, r3
 8003242:	495d      	ldr	r1, [pc, #372]	@ (80033b8 <StartDefaultTask+0x374>)
 8003244:	2003      	movs	r0, #3
 8003246:	f001 fd07 	bl	8004c58 <LOGGER_SendFormatted>
          break;
 800324a:	e003      	b.n	8003254 <StartDefaultTask+0x210>
      }
    } else {
      LOG_INFO("📝 BSP write test successful");
 800324c:	495b      	ldr	r1, [pc, #364]	@ (80033bc <StartDefaultTask+0x378>)
 800324e:	2001      	movs	r0, #1
 8003250:	f001 fd02 	bl	8004c58 <LOGGER_SendFormatted>
    }
    
    // 테스트 결과 변수 (SDStorage와 호환성 유지)
    static int bsp_test_result = -1;  // 초기값: 테스트 안됨
    
    if(write_result == MSD_OK) {
 8003254:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8003258:	2b00      	cmp	r3, #0
 800325a:	f040 80ca 	bne.w	80033f2 <StartDefaultTask+0x3ae>
      // 쓰기 후 안정화 대기
      osDelay(100);
 800325e:	2064      	movs	r0, #100	@ 0x64
 8003260:	f015 faf8 	bl	8018854 <osDelay>
      
      LOG_INFO("📖 Reading back from sector 2000 using BSP...");
 8003264:	4956      	ldr	r1, [pc, #344]	@ (80033c0 <StartDefaultTask+0x37c>)
 8003266:	2001      	movs	r0, #1
 8003268:	f001 fcf6 	bl	8004c58 <LOGGER_SendFormatted>
      uint8_t read_result = BSP_SD_ReadBlocks(test_read_buffer, 2000, 1, 5000);
 800326c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003270:	2201      	movs	r2, #1
 8003272:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003276:	4853      	ldr	r0, [pc, #332]	@ (80033c4 <StartDefaultTask+0x380>)
 8003278:	f00f fcf6 	bl	8012c68 <BSP_SD_ReadBlocks>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
      LOG_INFO("📖 BSP_SD_ReadBlocks result: %d (0=MSD_OK)", read_result);
 8003282:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003286:	461a      	mov	r2, r3
 8003288:	494f      	ldr	r1, [pc, #316]	@ (80033c8 <StartDefaultTask+0x384>)
 800328a:	2001      	movs	r0, #1
 800328c:	f001 fce4 	bl	8004c58 <LOGGER_SendFormatted>
      
      if(read_result == MSD_OK) {
 8003290:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 80a3 	bne.w	80033e0 <StartDefaultTask+0x39c>
        // 데이터 검증 (uint32_t 단위로 비교)
        int match_count = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	673b      	str	r3, [r7, #112]	@ 0x70
        int mismatch_count = 0;  // 실제 mismatch 계산
 800329e:	2300      	movs	r3, #0
 80032a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        
        for(int i = 0; i < 128; i++) {
 80032a2:	2300      	movs	r3, #0
 80032a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032a6:	e025      	b.n	80032f4 <StartDefaultTask+0x2b0>
          if(test_write_buffer[i] == test_read_buffer[i]) {
 80032a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003394 <StartDefaultTask+0x350>)
 80032aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032b0:	4944      	ldr	r1, [pc, #272]	@ (80033c4 <StartDefaultTask+0x380>)
 80032b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d103      	bne.n	80032c4 <StartDefaultTask+0x280>
            match_count++;
 80032bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032be:	3301      	adds	r3, #1
 80032c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80032c2:	e014      	b.n	80032ee <StartDefaultTask+0x2aa>
          } else {
            mismatch_count++;
 80032c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c6:	3301      	adds	r3, #1
 80032c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if(mismatch_count <= 5) { // 처음 5개 불일치만 출력
 80032ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	dc0e      	bgt.n	80032ee <StartDefaultTask+0x2aa>
              LOG_WARN("📊 Mismatch at word %d: wrote 0x%08lX, read 0x%08lX", 
 80032d0:	4a30      	ldr	r2, [pc, #192]	@ (8003394 <StartDefaultTask+0x350>)
 80032d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032d8:	493a      	ldr	r1, [pc, #232]	@ (80033c4 <StartDefaultTask+0x380>)
 80032da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80032e6:	4939      	ldr	r1, [pc, #228]	@ (80033cc <StartDefaultTask+0x388>)
 80032e8:	2002      	movs	r0, #2
 80032ea:	f001 fcb5 	bl	8004c58 <LOGGER_SendFormatted>
        for(int i = 0; i < 128; i++) {
 80032ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032f0:	3301      	adds	r3, #1
 80032f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80032f8:	ddd6      	ble.n	80032a8 <StartDefaultTask+0x264>
                       i, test_write_buffer[i], test_read_buffer[i]);
            }
          }
        }
        
        LOG_INFO("📊 BSP data verification: %d matches, %d mismatches out of 128 words", 
 80032fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80032fe:	4934      	ldr	r1, [pc, #208]	@ (80033d0 <StartDefaultTask+0x38c>)
 8003300:	2001      	movs	r0, #1
 8003302:	f001 fca9 	bl	8004c58 <LOGGER_SendFormatted>
                 match_count, mismatch_count);
        
        if(mismatch_count == 0) {
 8003306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <StartDefaultTask+0x2d8>
          LOG_INFO("✅ BSP SD card write/read test PASSED - data integrity OK");
 800330c:	4931      	ldr	r1, [pc, #196]	@ (80033d4 <StartDefaultTask+0x390>)
 800330e:	2001      	movs	r0, #1
 8003310:	f001 fca2 	bl	8004c58 <LOGGER_SendFormatted>
          bsp_test_result = 0;  // 성공
 8003314:	4b30      	ldr	r3, [pc, #192]	@ (80033d8 <StartDefaultTask+0x394>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e072      	b.n	8003402 <StartDefaultTask+0x3be>
        } else {
          LOG_WARN("⚠️ BSP SD card write/read test FAILED - data corruption detected");
 800331c:	492f      	ldr	r1, [pc, #188]	@ (80033dc <StartDefaultTask+0x398>)
 800331e:	2002      	movs	r0, #2
 8003320:	f001 fc9a 	bl	8004c58 <LOGGER_SendFormatted>
          bsp_test_result = mismatch_count;  // 불일치 개수
 8003324:	4a2c      	ldr	r2, [pc, #176]	@ (80033d8 <StartDefaultTask+0x394>)
 8003326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e06a      	b.n	8003402 <StartDefaultTask+0x3be>
 800332c:	0801dec0 	.word	0x0801dec0
 8003330:	0801df08 	.word	0x0801df08
 8003334:	2000001c 	.word	0x2000001c
 8003338:	431bde83 	.word	0x431bde83
 800333c:	0801df34 	.word	0x0801df34
 8003340:	0801df4c 	.word	0x0801df4c
 8003344:	0801df74 	.word	0x0801df74
 8003348:	0801dfc0 	.word	0x0801dfc0
 800334c:	0801dffc 	.word	0x0801dffc
 8003350:	20000014 	.word	0x20000014
 8003354:	0801e044 	.word	0x0801e044
 8003358:	0801e090 	.word	0x0801e090
 800335c:	0801e0e0 	.word	0x0801e0e0
 8003360:	0801e10c 	.word	0x0801e10c
 8003364:	0801e114 	.word	0x0801e114
 8003368:	0801e140 	.word	0x0801e140
 800336c:	0801e178 	.word	0x0801e178
 8003370:	0801e1bc 	.word	0x0801e1bc
 8003374:	0801e218 	.word	0x0801e218
 8003378:	0801e250 	.word	0x0801e250
 800337c:	0801e290 	.word	0x0801e290
 8003380:	0801e298 	.word	0x0801e298
 8003384:	0801e2b4 	.word	0x0801e2b4
 8003388:	0801e1ec 	.word	0x0801e1ec
 800338c:	0801e2e4 	.word	0x0801e2e4
 8003390:	aa55aa55 	.word	0xaa55aa55
 8003394:	20001bf0 	.word	0x20001bf0
 8003398:	0801e328 	.word	0x0801e328
 800339c:	0801e364 	.word	0x0801e364
 80033a0:	0801e394 	.word	0x0801e394
 80033a4:	0801e3b4 	.word	0x0801e3b4
 80033a8:	0801e3ec 	.word	0x0801e3ec
 80033ac:	0801e41c 	.word	0x0801e41c
 80033b0:	0801e44c 	.word	0x0801e44c
 80033b4:	0801e478 	.word	0x0801e478
 80033b8:	0801e4ac 	.word	0x0801e4ac
 80033bc:	0801e4c8 	.word	0x0801e4c8
 80033c0:	0801e4e8 	.word	0x0801e4e8
 80033c4:	20001df0 	.word	0x20001df0
 80033c8:	0801e518 	.word	0x0801e518
 80033cc:	0801e548 	.word	0x0801e548
 80033d0:	0801e580 	.word	0x0801e580
 80033d4:	0801e5c8 	.word	0x0801e5c8
 80033d8:	20000018 	.word	0x20000018
 80033dc:	0801e604 	.word	0x0801e604
        }
      } else {
        LOG_ERROR("❌ BSP read back failed after successful write");
 80033e0:	4963      	ldr	r1, [pc, #396]	@ (8003570 <StartDefaultTask+0x52c>)
 80033e2:	2003      	movs	r0, #3
 80033e4:	f001 fc38 	bl	8004c58 <LOGGER_SendFormatted>
        bsp_test_result = 999;  // 읽기 실패
 80033e8:	4b62      	ldr	r3, [pc, #392]	@ (8003574 <StartDefaultTask+0x530>)
 80033ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e007      	b.n	8003402 <StartDefaultTask+0x3be>
      }
    } else {
      LOG_ERROR("❌ BSP write test failed");
 80033f2:	4961      	ldr	r1, [pc, #388]	@ (8003578 <StartDefaultTask+0x534>)
 80033f4:	2003      	movs	r0, #3
 80033f6:	f001 fc2f 	bl	8004c58 <LOGGER_SendFormatted>
      bsp_test_result = 999;  // 쓰기 실패
 80033fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003574 <StartDefaultTask+0x530>)
 80033fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003400:	601a      	str	r2, [r3, #0]
    }
    
    // BSP 테스트 결과 요약
    if(bsp_test_result == 0) {
 8003402:	4b5c      	ldr	r3, [pc, #368]	@ (8003574 <StartDefaultTask+0x530>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <StartDefaultTask+0x3d0>
      LOG_INFO("🗂️ BSP SD test passed - ready for FatFs file operations");
 800340a:	495c      	ldr	r1, [pc, #368]	@ (800357c <StartDefaultTask+0x538>)
 800340c:	2001      	movs	r0, #1
 800340e:	f001 fc23 	bl	8004c58 <LOGGER_SendFormatted>
 8003412:	e003      	b.n	800341c <StartDefaultTask+0x3d8>
    } else {
      LOG_WARN("⚠️ BSP SD test failed - may affect file system operations");
 8003414:	495a      	ldr	r1, [pc, #360]	@ (8003580 <StartDefaultTask+0x53c>)
 8003416:	2002      	movs	r0, #2
 8003418:	f001 fc1e 	bl	8004c58 <LOGGER_SendFormatted>
    }
    
    LOG_INFO("📺 Continuing with LoRa operations...");
 800341c:	4959      	ldr	r1, [pc, #356]	@ (8003584 <StartDefaultTask+0x540>)
 800341e:	2001      	movs	r0, #1
 8003420:	f001 fc1a 	bl	8004c58 <LOGGER_SendFormatted>
 8003424:	e003      	b.n	800342e <StartDefaultTask+0x3ea>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8003426:	4958      	ldr	r1, [pc, #352]	@ (8003588 <StartDefaultTask+0x544>)
 8003428:	2001      	movs	r0, #1
 800342a:	f001 fc15 	bl	8004c58 <LOGGER_SendFormatted>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	667b      	str	r3, [r7, #100]	@ 0x64
    if (lora_new_response) {
 8003432:	4b56      	ldr	r3, [pc, #344]	@ (800358c <StartDefaultTask+0x548>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <StartDefaultTask+0x40c>
      rx_data = lora_rx_response;
 800343c:	4b54      	ldr	r3, [pc, #336]	@ (8003590 <StartDefaultTask+0x54c>)
 800343e:	667b      	str	r3, [r7, #100]	@ 0x64
      lora_new_response = false; // 플래그 클리어
 8003440:	4b52      	ldr	r3, [pc, #328]	@ (800358c <StartDefaultTask+0x548>)
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8003446:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003448:	4952      	ldr	r1, [pc, #328]	@ (8003594 <StartDefaultTask+0x550>)
 800344a:	2000      	movs	r0, #0
 800344c:	f001 fc04 	bl	8004c58 <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8003450:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003454:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f9e6 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 800345c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003460:	4619      	mov	r1, r3
 8003462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	460a      	mov	r2, r1
 800346c:	494a      	ldr	r1, [pc, #296]	@ (8003598 <StartDefaultTask+0x554>)
 800346e:	2000      	movs	r0, #0
 8003470:	f001 fbf2 	bl	8004c58 <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 8003474:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003478:	2b0a      	cmp	r3, #10
 800347a:	d85d      	bhi.n	8003538 <StartDefaultTask+0x4f4>
 800347c:	a201      	add	r2, pc, #4	@ (adr r2, 8003484 <StartDefaultTask+0x440>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	080034b1 	.word	0x080034b1
 8003488:	080034bb 	.word	0x080034bb
 800348c:	080034d3 	.word	0x080034d3
 8003490:	080034eb 	.word	0x080034eb
 8003494:	080034f5 	.word	0x080034f5
 8003498:	080034eb 	.word	0x080034eb
 800349c:	080034f5 	.word	0x080034f5
 80034a0:	080034ff 	.word	0x080034ff
 80034a4:	08003515 	.word	0x08003515
 80034a8:	0800351f 	.word	0x0800351f
 80034ac:	0800351f 	.word	0x0800351f
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 80034b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80034b4:	f015 f9ce 	bl	8018854 <osDelay>
        break;
 80034b8:	e043      	b.n	8003542 <StartDefaultTask+0x4fe>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c0:	4936      	ldr	r1, [pc, #216]	@ (800359c <StartDefaultTask+0x558>)
 80034c2:	2001      	movs	r0, #1
 80034c4:	f001 fbc8 	bl	8004c58 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 80034c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034cc:	f015 f9c2 	bl	8018854 <osDelay>
        break;
 80034d0:	e037      	b.n	8003542 <StartDefaultTask+0x4fe>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 80034d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d4:	3301      	adds	r3, #1
 80034d6:	461a      	mov	r2, r3
 80034d8:	4931      	ldr	r1, [pc, #196]	@ (80035a0 <StartDefaultTask+0x55c>)
 80034da:	2000      	movs	r0, #0
 80034dc:	f001 fbbc 	bl	8004c58 <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 80034e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034e4:	f015 f9b6 	bl	8018854 <osDelay>
        break;
 80034e8:	e02b      	b.n	8003542 <StartDefaultTask+0x4fe>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 80034ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034ee:	f015 f9b1 	bl	8018854 <osDelay>
        break;
 80034f2:	e026      	b.n	8003542 <StartDefaultTask+0x4fe>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 80034f4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80034f8:	f015 f9ac 	bl	8018854 <osDelay>
        break;
 80034fc:	e021      	b.n	8003542 <StartDefaultTask+0x4fe>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 80034fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003500:	461a      	mov	r2, r3
 8003502:	4928      	ldr	r1, [pc, #160]	@ (80035a4 <StartDefaultTask+0x560>)
 8003504:	2000      	movs	r0, #0
 8003506:	f001 fba7 	bl	8004c58 <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 800350a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800350e:	f015 f9a1 	bl	8018854 <osDelay>
        break;
 8003512:	e016      	b.n	8003542 <StartDefaultTask+0x4fe>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8003514:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003518:	f015 f99c 	bl	8018854 <osDelay>
        break;
 800351c:	e011      	b.n	8003542 <StartDefaultTask+0x4fe>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 800351e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003522:	2b09      	cmp	r3, #9
 8003524:	d101      	bne.n	800352a <StartDefaultTask+0x4e6>
 8003526:	4b20      	ldr	r3, [pc, #128]	@ (80035a8 <StartDefaultTask+0x564>)
 8003528:	e000      	b.n	800352c <StartDefaultTask+0x4e8>
 800352a:	4b20      	ldr	r3, [pc, #128]	@ (80035ac <StartDefaultTask+0x568>)
 800352c:	461a      	mov	r2, r3
 800352e:	4920      	ldr	r1, [pc, #128]	@ (80035b0 <StartDefaultTask+0x56c>)
 8003530:	2001      	movs	r0, #1
 8003532:	f001 fb91 	bl	8004c58 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8003536:	e005      	b.n	8003544 <StartDefaultTask+0x500>
      default:
        osDelay(1000);
 8003538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800353c:	f015 f98a 	bl	8018854 <osDelay>
        break;
 8003540:	bf00      	nop
  {
 8003542:	e774      	b.n	800342e <StartDefaultTask+0x3ea>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003544:	491b      	ldr	r1, [pc, #108]	@ (80035b4 <StartDefaultTask+0x570>)
 8003546:	2001      	movs	r0, #1
 8003548:	f001 fb86 	bl	8004c58 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8003550:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003554:	f015 f97e 	bl	8018854 <osDelay>
    idle_counter++;
 8003558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355a:	3301      	adds	r3, #1
 800355c:	663b      	str	r3, [r7, #96]	@ 0x60
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 800355e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	461a      	mov	r2, r3
 8003564:	4914      	ldr	r1, [pc, #80]	@ (80035b8 <StartDefaultTask+0x574>)
 8003566:	2001      	movs	r0, #1
 8003568:	f001 fb76 	bl	8004c58 <LOGGER_SendFormatted>
    osDelay(30000);
 800356c:	bf00      	nop
 800356e:	e7ef      	b.n	8003550 <StartDefaultTask+0x50c>
 8003570:	0801e64c 	.word	0x0801e64c
 8003574:	20000018 	.word	0x20000018
 8003578:	0801e67c 	.word	0x0801e67c
 800357c:	0801e698 	.word	0x0801e698
 8003580:	0801e6d8 	.word	0x0801e6d8
 8003584:	0801e718 	.word	0x0801e718
 8003588:	0801e740 	.word	0x0801e740
 800358c:	20001be0 	.word	0x20001be0
 8003590:	200019e0 	.word	0x200019e0
 8003594:	0801e788 	.word	0x0801e788
 8003598:	0801e7b8 	.word	0x0801e7b8
 800359c:	0801e7e4 	.word	0x0801e7e4
 80035a0:	0801e80c 	.word	0x0801e80c
 80035a4:	0801e840 	.word	0x0801e840
 80035a8:	0801e870 	.word	0x0801e870
 80035ac:	0801e878 	.word	0x0801e878
 80035b0:	0801e880 	.word	0x0801e880
 80035b4:	0801e8b8 	.word	0x0801e8b8
 80035b8:	0801e8e0 	.word	0x0801e8e0

080035bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80035ce:	f001 ff51 	bl	8005474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40001000 	.word	0x40001000

080035e0 <MX_USART6_DMA_Init>:
  * @brief USART6 DMA Initialization Function
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035e6:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <MX_USART6_DMA_Init+0x94>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	4a22      	ldr	r2, [pc, #136]	@ (8003674 <MX_USART6_DMA_Init+0x94>)
 80035ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f2:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <MX_USART6_DMA_Init+0x94>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	2105      	movs	r1, #5
 8003602:	2039      	movs	r0, #57	@ 0x39
 8003604:	f002 faca 	bl	8005b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003608:	2039      	movs	r0, #57	@ 0x39
 800360a:	f002 fae3 	bl	8005bd4 <HAL_NVIC_EnableIRQ>

  /* Configure DMA2_Stream1 */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 800360e:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003610:	4a1a      	ldr	r2, [pc, #104]	@ (800367c <MX_USART6_DMA_Init+0x9c>)
 8003612:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003614:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003616:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800361a:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800361c:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003624:	2200      	movs	r2, #0
 8003626:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 800362a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800362e:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003630:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003632:	2200      	movs	r2, #0
 8003634:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800363c:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003642:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003644:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003648:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 800364c:	2200      	movs	r2, #0
 800364e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003650:	4809      	ldr	r0, [pc, #36]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003652:	f002 fc39 	bl	8005ec8 <HAL_DMA_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <MX_USART6_DMA_Init+0x80>
  {
    Error_Handler();
 800365c:	f000 f822 	bl	80036a4 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003660:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <MX_USART6_DMA_Init+0xa0>)
 8003662:	4a05      	ldr	r2, [pc, #20]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003664:	675a      	str	r2, [r3, #116]	@ 0x74
 8003666:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <MX_USART6_DMA_Init+0x98>)
 8003668:	4a05      	ldr	r2, [pc, #20]	@ (8003680 <MX_USART6_DMA_Init+0xa0>)
 800366a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	20001948 	.word	0x20001948
 800367c:	40026428 	.word	0x40026428
 8003680:	200018c0 	.word	0x200018c0

08003684 <StartReceiveTask>:
  * @brief  Function implementing the receiveTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartReceiveTask(void const * argument)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 800368c:	4904      	ldr	r1, [pc, #16]	@ (80036a0 <StartReceiveTask+0x1c>)
 800368e:	2001      	movs	r0, #1
 8003690:	f001 fae2 	bl	8004c58 <LOGGER_SendFormatted>
  /* Infinite loop */
  for(;;)
  {
    // DMA 기반 수신은 uart_stm32.c의 콜백에서 처리됨
    // 이 태스크는 주기적으로 시스템 상태만 확인
    osDelay(5000);  // 5초마다 실행
 8003694:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003698:	f015 f8dc 	bl	8018854 <osDelay>
 800369c:	e7fa      	b.n	8003694 <StartReceiveTask+0x10>
 800369e:	bf00      	nop
 80036a0:	0801e910 	.word	0x0801e910

080036a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a8:	b672      	cpsid	i
}
 80036aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <Error_Handler+0x8>

080036b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80036b6:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_MspInit+0x4c>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	4a10      	ldr	r2, [pc, #64]	@ (80036fc <HAL_MspInit+0x4c>)
 80036bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c2:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_MspInit+0x4c>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_MspInit+0x4c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_MspInit+0x4c>)
 80036d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036da:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <HAL_MspInit+0x4c>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	210f      	movs	r1, #15
 80036ea:	f06f 0001 	mvn.w	r0, #1
 80036ee:	f002 fa55 	bl	8005b9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800

08003700 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	@ 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a21      	ldr	r2, [pc, #132]	@ (80037a4 <HAL_ADC_MspInit+0xa4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d13c      	bne.n	800379c <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003722:	4b21      	ldr	r3, [pc, #132]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	4a20      	ldr	r2, [pc, #128]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 8003728:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800372c:	6453      	str	r3, [r2, #68]	@ 0x44
 800372e:	4b1e      	ldr	r3, [pc, #120]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800373a:	4b1b      	ldr	r3, [pc, #108]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	4a1a      	ldr	r2, [pc, #104]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 8003740:	f043 0320 	orr.w	r3, r3, #32
 8003744:	6313      	str	r3, [r2, #48]	@ 0x30
 8003746:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003752:	4b15      	ldr	r3, [pc, #84]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	4a14      	ldr	r2, [pc, #80]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6313      	str	r3, [r2, #48]	@ 0x30
 800375e:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_ADC_MspInit+0xa8>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800376a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800376e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003770:	2303      	movs	r3, #3
 8003772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4619      	mov	r1, r3
 800377e:	480b      	ldr	r0, [pc, #44]	@ (80037ac <HAL_ADC_MspInit+0xac>)
 8003780:	f003 fd50 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003784:	2301      	movs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003788:	2303      	movs	r3, #3
 800378a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4619      	mov	r1, r3
 8003796:	4806      	ldr	r0, [pc, #24]	@ (80037b0 <HAL_ADC_MspInit+0xb0>)
 8003798:	f003 fd44 	bl	8007224 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	@ 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40012200 	.word	0x40012200
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40021400 	.word	0x40021400
 80037b0:	40020000 	.word	0x40020000

080037b4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <HAL_CRC_MspInit+0x38>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10b      	bne.n	80037de <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80037c6:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <HAL_CRC_MspInit+0x3c>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_CRC_MspInit+0x3c>)
 80037cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d2:	4b07      	ldr	r3, [pc, #28]	@ (80037f0 <HAL_CRC_MspInit+0x3c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40023000 	.word	0x40023000
 80037f0:	40023800 	.word	0x40023800

080037f4 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	@ 0x38
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a50      	ldr	r2, [pc, #320]	@ (8003954 <HAL_DCMI_MspInit+0x160>)
 8003812:	4293      	cmp	r3, r2
 8003814:	f040 809a 	bne.w	800394c <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003818:	4b4f      	ldr	r3, [pc, #316]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800381a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381c:	4a4e      	ldr	r2, [pc, #312]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6353      	str	r3, [r2, #52]	@ 0x34
 8003824:	4b4c      	ldr	r3, [pc, #304]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003830:	4b49      	ldr	r3, [pc, #292]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	4a48      	ldr	r2, [pc, #288]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003836:	f043 0310 	orr.w	r3, r3, #16
 800383a:	6313      	str	r3, [r2, #48]	@ 0x30
 800383c:	4b46      	ldr	r3, [pc, #280]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003848:	4b43      	ldr	r3, [pc, #268]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384c:	4a42      	ldr	r2, [pc, #264]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800384e:	f043 0308 	orr.w	r3, r3, #8
 8003852:	6313      	str	r3, [r2, #48]	@ 0x30
 8003854:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003860:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	4a3c      	ldr	r2, [pc, #240]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800386a:	6313      	str	r3, [r2, #48]	@ 0x30
 800386c:	4b3a      	ldr	r3, [pc, #232]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003878:	4b37      	ldr	r3, [pc, #220]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	4a36      	ldr	r2, [pc, #216]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800387e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003882:	6313      	str	r3, [r2, #48]	@ 0x30
 8003884:	4b34      	ldr	r3, [pc, #208]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003890:	4b31      	ldr	r3, [pc, #196]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	4a30      	ldr	r2, [pc, #192]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6313      	str	r3, [r2, #48]	@ 0x30
 800389c:	4b2e      	ldr	r3, [pc, #184]	@ (8003958 <HAL_DCMI_MspInit+0x164>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80038a8:	2360      	movs	r3, #96	@ 0x60
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ac:	2302      	movs	r3, #2
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038b8:	230d      	movs	r3, #13
 80038ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038c0:	4619      	mov	r1, r3
 80038c2:	4826      	ldr	r0, [pc, #152]	@ (800395c <HAL_DCMI_MspInit+0x168>)
 80038c4:	f003 fcae 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80038c8:	2308      	movs	r3, #8
 80038ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	2300      	movs	r3, #0
 80038d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038d8:	230d      	movs	r3, #13
 80038da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80038dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038e0:	4619      	mov	r1, r3
 80038e2:	481f      	ldr	r0, [pc, #124]	@ (8003960 <HAL_DCMI_MspInit+0x16c>)
 80038e4:	f003 fc9e 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80038e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ee:	2302      	movs	r3, #2
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f6:	2300      	movs	r3, #0
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038fa:	230d      	movs	r3, #13
 80038fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80038fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003902:	4619      	mov	r1, r3
 8003904:	4817      	ldr	r0, [pc, #92]	@ (8003964 <HAL_DCMI_MspInit+0x170>)
 8003906:	f003 fc8d 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800390a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003918:	2300      	movs	r3, #0
 800391a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800391c:	230d      	movs	r3, #13
 800391e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003924:	4619      	mov	r1, r3
 8003926:	4810      	ldr	r0, [pc, #64]	@ (8003968 <HAL_DCMI_MspInit+0x174>)
 8003928:	f003 fc7c 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800392c:	2350      	movs	r3, #80	@ 0x50
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003938:	2300      	movs	r3, #0
 800393a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800393c:	230d      	movs	r3, #13
 800393e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003944:	4619      	mov	r1, r3
 8003946:	4809      	ldr	r0, [pc, #36]	@ (800396c <HAL_DCMI_MspInit+0x178>)
 8003948:	f003 fc6c 	bl	8007224 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 800394c:	bf00      	nop
 800394e:	3738      	adds	r7, #56	@ 0x38
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	50050000 	.word	0x50050000
 8003958:	40023800 	.word	0x40023800
 800395c:	40021000 	.word	0x40021000
 8003960:	40020c00 	.word	0x40020c00
 8003964:	40021800 	.word	0x40021800
 8003968:	40021c00 	.word	0x40021c00
 800396c:	40020000 	.word	0x40020000

08003970 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0d      	ldr	r2, [pc, #52]	@ (80039b4 <HAL_DMA2D_MspInit+0x44>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d113      	bne.n	80039aa <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003982:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <HAL_DMA2D_MspInit+0x48>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	4a0c      	ldr	r2, [pc, #48]	@ (80039b8 <HAL_DMA2D_MspInit+0x48>)
 8003988:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800398c:	6313      	str	r3, [r2, #48]	@ 0x30
 800398e:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <HAL_DMA2D_MspInit+0x48>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800399a:	2200      	movs	r2, #0
 800399c:	2105      	movs	r1, #5
 800399e:	205a      	movs	r0, #90	@ 0x5a
 80039a0:	f002 f8fc 	bl	8005b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80039a4:	205a      	movs	r0, #90	@ 0x5a
 80039a6:	f002 f915 	bl	8005bd4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	4002b000 	.word	0x4002b000
 80039b8:	40023800 	.word	0x40023800

080039bc <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08e      	sub	sp, #56	@ 0x38
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ad8 <HAL_ETH_MspInit+0x11c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d178      	bne.n	8003ad0 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80039de:	4b3f      	ldr	r3, [pc, #252]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	4a3e      	ldr	r2, [pc, #248]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 80039e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ea:	4b3c      	ldr	r3, [pc, #240]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f2:	623b      	str	r3, [r7, #32]
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	4b39      	ldr	r3, [pc, #228]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	4a38      	ldr	r2, [pc, #224]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 80039fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a02:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4b33      	ldr	r3, [pc, #204]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	4a32      	ldr	r2, [pc, #200]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1a:	4b30      	ldr	r3, [pc, #192]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a26:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a32:	4b2a      	ldr	r3, [pc, #168]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a3e:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4a26      	ldr	r2, [pc, #152]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a4a:	4b24      	ldr	r3, [pc, #144]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a56:	4b21      	ldr	r3, [pc, #132]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	4a20      	ldr	r2, [pc, #128]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a62:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <HAL_ETH_MspInit+0x120>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003a6e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a80:	230b      	movs	r3, #11
 8003a82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4815      	ldr	r0, [pc, #84]	@ (8003ae0 <HAL_ETH_MspInit+0x124>)
 8003a8c:	f003 fbca 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003a90:	2332      	movs	r3, #50	@ 0x32
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003aa0:	230b      	movs	r3, #11
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	480e      	ldr	r0, [pc, #56]	@ (8003ae4 <HAL_ETH_MspInit+0x128>)
 8003aac:	f003 fbba 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ab0:	2386      	movs	r3, #134	@ 0x86
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ac0:	230b      	movs	r3, #11
 8003ac2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4807      	ldr	r0, [pc, #28]	@ (8003ae8 <HAL_ETH_MspInit+0x12c>)
 8003acc:	f003 fbaa 	bl	8007224 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003ad0:	bf00      	nop
 8003ad2:	3738      	adds	r7, #56	@ 0x38
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40028000 	.word	0x40028000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40021800 	.word	0x40021800
 8003ae4:	40020800 	.word	0x40020800
 8003ae8:	40020000 	.word	0x40020000

08003aec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0ac      	sub	sp, #176	@ 0xb0
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b04:	f107 0318 	add.w	r3, r7, #24
 8003b08:	2284      	movs	r2, #132	@ 0x84
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f018 fa8b 	bl	801c028 <memset>
  if(hi2c->Instance==I2C1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a44      	ldr	r2, [pc, #272]	@ (8003c28 <HAL_I2C_MspInit+0x13c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d13d      	bne.n	8003b98 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003b1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b26:	f107 0318 	add.w	r3, r7, #24
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f007 f8b0 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003b36:	f7ff fdb5 	bl	80036a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b46:	4b39      	ldr	r3, [pc, #228]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003b52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b5a:	2312      	movs	r3, #18
 8003b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b76:	4619      	mov	r1, r3
 8003b78:	482d      	ldr	r0, [pc, #180]	@ (8003c30 <HAL_I2C_MspInit+0x144>)
 8003b7a:	f003 fb53 	bl	8007224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	4a2a      	ldr	r2, [pc, #168]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003b84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8a:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003b96:	e042      	b.n	8003c1e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	@ (8003c34 <HAL_I2C_MspInit+0x148>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d13d      	bne.n	8003c1e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ba6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bae:	f107 0318 	add.w	r3, r7, #24
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f007 f86c 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003bbe:	f7ff fd71 	bl	80036a4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	4a19      	ldr	r2, [pc, #100]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bce:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003bda:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003be2:	2312      	movs	r3, #18
 8003be4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003bfa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003bfe:	4619      	mov	r1, r3
 8003c00:	480d      	ldr	r0, [pc, #52]	@ (8003c38 <HAL_I2C_MspInit+0x14c>)
 8003c02:	f003 fb0f 	bl	8007224 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c06:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	4a08      	ldr	r2, [pc, #32]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003c0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c12:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <HAL_I2C_MspInit+0x140>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
}
 8003c1e:	bf00      	nop
 8003c20:	37b0      	adds	r7, #176	@ 0xb0
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40005400 	.word	0x40005400
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40020400 	.word	0x40020400
 8003c34:	40005c00 	.word	0x40005c00
 8003c38:	40021c00 	.word	0x40021c00

08003c3c <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08e      	sub	sp, #56	@ 0x38
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a55      	ldr	r2, [pc, #340]	@ (8003db0 <HAL_LTDC_MspInit+0x174>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	f040 80a3 	bne.w	8003da6 <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003c60:	4b54      	ldr	r3, [pc, #336]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	4a53      	ldr	r2, [pc, #332]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c6c:	4b51      	ldr	r3, [pc, #324]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c74:	623b      	str	r3, [r7, #32]
 8003c76:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c78:	4b4e      	ldr	r3, [pc, #312]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c7e:	f043 0310 	orr.w	r3, r3, #16
 8003c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c84:	4b4b      	ldr	r3, [pc, #300]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003c90:	4b48      	ldr	r3, [pc, #288]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	4a47      	ldr	r2, [pc, #284]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9c:	4b45      	ldr	r3, [pc, #276]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003ca8:	4b42      	ldr	r3, [pc, #264]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	4a41      	ldr	r2, [pc, #260]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ccc:	4b39      	ldr	r3, [pc, #228]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cd8:	4b36      	ldr	r3, [pc, #216]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	4a35      	ldr	r2, [pc, #212]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce4:	4b33      	ldr	r3, [pc, #204]	@ (8003db4 <HAL_LTDC_MspInit+0x178>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d00:	230e      	movs	r3, #14
 8003d02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d08:	4619      	mov	r1, r3
 8003d0a:	482b      	ldr	r0, [pc, #172]	@ (8003db8 <HAL_LTDC_MspInit+0x17c>)
 8003d0c:	f003 fa8a 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003d10:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d22:	230e      	movs	r3, #14
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4823      	ldr	r0, [pc, #140]	@ (8003dbc <HAL_LTDC_MspInit+0x180>)
 8003d2e:	f003 fa79 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003d32:	23f7      	movs	r3, #247	@ 0xf7
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	2302      	movs	r3, #2
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d42:	230e      	movs	r3, #14
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	481c      	ldr	r0, [pc, #112]	@ (8003dc0 <HAL_LTDC_MspInit+0x184>)
 8003d4e:	f003 fa69 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d60:	2300      	movs	r3, #0
 8003d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003d64:	2309      	movs	r3, #9
 8003d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4815      	ldr	r0, [pc, #84]	@ (8003dc4 <HAL_LTDC_MspInit+0x188>)
 8003d70:	f003 fa58 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003d74:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d82:	2300      	movs	r3, #0
 8003d84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d86:	230e      	movs	r3, #14
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d8e:	4619      	mov	r1, r3
 8003d90:	480d      	ldr	r0, [pc, #52]	@ (8003dc8 <HAL_LTDC_MspInit+0x18c>)
 8003d92:	f003 fa47 	bl	8007224 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2105      	movs	r1, #5
 8003d9a:	2058      	movs	r0, #88	@ 0x58
 8003d9c:	f001 fefe 	bl	8005b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003da0:	2058      	movs	r0, #88	@ 0x58
 8003da2:	f001 ff17 	bl	8005bd4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003da6:	bf00      	nop
 8003da8:	3738      	adds	r7, #56	@ 0x38
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40016800 	.word	0x40016800
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40022400 	.word	0x40022400
 8003dc0:	40022800 	.word	0x40022800
 8003dc4:	40021800 	.word	0x40021800
 8003dc8:	40022000 	.word	0x40022000

08003dcc <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08c      	sub	sp, #48	@ 0x30
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd4:	f107 031c 	add.w	r3, r7, #28
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ed8 <HAL_QSPI_MspInit+0x10c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d170      	bne.n	8003ed0 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003dee:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	4a3a      	ldr	r2, [pc, #232]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	6393      	str	r3, [r2, #56]	@ 0x38
 8003dfa:	4b38      	ldr	r3, [pc, #224]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e06:	4b35      	ldr	r3, [pc, #212]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	4a34      	ldr	r2, [pc, #208]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e0c:	f043 0310 	orr.w	r3, r3, #16
 8003e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e12:	4b32      	ldr	r3, [pc, #200]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	4a2e      	ldr	r2, [pc, #184]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e36:	4b29      	ldr	r3, [pc, #164]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	4a28      	ldr	r2, [pc, #160]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e3c:	f043 0308 	orr.w	r3, r3, #8
 8003e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e42:	4b26      	ldr	r3, [pc, #152]	@ (8003edc <HAL_QSPI_MspInit+0x110>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003e4e:	2304      	movs	r3, #4
 8003e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e52:	2302      	movs	r3, #2
 8003e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e5e:	2309      	movs	r3, #9
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003e62:	f107 031c 	add.w	r3, r7, #28
 8003e66:	4619      	mov	r1, r3
 8003e68:	481d      	ldr	r0, [pc, #116]	@ (8003ee0 <HAL_QSPI_MspInit+0x114>)
 8003e6a:	f003 f9db 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003e6e:	2340      	movs	r3, #64	@ 0x40
 8003e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e72:	2302      	movs	r3, #2
 8003e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003e7e:	230a      	movs	r3, #10
 8003e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003e82:	f107 031c 	add.w	r3, r7, #28
 8003e86:	4619      	mov	r1, r3
 8003e88:	4816      	ldr	r0, [pc, #88]	@ (8003ee4 <HAL_QSPI_MspInit+0x118>)
 8003e8a:	f003 f9cb 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e8e:	2304      	movs	r3, #4
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e92:	2302      	movs	r3, #2
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e9e:	2309      	movs	r3, #9
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea2:	f107 031c 	add.w	r3, r7, #28
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	480e      	ldr	r0, [pc, #56]	@ (8003ee4 <HAL_QSPI_MspInit+0x118>)
 8003eaa:	f003 f9bb 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003eae:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003ec0:	2309      	movs	r3, #9
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ec4:	f107 031c 	add.w	r3, r7, #28
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4807      	ldr	r0, [pc, #28]	@ (8003ee8 <HAL_QSPI_MspInit+0x11c>)
 8003ecc:	f003 f9aa 	bl	8007224 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003ed0:	bf00      	nop
 8003ed2:	3730      	adds	r7, #48	@ 0x30
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	a0001000 	.word	0xa0001000
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40020400 	.word	0x40020400
 8003ee8:	40020c00 	.word	0x40020c00

08003eec <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b0a4      	sub	sp, #144	@ 0x90
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	2284      	movs	r2, #132	@ 0x84
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f018 f893 	bl	801c028 <memset>
  if(hrtc->Instance==RTC)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <HAL_RTC_MspInit+0x54>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d114      	bne.n	8003f36 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f006 feb8 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003f26:	f7ff fbbd 	bl	80036a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_RTC_MspInit+0x58>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2e:	4a05      	ldr	r2, [pc, #20]	@ (8003f44 <HAL_RTC_MspInit+0x58>)
 8003f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f34:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003f36:	bf00      	nop
 8003f38:	3790      	adds	r7, #144	@ 0x90
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40002800 	.word	0x40002800
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a65      	ldr	r2, [pc, #404]	@ (80040fc <HAL_SD_MspInit+0x1b4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	f040 80c3 	bne.w	80040f2 <HAL_SD_MspInit+0x1aa>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003f6c:	4b64      	ldr	r3, [pc, #400]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f70:	4a63      	ldr	r2, [pc, #396]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003f72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f76:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f78:	4b61      	ldr	r3, [pc, #388]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f84:	4b5e      	ldr	r3, [pc, #376]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	4a5d      	ldr	r2, [pc, #372]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003f8a:	f043 0304 	orr.w	r3, r3, #4
 8003f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f90:	4b5b      	ldr	r3, [pc, #364]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f9c:	4b58      	ldr	r3, [pc, #352]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	4a57      	ldr	r2, [pc, #348]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003fa2:	f043 0308 	orr.w	r3, r3, #8
 8003fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa8:	4b55      	ldr	r3, [pc, #340]	@ (8004100 <HAL_SD_MspInit+0x1b8>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003fb4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003fb8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fca:	f107 0314 	add.w	r3, r7, #20
 8003fce:	4619      	mov	r1, r3
 8003fd0:	484c      	ldr	r0, [pc, #304]	@ (8004104 <HAL_SD_MspInit+0x1bc>)
 8003fd2:	f003 f927 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003fea:	f107 0314 	add.w	r3, r7, #20
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4845      	ldr	r0, [pc, #276]	@ (8004108 <HAL_SD_MspInit+0x1c0>)
 8003ff2:	f003 f917 	bl	8007224 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003ff6:	4b45      	ldr	r3, [pc, #276]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8003ff8:	4a45      	ldr	r2, [pc, #276]	@ (8004110 <HAL_SD_MspInit+0x1c8>)
 8003ffa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ffc:	4b43      	ldr	r3, [pc, #268]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8003ffe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004002:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004004:	4b41      	ldr	r3, [pc, #260]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800400a:	4b40      	ldr	r3, [pc, #256]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 800400c:	2200      	movs	r2, #0
 800400e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004010:	4b3e      	ldr	r3, [pc, #248]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004016:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004018:	4b3c      	ldr	r3, [pc, #240]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 800401a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800401e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004020:	4b3a      	ldr	r3, [pc, #232]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004022:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004026:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8004028:	4b38      	ldr	r3, [pc, #224]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 800402a:	2220      	movs	r2, #32
 800402c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800402e:	4b37      	ldr	r3, [pc, #220]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004030:	2200      	movs	r2, #0
 8004032:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004034:	4b35      	ldr	r3, [pc, #212]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004036:	2204      	movs	r2, #4
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800403a:	4b34      	ldr	r3, [pc, #208]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 800403c:	2203      	movs	r2, #3
 800403e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004040:	4b32      	ldr	r3, [pc, #200]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004042:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004046:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004048:	4b30      	ldr	r3, [pc, #192]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 800404a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8004050:	482e      	ldr	r0, [pc, #184]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004052:	f001 ff39 	bl	8005ec8 <HAL_DMA_Init>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 800405c:	f7ff fb22 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a2a      	ldr	r2, [pc, #168]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004064:	641a      	str	r2, [r3, #64]	@ 0x40
 8004066:	4a29      	ldr	r2, [pc, #164]	@ (800410c <HAL_SD_MspInit+0x1c4>)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800406c:	4b29      	ldr	r3, [pc, #164]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 800406e:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <HAL_SD_MspInit+0x1d0>)
 8004070:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004072:	4b28      	ldr	r3, [pc, #160]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 8004074:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004078:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800407a:	4b26      	ldr	r3, [pc, #152]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 800407c:	2240      	movs	r2, #64	@ 0x40
 800407e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004080:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 8004082:	2200      	movs	r2, #0
 8004084:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004086:	4b23      	ldr	r3, [pc, #140]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 8004088:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800408c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800408e:	4b21      	ldr	r3, [pc, #132]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 8004090:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004094:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004096:	4b1f      	ldr	r3, [pc, #124]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 8004098:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800409c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800409e:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040a0:	2220      	movs	r2, #32
 80040a2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80040aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040ac:	2204      	movs	r2, #4
 80040ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80040b0:	4b18      	ldr	r3, [pc, #96]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040b2:	2203      	movs	r2, #3
 80040b4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80040b6:	4b17      	ldr	r3, [pc, #92]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80040bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80040c6:	4813      	ldr	r0, [pc, #76]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040c8:	f001 fefe 	bl	8005ec8 <HAL_DMA_Init>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80040d2:	f7ff fae7 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004114 <HAL_SD_MspInit+0x1cc>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80040e2:	2200      	movs	r2, #0
 80040e4:	2105      	movs	r1, #5
 80040e6:	2031      	movs	r0, #49	@ 0x31
 80040e8:	f001 fd58 	bl	8005b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80040ec:	2031      	movs	r0, #49	@ 0x31
 80040ee:	f001 fd71 	bl	8005bd4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80040f2:	bf00      	nop
 80040f4:	3728      	adds	r7, #40	@ 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40023800 	.word	0x40023800
 8004104:	40020800 	.word	0x40020800
 8004108:	40020c00 	.word	0x40020c00
 800410c:	20001500 	.word	0x20001500
 8004110:	40026458 	.word	0x40026458
 8004114:	20001560 	.word	0x20001560
 8004118:	400264a0 	.word	0x400264a0

0800411c <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b0aa      	sub	sp, #168	@ 0xa8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004124:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004134:	f107 0310 	add.w	r3, r7, #16
 8004138:	2284      	movs	r2, #132	@ 0x84
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f017 ff73 	bl	801c028 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800414a:	d143      	bne.n	80041d4 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 800414c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004150:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004152:	2364      	movs	r3, #100	@ 0x64
 8004154:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004156:	2302      	movs	r3, #2
 8004158:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800415a:	2302      	movs	r3, #2
 800415c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800415e:	2302      	movs	r3, #2
 8004160:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004162:	2301      	movs	r3, #1
 8004164:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004166:	f107 0310 	add.w	r3, r7, #16
 800416a:	4618      	mov	r0, r3
 800416c:	f006 fd90 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004176:	f7ff fa95 	bl	80036a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800417a:	4b18      	ldr	r3, [pc, #96]	@ (80041dc <HAL_SPDIFRX_MspInit+0xc0>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	4a17      	ldr	r2, [pc, #92]	@ (80041dc <HAL_SPDIFRX_MspInit+0xc0>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004184:	6413      	str	r3, [r2, #64]	@ 0x40
 8004186:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <HAL_SPDIFRX_MspInit+0xc0>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004192:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <HAL_SPDIFRX_MspInit+0xc0>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004196:	4a11      	ldr	r2, [pc, #68]	@ (80041dc <HAL_SPDIFRX_MspInit+0xc0>)
 8004198:	f043 0308 	orr.w	r3, r3, #8
 800419c:	6313      	str	r3, [r2, #48]	@ 0x30
 800419e:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <HAL_SPDIFRX_MspInit+0xc0>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80041aa:	2380      	movs	r3, #128	@ 0x80
 80041ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b0:	2302      	movs	r3, #2
 80041b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80041c2:	2308      	movs	r3, #8
 80041c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80041c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80041cc:	4619      	mov	r1, r3
 80041ce:	4804      	ldr	r0, [pc, #16]	@ (80041e0 <HAL_SPDIFRX_MspInit+0xc4>)
 80041d0:	f003 f828 	bl	8007224 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 80041d4:	bf00      	nop
 80041d6:	37a8      	adds	r7, #168	@ 0xa8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40020c00 	.word	0x40020c00

080041e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	@ 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a25      	ldr	r2, [pc, #148]	@ (8004298 <HAL_SPI_MspInit+0xb4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d144      	bne.n	8004290 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004206:	4b25      	ldr	r3, [pc, #148]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	4a24      	ldr	r2, [pc, #144]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 800420c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004210:	6413      	str	r3, [r2, #64]	@ 0x40
 8004212:	4b22      	ldr	r3, [pc, #136]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800421e:	4b1f      	ldr	r3, [pc, #124]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	4a1e      	ldr	r2, [pc, #120]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004228:	6313      	str	r3, [r2, #48]	@ 0x30
 800422a:	4b1c      	ldr	r3, [pc, #112]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004236:	4b19      	ldr	r3, [pc, #100]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	4a18      	ldr	r2, [pc, #96]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 800423c:	f043 0302 	orr.w	r3, r3, #2
 8004240:	6313      	str	r3, [r2, #48]	@ 0x30
 8004242:	4b16      	ldr	r3, [pc, #88]	@ (800429c <HAL_SPI_MspInit+0xb8>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800424e:	2302      	movs	r3, #2
 8004250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004252:	2302      	movs	r3, #2
 8004254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800425e:	2305      	movs	r3, #5
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	4619      	mov	r1, r3
 8004268:	480d      	ldr	r0, [pc, #52]	@ (80042a0 <HAL_SPI_MspInit+0xbc>)
 800426a:	f002 ffdb 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800426e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004274:	2302      	movs	r3, #2
 8004276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427c:	2300      	movs	r3, #0
 800427e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004280:	2305      	movs	r3, #5
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4619      	mov	r1, r3
 800428a:	4806      	ldr	r0, [pc, #24]	@ (80042a4 <HAL_SPI_MspInit+0xc0>)
 800428c:	f002 ffca 	bl	8007224 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004290:	bf00      	nop
 8004292:	3728      	adds	r7, #40	@ 0x28
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40003800 	.word	0x40003800
 800429c:	40023800 	.word	0x40023800
 80042a0:	40022000 	.word	0x40022000
 80042a4:	40020400 	.word	0x40020400

080042a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	@ 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004370 <HAL_TIM_Base_MspInit+0xc8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10c      	bne.n	80042d4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	4a2d      	ldr	r2, [pc, #180]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042d2:	e046      	b.n	8004362 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042dc:	d10c      	bne.n	80042f8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042de:	4b25      	ldr	r3, [pc, #148]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	4a24      	ldr	r2, [pc, #144]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ea:	4b22      	ldr	r3, [pc, #136]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	69bb      	ldr	r3, [r7, #24]
}
 80042f6:	e034      	b.n	8004362 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004378 <HAL_TIM_Base_MspInit+0xd0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10c      	bne.n	800431c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004302:	4b1c      	ldr	r3, [pc, #112]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	4a1b      	ldr	r2, [pc, #108]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	6413      	str	r3, [r2, #64]	@ 0x40
 800430e:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	697b      	ldr	r3, [r7, #20]
}
 800431a:	e022      	b.n	8004362 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a16      	ldr	r2, [pc, #88]	@ (800437c <HAL_TIM_Base_MspInit+0xd4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10c      	bne.n	8004340 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004326:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	4a12      	ldr	r2, [pc, #72]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 800432c:	f043 0308 	orr.w	r3, r3, #8
 8004330:	6413      	str	r3, [r2, #64]	@ 0x40
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	693b      	ldr	r3, [r7, #16]
}
 800433e:	e010      	b.n	8004362 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0e      	ldr	r2, [pc, #56]	@ (8004380 <HAL_TIM_Base_MspInit+0xd8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10b      	bne.n	8004362 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800434a:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	4a09      	ldr	r2, [pc, #36]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	6453      	str	r3, [r2, #68]	@ 0x44
 8004356:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <HAL_TIM_Base_MspInit+0xcc>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
}
 8004362:	bf00      	nop
 8004364:	3724      	adds	r7, #36	@ 0x24
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40023800 	.word	0x40023800
 8004378:	40000400 	.word	0x40000400
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40010400 	.word	0x40010400

08004384 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_TIM_PWM_MspInit+0x38>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10b      	bne.n	80043ae <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004396:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800439c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a2:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40001800 	.word	0x40001800
 80043c0:	40023800 	.word	0x40023800

080043c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08c      	sub	sp, #48	@ 0x30
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043cc:	f107 031c 	add.w	r3, r7, #28
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a56      	ldr	r2, [pc, #344]	@ (800453c <HAL_TIM_MspPostInit+0x178>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d11d      	bne.n	8004422 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e6:	4b56      	ldr	r3, [pc, #344]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ea:	4a55      	ldr	r2, [pc, #340]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f2:	4b53      	ldr	r3, [pc, #332]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80043fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440c:	2300      	movs	r3, #0
 800440e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004410:	2301      	movs	r3, #1
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004414:	f107 031c 	add.w	r3, r7, #28
 8004418:	4619      	mov	r1, r3
 800441a:	484a      	ldr	r0, [pc, #296]	@ (8004544 <HAL_TIM_MspPostInit+0x180>)
 800441c:	f002 ff02 	bl	8007224 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004420:	e087      	b.n	8004532 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442a:	d11d      	bne.n	8004468 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800442c:	4b44      	ldr	r3, [pc, #272]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	4a43      	ldr	r2, [pc, #268]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6313      	str	r3, [r2, #48]	@ 0x30
 8004438:	4b41      	ldr	r3, [pc, #260]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	2302      	movs	r3, #2
 800444c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	2300      	movs	r3, #0
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004456:	2301      	movs	r3, #1
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800445a:	f107 031c 	add.w	r3, r7, #28
 800445e:	4619      	mov	r1, r3
 8004460:	4838      	ldr	r0, [pc, #224]	@ (8004544 <HAL_TIM_MspPostInit+0x180>)
 8004462:	f002 fedf 	bl	8007224 <HAL_GPIO_Init>
}
 8004466:	e064      	b.n	8004532 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a36      	ldr	r2, [pc, #216]	@ (8004548 <HAL_TIM_MspPostInit+0x184>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d11c      	bne.n	80044ac <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004472:	4b33      	ldr	r3, [pc, #204]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	4a32      	ldr	r2, [pc, #200]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 8004478:	f043 0302 	orr.w	r3, r3, #2
 800447c:	6313      	str	r3, [r2, #48]	@ 0x30
 800447e:	4b30      	ldr	r3, [pc, #192]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800448a:	2310      	movs	r3, #16
 800448c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448e:	2302      	movs	r3, #2
 8004490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004496:	2300      	movs	r3, #0
 8004498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800449a:	2302      	movs	r3, #2
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800449e:	f107 031c 	add.w	r3, r7, #28
 80044a2:	4619      	mov	r1, r3
 80044a4:	4829      	ldr	r0, [pc, #164]	@ (800454c <HAL_TIM_MspPostInit+0x188>)
 80044a6:	f002 febd 	bl	8007224 <HAL_GPIO_Init>
}
 80044aa:	e042      	b.n	8004532 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a27      	ldr	r2, [pc, #156]	@ (8004550 <HAL_TIM_MspPostInit+0x18c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d11c      	bne.n	80044f0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80044b6:	4b22      	ldr	r3, [pc, #136]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80044ce:	2301      	movs	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d2:	2302      	movs	r3, #2
 80044d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80044de:	2302      	movs	r3, #2
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80044e2:	f107 031c 	add.w	r3, r7, #28
 80044e6:	4619      	mov	r1, r3
 80044e8:	481a      	ldr	r0, [pc, #104]	@ (8004554 <HAL_TIM_MspPostInit+0x190>)
 80044ea:	f002 fe9b 	bl	8007224 <HAL_GPIO_Init>
}
 80044ee:	e020      	b.n	8004532 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a18      	ldr	r2, [pc, #96]	@ (8004558 <HAL_TIM_MspPostInit+0x194>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d11b      	bne.n	8004532 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044fa:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 8004500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004504:	6313      	str	r3, [r2, #48]	@ 0x30
 8004506:	4b0e      	ldr	r3, [pc, #56]	@ (8004540 <HAL_TIM_MspPostInit+0x17c>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004512:	2340      	movs	r3, #64	@ 0x40
 8004514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004516:	2302      	movs	r3, #2
 8004518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451e:	2300      	movs	r3, #0
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004522:	2309      	movs	r3, #9
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	4619      	mov	r1, r3
 800452c:	480b      	ldr	r0, [pc, #44]	@ (800455c <HAL_TIM_MspPostInit+0x198>)
 800452e:	f002 fe79 	bl	8007224 <HAL_GPIO_Init>
}
 8004532:	bf00      	nop
 8004534:	3730      	adds	r7, #48	@ 0x30
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40023800 	.word	0x40023800
 8004544:	40020000 	.word	0x40020000
 8004548:	40000400 	.word	0x40000400
 800454c:	40020400 	.word	0x40020400
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40022000 	.word	0x40022000
 8004558:	40001800 	.word	0x40001800
 800455c:	40021c00 	.word	0x40021c00

08004560 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b0ae      	sub	sp, #184	@ 0xb8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004578:	f107 0320 	add.w	r3, r7, #32
 800457c:	2284      	movs	r2, #132	@ 0x84
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f017 fd51 	bl	801c028 <memset>
  if(huart->Instance==USART1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a53      	ldr	r2, [pc, #332]	@ (80046d8 <HAL_UART_MspInit+0x178>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d15d      	bne.n	800464c <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004590:	2340      	movs	r3, #64	@ 0x40
 8004592:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004594:	2300      	movs	r3, #0
 8004596:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004598:	f107 0320 	add.w	r3, r7, #32
 800459c:	4618      	mov	r0, r3
 800459e:	f006 fb77 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80045a8:	f7ff f87c 	bl	80036a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045ac:	4b4b      	ldr	r3, [pc, #300]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b0:	4a4a      	ldr	r2, [pc, #296]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045b2:	f043 0310 	orr.w	r3, r3, #16
 80045b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80045b8:	4b48      	ldr	r3, [pc, #288]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c4:	4b45      	ldr	r3, [pc, #276]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c8:	4a44      	ldr	r2, [pc, #272]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045ca:	f043 0302 	orr.w	r3, r3, #2
 80045ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d0:	4b42      	ldr	r3, [pc, #264]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045dc:	4b3f      	ldr	r3, [pc, #252]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	4a3e      	ldr	r2, [pc, #248]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80045e8:	4b3c      	ldr	r3, [pc, #240]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fa:	2302      	movs	r3, #2
 80045fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004606:	2300      	movs	r3, #0
 8004608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800460c:	2307      	movs	r3, #7
 800460e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004612:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004616:	4619      	mov	r1, r3
 8004618:	4831      	ldr	r0, [pc, #196]	@ (80046e0 <HAL_UART_MspInit+0x180>)
 800461a:	f002 fe03 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800461e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004626:	2302      	movs	r3, #2
 8004628:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004632:	2300      	movs	r3, #0
 8004634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004638:	2307      	movs	r3, #7
 800463a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800463e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004642:	4619      	mov	r1, r3
 8004644:	4827      	ldr	r0, [pc, #156]	@ (80046e4 <HAL_UART_MspInit+0x184>)
 8004646:	f002 fded 	bl	8007224 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800464a:	e040      	b.n	80046ce <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a25      	ldr	r2, [pc, #148]	@ (80046e8 <HAL_UART_MspInit+0x188>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d13b      	bne.n	80046ce <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004656:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800465a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800465c:	2300      	movs	r3, #0
 800465e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004660:	f107 0320 	add.w	r3, r7, #32
 8004664:	4618      	mov	r0, r3
 8004666:	f006 fb13 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004670:	f7ff f818 	bl	80036a4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004674:	4b19      	ldr	r3, [pc, #100]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 8004676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004678:	4a18      	ldr	r2, [pc, #96]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 800467a:	f043 0320 	orr.w	r3, r3, #32
 800467e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004680:	4b16      	ldr	r3, [pc, #88]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 8004682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800468c:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	4a12      	ldr	r2, [pc, #72]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	6313      	str	r3, [r2, #48]	@ 0x30
 8004698:	4b10      	ldr	r3, [pc, #64]	@ (80046dc <HAL_UART_MspInit+0x17c>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80046a4:	23c0      	movs	r3, #192	@ 0xc0
 80046a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	2302      	movs	r3, #2
 80046ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b6:	2303      	movs	r3, #3
 80046b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80046bc:	2308      	movs	r3, #8
 80046be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4808      	ldr	r0, [pc, #32]	@ (80046ec <HAL_UART_MspInit+0x18c>)
 80046ca:	f002 fdab 	bl	8007224 <HAL_GPIO_Init>
}
 80046ce:	bf00      	nop
 80046d0:	37b8      	adds	r7, #184	@ 0xb8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40011000 	.word	0x40011000
 80046dc:	40023800 	.word	0x40023800
 80046e0:	40020400 	.word	0x40020400
 80046e4:	40020000 	.word	0x40020000
 80046e8:	40011400 	.word	0x40011400
 80046ec:	40020800 	.word	0x40020800

080046f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004704:	4b3a      	ldr	r3, [pc, #232]	@ (80047f0 <HAL_FMC_MspInit+0x100>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d16d      	bne.n	80047e8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800470c:	4b38      	ldr	r3, [pc, #224]	@ (80047f0 <HAL_FMC_MspInit+0x100>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004712:	4b38      	ldr	r3, [pc, #224]	@ (80047f4 <HAL_FMC_MspInit+0x104>)
 8004714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004716:	4a37      	ldr	r2, [pc, #220]	@ (80047f4 <HAL_FMC_MspInit+0x104>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6393      	str	r3, [r2, #56]	@ 0x38
 800471e:	4b35      	ldr	r3, [pc, #212]	@ (80047f4 <HAL_FMC_MspInit+0x104>)
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800472a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800472e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004730:	2302      	movs	r3, #2
 8004732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004738:	2303      	movs	r3, #3
 800473a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800473c:	230c      	movs	r3, #12
 800473e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004740:	1d3b      	adds	r3, r7, #4
 8004742:	4619      	mov	r1, r3
 8004744:	482c      	ldr	r0, [pc, #176]	@ (80047f8 <HAL_FMC_MspInit+0x108>)
 8004746:	f002 fd6d 	bl	8007224 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800474a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800474e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004750:	2302      	movs	r3, #2
 8004752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004758:	2303      	movs	r3, #3
 800475a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800475c:	230c      	movs	r3, #12
 800475e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004760:	1d3b      	adds	r3, r7, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4825      	ldr	r0, [pc, #148]	@ (80047fc <HAL_FMC_MspInit+0x10c>)
 8004766:	f002 fd5d 	bl	8007224 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800476a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800476e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004770:	2302      	movs	r3, #2
 8004772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004778:	2303      	movs	r3, #3
 800477a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800477c:	230c      	movs	r3, #12
 800477e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	4619      	mov	r1, r3
 8004784:	481e      	ldr	r0, [pc, #120]	@ (8004800 <HAL_FMC_MspInit+0x110>)
 8004786:	f002 fd4d 	bl	8007224 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800478a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800478e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004790:	2302      	movs	r3, #2
 8004792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004798:	2303      	movs	r3, #3
 800479a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800479c:	230c      	movs	r3, #12
 800479e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4817      	ldr	r0, [pc, #92]	@ (8004804 <HAL_FMC_MspInit+0x114>)
 80047a6:	f002 fd3d 	bl	8007224 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80047aa:	2328      	movs	r3, #40	@ 0x28
 80047ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ae:	2302      	movs	r3, #2
 80047b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b6:	2303      	movs	r3, #3
 80047b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047ba:	230c      	movs	r3, #12
 80047bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4811      	ldr	r0, [pc, #68]	@ (8004808 <HAL_FMC_MspInit+0x118>)
 80047c4:	f002 fd2e 	bl	8007224 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80047c8:	2308      	movs	r3, #8
 80047ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047cc:	2302      	movs	r3, #2
 80047ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d4:	2303      	movs	r3, #3
 80047d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047d8:	230c      	movs	r3, #12
 80047da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	480a      	ldr	r0, [pc, #40]	@ (800480c <HAL_FMC_MspInit+0x11c>)
 80047e2:	f002 fd1f 	bl	8007224 <HAL_GPIO_Init>
 80047e6:	e000      	b.n	80047ea <HAL_FMC_MspInit+0xfa>
    return;
 80047e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20001ff0 	.word	0x20001ff0
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40021800 	.word	0x40021800
 8004800:	40020c00 	.word	0x40020c00
 8004804:	40021400 	.word	0x40021400
 8004808:	40021c00 	.word	0x40021c00
 800480c:	40020800 	.word	0x40020800

08004810 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004818:	f7ff ff6a 	bl	80046f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	@ 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2b      	ldr	r2, [pc, #172]	@ (80048e0 <HAL_SAI_MspInit+0xbc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d124      	bne.n	8004880 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004836:	4b2b      	ldr	r3, [pc, #172]	@ (80048e4 <HAL_SAI_MspInit+0xc0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800483e:	4b2a      	ldr	r3, [pc, #168]	@ (80048e8 <HAL_SAI_MspInit+0xc4>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	4a29      	ldr	r2, [pc, #164]	@ (80048e8 <HAL_SAI_MspInit+0xc4>)
 8004844:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004848:	6453      	str	r3, [r2, #68]	@ 0x44
 800484a:	4b27      	ldr	r3, [pc, #156]	@ (80048e8 <HAL_SAI_MspInit+0xc4>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004856:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <HAL_SAI_MspInit+0xc0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	4a21      	ldr	r2, [pc, #132]	@ (80048e4 <HAL_SAI_MspInit+0xc0>)
 800485e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004860:	23f0      	movs	r3, #240	@ 0xf0
 8004862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004864:	2302      	movs	r3, #2
 8004866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486c:	2300      	movs	r3, #0
 800486e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004870:	230a      	movs	r3, #10
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004874:	f107 0314 	add.w	r3, r7, #20
 8004878:	4619      	mov	r1, r3
 800487a:	481c      	ldr	r0, [pc, #112]	@ (80048ec <HAL_SAI_MspInit+0xc8>)
 800487c:	f002 fcd2 	bl	8007224 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1a      	ldr	r2, [pc, #104]	@ (80048f0 <HAL_SAI_MspInit+0xcc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d125      	bne.n	80048d6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800488a:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <HAL_SAI_MspInit+0xc0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004892:	4b15      	ldr	r3, [pc, #84]	@ (80048e8 <HAL_SAI_MspInit+0xc4>)
 8004894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004896:	4a14      	ldr	r2, [pc, #80]	@ (80048e8 <HAL_SAI_MspInit+0xc4>)
 8004898:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800489c:	6453      	str	r3, [r2, #68]	@ 0x44
 800489e:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <HAL_SAI_MspInit+0xc4>)
 80048a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	@ (80048e4 <HAL_SAI_MspInit+0xc0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	4a0c      	ldr	r2, [pc, #48]	@ (80048e4 <HAL_SAI_MspInit+0xc0>)
 80048b2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80048b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ba:	2302      	movs	r3, #2
 80048bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c2:	2300      	movs	r3, #0
 80048c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80048c6:	230a      	movs	r3, #10
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80048ca:	f107 0314 	add.w	r3, r7, #20
 80048ce:	4619      	mov	r1, r3
 80048d0:	4808      	ldr	r0, [pc, #32]	@ (80048f4 <HAL_SAI_MspInit+0xd0>)
 80048d2:	f002 fca7 	bl	8007224 <HAL_GPIO_Init>

    }
}
 80048d6:	bf00      	nop
 80048d8:	3728      	adds	r7, #40	@ 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40015c04 	.word	0x40015c04
 80048e4:	20001ff4 	.word	0x20001ff4
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40022000 	.word	0x40022000
 80048f0:	40015c24 	.word	0x40015c24
 80048f4:	40021800 	.word	0x40021800

080048f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08e      	sub	sp, #56	@ 0x38
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004908:	4b33      	ldr	r3, [pc, #204]	@ (80049d8 <HAL_InitTick+0xe0>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	4a32      	ldr	r2, [pc, #200]	@ (80049d8 <HAL_InitTick+0xe0>)
 800490e:	f043 0310 	orr.w	r3, r3, #16
 8004912:	6413      	str	r3, [r2, #64]	@ 0x40
 8004914:	4b30      	ldr	r3, [pc, #192]	@ (80049d8 <HAL_InitTick+0xe0>)
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004920:	f107 0210 	add.w	r2, r7, #16
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f006 f97e 	bl	800ac2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800493a:	f006 f94f 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 800493e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004940:	e004      	b.n	800494c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004942:	f006 f94b 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 8004946:	4603      	mov	r3, r0
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	4a23      	ldr	r2, [pc, #140]	@ (80049dc <HAL_InitTick+0xe4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	0c9b      	lsrs	r3, r3, #18
 8004956:	3b01      	subs	r3, #1
 8004958:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800495a:	4b21      	ldr	r3, [pc, #132]	@ (80049e0 <HAL_InitTick+0xe8>)
 800495c:	4a21      	ldr	r2, [pc, #132]	@ (80049e4 <HAL_InitTick+0xec>)
 800495e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004960:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_InitTick+0xe8>)
 8004962:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004966:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <HAL_InitTick+0xe8>)
 800496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800496e:	4b1c      	ldr	r3, [pc, #112]	@ (80049e0 <HAL_InitTick+0xe8>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004974:	4b1a      	ldr	r3, [pc, #104]	@ (80049e0 <HAL_InitTick+0xe8>)
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800497a:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <HAL_InitTick+0xe8>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004980:	4817      	ldr	r0, [pc, #92]	@ (80049e0 <HAL_InitTick+0xe8>)
 8004982:	f009 fccc 	bl	800e31e <HAL_TIM_Base_Init>
 8004986:	4603      	mov	r3, r0
 8004988:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800498c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11b      	bne.n	80049cc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004994:	4812      	ldr	r0, [pc, #72]	@ (80049e0 <HAL_InitTick+0xe8>)
 8004996:	f009 fd19 	bl	800e3cc <HAL_TIM_Base_Start_IT>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80049a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d111      	bne.n	80049cc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049a8:	2036      	movs	r0, #54	@ 0x36
 80049aa:	f001 f913 	bl	8005bd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b0f      	cmp	r3, #15
 80049b2:	d808      	bhi.n	80049c6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80049b4:	2200      	movs	r2, #0
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	2036      	movs	r0, #54	@ 0x36
 80049ba:	f001 f8ef 	bl	8005b9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049be:	4a0a      	ldr	r2, [pc, #40]	@ (80049e8 <HAL_InitTick+0xf0>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e002      	b.n	80049cc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80049cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3738      	adds	r7, #56	@ 0x38
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40023800 	.word	0x40023800
 80049dc:	431bde83 	.word	0x431bde83
 80049e0:	20001ff8 	.word	0x20001ff8
 80049e4:	40001000 	.word	0x40001000
 80049e8:	20000068 	.word	0x20000068

080049ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <NMI_Handler+0x4>

080049f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <HardFault_Handler+0x4>

080049fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a00:	bf00      	nop
 8004a02:	e7fd      	b.n	8004a00 <MemManage_Handler+0x4>

08004a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <BusFault_Handler+0x4>

08004a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <UsageFault_Handler+0x4>

08004a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004a28:	4802      	ldr	r0, [pc, #8]	@ (8004a34 <SDMMC1_IRQHandler+0x10>)
 8004a2a:	f008 fa91 	bl	800cf50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	2000147c 	.word	0x2000147c

08004a38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a3c:	4802      	ldr	r0, [pc, #8]	@ (8004a48 <TIM6_DAC_IRQHandler+0x10>)
 8004a3e:	f009 fd94 	bl	800e56a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20001ff8 	.word	0x20001ff8

08004a4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004a50:	4802      	ldr	r0, [pc, #8]	@ (8004a5c <DMA2_Stream3_IRQHandler+0x10>)
 8004a52:	f001 fc37 	bl	80062c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20001500 	.word	0x20001500

08004a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004a64:	4802      	ldr	r0, [pc, #8]	@ (8004a70 <OTG_FS_IRQHandler+0x10>)
 8004a66:	f003 f89b 	bl	8007ba0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000aa40 	.word	0x2000aa40

08004a74 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004a78:	4802      	ldr	r0, [pc, #8]	@ (8004a84 <DMA2_Stream6_IRQHandler+0x10>)
 8004a7a:	f001 fc23 	bl	80062c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20001560 	.word	0x20001560

08004a88 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004a8c:	4802      	ldr	r0, [pc, #8]	@ (8004a98 <LTDC_IRQHandler+0x10>)
 8004a8e:	f005 f8ab 	bl	8009be8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20001260 	.word	0x20001260

08004a9c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004aa0:	4802      	ldr	r0, [pc, #8]	@ (8004aac <DMA2D_IRQHandler+0x10>)
 8004aa2:	f001 fecf 	bl	8006844 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200010c8 	.word	0x200010c8

08004ab0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004ab4:	4802      	ldr	r0, [pc, #8]	@ (8004ac0 <DMA2_Stream1_IRQHandler+0x10>)
 8004ab6:	f001 fc05 	bl	80062c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004aba:	bf00      	nop
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20001948 	.word	0x20001948

08004ac4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <USART6_IRQHandler+0x2c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d106      	bne.n	8004ae4 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8004ad6:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <USART6_IRQHandler+0x2c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2210      	movs	r2, #16
 8004adc:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004ade:	4804      	ldr	r0, [pc, #16]	@ (8004af0 <USART6_IRQHandler+0x2c>)
 8004ae0:	f000 fbfe 	bl	80052e0 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004ae4:	4802      	ldr	r0, [pc, #8]	@ (8004af0 <USART6_IRQHandler+0x2c>)
 8004ae6:	f00a ff8b 	bl	800fa00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200018c0 	.word	0x200018c0

08004af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004afc:	4a14      	ldr	r2, [pc, #80]	@ (8004b50 <_sbrk+0x5c>)
 8004afe:	4b15      	ldr	r3, [pc, #84]	@ (8004b54 <_sbrk+0x60>)
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b08:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <_sbrk+0x64>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b10:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <_sbrk+0x64>)
 8004b12:	4a12      	ldr	r2, [pc, #72]	@ (8004b5c <_sbrk+0x68>)
 8004b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b16:	4b10      	ldr	r3, [pc, #64]	@ (8004b58 <_sbrk+0x64>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d207      	bcs.n	8004b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b24:	f017 fac2 	bl	801c0ac <__errno>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	220c      	movs	r2, #12
 8004b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b32:	e009      	b.n	8004b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b34:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <_sbrk+0x64>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b3a:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <_sbrk+0x64>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	4a05      	ldr	r2, [pc, #20]	@ (8004b58 <_sbrk+0x64>)
 8004b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20050000 	.word	0x20050000
 8004b54:	00000800 	.word	0x00000800
 8004b58:	20002044 	.word	0x20002044
 8004b5c:	2000af68 	.word	0x2000af68

08004b60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <SystemInit+0x20>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6a:	4a05      	ldr	r2, [pc, #20]	@ (8004b80 <SystemInit+0x20>)
 8004b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004b88:	f000 f803 	bl	8004b92 <TIME_Platform_GetCurrentMs>
 8004b8c:	4603      	mov	r3, r0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8004b96:	f000 fc81 	bl	800549c <HAL_GetTick>
 8004b9a:	4603      	mov	r3, r0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <LOGGER_Connect+0x16>
 8004bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb4:	e016      	b.n	8004be4 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8004bb6:	223f      	movs	r2, #63	@ 0x3f
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	480c      	ldr	r0, [pc, #48]	@ (8004bec <LOGGER_Connect+0x4c>)
 8004bbc:	f017 fa3c 	bl	801c038 <strncpy>
    current_config.server_port = port;
 8004bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf0 <LOGGER_Connect+0x50>)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8a5 	bl	8004d18 <LOGGER_Platform_Connect>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <LOGGER_Connect+0x40>
        logger_connected = true;
 8004bda:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <LOGGER_Connect+0x54>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000023 	.word	0x20000023
 8004bf0:	20000020 	.word	0x20000020
 8004bf4:	20002048 	.word	0x20002048

08004bf8 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 8004c00:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <LOGGER_Send+0x5c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	f083 0301 	eor.w	r3, r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <LOGGER_Send+0x1c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <LOGGER_Send+0x22>
 8004c14:	f04f 33ff 	mov.w	r3, #4294967295
 8004c18:	e017      	b.n	8004c4a <LOGGER_Send+0x52>
    
    // Network 모듈을 통해 로그 전송 (SD카드 또는 소켓)
    if (Network_IsConnected()) {
 8004c1a:	f7fc f8f9 	bl	8000e10 <Network_IsConnected>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <LOGGER_Send+0x4a>
        int result = Network_SendBinary(message, strlen(message) + 1); // null terminator 포함
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7fb fafd 	bl	8000224 <strlen>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fc f8a3 	bl	8000d7c <Network_SendBinary>
 8004c36:	60f8      	str	r0, [r7, #12]
        if (result == NETWORK_OK) {
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <LOGGER_Send+0x4a>
            return LOGGER_STATUS_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e003      	b.n	8004c4a <LOGGER_Send+0x52>
        }
    }
    
    // Network 모듈 사용 실패 시 기존 플랫폼 방식 사용
    return LOGGER_Platform_Send(message);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f874 	bl	8004d30 <LOGGER_Platform_Send>
 8004c48:	4603      	mov	r3, r0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20002048 	.word	0x20002048

08004c58 <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8004c58:	b40e      	push	{r1, r2, r3}
 8004c5a:	b590      	push	{r4, r7, lr}
 8004c5c:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4602      	mov	r2, r0
 8004c64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c68:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004c6c:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 8004c6e:	4b27      	ldr	r3, [pc, #156]	@ (8004d0c <LOGGER_SendFormatted+0xb4>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004c76:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d33c      	bcc.n	8004cfa <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8004c80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c84:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004c88:	4a21      	ldr	r2, [pc, #132]	@ (8004d10 <LOGGER_SendFormatted+0xb8>)
 8004c8a:	461c      	mov	r4, r3
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8004c94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c98:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ca2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004caa:	f107 001c 	add.w	r0, r7, #28
 8004cae:	4a19      	ldr	r2, [pc, #100]	@ (8004d14 <LOGGER_SendFormatted+0xbc>)
 8004cb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004cb4:	f017 f924 	bl	801bf00 <sniprintf>
 8004cb8:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8004cbc:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004cc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cc4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004cc8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8004cca:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004cce:	f107 021c 	add.w	r2, r7, #28
 8004cd2:	18d0      	adds	r0, r2, r3
 8004cd4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004cd8:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004cdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ce0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8004cea:	f017 f98f 	bl	801c00c <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 8004cee:	f107 031c 	add.w	r3, r7, #28
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ff80 	bl	8004bf8 <LOGGER_Send>
 8004cf8:	e000      	b.n	8004cfc <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 8004cfa:	bf00      	nop
}
 8004cfc:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004d00:	46bd      	mov	sp, r7
 8004d02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004d06:	b003      	add	sp, #12
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000020 	.word	0x20000020
 8004d10:	0801e964 	.word	0x0801e964
 8004d14:	0801e974 	.word	0x0801e974

08004d18 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <LOGGER_Platform_Send+0x14>
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	e01c      	b.n	8004d7e <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7fb fa6d 	bl	8000224 <strlen>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	dd12      	ble.n	8004d7a <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	480a      	ldr	r0, [pc, #40]	@ (8004d88 <LOGGER_Platform_Send+0x58>)
 8004d60:	f00a fc26 	bl	800f5b0 <HAL_UART_Transmit>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d107      	bne.n	8004d7a <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8004d6a:	2364      	movs	r3, #100	@ 0x64
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	4907      	ldr	r1, [pc, #28]	@ (8004d8c <LOGGER_Platform_Send+0x5c>)
 8004d70:	4805      	ldr	r0, [pc, #20]	@ (8004d88 <LOGGER_Platform_Send+0x58>)
 8004d72:	f00a fc1d 	bl	800f5b0 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e001      	b.n	8004d7e <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8004d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20001838 	.word	0x20001838
 8004d8c:	0801e978 	.word	0x0801e978

08004d90 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d105      	bne.n	8004daa <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8004d9e:	4913      	ldr	r1, [pc, #76]	@ (8004dec <UART_Connect+0x5c>)
 8004da0:	2003      	movs	r0, #3
 8004da2:	f7ff ff59 	bl	8004c58 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e01c      	b.n	8004de4 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	4910      	ldr	r1, [pc, #64]	@ (8004df0 <UART_Connect+0x60>)
 8004dae:	2001      	movs	r0, #1
 8004db0:	f7ff ff52 	bl	8004c58 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8a1 	bl	8004efc <UART_Platform_Connect>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d108      	bne.n	8004dd6 <UART_Connect+0x46>
        uart_connected = true;
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004df4 <UART_Connect+0x64>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	490a      	ldr	r1, [pc, #40]	@ (8004df8 <UART_Connect+0x68>)
 8004dce:	2001      	movs	r0, #1
 8004dd0:	f7ff ff42 	bl	8004c58 <LOGGER_SendFormatted>
 8004dd4:	e005      	b.n	8004de2 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4908      	ldr	r1, [pc, #32]	@ (8004dfc <UART_Connect+0x6c>)
 8004ddc:	2003      	movs	r0, #3
 8004dde:	f7ff ff3b 	bl	8004c58 <LOGGER_SendFormatted>
    }

    return status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	0801e97c 	.word	0x0801e97c
 8004df0:	0801e9a0 	.word	0x0801e9a0
 8004df4:	20002049 	.word	0x20002049
 8004df8:	0801e9b8 	.word	0x0801e9b8
 8004dfc:	0801e9dc 	.word	0x0801e9dc

08004e00 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8004e08:	4b19      	ldr	r3, [pc, #100]	@ (8004e70 <UART_Send+0x70>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	f083 0301 	eor.w	r3, r3, #1
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8004e16:	4917      	ldr	r1, [pc, #92]	@ (8004e74 <UART_Send+0x74>)
 8004e18:	2003      	movs	r0, #3
 8004e1a:	f7ff ff1d 	bl	8004c58 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e022      	b.n	8004e68 <UART_Send+0x68>
    }

    if (data == NULL) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8004e28:	4913      	ldr	r1, [pc, #76]	@ (8004e78 <UART_Send+0x78>)
 8004e2a:	2003      	movs	r0, #3
 8004e2c:	f7ff ff14 	bl	8004c58 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e019      	b.n	8004e68 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4911      	ldr	r1, [pc, #68]	@ (8004e7c <UART_Send+0x7c>)
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f7ff ff0d 	bl	8004c58 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f944 	bl	80050cc <UART_Platform_Send>
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d105      	bne.n	8004e5a <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	490b      	ldr	r1, [pc, #44]	@ (8004e80 <UART_Send+0x80>)
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7ff ff00 	bl	8004c58 <LOGGER_SendFormatted>
 8004e58:	e005      	b.n	8004e66 <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4909      	ldr	r1, [pc, #36]	@ (8004e84 <UART_Send+0x84>)
 8004e60:	2003      	movs	r0, #3
 8004e62:	f7ff fef9 	bl	8004c58 <LOGGER_SendFormatted>
    }

    return status;
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20002049 	.word	0x20002049
 8004e74:	0801ea08 	.word	0x0801ea08
 8004e78:	0801ea2c 	.word	0x0801ea2c
 8004e7c:	0801ea4c 	.word	0x0801ea4c
 8004e80:	0801ea64 	.word	0x0801ea64
 8004e84:	0801ea80 	.word	0x0801ea80

08004e88 <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
    return uart_connected;
 8004e8c:	4b03      	ldr	r3, [pc, #12]	@ (8004e9c <UART_IsConnected+0x14>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	20002049 	.word	0x20002049

08004ea0 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004eaa:	e007      	b.n	8004ebc <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004eac:	4b12      	ldr	r3, [pc, #72]	@ (8004ef8 <flush_rx_buffer+0x58>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <flush_rx_buffer+0x58>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d106      	bne.n	8004ed8 <flush_rx_buffer+0x38>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b63      	cmp	r3, #99	@ 0x63
 8004ece:	dded      	ble.n	8004eac <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004ed0:	e002      	b.n	8004ed8 <flush_rx_buffer+0x38>
        flush_count++;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004ed8:	1cf9      	adds	r1, r7, #3
 8004eda:	2301      	movs	r3, #1
 8004edc:	2201      	movs	r2, #1
 8004ede:	4806      	ldr	r0, [pc, #24]	@ (8004ef8 <flush_rx_buffer+0x58>)
 8004ee0:	f00a fbef 	bl	800f6c2 <HAL_UART_Receive>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <flush_rx_buffer+0x50>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b63      	cmp	r3, #99	@ 0x63
 8004eee:	ddf0      	ble.n	8004ed2 <flush_rx_buffer+0x32>
    }
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200018c0 	.word	0x200018c0

08004efc <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8004f04:	4b5b      	ldr	r3, [pc, #364]	@ (8005074 <UART_Platform_Connect+0x178>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8004f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f14:	4959      	ldr	r1, [pc, #356]	@ (800507c <UART_Platform_Connect+0x180>)
 8004f16:	2001      	movs	r0, #1
 8004f18:	f7ff fe9e 	bl	8004c58 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8004f1c:	4b56      	ldr	r3, [pc, #344]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00e      	beq.n	8004f42 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8004f24:	4956      	ldr	r1, [pc, #344]	@ (8005080 <UART_Platform_Connect+0x184>)
 8004f26:	2001      	movs	r0, #1
 8004f28:	f7ff fe96 	bl	8004c58 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004f2c:	4b52      	ldr	r3, [pc, #328]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	4952      	ldr	r1, [pc, #328]	@ (8005084 <UART_Platform_Connect+0x188>)
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f7ff fe8c 	bl	8004c58 <LOGGER_SendFormatted>
 8004f40:	e018      	b.n	8004f74 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8004f42:	4951      	ldr	r1, [pc, #324]	@ (8005088 <UART_Platform_Connect+0x18c>)
 8004f44:	2003      	movs	r0, #3
 8004f46:	f7ff fe87 	bl	8004c58 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800508c <UART_Platform_Connect+0x190>)
 8004f4e:	675a      	str	r2, [r3, #116]	@ 0x74
 8004f50:	4b4e      	ldr	r3, [pc, #312]	@ (800508c <UART_Platform_Connect+0x190>)
 8004f52:	4a49      	ldr	r2, [pc, #292]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8004f56:	4b48      	ldr	r3, [pc, #288]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8004f5e:	494c      	ldr	r1, [pc, #304]	@ (8005090 <UART_Platform_Connect+0x194>)
 8004f60:	2001      	movs	r0, #1
 8004f62:	f7ff fe79 	bl	8004c58 <LOGGER_SendFormatted>
 8004f66:	e005      	b.n	8004f74 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8004f68:	494a      	ldr	r1, [pc, #296]	@ (8005094 <UART_Platform_Connect+0x198>)
 8004f6a:	2003      	movs	r0, #3
 8004f6c:	f7ff fe74 	bl	8004c58 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e07a      	b.n	800506a <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8004f74:	4b48      	ldr	r3, [pc, #288]	@ (8005098 <UART_Platform_Connect+0x19c>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8004f7c:	483e      	ldr	r0, [pc, #248]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f7e:	f00a fcac 	bl	800f8da <HAL_UART_DMAStop>
        dma_receiving = false;
 8004f82:	4b45      	ldr	r3, [pc, #276]	@ (8005098 <UART_Platform_Connect+0x19c>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8004f88:	4944      	ldr	r1, [pc, #272]	@ (800509c <UART_Platform_Connect+0x1a0>)
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f7ff fe64 	bl	8004c58 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8004f90:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f92:	2220      	movs	r2, #32
 8004f94:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8004f96:	4b38      	ldr	r3, [pc, #224]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8004f9e:	4b36      	ldr	r3, [pc, #216]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d026      	beq.n	8004ff4 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8004fa6:	4b34      	ldr	r3, [pc, #208]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004faa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d01a      	beq.n	8004fea <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8004fb4:	493a      	ldr	r1, [pc, #232]	@ (80050a0 <UART_Platform_Connect+0x1a4>)
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f7ff fe4e 	bl	8004c58 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8004fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f82f 	bl	8006024 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8004fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 ff7c 	bl	8005ec8 <HAL_DMA_Init>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8004fd6:	4933      	ldr	r1, [pc, #204]	@ (80050a4 <UART_Platform_Connect+0x1a8>)
 8004fd8:	2003      	movs	r0, #3
 8004fda:	f7ff fe3d 	bl	8004c58 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e043      	b.n	800506a <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8004fe2:	4931      	ldr	r1, [pc, #196]	@ (80050a8 <UART_Platform_Connect+0x1ac>)
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	f7ff fe37 	bl	8004c58 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004fea:	4b23      	ldr	r3, [pc, #140]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8004fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8004ff4:	f7ff ff54 	bl	8004ea0 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8004ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80050ac <UART_Platform_Connect+0x1b0>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80050b0 <UART_Platform_Connect+0x1b4>)
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005004:	4b2b      	ldr	r3, [pc, #172]	@ (80050b4 <UART_Platform_Connect+0x1b8>)
 8005006:	2200      	movs	r2, #0
 8005008:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800500a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800500e:	2100      	movs	r1, #0
 8005010:	4829      	ldr	r0, [pc, #164]	@ (80050b8 <UART_Platform_Connect+0x1bc>)
 8005012:	f017 f809 	bl	801c028 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8005016:	4929      	ldr	r1, [pc, #164]	@ (80050bc <UART_Platform_Connect+0x1c0>)
 8005018:	2001      	movs	r0, #1
 800501a:	f7ff fe1d 	bl	8004c58 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800501e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005022:	4925      	ldr	r1, [pc, #148]	@ (80050b8 <UART_Platform_Connect+0x1bc>)
 8005024:	4814      	ldr	r0, [pc, #80]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8005026:	f00a fc14 	bl	800f852 <HAL_UART_Receive_DMA>
 800502a:	4603      	mov	r3, r0
 800502c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005034:	4b18      	ldr	r3, [pc, #96]	@ (8005098 <UART_Platform_Connect+0x19c>)
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 800503a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800503e:	4920      	ldr	r1, [pc, #128]	@ (80050c0 <UART_Platform_Connect+0x1c4>)
 8005040:	2001      	movs	r0, #1
 8005042:	f7ff fe09 	bl	8004c58 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e00f      	b.n	800506a <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	461a      	mov	r2, r3
 800504e:	491d      	ldr	r1, [pc, #116]	@ (80050c4 <UART_Platform_Connect+0x1c8>)
 8005050:	2003      	movs	r0, #3
 8005052:	f7ff fe01 	bl	8004c58 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8005056:	4b08      	ldr	r3, [pc, #32]	@ (8005078 <UART_Platform_Connect+0x17c>)
 8005058:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800505a:	4b07      	ldr	r3, [pc, #28]	@ (8005078 <UART_Platform_Connect+0x17c>)
 800505c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005060:	4919      	ldr	r1, [pc, #100]	@ (80050c8 <UART_Platform_Connect+0x1cc>)
 8005062:	2003      	movs	r0, #3
 8005064:	f7ff fdf8 	bl	8004c58 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005068:	2301      	movs	r3, #1
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20002250 	.word	0x20002250
 8005078:	200018c0 	.word	0x200018c0
 800507c:	0801ed54 	.word	0x0801ed54
 8005080:	0801ed80 	.word	0x0801ed80
 8005084:	0801eda8 	.word	0x0801eda8
 8005088:	0801edc4 	.word	0x0801edc4
 800508c:	20001948 	.word	0x20001948
 8005090:	0801ee00 	.word	0x0801ee00
 8005094:	0801ee2c 	.word	0x0801ee2c
 8005098:	20002251 	.word	0x20002251
 800509c:	0801ee58 	.word	0x0801ee58
 80050a0:	0801ee84 	.word	0x0801ee84
 80050a4:	0801eeb4 	.word	0x0801eeb4
 80050a8:	0801eee0 	.word	0x0801eee0
 80050ac:	2000204a 	.word	0x2000204a
 80050b0:	2000204b 	.word	0x2000204b
 80050b4:	2000204c 	.word	0x2000204c
 80050b8:	20002050 	.word	0x20002050
 80050bc:	0801ef0c 	.word	0x0801ef0c
 80050c0:	0801ef34 	.word	0x0801ef34
 80050c4:	0801ef78 	.word	0x0801ef78
 80050c8:	0801efb4 	.word	0x0801efb4

080050cc <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <UART_Platform_Send+0x1c>
 80050da:	4b17      	ldr	r3, [pc, #92]	@ (8005138 <UART_Platform_Send+0x6c>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	f083 0301 	eor.w	r3, r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <UART_Platform_Send+0x20>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e021      	b.n	8005130 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fb f899 	bl	8000224 <strlen>
 80050f2:	4603      	mov	r3, r0
 80050f4:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <UART_Platform_Send+0x34>
 80050fc:	2300      	movs	r3, #0
 80050fe:	e017      	b.n	8005130 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8005100:	f7ff fece 	bl	8004ea0 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	b29a      	uxth	r2, r3
 8005108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	480b      	ldr	r0, [pc, #44]	@ (800513c <UART_Platform_Send+0x70>)
 8005110:	f00a fa4e 	bl	800f5b0 <HAL_UART_Transmit>
 8005114:	4603      	mov	r3, r0
 8005116:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e006      	b.n	8005130 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005122:	7afb      	ldrb	r3, [r7, #11]
 8005124:	461a      	mov	r2, r3
 8005126:	4906      	ldr	r1, [pc, #24]	@ (8005140 <UART_Platform_Send+0x74>)
 8005128:	2003      	movs	r0, #3
 800512a:	f7ff fd95 	bl	8004c58 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800512e:	2301      	movs	r3, #1
    }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20002250 	.word	0x20002250
 800513c:	200018c0 	.word	0x200018c0
 8005140:	0801f014 	.word	0x0801f014

08005144 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <HAL_UART_RxCpltCallback+0x38>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10e      	bne.n	8005174 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8005156:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <HAL_UART_RxCpltCallback+0x3c>)
 8005158:	2201      	movs	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 800515c:	4b09      	ldr	r3, [pc, #36]	@ (8005184 <HAL_UART_RxCpltCallback+0x40>)
 800515e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005162:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8005164:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <HAL_UART_RxCpltCallback+0x40>)
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	4906      	ldr	r1, [pc, #24]	@ (8005188 <HAL_UART_RxCpltCallback+0x44>)
 800516e:	2001      	movs	r0, #1
 8005170:	f7ff fd72 	bl	8004c58 <LOGGER_SendFormatted>
  }
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40011400 	.word	0x40011400
 8005180:	2000204a 	.word	0x2000204a
 8005184:	2000204c 	.word	0x2000204c
 8005188:	0801f1d8 	.word	0x0801f1d8

0800518c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a05      	ldr	r2, [pc, #20]	@ (80051b0 <HAL_UART_RxHalfCpltCallback+0x24>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d103      	bne.n	80051a6 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 800519e:	4905      	ldr	r1, [pc, #20]	@ (80051b4 <HAL_UART_RxHalfCpltCallback+0x28>)
 80051a0:	2002      	movs	r0, #2
 80051a2:	f7ff fd59 	bl	8004c58 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40011400 	.word	0x40011400
 80051b4:	0801f210 	.word	0x0801f210

080051b8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3c      	ldr	r2, [pc, #240]	@ (80052b8 <HAL_UART_ErrorCallback+0x100>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d171      	bne.n	80052ae <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 80051ca:	4b3c      	ldr	r3, [pc, #240]	@ (80052bc <HAL_UART_ErrorCallback+0x104>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 80051d0:	493b      	ldr	r1, [pc, #236]	@ (80052c0 <HAL_UART_ErrorCallback+0x108>)
 80051d2:	2002      	movs	r0, #2
 80051d4:	f7ff fd40 	bl	8004c58 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d107      	bne.n	80051f6 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2208      	movs	r2, #8
 80051ec:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 80051ee:	4935      	ldr	r1, [pc, #212]	@ (80052c4 <HAL_UART_ErrorCallback+0x10c>)
 80051f0:	2002      	movs	r0, #2
 80051f2:	f7ff fd31 	bl	8004c58 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b04      	cmp	r3, #4
 8005202:	d107      	bne.n	8005214 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2204      	movs	r2, #4
 800520a:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 800520c:	492e      	ldr	r1, [pc, #184]	@ (80052c8 <HAL_UART_ErrorCallback+0x110>)
 800520e:	2002      	movs	r0, #2
 8005210:	f7ff fd22 	bl	8004c58 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d107      	bne.n	8005232 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2202      	movs	r2, #2
 8005228:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 800522a:	4928      	ldr	r1, [pc, #160]	@ (80052cc <HAL_UART_ErrorCallback+0x114>)
 800522c:	2002      	movs	r0, #2
 800522e:	f7ff fd13 	bl	8004c58 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8005248:	4921      	ldr	r1, [pc, #132]	@ (80052d0 <HAL_UART_ErrorCallback+0x118>)
 800524a:	2002      	movs	r0, #2
 800524c:	f7ff fd04 	bl	8004c58 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f00a fb42 	bl	800f8da <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800527a:	2100      	movs	r1, #0
 800527c:	4815      	ldr	r0, [pc, #84]	@ (80052d4 <HAL_UART_ErrorCallback+0x11c>)
 800527e:	f016 fed3 	bl	801c028 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005286:	4913      	ldr	r1, [pc, #76]	@ (80052d4 <HAL_UART_ErrorCallback+0x11c>)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f00a fae2 	bl	800f852 <HAL_UART_Receive_DMA>
 800528e:	4603      	mov	r3, r0
 8005290:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8005298:	490f      	ldr	r1, [pc, #60]	@ (80052d8 <HAL_UART_ErrorCallback+0x120>)
 800529a:	2001      	movs	r0, #1
 800529c:	f7ff fcdc 	bl	8004c58 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 80052a0:	e005      	b.n	80052ae <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	461a      	mov	r2, r3
 80052a6:	490d      	ldr	r1, [pc, #52]	@ (80052dc <HAL_UART_ErrorCallback+0x124>)
 80052a8:	2003      	movs	r0, #3
 80052aa:	f7ff fcd5 	bl	8004c58 <LOGGER_SendFormatted>
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40011400 	.word	0x40011400
 80052bc:	2000204b 	.word	0x2000204b
 80052c0:	0801f25c 	.word	0x0801f25c
 80052c4:	0801f288 	.word	0x0801f288
 80052c8:	0801f2a4 	.word	0x0801f2a4
 80052cc:	0801f2c0 	.word	0x0801f2c0
 80052d0:	0801f2dc 	.word	0x0801f2dc
 80052d4:	20002050 	.word	0x20002050
 80052d8:	0801f2f8 	.word	0x0801f2f8
 80052dc:	0801f32c 	.word	0x0801f32c

080052e0 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a3e      	ldr	r2, [pc, #248]	@ (80053e8 <USER_UART_IDLECallback+0x108>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d175      	bne.n	80053de <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b08      	cmp	r3, #8
 8005302:	d103      	bne.n	800530c <USER_UART_IDLECallback+0x2c>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d103      	bne.n	8005322 <USER_UART_IDLECallback+0x42>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f043 0302 	orr.w	r3, r3, #2
 8005320:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b04      	cmp	r3, #4
 800532e:	d103      	bne.n	8005338 <USER_UART_IDLECallback+0x58>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d103      	bne.n	800534e <USER_UART_IDLECallback+0x6e>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f043 0308 	orr.w	r3, r3, #8
 800534c:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8005358:	897b      	ldrh	r3, [r7, #10]
 800535a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800535e:	b29a      	uxth	r2, r3
 8005360:	4b22      	ldr	r3, [pc, #136]	@ (80053ec <USER_UART_IDLECallback+0x10c>)
 8005362:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8005364:	4b21      	ldr	r3, [pc, #132]	@ (80053ec <USER_UART_IDLECallback+0x10c>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d033      	beq.n	80053d6 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800536e:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <USER_UART_IDLECallback+0x110>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 800537a:	4b1c      	ldr	r3, [pc, #112]	@ (80053ec <USER_UART_IDLECallback+0x10c>)
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	491b      	ldr	r1, [pc, #108]	@ (80053f4 <USER_UART_IDLECallback+0x114>)
 8005386:	2002      	movs	r0, #2
 8005388:	f7ff fc66 	bl	8004c58 <LOGGER_SendFormatted>
 800538c:	e007      	b.n	800539e <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800538e:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <USER_UART_IDLECallback+0x10c>)
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	4918      	ldr	r1, [pc, #96]	@ (80053f8 <USER_UART_IDLECallback+0x118>)
 8005398:	2001      	movs	r0, #1
 800539a:	f7ff fc5d 	bl	8004c58 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 800539e:	4b13      	ldr	r3, [pc, #76]	@ (80053ec <USER_UART_IDLECallback+0x10c>)
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d912      	bls.n	80053ce <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 80053a8:	4b14      	ldr	r3, [pc, #80]	@ (80053fc <USER_UART_IDLECallback+0x11c>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	4b13      	ldr	r3, [pc, #76]	@ (80053fc <USER_UART_IDLECallback+0x11c>)
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	4618      	mov	r0, r3
 80053b4:	4b11      	ldr	r3, [pc, #68]	@ (80053fc <USER_UART_IDLECallback+0x11c>)
 80053b6:	789b      	ldrb	r3, [r3, #2]
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b10      	ldr	r3, [pc, #64]	@ (80053fc <USER_UART_IDLECallback+0x11c>)
 80053bc:	78db      	ldrb	r3, [r3, #3]
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	9200      	str	r2, [sp, #0]
 80053c2:	4603      	mov	r3, r0
 80053c4:	460a      	mov	r2, r1
 80053c6:	490e      	ldr	r1, [pc, #56]	@ (8005400 <USER_UART_IDLECallback+0x120>)
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7ff fc45 	bl	8004c58 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f00a fa83 	bl	800f8da <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 80053d4:	e003      	b.n	80053de <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 80053d6:	490b      	ldr	r1, [pc, #44]	@ (8005404 <USER_UART_IDLECallback+0x124>)
 80053d8:	2000      	movs	r0, #0
 80053da:	f7ff fc3d 	bl	8004c58 <LOGGER_SendFormatted>
}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40011400 	.word	0x40011400
 80053ec:	2000204c 	.word	0x2000204c
 80053f0:	2000204a 	.word	0x2000204a
 80053f4:	0801f364 	.word	0x0801f364
 80053f8:	0801f3a4 	.word	0x0801f3a4
 80053fc:	20002050 	.word	0x20002050
 8005400:	0801f3cc 	.word	0x0801f3cc
 8005404:	0801f3f8 	.word	0x0801f3f8

08005408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005408:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005440 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800540c:	f7ff fba8 	bl	8004b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005410:	480c      	ldr	r0, [pc, #48]	@ (8005444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005412:	490d      	ldr	r1, [pc, #52]	@ (8005448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005414:	4a0d      	ldr	r2, [pc, #52]	@ (800544c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005418:	e002      	b.n	8005420 <LoopCopyDataInit>

0800541a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800541a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800541c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800541e:	3304      	adds	r3, #4

08005420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005424:	d3f9      	bcc.n	800541a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005426:	4a0a      	ldr	r2, [pc, #40]	@ (8005450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005428:	4c0a      	ldr	r4, [pc, #40]	@ (8005454 <LoopFillZerobss+0x22>)
  movs r3, #0
 800542a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800542c:	e001      	b.n	8005432 <LoopFillZerobss>

0800542e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800542e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005430:	3204      	adds	r2, #4

08005432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005434:	d3fb      	bcc.n	800542e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005436:	f016 fe3f 	bl	801c0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800543a:	f7fc fad5 	bl	80019e8 <main>
  bx  lr    
 800543e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005440:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005448:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800544c:	0801f5c8 	.word	0x0801f5c8
  ldr r2, =_sbss
 8005450:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8005454:	2000af68 	.word	0x2000af68

08005458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005458:	e7fe      	b.n	8005458 <ADC_IRQHandler>

0800545a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800545e:	2003      	movs	r0, #3
 8005460:	f000 fb91 	bl	8005b86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005464:	2000      	movs	r0, #0
 8005466:	f7ff fa47 	bl	80048f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800546a:	f7fe f921 	bl	80036b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005478:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_IncTick+0x20>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_IncTick+0x24>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4413      	add	r3, r2
 8005484:	4a04      	ldr	r2, [pc, #16]	@ (8005498 <HAL_IncTick+0x24>)
 8005486:	6013      	str	r3, [r2, #0]
}
 8005488:	bf00      	nop
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	2000006c 	.word	0x2000006c
 8005498:	20002254 	.word	0x20002254

0800549c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return uwTick;
 80054a0:	4b03      	ldr	r3, [pc, #12]	@ (80054b0 <HAL_GetTick+0x14>)
 80054a2:	681b      	ldr	r3, [r3, #0]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	20002254 	.word	0x20002254

080054b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054bc:	f7ff ffee 	bl	800549c <HAL_GetTick>
 80054c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d005      	beq.n	80054da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ce:	4b0a      	ldr	r3, [pc, #40]	@ (80054f8 <HAL_Delay+0x44>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054da:	bf00      	nop
 80054dc:	f7ff ffde 	bl	800549c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d8f7      	bhi.n	80054dc <HAL_Delay+0x28>
  {
  }
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	2000006c 	.word	0x2000006c

080054fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e031      	b.n	8005576 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fe f8f0 	bl	8003700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b00      	cmp	r3, #0
 8005538:	d116      	bne.n	8005568 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800553e:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <HAL_ADC_Init+0x84>)
 8005540:	4013      	ands	r3, r2
 8005542:	f043 0202 	orr.w	r2, r3, #2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f974 	bl	8005838 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	f043 0201 	orr.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
 8005566:	e001      	b.n	800556c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	ffffeefd 	.word	0xffffeefd

08005584 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x1c>
 800559c:	2302      	movs	r3, #2
 800559e:	e13a      	b.n	8005816 <HAL_ADC_ConfigChannel+0x292>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b09      	cmp	r3, #9
 80055ae:	d93a      	bls.n	8005626 <HAL_ADC_ConfigChannel+0xa2>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055b8:	d035      	beq.n	8005626 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68d9      	ldr	r1, [r3, #12]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	3b1e      	subs	r3, #30
 80055d0:	2207      	movs	r2, #7
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43da      	mvns	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	400a      	ands	r2, r1
 80055de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a8f      	ldr	r2, [pc, #572]	@ (8005824 <HAL_ADC_ConfigChannel+0x2a0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d10a      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68d9      	ldr	r1, [r3, #12]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	061a      	lsls	r2, r3, #24
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055fe:	e039      	b.n	8005674 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68d9      	ldr	r1, [r3, #12]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	4618      	mov	r0, r3
 8005612:	4603      	mov	r3, r0
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4403      	add	r3, r0
 8005618:	3b1e      	subs	r3, #30
 800561a:	409a      	lsls	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005624:	e026      	b.n	8005674 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6919      	ldr	r1, [r3, #16]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	4613      	mov	r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4413      	add	r3, r2
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2207      	movs	r2, #7
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43da      	mvns	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	400a      	ands	r2, r1
 800564c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6919      	ldr	r1, [r3, #16]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	4618      	mov	r0, r3
 8005660:	4603      	mov	r3, r0
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4403      	add	r3, r0
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	409a      	lsls	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b06      	cmp	r3, #6
 800567a:	d824      	bhi.n	80056c6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	3b05      	subs	r3, #5
 800568e:	221f      	movs	r2, #31
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43da      	mvns	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	400a      	ands	r2, r1
 800569c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4618      	mov	r0, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	3b05      	subs	r3, #5
 80056b8:	fa00 f203 	lsl.w	r2, r0, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80056c4:	e04c      	b.n	8005760 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b0c      	cmp	r3, #12
 80056cc:	d824      	bhi.n	8005718 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	3b23      	subs	r3, #35	@ 0x23
 80056e0:	221f      	movs	r2, #31
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	43da      	mvns	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	400a      	ands	r2, r1
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	4618      	mov	r0, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	3b23      	subs	r3, #35	@ 0x23
 800570a:	fa00 f203 	lsl.w	r2, r0, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	631a      	str	r2, [r3, #48]	@ 0x30
 8005716:	e023      	b.n	8005760 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	3b41      	subs	r3, #65	@ 0x41
 800572a:	221f      	movs	r2, #31
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43da      	mvns	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	400a      	ands	r2, r1
 8005738:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	4618      	mov	r0, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	3b41      	subs	r3, #65	@ 0x41
 8005754:	fa00 f203 	lsl.w	r2, r0, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a30      	ldr	r2, [pc, #192]	@ (8005828 <HAL_ADC_ConfigChannel+0x2a4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d10a      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x1fc>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005772:	d105      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005774:	4b2d      	ldr	r3, [pc, #180]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a2c      	ldr	r2, [pc, #176]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 800577a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800577e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a28      	ldr	r2, [pc, #160]	@ (8005828 <HAL_ADC_ConfigChannel+0x2a4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10f      	bne.n	80057aa <HAL_ADC_ConfigChannel+0x226>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b12      	cmp	r3, #18
 8005790:	d10b      	bne.n	80057aa <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005792:	4b26      	ldr	r3, [pc, #152]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4a25      	ldr	r2, [pc, #148]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 8005798:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800579c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800579e:	4b23      	ldr	r3, [pc, #140]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4a22      	ldr	r2, [pc, #136]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 80057a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005828 <HAL_ADC_ConfigChannel+0x2a4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d12b      	bne.n	800580c <HAL_ADC_ConfigChannel+0x288>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005824 <HAL_ADC_ConfigChannel+0x2a0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <HAL_ADC_ConfigChannel+0x242>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b11      	cmp	r3, #17
 80057c4:	d122      	bne.n	800580c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80057c6:	4b19      	ldr	r3, [pc, #100]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	4a18      	ldr	r2, [pc, #96]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 80057cc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80057d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80057d2:	4b16      	ldr	r3, [pc, #88]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	4a15      	ldr	r2, [pc, #84]	@ (800582c <HAL_ADC_ConfigChannel+0x2a8>)
 80057d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a10      	ldr	r2, [pc, #64]	@ (8005824 <HAL_ADC_ConfigChannel+0x2a0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d111      	bne.n	800580c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80057e8:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <HAL_ADC_ConfigChannel+0x2ac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a11      	ldr	r2, [pc, #68]	@ (8005834 <HAL_ADC_ConfigChannel+0x2b0>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0c9a      	lsrs	r2, r3, #18
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80057fe:	e002      	b.n	8005806 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3b01      	subs	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f9      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	10000012 	.word	0x10000012
 8005828:	40012000 	.word	0x40012000
 800582c:	40012300 	.word	0x40012300
 8005830:	2000001c 	.word	0x2000001c
 8005834:	431bde83 	.word	0x431bde83

08005838 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005840:	4b78      	ldr	r3, [pc, #480]	@ (8005a24 <ADC_Init+0x1ec>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a77      	ldr	r2, [pc, #476]	@ (8005a24 <ADC_Init+0x1ec>)
 8005846:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800584a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800584c:	4b75      	ldr	r3, [pc, #468]	@ (8005a24 <ADC_Init+0x1ec>)
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4973      	ldr	r1, [pc, #460]	@ (8005a24 <ADC_Init+0x1ec>)
 8005856:	4313      	orrs	r3, r2
 8005858:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6859      	ldr	r1, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	021a      	lsls	r2, r3, #8
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800588c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6859      	ldr	r1, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6899      	ldr	r1, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c6:	4a58      	ldr	r2, [pc, #352]	@ (8005a28 <ADC_Init+0x1f0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6899      	ldr	r1, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80058fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6899      	ldr	r1, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	e00f      	b.n	8005932 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005930:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0202 	bic.w	r2, r2, #2
 8005940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6899      	ldr	r1, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	005a      	lsls	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800596e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800597e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598a:	3b01      	subs	r3, #1
 800598c:	035a      	lsls	r2, r3, #13
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	e007      	b.n	80059a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80059b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	051a      	lsls	r2, r3, #20
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80059dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6899      	ldr	r1, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059ea:	025a      	lsls	r2, r3, #9
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6899      	ldr	r1, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	029a      	lsls	r2, r3, #10
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40012300 	.word	0x40012300
 8005a28:	0f000001 	.word	0x0f000001

08005a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <__NVIC_SetPriorityGrouping+0x40>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a54:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <__NVIC_SetPriorityGrouping+0x44>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a5a:	4a04      	ldr	r2, [pc, #16]	@ (8005a6c <__NVIC_SetPriorityGrouping+0x40>)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	60d3      	str	r3, [r2, #12]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	e000ed00 	.word	0xe000ed00
 8005a70:	05fa0000 	.word	0x05fa0000

08005a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a78:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <__NVIC_GetPriorityGrouping+0x18>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	f003 0307 	and.w	r3, r3, #7
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	e000ed00 	.word	0xe000ed00

08005a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	db0b      	blt.n	8005aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	f003 021f 	and.w	r2, r3, #31
 8005aa8:	4907      	ldr	r1, [pc, #28]	@ (8005ac8 <__NVIC_EnableIRQ+0x38>)
 8005aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	e000e100 	.word	0xe000e100

08005acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	6039      	str	r1, [r7, #0]
 8005ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	db0a      	blt.n	8005af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	490c      	ldr	r1, [pc, #48]	@ (8005b18 <__NVIC_SetPriority+0x4c>)
 8005ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aea:	0112      	lsls	r2, r2, #4
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	440b      	add	r3, r1
 8005af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005af4:	e00a      	b.n	8005b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	4908      	ldr	r1, [pc, #32]	@ (8005b1c <__NVIC_SetPriority+0x50>)
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	3b04      	subs	r3, #4
 8005b04:	0112      	lsls	r2, r2, #4
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	440b      	add	r3, r1
 8005b0a:	761a      	strb	r2, [r3, #24]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	e000e100 	.word	0xe000e100
 8005b1c:	e000ed00 	.word	0xe000ed00

08005b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b089      	sub	sp, #36	@ 0x24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f1c3 0307 	rsb	r3, r3, #7
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	bf28      	it	cs
 8005b3e:	2304      	movcs	r3, #4
 8005b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	3304      	adds	r3, #4
 8005b46:	2b06      	cmp	r3, #6
 8005b48:	d902      	bls.n	8005b50 <NVIC_EncodePriority+0x30>
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3b03      	subs	r3, #3
 8005b4e:	e000      	b.n	8005b52 <NVIC_EncodePriority+0x32>
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	f04f 32ff 	mov.w	r2, #4294967295
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	401a      	ands	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b68:	f04f 31ff 	mov.w	r1, #4294967295
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b72:	43d9      	mvns	r1, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b78:	4313      	orrs	r3, r2
         );
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3724      	adds	r7, #36	@ 0x24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff ff4c 	bl	8005a2c <__NVIC_SetPriorityGrouping>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bae:	f7ff ff61 	bl	8005a74 <__NVIC_GetPriorityGrouping>
 8005bb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	6978      	ldr	r0, [r7, #20]
 8005bba:	f7ff ffb1 	bl	8005b20 <NVIC_EncodePriority>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff ff80 	bl	8005acc <__NVIC_SetPriority>
}
 8005bcc:	bf00      	nop
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff ff54 	bl	8005a90 <__NVIC_EnableIRQ>
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e054      	b.n	8005cac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	7f5b      	ldrb	r3, [r3, #29]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d105      	bne.n	8005c18 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fd fdce 	bl	80037b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	791b      	ldrb	r3, [r3, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10c      	bne.n	8005c40 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a22      	ldr	r2, [pc, #136]	@ (8005cb4 <HAL_CRC_Init+0xc4>)
 8005c2c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0218 	bic.w	r2, r2, #24
 8005c3c:	609a      	str	r2, [r3, #8]
 8005c3e:	e00c      	b.n	8005c5a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6899      	ldr	r1, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f834 	bl	8005cb8 <HAL_CRCEx_Polynomial_Set>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e028      	b.n	8005cac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	795b      	ldrb	r3, [r3, #5]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6a:	611a      	str	r2, [r3, #16]
 8005c6c:	e004      	b.n	8005c78 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6912      	ldr	r2, [r2, #16]
 8005c76:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	04c11db7 	.word	0x04c11db7

08005cb8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005cc8:	231f      	movs	r3, #31
 8005cca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
 8005cda:	e063      	b.n	8005da4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005cdc:	bf00      	nop
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1e5a      	subs	r2, r3, #1
 8005ce2:	613a      	str	r2, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <HAL_CRCEx_Polynomial_Set+0x44>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b18      	cmp	r3, #24
 8005d00:	d846      	bhi.n	8005d90 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005d02:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d97 	.word	0x08005d97
 8005d0c:	08005d91 	.word	0x08005d91
 8005d10:	08005d91 	.word	0x08005d91
 8005d14:	08005d91 	.word	0x08005d91
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d91 	.word	0x08005d91
 8005d20:	08005d91 	.word	0x08005d91
 8005d24:	08005d91 	.word	0x08005d91
 8005d28:	08005d85 	.word	0x08005d85
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d91 	.word	0x08005d91
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d91 	.word	0x08005d91
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d91 	.word	0x08005d91
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005d91 	.word	0x08005d91
 8005d58:	08005d91 	.word	0x08005d91
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005d91 	.word	0x08005d91
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	08005d6d 	.word	0x08005d6d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d913      	bls.n	8005d9a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005d76:	e010      	b.n	8005d9a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b07      	cmp	r3, #7
 8005d7c:	d90f      	bls.n	8005d9e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005d82:	e00c      	b.n	8005d9e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b0f      	cmp	r3, #15
 8005d88:	d90b      	bls.n	8005da2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005d8e:	e008      	b.n	8005da2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
        break;
 8005d94:	e006      	b.n	8005da4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005d96:	bf00      	nop
 8005d98:	e004      	b.n	8005da4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005da2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 0118 	bic.w	r1, r3, #24
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e069      	b.n	8005eba <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fd fcfe 	bl	80037f4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec4 <HAL_DCMI_Init+0xf0>)
 8005e1a:	400b      	ands	r3, r1
 8005e1c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005e32:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005e3e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005e4a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005e56:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005e62:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d112      	bne.n	8005e9a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	7f1b      	ldrb	r3, [r3, #28]
 8005e78:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	7f5b      	ldrb	r3, [r3, #29]
 8005e7e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005e80:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7f9b      	ldrb	r3, [r3, #30]
 8005e86:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005e88:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	7fdb      	ldrb	r3, [r3, #31]
 8005e90:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005e96:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005e98:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 021e 	orr.w	r2, r2, #30
 8005ea8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	ffe0f007 	.word	0xffe0f007

08005ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ed4:	f7ff fae2 	bl	800549c <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e099      	b.n	8006018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f04:	e00f      	b.n	8005f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f06:	f7ff fac9 	bl	800549c <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b05      	cmp	r3, #5
 8005f12:	d908      	bls.n	8005f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e078      	b.n	8006018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e8      	bne.n	8005f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4b38      	ldr	r3, [pc, #224]	@ (8006020 <HAL_DMA_Init+0x158>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d107      	bne.n	8005f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f023 0307 	bic.w	r3, r3, #7
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d117      	bne.n	8005fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00e      	beq.n	8005fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fb73 	bl	80066b8 <DMA_CheckFifoParam>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2240      	movs	r2, #64	@ 0x40
 8005fdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e016      	b.n	8006018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fb2a 	bl	800664c <DMA_CalcBaseAndBitshift>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006000:	223f      	movs	r2, #63	@ 0x3f
 8006002:	409a      	lsls	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	f010803f 	.word	0xf010803f

08006024 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e050      	b.n	80060d8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d101      	bne.n	8006046 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006042:	2302      	movs	r3, #2
 8006044:	e048      	b.n	80060d8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2200      	movs	r2, #0
 8006064:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2221      	movs	r2, #33	@ 0x21
 8006084:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fae0 	bl	800664c <DMA_CalcBaseAndBitshift>
 800608c:	4603      	mov	r3, r0
 800608e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006094:	223f      	movs	r2, #63	@ 0x3f
 8006096:	409a      	lsls	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_DMA_Start_IT+0x26>
 8006102:	2302      	movs	r3, #2
 8006104:	e048      	b.n	8006198 <HAL_DMA_Start_IT+0xb8>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	d137      	bne.n	800618a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2202      	movs	r2, #2
 800611e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fa5e 	bl	80065f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006138:	223f      	movs	r2, #63	@ 0x3f
 800613a:	409a      	lsls	r2, r3
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0216 	orr.w	r2, r2, #22
 800614e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800615e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0208 	orr.w	r2, r2, #8
 8006176:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e005      	b.n	8006196 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006192:	2302      	movs	r3, #2
 8006194:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80061ae:	f7ff f975 	bl	800549c <HAL_GetTick>
 80061b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d008      	beq.n	80061d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2280      	movs	r2, #128	@ 0x80
 80061c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e052      	b.n	8006278 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0216 	bic.w	r2, r2, #22
 80061e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <HAL_DMA_Abort+0x62>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0208 	bic.w	r2, r2, #8
 8006210:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0201 	bic.w	r2, r2, #1
 8006220:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006222:	e013      	b.n	800624c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006224:	f7ff f93a 	bl	800549c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b05      	cmp	r3, #5
 8006230:	d90c      	bls.n	800624c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2203      	movs	r2, #3
 800623c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e015      	b.n	8006278 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e4      	bne.n	8006224 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625e:	223f      	movs	r2, #63	@ 0x3f
 8006260:	409a      	lsls	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d004      	beq.n	800629e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2280      	movs	r2, #128	@ 0x80
 8006298:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e00c      	b.n	80062b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2205      	movs	r2, #5
 80062a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0201 	bic.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80062d0:	4b8e      	ldr	r3, [pc, #568]	@ (800650c <HAL_DMA_IRQHandler+0x248>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a8e      	ldr	r2, [pc, #568]	@ (8006510 <HAL_DMA_IRQHandler+0x24c>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	0a9b      	lsrs	r3, r3, #10
 80062dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ee:	2208      	movs	r2, #8
 80062f0:	409a      	lsls	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4013      	ands	r3, r2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01a      	beq.n	8006330 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0204 	bic.w	r2, r2, #4
 8006316:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631c:	2208      	movs	r2, #8
 800631e:	409a      	lsls	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006328:	f043 0201 	orr.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006334:	2201      	movs	r2, #1
 8006336:	409a      	lsls	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d012      	beq.n	8006366 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006352:	2201      	movs	r2, #1
 8006354:	409a      	lsls	r2, r3
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635e:	f043 0202 	orr.w	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800636a:	2204      	movs	r2, #4
 800636c:	409a      	lsls	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4013      	ands	r3, r2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d012      	beq.n	800639c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006388:	2204      	movs	r2, #4
 800638a:	409a      	lsls	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006394:	f043 0204 	orr.w	r2, r3, #4
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a0:	2210      	movs	r2, #16
 80063a2:	409a      	lsls	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d043      	beq.n	8006434 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d03c      	beq.n	8006434 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063be:	2210      	movs	r2, #16
 80063c0:	409a      	lsls	r2, r3
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d018      	beq.n	8006406 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d108      	bne.n	80063f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d024      	beq.n	8006434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
 80063f2:	e01f      	b.n	8006434 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01b      	beq.n	8006434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
 8006404:	e016      	b.n	8006434 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0208 	bic.w	r2, r2, #8
 8006422:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006438:	2220      	movs	r2, #32
 800643a:	409a      	lsls	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4013      	ands	r3, r2
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 808f 	beq.w	8006564 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8087 	beq.w	8006564 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800645a:	2220      	movs	r2, #32
 800645c:	409a      	lsls	r2, r3
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b05      	cmp	r3, #5
 800646c:	d136      	bne.n	80064dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0216 	bic.w	r2, r2, #22
 800647c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800648c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <HAL_DMA_IRQHandler+0x1da>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0208 	bic.w	r2, r2, #8
 80064ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b2:	223f      	movs	r2, #63	@ 0x3f
 80064b4:	409a      	lsls	r2, r3
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d07e      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
        }
        return;
 80064da:	e079      	b.n	80065d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01d      	beq.n	8006526 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10d      	bne.n	8006514 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d031      	beq.n	8006564 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	4798      	blx	r3
 8006508:	e02c      	b.n	8006564 <HAL_DMA_IRQHandler+0x2a0>
 800650a:	bf00      	nop
 800650c:	2000001c 	.word	0x2000001c
 8006510:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d023      	beq.n	8006564 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
 8006524:	e01e      	b.n	8006564 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10f      	bne.n	8006554 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0210 	bic.w	r2, r2, #16
 8006542:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006568:	2b00      	cmp	r3, #0
 800656a:	d032      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d022      	beq.n	80065be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2205      	movs	r2, #5
 800657c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	3301      	adds	r3, #1
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	429a      	cmp	r2, r3
 800659a:	d307      	bcc.n	80065ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f2      	bne.n	8006590 <HAL_DMA_IRQHandler+0x2cc>
 80065aa:	e000      	b.n	80065ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80065ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	e000      	b.n	80065d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80065d0:	bf00      	nop
    }
  }
}
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800660c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b40      	cmp	r3, #64	@ 0x40
 800661c:	d108      	bne.n	8006630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800662e:	e007      	b.n	8006640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	60da      	str	r2, [r3, #12]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	3b10      	subs	r3, #16
 800665c:	4a13      	ldr	r2, [pc, #76]	@ (80066ac <DMA_CalcBaseAndBitshift+0x60>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	091b      	lsrs	r3, r3, #4
 8006664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006666:	4a12      	ldr	r2, [pc, #72]	@ (80066b0 <DMA_CalcBaseAndBitshift+0x64>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d908      	bls.n	800668c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	4b0c      	ldr	r3, [pc, #48]	@ (80066b4 <DMA_CalcBaseAndBitshift+0x68>)
 8006682:	4013      	ands	r3, r2
 8006684:	1d1a      	adds	r2, r3, #4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	659a      	str	r2, [r3, #88]	@ 0x58
 800668a:	e006      	b.n	800669a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	4b08      	ldr	r3, [pc, #32]	@ (80066b4 <DMA_CalcBaseAndBitshift+0x68>)
 8006694:	4013      	ands	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	aaaaaaab 	.word	0xaaaaaaab
 80066b0:	0801f4c8 	.word	0x0801f4c8
 80066b4:	fffffc00 	.word	0xfffffc00

080066b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d11f      	bne.n	8006712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d856      	bhi.n	8006786 <DMA_CheckFifoParam+0xce>
 80066d8:	a201      	add	r2, pc, #4	@ (adr r2, 80066e0 <DMA_CheckFifoParam+0x28>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	08006703 	.word	0x08006703
 80066e8:	080066f1 	.word	0x080066f1
 80066ec:	08006787 	.word	0x08006787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d046      	beq.n	800678a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006700:	e043      	b.n	800678a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006706:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800670a:	d140      	bne.n	800678e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006710:	e03d      	b.n	800678e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671a:	d121      	bne.n	8006760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b03      	cmp	r3, #3
 8006720:	d837      	bhi.n	8006792 <DMA_CheckFifoParam+0xda>
 8006722:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <DMA_CheckFifoParam+0x70>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006739 	.word	0x08006739
 800672c:	0800673f 	.word	0x0800673f
 8006730:	08006739 	.word	0x08006739
 8006734:	08006751 	.word	0x08006751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e030      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d025      	beq.n	8006796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800674e:	e022      	b.n	8006796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006758:	d11f      	bne.n	800679a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800675e:	e01c      	b.n	800679a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d903      	bls.n	800676e <DMA_CheckFifoParam+0xb6>
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d003      	beq.n	8006774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800676c:	e018      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]
      break;
 8006772:	e015      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00e      	beq.n	800679e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	73fb      	strb	r3, [r7, #15]
      break;
 8006784:	e00b      	b.n	800679e <DMA_CheckFifoParam+0xe6>
      break;
 8006786:	bf00      	nop
 8006788:	e00a      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
      break;
 800678a:	bf00      	nop
 800678c:	e008      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
      break;
 800678e:	bf00      	nop
 8006790:	e006      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
      break;
 8006792:	bf00      	nop
 8006794:	e004      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
      break;
 8006796:	bf00      	nop
 8006798:	e002      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800679a:	bf00      	nop
 800679c:	e000      	b.n	80067a0 <DMA_CheckFifoParam+0xe8>
      break;
 800679e:	bf00      	nop
    }
  } 
  
  return status; 
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop

080067b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e039      	b.n	8006836 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fd f8ca 	bl	8003970 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006800:	f023 0107 	bic.w	r1, r3, #7
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006816:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <HAL_DMA2D_Init+0x90>)
 8006818:	4013      	ands	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68d1      	ldr	r1, [r2, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	430b      	orrs	r3, r1
 8006824:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	ffffc000 	.word	0xffffc000

08006844 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d026      	beq.n	80068b4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d021      	beq.n	80068b4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800687e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	f043 0201 	orr.w	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2201      	movs	r2, #1
 8006892:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2204      	movs	r2, #4
 8006898:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d026      	beq.n	800690c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d021      	beq.n	800690c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068d6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2220      	movs	r2, #32
 80068de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e4:	f043 0202 	orr.w	r2, r3, #2
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2204      	movs	r2, #4
 80068f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d026      	beq.n	8006964 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800691c:	2b00      	cmp	r3, #0
 800691e:	d021      	beq.n	8006964 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800692e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2208      	movs	r2, #8
 8006936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	f043 0204 	orr.w	r2, r3, #4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2204      	movs	r2, #4
 8006948:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d013      	beq.n	8006996 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006986:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2204      	movs	r2, #4
 800698e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f853 	bl	8006a3c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d024      	beq.n	80069ea <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d01f      	beq.n	80069ea <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80069b8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2202      	movs	r2, #2
 80069c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01f      	beq.n	8006a34 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01a      	beq.n	8006a34 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a0c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2210      	movs	r2, #16
 8006a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f80e 	bl	8006a50 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_DMA2D_ConfigLayer+0x20>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e079      	b.n	8006b78 <HAL_DMA2D_ConfigLayer+0x114>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	3318      	adds	r3, #24
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006aae:	4b35      	ldr	r3, [pc, #212]	@ (8006b84 <HAL_DMA2D_ConfigLayer+0x120>)
 8006ab0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b0a      	cmp	r3, #10
 8006ab8:	d003      	beq.n	8006ac2 <HAL_DMA2D_ConfigLayer+0x5e>
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b09      	cmp	r3, #9
 8006ac0:	d107      	bne.n	8006ad2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	e005      	b.n	8006ade <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	061b      	lsls	r3, r3, #24
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d120      	bne.n	8006b26 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	43db      	mvns	r3, r3
 8006aee:	ea02 0103 	and.w	r1, r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	2b0a      	cmp	r3, #10
 8006b0c:	d003      	beq.n	8006b16 <HAL_DMA2D_ConfigLayer+0xb2>
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2b09      	cmp	r3, #9
 8006b14:	d127      	bne.n	8006b66 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006b22:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b24:	e01f      	b.n	8006b66 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	ea02 0103 	and.w	r1, r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	6812      	ldr	r2, [r2, #0]
 8006b46:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b0a      	cmp	r3, #10
 8006b4e:	d003      	beq.n	8006b58 <HAL_DMA2D_ConfigLayer+0xf4>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	d106      	bne.n	8006b66 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006b64:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	ff03000f 	.word	0xff03000f

08006b88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e086      	b.n	8006ca8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7fc ff05 	bl	80039bc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8006cb0 <HAL_ETH_Init+0x128>)
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8006cb0 <HAL_ETH_Init+0x128>)
 8006bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8006cb0 <HAL_ETH_Init+0x128>)
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006bca:	4b3a      	ldr	r3, [pc, #232]	@ (8006cb4 <HAL_ETH_Init+0x12c>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	4a39      	ldr	r2, [pc, #228]	@ (8006cb4 <HAL_ETH_Init+0x12c>)
 8006bd0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006bd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006bd6:	4b37      	ldr	r3, [pc, #220]	@ (8006cb4 <HAL_ETH_Init+0x12c>)
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	4935      	ldr	r1, [pc, #212]	@ (8006cb4 <HAL_ETH_Init+0x12c>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006be4:	4b33      	ldr	r3, [pc, #204]	@ (8006cb4 <HAL_ETH_Init+0x12c>)
 8006be6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006bfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c00:	f7fe fc4c 	bl	800549c <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006c06:	e011      	b.n	8006c2c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006c08:	f7fe fc48 	bl	800549c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006c16:	d909      	bls.n	8006c2c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	22e0      	movs	r2, #224	@ 0xe0
 8006c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e03d      	b.n	8006ca8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e4      	bne.n	8006c08 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f97a 	bl	8006f38 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fa25 	bl	8007094 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa7b 	bl	8007146 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	461a      	mov	r2, r3
 8006c56:	2100      	movs	r1, #0
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f9e3 	bl	8007024 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8006c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb8 <HAL_ETH_Init+0x130>)
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8006c92:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2210      	movs	r2, #16
 8006ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40013800 	.word	0x40013800
 8006cb8:	00020060 	.word	0x00020060

08006cbc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4b53      	ldr	r3, [pc, #332]	@ (8006e20 <ETH_SetMACConfig+0x164>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	7b9b      	ldrb	r3, [r3, #14]
 8006cda:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	7c12      	ldrb	r2, [r2, #16]
 8006ce0:	2a00      	cmp	r2, #0
 8006ce2:	d102      	bne.n	8006cea <ETH_SetMACConfig+0x2e>
 8006ce4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ce8:	e000      	b.n	8006cec <ETH_SetMACConfig+0x30>
 8006cea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006cec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	7c52      	ldrb	r2, [r2, #17]
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	d102      	bne.n	8006cfc <ETH_SetMACConfig+0x40>
 8006cf6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006cfa:	e000      	b.n	8006cfe <ETH_SetMACConfig+0x42>
 8006cfc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006cfe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006d04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	7fdb      	ldrb	r3, [r3, #31]
 8006d0a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006d0c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006d12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	7f92      	ldrb	r2, [r2, #30]
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	d102      	bne.n	8006d22 <ETH_SetMACConfig+0x66>
 8006d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006d20:	e000      	b.n	8006d24 <ETH_SetMACConfig+0x68>
 8006d22:	2200      	movs	r2, #0
                        macconf->Speed |
 8006d24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	7f1b      	ldrb	r3, [r3, #28]
 8006d2a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006d2c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006d32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	791b      	ldrb	r3, [r3, #4]
 8006d38:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006d3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	d102      	bne.n	8006d4c <ETH_SetMACConfig+0x90>
 8006d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d4a:	e000      	b.n	8006d4e <ETH_SetMACConfig+0x92>
 8006d4c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006d4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	7bdb      	ldrb	r3, [r3, #15]
 8006d54:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006d56:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006d5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d64:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006d66:	4313      	orrs	r3, r2
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006d7e:	2001      	movs	r0, #1
 8006d80:	f7fe fb98 	bl	80054b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d101      	bne.n	8006db2 <ETH_SetMACConfig+0xf6>
 8006dae:	2280      	movs	r2, #128	@ 0x80
 8006db0:	e000      	b.n	8006db4 <ETH_SetMACConfig+0xf8>
 8006db2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006db4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006dba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8006dc2:	2a01      	cmp	r2, #1
 8006dc4:	d101      	bne.n	8006dca <ETH_SetMACConfig+0x10e>
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	e000      	b.n	8006dcc <ETH_SetMACConfig+0x110>
 8006dca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006dcc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8006dd4:	2a01      	cmp	r2, #1
 8006dd6:	d101      	bne.n	8006ddc <ETH_SetMACConfig+0x120>
 8006dd8:	2204      	movs	r2, #4
 8006dda:	e000      	b.n	8006dde <ETH_SetMACConfig+0x122>
 8006ddc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006dde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8006de6:	2a01      	cmp	r2, #1
 8006de8:	d101      	bne.n	8006dee <ETH_SetMACConfig+0x132>
 8006dea:	2202      	movs	r2, #2
 8006dec:	e000      	b.n	8006df0 <ETH_SetMACConfig+0x134>
 8006dee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006df0:	4313      	orrs	r3, r2
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006e08:	2001      	movs	r0, #1
 8006e0a:	f7fe fb53 	bl	80054b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	619a      	str	r2, [r3, #24]
}
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	fd20810f 	.word	0xfd20810f

08006e24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8006f34 <ETH_SetDMAConfig+0x110>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	7b1b      	ldrb	r3, [r3, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <ETH_SetDMAConfig+0x2c>
 8006e4a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006e4e:	e000      	b.n	8006e52 <ETH_SetDMAConfig+0x2e>
 8006e50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	7b5b      	ldrb	r3, [r3, #13]
 8006e56:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006e58:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	7f52      	ldrb	r2, [r2, #29]
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	d102      	bne.n	8006e68 <ETH_SetDMAConfig+0x44>
 8006e62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e66:	e000      	b.n	8006e6a <ETH_SetDMAConfig+0x46>
 8006e68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006e6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	7b9b      	ldrb	r3, [r3, #14]
 8006e70:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006e72:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006e78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	7f1b      	ldrb	r3, [r3, #28]
 8006e7e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006e80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	7f9b      	ldrb	r3, [r3, #30]
 8006e86:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006e88:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006e8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e96:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006eba:	2001      	movs	r0, #1
 8006ebc:	f7fe fafa 	bl	80054b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	791b      	ldrb	r3, [r3, #4]
 8006ed2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006ed8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006ede:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006ee4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006eec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006eee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006ef6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006efc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f0a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f7fe facb 	bl	80054b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f26:	461a      	mov	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6013      	str	r3, [r2, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	f8de3f23 	.word	0xf8de3f23

08006f38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b0a6      	sub	sp, #152	@ 0x98
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006fa0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006fa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006fb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fe7f 	bl	8006cbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006fea:	2301      	movs	r3, #1
 8006fec:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006fee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006ff2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006ff4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006ff8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006ffa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006ffe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007000:	2301      	movs	r3, #1
 8007002:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007006:	2300      	movs	r3, #0
 8007008:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800700a:	2300      	movs	r3, #0
 800700c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800700e:	f107 0308 	add.w	r3, r7, #8
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff ff05 	bl	8006e24 <ETH_SetDMAConfig>
}
 800701a:	bf00      	nop
 800701c:	3798      	adds	r7, #152	@ 0x98
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3305      	adds	r3, #5
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	3204      	adds	r2, #4
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	4b11      	ldr	r3, [pc, #68]	@ (800708c <ETH_MACAddressConfig+0x68>)
 8007046:	4413      	add	r3, r2
 8007048:	461a      	mov	r2, r3
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3303      	adds	r3, #3
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	061a      	lsls	r2, r3, #24
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3302      	adds	r3, #2
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	041b      	lsls	r3, r3, #16
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3301      	adds	r3, #1
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	4313      	orrs	r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	4313      	orrs	r3, r2
 8007070:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4b06      	ldr	r3, [pc, #24]	@ (8007090 <ETH_MACAddressConfig+0x6c>)
 8007076:	4413      	add	r3, r2
 8007078:	461a      	mov	r2, r3
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6013      	str	r3, [r2, #0]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40028040 	.word	0x40028040
 8007090:	40028044 	.word	0x40028044

08007094 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	e03e      	b.n	8007120 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68d9      	ldr	r1, [r3, #12]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	440b      	add	r3, r1
 80070b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2200      	movs	r2, #0
 80070be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2200      	movs	r2, #0
 80070ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	3206      	adds	r2, #6
 80070d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d80c      	bhi.n	8007104 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68d9      	ldr	r1, [r3, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	440b      	add	r3, r1
 80070fc:	461a      	mov	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	e004      	b.n	800710e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	461a      	mov	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3301      	adds	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b03      	cmp	r3, #3
 8007124:	d9bd      	bls.n	80070a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007138:	611a      	str	r2, [r3, #16]
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e048      	b.n	80071e6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6919      	ldr	r1, [r3, #16]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4613      	mov	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	440b      	add	r3, r1
 8007164:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2200      	movs	r2, #0
 8007176:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2200      	movs	r2, #0
 800717c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007190:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	3212      	adds	r2, #18
 80071b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d80c      	bhi.n	80071d6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6919      	ldr	r1, [r3, #16]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	440b      	add	r3, r1
 80071ce:	461a      	mov	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	60da      	str	r2, [r3, #12]
 80071d4:	e004      	b.n	80071e0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	461a      	mov	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d9b3      	bls.n	8007154 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007216:	60da      	str	r2, [r3, #12]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007224:	b480      	push	{r7}
 8007226:	b089      	sub	sp, #36	@ 0x24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800723a:	2300      	movs	r3, #0
 800723c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800723e:	2300      	movs	r3, #0
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	e175      	b.n	8007530 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007244:	2201      	movs	r2, #1
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	fa02 f303 	lsl.w	r3, r2, r3
 800724c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	4013      	ands	r3, r2
 8007256:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	429a      	cmp	r2, r3
 800725e:	f040 8164 	bne.w	800752a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	2b01      	cmp	r3, #1
 800726c:	d005      	beq.n	800727a <HAL_GPIO_Init+0x56>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d130      	bne.n	80072dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	2203      	movs	r2, #3
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	43db      	mvns	r3, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4013      	ands	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072b0:	2201      	movs	r2, #1
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	43db      	mvns	r3, r3
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	4013      	ands	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	091b      	lsrs	r3, r3, #4
 80072c6:	f003 0201 	and.w	r2, r3, #1
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d017      	beq.n	8007318 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	2203      	movs	r2, #3
 80072f4:	fa02 f303 	lsl.w	r3, r2, r3
 80072f8:	43db      	mvns	r3, r3
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	4013      	ands	r3, r2
 80072fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	4313      	orrs	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d123      	bne.n	800736c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	08da      	lsrs	r2, r3, #3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3208      	adds	r2, #8
 800732c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	220f      	movs	r2, #15
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	43db      	mvns	r3, r3
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	4013      	ands	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	fa02 f303 	lsl.w	r3, r2, r3
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	4313      	orrs	r3, r2
 800735c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	08da      	lsrs	r2, r3, #3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3208      	adds	r2, #8
 8007366:	69b9      	ldr	r1, [r7, #24]
 8007368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	2203      	movs	r2, #3
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	43db      	mvns	r3, r3
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4013      	ands	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f003 0203 	and.w	r2, r3, #3
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	4313      	orrs	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 80be 	beq.w	800752a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073ae:	4b66      	ldr	r3, [pc, #408]	@ (8007548 <HAL_GPIO_Init+0x324>)
 80073b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b2:	4a65      	ldr	r2, [pc, #404]	@ (8007548 <HAL_GPIO_Init+0x324>)
 80073b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80073ba:	4b63      	ldr	r3, [pc, #396]	@ (8007548 <HAL_GPIO_Init+0x324>)
 80073bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80073c6:	4a61      	ldr	r2, [pc, #388]	@ (800754c <HAL_GPIO_Init+0x328>)
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	089b      	lsrs	r3, r3, #2
 80073cc:	3302      	adds	r3, #2
 80073ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	220f      	movs	r2, #15
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	43db      	mvns	r3, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a58      	ldr	r2, [pc, #352]	@ (8007550 <HAL_GPIO_Init+0x32c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d037      	beq.n	8007462 <HAL_GPIO_Init+0x23e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a57      	ldr	r2, [pc, #348]	@ (8007554 <HAL_GPIO_Init+0x330>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d031      	beq.n	800745e <HAL_GPIO_Init+0x23a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a56      	ldr	r2, [pc, #344]	@ (8007558 <HAL_GPIO_Init+0x334>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d02b      	beq.n	800745a <HAL_GPIO_Init+0x236>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a55      	ldr	r2, [pc, #340]	@ (800755c <HAL_GPIO_Init+0x338>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d025      	beq.n	8007456 <HAL_GPIO_Init+0x232>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a54      	ldr	r2, [pc, #336]	@ (8007560 <HAL_GPIO_Init+0x33c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d01f      	beq.n	8007452 <HAL_GPIO_Init+0x22e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a53      	ldr	r2, [pc, #332]	@ (8007564 <HAL_GPIO_Init+0x340>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d019      	beq.n	800744e <HAL_GPIO_Init+0x22a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a52      	ldr	r2, [pc, #328]	@ (8007568 <HAL_GPIO_Init+0x344>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d013      	beq.n	800744a <HAL_GPIO_Init+0x226>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a51      	ldr	r2, [pc, #324]	@ (800756c <HAL_GPIO_Init+0x348>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00d      	beq.n	8007446 <HAL_GPIO_Init+0x222>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a50      	ldr	r2, [pc, #320]	@ (8007570 <HAL_GPIO_Init+0x34c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <HAL_GPIO_Init+0x21e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a4f      	ldr	r2, [pc, #316]	@ (8007574 <HAL_GPIO_Init+0x350>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d101      	bne.n	800743e <HAL_GPIO_Init+0x21a>
 800743a:	2309      	movs	r3, #9
 800743c:	e012      	b.n	8007464 <HAL_GPIO_Init+0x240>
 800743e:	230a      	movs	r3, #10
 8007440:	e010      	b.n	8007464 <HAL_GPIO_Init+0x240>
 8007442:	2308      	movs	r3, #8
 8007444:	e00e      	b.n	8007464 <HAL_GPIO_Init+0x240>
 8007446:	2307      	movs	r3, #7
 8007448:	e00c      	b.n	8007464 <HAL_GPIO_Init+0x240>
 800744a:	2306      	movs	r3, #6
 800744c:	e00a      	b.n	8007464 <HAL_GPIO_Init+0x240>
 800744e:	2305      	movs	r3, #5
 8007450:	e008      	b.n	8007464 <HAL_GPIO_Init+0x240>
 8007452:	2304      	movs	r3, #4
 8007454:	e006      	b.n	8007464 <HAL_GPIO_Init+0x240>
 8007456:	2303      	movs	r3, #3
 8007458:	e004      	b.n	8007464 <HAL_GPIO_Init+0x240>
 800745a:	2302      	movs	r3, #2
 800745c:	e002      	b.n	8007464 <HAL_GPIO_Init+0x240>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <HAL_GPIO_Init+0x240>
 8007462:	2300      	movs	r3, #0
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	f002 0203 	and.w	r2, r2, #3
 800746a:	0092      	lsls	r2, r2, #2
 800746c:	4093      	lsls	r3, r2
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	4313      	orrs	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007474:	4935      	ldr	r1, [pc, #212]	@ (800754c <HAL_GPIO_Init+0x328>)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	089b      	lsrs	r3, r3, #2
 800747a:	3302      	adds	r3, #2
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007482:	4b3d      	ldr	r3, [pc, #244]	@ (8007578 <HAL_GPIO_Init+0x354>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	43db      	mvns	r3, r3
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	4013      	ands	r3, r2
 8007490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074a6:	4a34      	ldr	r2, [pc, #208]	@ (8007578 <HAL_GPIO_Init+0x354>)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074ac:	4b32      	ldr	r3, [pc, #200]	@ (8007578 <HAL_GPIO_Init+0x354>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	43db      	mvns	r3, r3
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	4013      	ands	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074d0:	4a29      	ldr	r2, [pc, #164]	@ (8007578 <HAL_GPIO_Init+0x354>)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80074d6:	4b28      	ldr	r3, [pc, #160]	@ (8007578 <HAL_GPIO_Init+0x354>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	43db      	mvns	r3, r3
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	4013      	ands	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007578 <HAL_GPIO_Init+0x354>)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007500:	4b1d      	ldr	r3, [pc, #116]	@ (8007578 <HAL_GPIO_Init+0x354>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	43db      	mvns	r3, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4013      	ands	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007524:	4a14      	ldr	r2, [pc, #80]	@ (8007578 <HAL_GPIO_Init+0x354>)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	3301      	adds	r3, #1
 800752e:	61fb      	str	r3, [r7, #28]
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	2b0f      	cmp	r3, #15
 8007534:	f67f ae86 	bls.w	8007244 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	3724      	adds	r7, #36	@ 0x24
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40023800 	.word	0x40023800
 800754c:	40013800 	.word	0x40013800
 8007550:	40020000 	.word	0x40020000
 8007554:	40020400 	.word	0x40020400
 8007558:	40020800 	.word	0x40020800
 800755c:	40020c00 	.word	0x40020c00
 8007560:	40021000 	.word	0x40021000
 8007564:	40021400 	.word	0x40021400
 8007568:	40021800 	.word	0x40021800
 800756c:	40021c00 	.word	0x40021c00
 8007570:	40022000 	.word	0x40022000
 8007574:	40022400 	.word	0x40022400
 8007578:	40013c00 	.word	0x40013c00

0800757c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691a      	ldr	r2, [r3, #16]
 800758c:	887b      	ldrh	r3, [r7, #2]
 800758e:	4013      	ands	r3, r2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007594:	2301      	movs	r3, #1
 8007596:	73fb      	strb	r3, [r7, #15]
 8007598:	e001      	b.n	800759e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	807b      	strh	r3, [r7, #2]
 80075b8:	4613      	mov	r3, r2
 80075ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075bc:	787b      	ldrb	r3, [r7, #1]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075c2:	887a      	ldrh	r2, [r7, #2]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80075c8:	e003      	b.n	80075d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80075ca:	887b      	ldrh	r3, [r7, #2]
 80075cc:	041a      	lsls	r2, r3, #16
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	619a      	str	r2, [r3, #24]
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af02      	add	r7, sp, #8
 80075e4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e059      	b.n	80076a4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d106      	bne.n	8007610 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f014 f916 	bl	801b83c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2203      	movs	r2, #3
 8007614:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800761e:	d102      	bne.n	8007626 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f00a f9e9 	bl	8011a02 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	7c1a      	ldrb	r2, [r3, #16]
 8007638:	f88d 2000 	strb.w	r2, [sp]
 800763c:	3304      	adds	r3, #4
 800763e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007640:	f00a f974 	bl	801192c <USB_CoreInit>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e026      	b.n	80076a4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2101      	movs	r1, #1
 800765c:	4618      	mov	r0, r3
 800765e:	f00a f9e1 	bl	8011a24 <USB_SetCurrentMode>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e017      	b.n	80076a4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	7c1a      	ldrb	r2, [r3, #16]
 800767c:	f88d 2000 	strb.w	r2, [sp]
 8007680:	3304      	adds	r3, #4
 8007682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007684:	f00a fb8a 	bl	8011d9c <USB_HostInit>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e004      	b.n	80076a4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80076ac:	b590      	push	{r4, r7, lr}
 80076ae:	b08b      	sub	sp, #44	@ 0x2c
 80076b0:	af04      	add	r7, sp, #16
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	4608      	mov	r0, r1
 80076b6:	4611      	mov	r1, r2
 80076b8:	461a      	mov	r2, r3
 80076ba:	4603      	mov	r3, r0
 80076bc:	70fb      	strb	r3, [r7, #3]
 80076be:	460b      	mov	r3, r1
 80076c0:	70bb      	strb	r3, [r7, #2]
 80076c2:	4613      	mov	r3, r2
 80076c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80076c6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80076c8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_HCD_HC_Init+0x2c>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e09d      	b.n	8007814 <HAL_HCD_HC_Init+0x168>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	3319      	adds	r3, #25
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	3314      	adds	r3, #20
 8007704:	787a      	ldrb	r2, [r7, #1]
 8007706:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	4613      	mov	r3, r2
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	3315      	adds	r3, #21
 8007718:	78fa      	ldrb	r2, [r7, #3]
 800771a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	4613      	mov	r3, r2
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	3326      	adds	r3, #38	@ 0x26
 800772c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007730:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007732:	78fa      	ldrb	r2, [r7, #3]
 8007734:	78bb      	ldrb	r3, [r7, #2]
 8007736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773a:	b2d8      	uxtb	r0, r3
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	1a9b      	subs	r3, r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	3316      	adds	r3, #22
 800774a:	4602      	mov	r2, r0
 800774c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fbc8 	bl	8007ee8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8007758:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0a      	bge.n	8007776 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	3317      	adds	r3, #23
 8007770:	2201      	movs	r2, #1
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	e009      	b.n	800778a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	1a9b      	subs	r3, r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	440b      	add	r3, r1
 8007784:	3317      	adds	r3, #23
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f00a fc5c 	bl	801204c <USB_GetHostSpeed>
 8007794:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8007796:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d10b      	bne.n	80077b6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800779e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d107      	bne.n	80077b6 <HAL_HCD_HC_Init+0x10a>
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d104      	bne.n	80077b6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2bbc      	cmp	r3, #188	@ 0xbc
 80077b0:	d901      	bls.n	80077b6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80077b2:	23bc      	movs	r3, #188	@ 0xbc
 80077b4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	3318      	adds	r3, #24
 80077c6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80077ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80077cc:	78fa      	ldrb	r2, [r7, #3]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	b298      	uxth	r0, r3
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4613      	mov	r3, r2
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	1a9b      	subs	r3, r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	3328      	adds	r3, #40	@ 0x28
 80077e0:	4602      	mov	r2, r0
 80077e2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	787c      	ldrb	r4, [r7, #1]
 80077ee:	78ba      	ldrb	r2, [r7, #2]
 80077f0:	78f9      	ldrb	r1, [r7, #3]
 80077f2:	9302      	str	r3, [sp, #8]
 80077f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4623      	mov	r3, r4
 8007802:	f00a fc4b 	bl	801209c <USB_HC_Init>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
}
 8007814:	4618      	mov	r0, r3
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	bd90      	pop	{r4, r7, pc}

0800781c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_HCD_HC_Halt+0x1e>
 8007836:	2302      	movs	r3, #2
 8007838:	e00f      	b.n	800785a <HAL_HCD_HC_Halt+0x3e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f00a ffdd 	bl	801280a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	4608      	mov	r0, r1
 800786e:	4611      	mov	r1, r2
 8007870:	461a      	mov	r2, r3
 8007872:	4603      	mov	r3, r0
 8007874:	70fb      	strb	r3, [r7, #3]
 8007876:	460b      	mov	r3, r1
 8007878:	70bb      	strb	r3, [r7, #2]
 800787a:	4613      	mov	r3, r2
 800787c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800787e:	78fa      	ldrb	r2, [r7, #3]
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	3317      	adds	r3, #23
 800788e:	78ba      	ldrb	r2, [r7, #2]
 8007890:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007892:	78fa      	ldrb	r2, [r7, #3]
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	3326      	adds	r3, #38	@ 0x26
 80078a2:	787a      	ldrb	r2, [r7, #1]
 80078a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80078a6:	7c3b      	ldrb	r3, [r7, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d114      	bne.n	80078d6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	332a      	adds	r3, #42	@ 0x2a
 80078bc:	2203      	movs	r2, #3
 80078be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	4613      	mov	r3, r2
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	1a9b      	subs	r3, r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	440b      	add	r3, r1
 80078ce:	3319      	adds	r3, #25
 80078d0:	7f3a      	ldrb	r2, [r7, #28]
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	e009      	b.n	80078ea <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80078d6:	78fa      	ldrb	r2, [r7, #3]
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	1a9b      	subs	r3, r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	440b      	add	r3, r1
 80078e4:	332a      	adds	r3, #42	@ 0x2a
 80078e6:	2202      	movs	r2, #2
 80078e8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80078ea:	787b      	ldrb	r3, [r7, #1]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	f200 8102 	bhi.w	8007af6 <HAL_HCD_HC_SubmitRequest+0x292>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007909 	.word	0x08007909
 80078fc:	08007ae1 	.word	0x08007ae1
 8007900:	080079cd 	.word	0x080079cd
 8007904:	08007a57 	.word	0x08007a57
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8007908:	7c3b      	ldrb	r3, [r7, #16]
 800790a:	2b01      	cmp	r3, #1
 800790c:	f040 80f5 	bne.w	8007afa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8007910:	78bb      	ldrb	r3, [r7, #2]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d12d      	bne.n	8007972 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8007916:	8b3b      	ldrh	r3, [r7, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d109      	bne.n	8007930 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800791c:	78fa      	ldrb	r2, [r7, #3]
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	4613      	mov	r3, r2
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	333d      	adds	r3, #61	@ 0x3d
 800792c:	2201      	movs	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8007930:	78fa      	ldrb	r2, [r7, #3]
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	4613      	mov	r3, r2
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	333d      	adds	r3, #61	@ 0x3d
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10a      	bne.n	800795c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	4613      	mov	r3, r2
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	440b      	add	r3, r1
 8007954:	332a      	adds	r3, #42	@ 0x2a
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800795a:	e0ce      	b.n	8007afa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800795c:	78fa      	ldrb	r2, [r7, #3]
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	011b      	lsls	r3, r3, #4
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	332a      	adds	r3, #42	@ 0x2a
 800796c:	2202      	movs	r2, #2
 800796e:	701a      	strb	r2, [r3, #0]
      break;
 8007970:	e0c3      	b.n	8007afa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	1a9b      	subs	r3, r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	331a      	adds	r3, #26
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	f040 80b8 	bne.w	8007afa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	4613      	mov	r3, r2
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	440b      	add	r3, r1
 8007998:	333c      	adds	r3, #60	@ 0x3c
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	4613      	mov	r3, r2
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	1a9b      	subs	r3, r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	440b      	add	r3, r1
 80079ae:	332a      	adds	r3, #42	@ 0x2a
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
      break;
 80079b4:	e0a1      	b.n	8007afa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	332a      	adds	r3, #42	@ 0x2a
 80079c6:	2202      	movs	r2, #2
 80079c8:	701a      	strb	r2, [r3, #0]
      break;
 80079ca:	e096      	b.n	8007afa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80079cc:	78bb      	ldrb	r3, [r7, #2]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d120      	bne.n	8007a14 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	333d      	adds	r3, #61	@ 0x3d
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	4613      	mov	r3, r2
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	332a      	adds	r3, #42	@ 0x2a
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80079fc:	e07e      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80079fe:	78fa      	ldrb	r2, [r7, #3]
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	011b      	lsls	r3, r3, #4
 8007a06:	1a9b      	subs	r3, r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	332a      	adds	r3, #42	@ 0x2a
 8007a0e:	2202      	movs	r2, #2
 8007a10:	701a      	strb	r2, [r3, #0]
      break;
 8007a12:	e073      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007a14:	78fa      	ldrb	r2, [r7, #3]
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	333c      	adds	r3, #60	@ 0x3c
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	1a9b      	subs	r3, r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	332a      	adds	r3, #42	@ 0x2a
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	701a      	strb	r2, [r3, #0]
      break;
 8007a3e:	e05d      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	1a9b      	subs	r3, r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	332a      	adds	r3, #42	@ 0x2a
 8007a50:	2202      	movs	r2, #2
 8007a52:	701a      	strb	r2, [r3, #0]
      break;
 8007a54:	e052      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007a56:	78bb      	ldrb	r3, [r7, #2]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d120      	bne.n	8007a9e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007a5c:	78fa      	ldrb	r2, [r7, #3]
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	333d      	adds	r3, #61	@ 0x3d
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	4613      	mov	r3, r2
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	332a      	adds	r3, #42	@ 0x2a
 8007a82:	2200      	movs	r2, #0
 8007a84:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007a86:	e039      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007a88:	78fa      	ldrb	r2, [r7, #3]
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	1a9b      	subs	r3, r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	332a      	adds	r3, #42	@ 0x2a
 8007a98:	2202      	movs	r2, #2
 8007a9a:	701a      	strb	r2, [r3, #0]
      break;
 8007a9c:	e02e      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	333c      	adds	r3, #60	@ 0x3c
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	332a      	adds	r3, #42	@ 0x2a
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
      break;
 8007ac8:	e018      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007aca:	78fa      	ldrb	r2, [r7, #3]
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	1a9b      	subs	r3, r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	440b      	add	r3, r1
 8007ad8:	332a      	adds	r3, #42	@ 0x2a
 8007ada:	2202      	movs	r2, #2
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e00d      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007ae0:	78fa      	ldrb	r2, [r7, #3]
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	332a      	adds	r3, #42	@ 0x2a
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
      break;
 8007af4:	e002      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8007af6:	bf00      	nop
 8007af8:	e000      	b.n	8007afc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8007afa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4613      	mov	r3, r2
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	332c      	adds	r3, #44	@ 0x2c
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	8b39      	ldrh	r1, [r7, #24]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4613      	mov	r3, r2
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4403      	add	r3, r0
 8007b20:	3334      	adds	r3, #52	@ 0x34
 8007b22:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007b24:	78fa      	ldrb	r2, [r7, #3]
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	440b      	add	r3, r1
 8007b32:	334c      	adds	r3, #76	@ 0x4c
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007b38:	78fa      	ldrb	r2, [r7, #3]
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	3338      	adds	r3, #56	@ 0x38
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007b4c:	78fa      	ldrb	r2, [r7, #3]
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4613      	mov	r3, r2
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	3315      	adds	r3, #21
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	334d      	adds	r3, #77	@ 0x4d
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	1a9b      	subs	r3, r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	3310      	adds	r3, #16
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	1d19      	adds	r1, r3, #4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	799b      	ldrb	r3, [r3, #6]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f00a fbb0 	bl	80122f4 <USB_HC_StartXfer>
 8007b94:	4603      	mov	r3, r0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop

08007ba0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f00a f8aa 	bl	8011d10 <USB_GetMode>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	f040 80fb 	bne.w	8007dba <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f00a f86d 	bl	8011ca8 <USB_ReadInterrupts>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80f1 	beq.w	8007db8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f00a f864 	bl	8011ca8 <USB_ReadInterrupts>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007be6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bea:	d104      	bne.n	8007bf6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007bf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f00a f854 	bl	8011ca8 <USB_ReadInterrupts>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c0a:	d104      	bne.n	8007c16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f00a f844 	bl	8011ca8 <USB_ReadInterrupts>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c2a:	d104      	bne.n	8007c36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007c34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f00a f834 	bl	8011ca8 <USB_ReadInterrupts>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d103      	bne.n	8007c52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f00a f826 	bl	8011ca8 <USB_ReadInterrupts>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c66:	d120      	bne.n	8007caa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007c70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d113      	bne.n	8007caa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007c82:	2110      	movs	r1, #16
 8007c84:	6938      	ldr	r0, [r7, #16]
 8007c86:	f009 ff19 	bl	8011abc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007c8a:	6938      	ldr	r0, [r7, #16]
 8007c8c:	f009 ff48 	bl	8011b20 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7a5b      	ldrb	r3, [r3, #9]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d105      	bne.n	8007ca4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f00a f934 	bl	8011f0c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f013 fe3b 	bl	801b920 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f009 fffa 	bl	8011ca8 <USB_ReadInterrupts>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cbe:	d102      	bne.n	8007cc6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 fd4d 	bl	8009760 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f009 ffec 	bl	8011ca8 <USB_ReadInterrupts>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b08      	cmp	r3, #8
 8007cd8:	d106      	bne.n	8007ce8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f013 fe04 	bl	801b8e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2208      	movs	r2, #8
 8007ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f009 ffdb 	bl	8011ca8 <USB_ReadInterrupts>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cfc:	d139      	bne.n	8007d72 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f00a fd70 	bl	80127e8 <USB_HC_ReadInterrupt>
 8007d08:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	e025      	b.n	8007d5c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d018      	beq.n	8007d56 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d3a:	d106      	bne.n	8007d4a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f905 	bl	8007f52 <HCD_HC_IN_IRQHandler>
 8007d48:	e005      	b.n	8007d56 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 ff67 	bl	8008c24 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	795b      	ldrb	r3, [r3, #5]
 8007d60:	461a      	mov	r2, r3
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d3d3      	bcc.n	8007d10 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f009 ff96 	bl	8011ca8 <USB_ReadInterrupts>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f003 0310 	and.w	r3, r3, #16
 8007d82:	2b10      	cmp	r3, #16
 8007d84:	d101      	bne.n	8007d8a <HAL_HCD_IRQHandler+0x1ea>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <HAL_HCD_IRQHandler+0x1ec>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d014      	beq.n	8007dba <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0210 	bic.w	r2, r2, #16
 8007d9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 fbfe 	bl	80095a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699a      	ldr	r2, [r3, #24]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0210 	orr.w	r2, r2, #16
 8007db4:	619a      	str	r2, [r3, #24]
 8007db6:	e000      	b.n	8007dba <HAL_HCD_IRQHandler+0x21a>
      return;
 8007db8:	bf00      	nop
    }
  }
}
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_HCD_Start+0x16>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e013      	b.n	8007dfe <HAL_HCD_Start+0x3e>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2101      	movs	r1, #1
 8007de4:	4618      	mov	r0, r3
 8007de6:	f00a f8f8 	bl	8011fda <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f009 fdf6 	bl	80119e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_HCD_Stop+0x16>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e00d      	b.n	8007e38 <HAL_HCD_Stop+0x32>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f00a fe4b 	bl	8012ac4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f00a f89a 	bl	8011f86 <USB_ResetPort>
 8007e52:	4603      	mov	r3, r0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	440b      	add	r3, r1
 8007e76:	334c      	adds	r3, #76	@ 0x4c
 8007e78:	781b      	ldrb	r3, [r3, #0]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3338      	adds	r3, #56	@ 0x38
 8007ea2:	681b      	ldr	r3, [r3, #0]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f00a f8dc 	bl	801207a <USB_GetCurrentFrame>
 8007ec2:	4603      	mov	r3, r0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f00a f8b7 	bl	801204c <USB_GetHostSpeed>
 8007ede:	4603      	mov	r3, r0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	331a      	adds	r3, #26
 8007f04:	2200      	movs	r2, #0
 8007f06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	331b      	adds	r3, #27
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8007f1c:	78fa      	ldrb	r2, [r7, #3]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	3325      	adds	r3, #37	@ 0x25
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8007f30:	78fa      	ldrb	r2, [r7, #3]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	1a9b      	subs	r3, r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	3324      	adds	r3, #36	@ 0x24
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b086      	sub	sp, #24
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	78fa      	ldrb	r2, [r7, #3]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f009 feac 	bl	8011cce <USB_ReadChInterrupts>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d11a      	bne.n	8007fb6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2304      	movs	r3, #4
 8007f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	334d      	adds	r3, #77	@ 0x4d
 8007fa2:	2207      	movs	r2, #7
 8007fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f00a fc2b 	bl	801280a <USB_HC_Halt>
 8007fb4:	e09e      	b.n	80080f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f009 fe85 	bl	8011cce <USB_ReadChInterrupts>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fce:	d11b      	bne.n	8008008 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	334d      	adds	r3, #77	@ 0x4d
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	78fa      	ldrb	r2, [r7, #3]
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f00a fc02 	bl	801280a <USB_HC_Halt>
 8008006:	e075      	b.n	80080f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	78fa      	ldrb	r2, [r7, #3]
 800800e:	4611      	mov	r1, r2
 8008010:	4618      	mov	r0, r3
 8008012:	f009 fe5c 	bl	8011cce <USB_ReadChInterrupts>
 8008016:	4603      	mov	r3, r0
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b08      	cmp	r3, #8
 800801e:	d11a      	bne.n	8008056 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	4413      	add	r3, r2
 8008028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802c:	461a      	mov	r2, r3
 800802e:	2308      	movs	r3, #8
 8008030:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008032:	78fa      	ldrb	r2, [r7, #3]
 8008034:	6879      	ldr	r1, [r7, #4]
 8008036:	4613      	mov	r3, r2
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	440b      	add	r3, r1
 8008040:	334d      	adds	r3, #77	@ 0x4d
 8008042:	2206      	movs	r2, #6
 8008044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f00a fbdb 	bl	801280a <USB_HC_Halt>
 8008054:	e04e      	b.n	80080f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	4611      	mov	r1, r2
 800805e:	4618      	mov	r0, r3
 8008060:	f009 fe35 	bl	8011cce <USB_ReadChInterrupts>
 8008064:	4603      	mov	r3, r0
 8008066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800806a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800806e:	d11b      	bne.n	80080a8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	4413      	add	r3, r2
 8008078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800807c:	461a      	mov	r2, r3
 800807e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008082:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008084:	78fa      	ldrb	r2, [r7, #3]
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4613      	mov	r3, r2
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	334d      	adds	r3, #77	@ 0x4d
 8008094:	2209      	movs	r2, #9
 8008096:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	4611      	mov	r1, r2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f00a fbb2 	bl	801280a <USB_HC_Halt>
 80080a6:	e025      	b.n	80080f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f009 fe0c 	bl	8011cce <USB_ReadChInterrupts>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080bc:	2b80      	cmp	r3, #128	@ 0x80
 80080be:	d119      	bne.n	80080f4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080cc:	461a      	mov	r2, r3
 80080ce:	2380      	movs	r3, #128	@ 0x80
 80080d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80080d2:	78fa      	ldrb	r2, [r7, #3]
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	334d      	adds	r3, #77	@ 0x4d
 80080e2:	2207      	movs	r2, #7
 80080e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f00a fb8b 	bl	801280a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f009 fde6 	bl	8011cce <USB_ReadChInterrupts>
 8008102:	4603      	mov	r3, r0
 8008104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800810c:	d112      	bne.n	8008134 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f00a fb77 	bl	801280a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008128:	461a      	mov	r2, r3
 800812a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800812e:	6093      	str	r3, [r2, #8]
 8008130:	f000 bd75 	b.w	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f009 fdc6 	bl	8011cce <USB_ReadChInterrupts>
 8008142:	4603      	mov	r3, r0
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b01      	cmp	r3, #1
 800814a:	f040 8128 	bne.w	800839e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800815a:	461a      	mov	r2, r3
 800815c:	2320      	movs	r3, #32
 800815e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008160:	78fa      	ldrb	r2, [r7, #3]
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	011b      	lsls	r3, r3, #4
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	331b      	adds	r3, #27
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d119      	bne.n	80081aa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	331b      	adds	r3, #27
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	4413      	add	r3, r2
 8008192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081a8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	799b      	ldrb	r3, [r3, #6]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01b      	beq.n	80081ea <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	3330      	adds	r3, #48	@ 0x30
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	1ac9      	subs	r1, r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4613      	mov	r3, r2
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	1a9b      	subs	r3, r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4403      	add	r3, r0
 80081e6:	3338      	adds	r3, #56	@ 0x38
 80081e8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	6879      	ldr	r1, [r7, #4]
 80081ee:	4613      	mov	r3, r2
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	440b      	add	r3, r1
 80081f8:	334d      	adds	r3, #77	@ 0x4d
 80081fa:	2201      	movs	r2, #1
 80081fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80081fe:	78fa      	ldrb	r2, [r7, #3]
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	4613      	mov	r3, r2
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	3344      	adds	r3, #68	@ 0x44
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008212:	78fb      	ldrb	r3, [r7, #3]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4413      	add	r3, r2
 800821a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800821e:	461a      	mov	r2, r3
 8008220:	2301      	movs	r3, #1
 8008222:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	3326      	adds	r3, #38	@ 0x26
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800823a:	78fa      	ldrb	r2, [r7, #3]
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	4613      	mov	r3, r2
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	440b      	add	r3, r1
 8008248:	3326      	adds	r3, #38	@ 0x26
 800824a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800824c:	2b02      	cmp	r3, #2
 800824e:	d110      	bne.n	8008272 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	78fa      	ldrb	r2, [r7, #3]
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f00a fad6 	bl	801280a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	4413      	add	r3, r2
 8008266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800826a:	461a      	mov	r2, r3
 800826c:	2310      	movs	r3, #16
 800826e:	6093      	str	r3, [r2, #8]
 8008270:	e03d      	b.n	80082ee <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	3326      	adds	r3, #38	@ 0x26
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d00a      	beq.n	800829e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	3326      	adds	r3, #38	@ 0x26
 8008298:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800829a:	2b01      	cmp	r3, #1
 800829c:	d127      	bne.n	80082ee <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082bc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	4613      	mov	r3, r2
 80082c4:	011b      	lsls	r3, r3, #4
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	440b      	add	r3, r1
 80082cc:	334c      	adds	r3, #76	@ 0x4c
 80082ce:	2201      	movs	r2, #1
 80082d0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80082d2:	78fa      	ldrb	r2, [r7, #3]
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	4613      	mov	r3, r2
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	1a9b      	subs	r3, r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	440b      	add	r3, r1
 80082e0:	334c      	adds	r3, #76	@ 0x4c
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f013 fb27 	bl	801b93c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	799b      	ldrb	r3, [r3, #6]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d13b      	bne.n	800836e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	3338      	adds	r3, #56	@ 0x38
 8008306:	6819      	ldr	r1, [r3, #0]
 8008308:	78fa      	ldrb	r2, [r7, #3]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4613      	mov	r3, r2
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4403      	add	r3, r0
 8008316:	3328      	adds	r3, #40	@ 0x28
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	440b      	add	r3, r1
 800831c:	1e59      	subs	r1, r3, #1
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4403      	add	r3, r0
 800832c:	3328      	adds	r3, #40	@ 0x28
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	fbb1 f3f3 	udiv	r3, r1, r3
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 8470 	beq.w	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	1a9b      	subs	r3, r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	333c      	adds	r3, #60	@ 0x3c
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	f083 0301 	eor.w	r3, r3, #1
 8008356:	b2d8      	uxtb	r0, r3
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	333c      	adds	r3, #60	@ 0x3c
 8008366:	4602      	mov	r2, r0
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	f000 bc58 	b.w	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800836e:	78fa      	ldrb	r2, [r7, #3]
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	333c      	adds	r3, #60	@ 0x3c
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	f083 0301 	eor.w	r3, r3, #1
 8008386:	b2d8      	uxtb	r0, r3
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	333c      	adds	r3, #60	@ 0x3c
 8008396:	4602      	mov	r2, r0
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	f000 bc40 	b.w	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f009 fc91 	bl	8011cce <USB_ReadChInterrupts>
 80083ac:	4603      	mov	r3, r0
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d131      	bne.n	800841a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c2:	461a      	mov	r2, r3
 80083c4:	2320      	movs	r3, #32
 80083c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80083c8:	78fa      	ldrb	r2, [r7, #3]
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	331a      	adds	r3, #26
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	f040 841f 	bne.w	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	1a9b      	subs	r3, r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	331b      	adds	r3, #27
 80083f0:	2201      	movs	r2, #1
 80083f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	1a9b      	subs	r3, r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	334d      	adds	r3, #77	@ 0x4d
 8008404:	2203      	movs	r2, #3
 8008406:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	78fa      	ldrb	r2, [r7, #3]
 800840e:	4611      	mov	r1, r2
 8008410:	4618      	mov	r0, r3
 8008412:	f00a f9fa 	bl	801280a <USB_HC_Halt>
 8008416:	f000 bc02 	b.w	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	78fa      	ldrb	r2, [r7, #3]
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f009 fc53 	bl	8011cce <USB_ReadChInterrupts>
 8008428:	4603      	mov	r3, r0
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b02      	cmp	r3, #2
 8008430:	f040 8305 	bne.w	8008a3e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	4413      	add	r3, r2
 800843c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008440:	461a      	mov	r2, r3
 8008442:	2302      	movs	r3, #2
 8008444:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	1a9b      	subs	r3, r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	440b      	add	r3, r1
 8008454:	334d      	adds	r3, #77	@ 0x4d
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d114      	bne.n	8008486 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800845c:	78fa      	ldrb	r2, [r7, #3]
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4613      	mov	r3, r2
 8008462:	011b      	lsls	r3, r3, #4
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	334d      	adds	r3, #77	@ 0x4d
 800846c:	2202      	movs	r2, #2
 800846e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	334c      	adds	r3, #76	@ 0x4c
 8008480:	2201      	movs	r2, #1
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	e2cc      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	334d      	adds	r3, #77	@ 0x4d
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b06      	cmp	r3, #6
 800849a:	d114      	bne.n	80084c6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	334d      	adds	r3, #77	@ 0x4d
 80084ac:	2202      	movs	r2, #2
 80084ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80084b0:	78fa      	ldrb	r2, [r7, #3]
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	1a9b      	subs	r3, r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	334c      	adds	r3, #76	@ 0x4c
 80084c0:	2205      	movs	r2, #5
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	e2ac      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	1a9b      	subs	r3, r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	440b      	add	r3, r1
 80084d4:	334d      	adds	r3, #77	@ 0x4d
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b07      	cmp	r3, #7
 80084da:	d00b      	beq.n	80084f4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4613      	mov	r3, r2
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	440b      	add	r3, r1
 80084ea:	334d      	adds	r3, #77	@ 0x4d
 80084ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	f040 80a6 	bne.w	8008640 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80084f4:	78fa      	ldrb	r2, [r7, #3]
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	1a9b      	subs	r3, r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	334d      	adds	r3, #77	@ 0x4d
 8008504:	2202      	movs	r2, #2
 8008506:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	3344      	adds	r3, #68	@ 0x44
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	1c59      	adds	r1, r3, #1
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	4613      	mov	r3, r2
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4403      	add	r3, r0
 8008528:	3344      	adds	r3, #68	@ 0x44
 800852a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	1a9b      	subs	r3, r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	3344      	adds	r3, #68	@ 0x44
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b02      	cmp	r3, #2
 8008540:	d943      	bls.n	80085ca <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008542:	78fa      	ldrb	r2, [r7, #3]
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	4613      	mov	r3, r2
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	3344      	adds	r3, #68	@ 0x44
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008556:	78fa      	ldrb	r2, [r7, #3]
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	011b      	lsls	r3, r3, #4
 800855e:	1a9b      	subs	r3, r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	331a      	adds	r3, #26
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d123      	bne.n	80085b4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800856c:	78fa      	ldrb	r2, [r7, #3]
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	4613      	mov	r3, r2
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	331b      	adds	r3, #27
 800857c:	2200      	movs	r2, #0
 800857e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	4613      	mov	r3, r2
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	1a9b      	subs	r3, r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	440b      	add	r3, r1
 800858e:	331c      	adds	r3, #28
 8008590:	2200      	movs	r2, #0
 8008592:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085b2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4613      	mov	r3, r2
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	1a9b      	subs	r3, r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	334c      	adds	r3, #76	@ 0x4c
 80085c4:	2204      	movs	r2, #4
 80085c6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80085c8:	e229      	b.n	8008a1e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	4613      	mov	r3, r2
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	334c      	adds	r3, #76	@ 0x4c
 80085da:	2202      	movs	r2, #2
 80085dc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	4613      	mov	r3, r2
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	1a9b      	subs	r3, r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	440b      	add	r3, r1
 80085ec:	3326      	adds	r3, #38	@ 0x26
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80085f4:	78fa      	ldrb	r2, [r7, #3]
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4613      	mov	r3, r2
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	3326      	adds	r3, #38	@ 0x26
 8008604:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008606:	2b02      	cmp	r3, #2
 8008608:	f040 8209 	bne.w	8008a1e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	4413      	add	r3, r2
 8008614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008622:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800862a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800862c:	78fb      	ldrb	r3, [r7, #3]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4413      	add	r3, r2
 8008634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008638:	461a      	mov	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800863e:	e1ee      	b.n	8008a1e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4613      	mov	r3, r2
 8008646:	011b      	lsls	r3, r3, #4
 8008648:	1a9b      	subs	r3, r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	334d      	adds	r3, #77	@ 0x4d
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b05      	cmp	r3, #5
 8008654:	f040 80c8 	bne.w	80087e8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008658:	78fa      	ldrb	r2, [r7, #3]
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	4613      	mov	r3, r2
 800865e:	011b      	lsls	r3, r3, #4
 8008660:	1a9b      	subs	r3, r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	440b      	add	r3, r1
 8008666:	334d      	adds	r3, #77	@ 0x4d
 8008668:	2202      	movs	r2, #2
 800866a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4613      	mov	r3, r2
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	440b      	add	r3, r1
 800867a:	331b      	adds	r3, #27
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b01      	cmp	r3, #1
 8008680:	f040 81ce 	bne.w	8008a20 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	4613      	mov	r3, r2
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	1a9b      	subs	r3, r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	440b      	add	r3, r1
 8008692:	3326      	adds	r3, #38	@ 0x26
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b03      	cmp	r3, #3
 8008698:	d16b      	bne.n	8008772 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	440b      	add	r3, r1
 80086a8:	3348      	adds	r3, #72	@ 0x48
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	1c59      	adds	r1, r3, #1
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4403      	add	r3, r0
 80086ba:	3348      	adds	r3, #72	@ 0x48
 80086bc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	4613      	mov	r3, r2
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	1a9b      	subs	r3, r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	3348      	adds	r3, #72	@ 0x48
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d943      	bls.n	800875c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	3348      	adds	r3, #72	@ 0x48
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80086e8:	78fa      	ldrb	r2, [r7, #3]
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4613      	mov	r3, r2
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	331b      	adds	r3, #27
 80086f8:	2200      	movs	r2, #0
 80086fa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	4613      	mov	r3, r2
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	440b      	add	r3, r1
 800870a:	3344      	adds	r3, #68	@ 0x44
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d809      	bhi.n	8008726 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	4613      	mov	r3, r2
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	440b      	add	r3, r1
 8008720:	331c      	adds	r3, #28
 8008722:	2201      	movs	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	78fa      	ldrb	r2, [r7, #3]
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	440a      	add	r2, r1
 800873c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008744:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4613      	mov	r3, r2
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	1a9b      	subs	r3, r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	334c      	adds	r3, #76	@ 0x4c
 8008756:	2204      	movs	r2, #4
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	e014      	b.n	8008786 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4613      	mov	r3, r2
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	440b      	add	r3, r1
 800876a:	334c      	adds	r3, #76	@ 0x4c
 800876c:	2202      	movs	r2, #2
 800876e:	701a      	strb	r2, [r3, #0]
 8008770:	e009      	b.n	8008786 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	334c      	adds	r3, #76	@ 0x4c
 8008782:	2202      	movs	r2, #2
 8008784:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	6879      	ldr	r1, [r7, #4]
 800878a:	4613      	mov	r3, r2
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	1a9b      	subs	r3, r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	3326      	adds	r3, #38	@ 0x26
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	440b      	add	r3, r1
 80087aa:	3326      	adds	r3, #38	@ 0x26
 80087ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	f040 8136 	bne.w	8008a20 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e0:	461a      	mov	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	e11b      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80087e8:	78fa      	ldrb	r2, [r7, #3]
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	011b      	lsls	r3, r3, #4
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	334d      	adds	r3, #77	@ 0x4d
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	f040 8081 	bne.w	8008902 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4613      	mov	r3, r2
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	1a9b      	subs	r3, r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	334d      	adds	r3, #77	@ 0x4d
 8008810:	2202      	movs	r2, #2
 8008812:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	1a9b      	subs	r3, r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	331b      	adds	r3, #27
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b01      	cmp	r3, #1
 8008828:	f040 80fa 	bne.w	8008a20 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	4613      	mov	r3, r2
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	334c      	adds	r3, #76	@ 0x4c
 800883c:	2202      	movs	r2, #2
 800883e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	4413      	add	r3, r2
 8008848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	440a      	add	r2, r1
 8008856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800885a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800885e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008860:	78fb      	ldrb	r3, [r7, #3]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	4413      	add	r3, r2
 8008868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	440a      	add	r2, r1
 8008876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800887a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008880:	78fb      	ldrb	r3, [r7, #3]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	440a      	add	r2, r1
 8008896:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800889a:	f023 0320 	bic.w	r3, r3, #32
 800889e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80088a0:	78fa      	ldrb	r2, [r7, #3]
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	4613      	mov	r3, r2
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	1a9b      	subs	r3, r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	440b      	add	r3, r1
 80088ae:	3326      	adds	r3, #38	@ 0x26
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00b      	beq.n	80088ce <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	3326      	adds	r3, #38	@ 0x26
 80088c6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	f040 80a9 	bne.w	8008a20 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80088e4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088ec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088fa:	461a      	mov	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	e08e      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	4613      	mov	r3, r2
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	334d      	adds	r3, #77	@ 0x4d
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b04      	cmp	r3, #4
 8008916:	d143      	bne.n	80089a0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	334d      	adds	r3, #77	@ 0x4d
 8008928:	2202      	movs	r2, #2
 800892a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	4613      	mov	r3, r2
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	334c      	adds	r3, #76	@ 0x4c
 800893c:	2202      	movs	r2, #2
 800893e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008940:	78fa      	ldrb	r2, [r7, #3]
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	1a9b      	subs	r3, r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	3326      	adds	r3, #38	@ 0x26
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008956:	78fa      	ldrb	r2, [r7, #3]
 8008958:	6879      	ldr	r1, [r7, #4]
 800895a:	4613      	mov	r3, r2
 800895c:	011b      	lsls	r3, r3, #4
 800895e:	1a9b      	subs	r3, r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	440b      	add	r3, r1
 8008964:	3326      	adds	r3, #38	@ 0x26
 8008966:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008968:	2b02      	cmp	r3, #2
 800896a:	d159      	bne.n	8008a20 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	4413      	add	r3, r2
 8008974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008982:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800898a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	4413      	add	r3, r2
 8008994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008998:	461a      	mov	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	e03f      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80089a0:	78fa      	ldrb	r2, [r7, #3]
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	4613      	mov	r3, r2
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	1a9b      	subs	r3, r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	440b      	add	r3, r1
 80089ae:	334d      	adds	r3, #77	@ 0x4d
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d126      	bne.n	8008a04 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4613      	mov	r3, r2
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	440b      	add	r3, r1
 80089c4:	334d      	adds	r3, #77	@ 0x4d
 80089c6:	2202      	movs	r2, #2
 80089c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	4613      	mov	r3, r2
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	1a9b      	subs	r3, r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	3344      	adds	r3, #68	@ 0x44
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	1c59      	adds	r1, r3, #1
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4613      	mov	r3, r2
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	1a9b      	subs	r3, r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4403      	add	r3, r0
 80089ea:	3344      	adds	r3, #68	@ 0x44
 80089ec:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	1a9b      	subs	r3, r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	334c      	adds	r3, #76	@ 0x4c
 80089fe:	2204      	movs	r2, #4
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e00d      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	334d      	adds	r3, #77	@ 0x4d
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	f000 8100 	beq.w	8008c1c <HCD_HC_IN_IRQHandler+0xcca>
 8008a1c:	e000      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008a1e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008a20:	78fa      	ldrb	r2, [r7, #3]
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4613      	mov	r3, r2
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	1a9b      	subs	r3, r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	334c      	adds	r3, #76	@ 0x4c
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f012 ff80 	bl	801b93c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008a3c:	e0ef      	b.n	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	78fa      	ldrb	r2, [r7, #3]
 8008a44:	4611      	mov	r1, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f009 f941 	bl	8011cce <USB_ReadChInterrupts>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a52:	2b40      	cmp	r3, #64	@ 0x40
 8008a54:	d12f      	bne.n	8008ab6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a62:	461a      	mov	r2, r3
 8008a64:	2340      	movs	r3, #64	@ 0x40
 8008a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	011b      	lsls	r3, r3, #4
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	440b      	add	r3, r1
 8008a76:	334d      	adds	r3, #77	@ 0x4d
 8008a78:	2205      	movs	r2, #5
 8008a7a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008a7c:	78fa      	ldrb	r2, [r7, #3]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	331a      	adds	r3, #26
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008a92:	78fa      	ldrb	r2, [r7, #3]
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	440b      	add	r3, r1
 8008aa0:	3344      	adds	r3, #68	@ 0x44
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	78fa      	ldrb	r2, [r7, #3]
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f009 feab 	bl	801280a <USB_HC_Halt>
 8008ab4:	e0b3      	b.n	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	78fa      	ldrb	r2, [r7, #3]
 8008abc:	4611      	mov	r1, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f009 f905 	bl	8011cce <USB_ReadChInterrupts>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f003 0310 	and.w	r3, r3, #16
 8008aca:	2b10      	cmp	r3, #16
 8008acc:	f040 80a7 	bne.w	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008ad0:	78fa      	ldrb	r2, [r7, #3]
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	440b      	add	r3, r1
 8008ade:	3326      	adds	r3, #38	@ 0x26
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d11b      	bne.n	8008b1e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	4613      	mov	r3, r2
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	3344      	adds	r3, #68	@ 0x44
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	334d      	adds	r3, #77	@ 0x4d
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	78fa      	ldrb	r2, [r7, #3]
 8008b14:	4611      	mov	r1, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f009 fe77 	bl	801280a <USB_HC_Halt>
 8008b1c:	e03f      	b.n	8008b9e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	1a9b      	subs	r3, r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	3326      	adds	r3, #38	@ 0x26
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	3326      	adds	r3, #38	@ 0x26
 8008b44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d129      	bne.n	8008b9e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	3344      	adds	r3, #68	@ 0x44
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	799b      	ldrb	r3, [r3, #6]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <HCD_HC_IN_IRQHandler+0xc2a>
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	440b      	add	r3, r1
 8008b74:	331b      	adds	r3, #27
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d110      	bne.n	8008b9e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008b7c:	78fa      	ldrb	r2, [r7, #3]
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	4613      	mov	r3, r2
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	1a9b      	subs	r3, r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	440b      	add	r3, r1
 8008b8a:	334d      	adds	r3, #77	@ 0x4d
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f009 fe36 	bl	801280a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	331b      	adds	r3, #27
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d129      	bne.n	8008c08 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008bb4:	78fa      	ldrb	r2, [r7, #3]
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	331b      	adds	r3, #27
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008be6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c02:	f043 0320 	orr.w	r3, r3, #32
 8008c06:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c14:	461a      	mov	r2, r3
 8008c16:	2310      	movs	r3, #16
 8008c18:	6093      	str	r3, [r2, #8]
 8008c1a:	e000      	b.n	8008c1e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008c1c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	78fa      	ldrb	r2, [r7, #3]
 8008c40:	4611      	mov	r1, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f009 f843 	bl	8011cce <USB_ReadChInterrupts>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d11b      	bne.n	8008c8a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c5e:	461a      	mov	r2, r3
 8008c60:	2304      	movs	r3, #4
 8008c62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	1a9b      	subs	r3, r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	334d      	adds	r3, #77	@ 0x4d
 8008c74:	2207      	movs	r2, #7
 8008c76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	4611      	mov	r1, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f009 fdc2 	bl	801280a <USB_HC_Halt>
 8008c86:	f000 bc89 	b.w	800959c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	4611      	mov	r1, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f009 f81b 	bl	8011cce <USB_ReadChInterrupts>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	f040 8082 	bne.w	8008da8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	2320      	movs	r3, #32
 8008cb4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008cb6:	78fa      	ldrb	r2, [r7, #3]
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	3319      	adds	r3, #25
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d124      	bne.n	8008d16 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	3319      	adds	r3, #25
 8008cdc:	2200      	movs	r2, #0
 8008cde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	334c      	adds	r3, #76	@ 0x4c
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008cf4:	78fa      	ldrb	r2, [r7, #3]
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	1a9b      	subs	r3, r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	334d      	adds	r3, #77	@ 0x4d
 8008d04:	2203      	movs	r2, #3
 8008d06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f009 fd7a 	bl	801280a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	331a      	adds	r3, #26
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f040 8437 	bne.w	800959c <HCD_HC_OUT_IRQHandler+0x978>
 8008d2e:	78fa      	ldrb	r2, [r7, #3]
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	331b      	adds	r3, #27
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 842b 	bne.w	800959c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8008d46:	78fa      	ldrb	r2, [r7, #3]
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	011b      	lsls	r3, r3, #4
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	3326      	adds	r3, #38	@ 0x26
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d009      	beq.n	8008d70 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008d5c:	78fa      	ldrb	r2, [r7, #3]
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	4613      	mov	r3, r2
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	440b      	add	r3, r1
 8008d6a:	331b      	adds	r3, #27
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	4613      	mov	r3, r2
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	334d      	adds	r3, #77	@ 0x4d
 8008d80:	2203      	movs	r2, #3
 8008d82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f009 fd3c 	bl	801280a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008d92:	78fa      	ldrb	r2, [r7, #3]
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	3344      	adds	r3, #68	@ 0x44
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	e3f9      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f008 ff8c 	bl	8011cce <USB_ReadChInterrupts>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dc0:	d111      	bne.n	8008de6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dd4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	4611      	mov	r1, r2
 8008dde:	4618      	mov	r0, r3
 8008de0:	f009 fd13 	bl	801280a <USB_HC_Halt>
 8008de4:	e3da      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	78fa      	ldrb	r2, [r7, #3]
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f008 ff6d 	bl	8011cce <USB_ReadChInterrupts>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d168      	bne.n	8008ed0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	3344      	adds	r3, #68	@ 0x44
 8008e0e:	2200      	movs	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	78fa      	ldrb	r2, [r7, #3]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f008 ff57 	bl	8011cce <USB_ReadChInterrupts>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e26:	2b40      	cmp	r3, #64	@ 0x40
 8008e28:	d112      	bne.n	8008e50 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008e2a:	78fa      	ldrb	r2, [r7, #3]
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	1a9b      	subs	r3, r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	3319      	adds	r3, #25
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2340      	movs	r3, #64	@ 0x40
 8008e4e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	4613      	mov	r3, r2
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	331b      	adds	r3, #27
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d019      	beq.n	8008e9a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	011b      	lsls	r3, r3, #4
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	331b      	adds	r3, #27
 8008e76:	2200      	movs	r2, #0
 8008e78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008e7a:	78fb      	ldrb	r3, [r7, #3]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	0151      	lsls	r1, r2, #5
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	440a      	add	r2, r1
 8008e90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e98:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008e9a:	78fb      	ldrb	r3, [r7, #3]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008eac:	78fa      	ldrb	r2, [r7, #3]
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	011b      	lsls	r3, r3, #4
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	334d      	adds	r3, #77	@ 0x4d
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	78fa      	ldrb	r2, [r7, #3]
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f009 fc9e 	bl	801280a <USB_HC_Halt>
 8008ece:	e365      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f008 fef8 	bl	8011cce <USB_ReadChInterrupts>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee4:	2b40      	cmp	r3, #64	@ 0x40
 8008ee6:	d139      	bne.n	8008f5c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	1a9b      	subs	r3, r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	334d      	adds	r3, #77	@ 0x4d
 8008ef8:	2205      	movs	r2, #5
 8008efa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	4613      	mov	r3, r2
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	440b      	add	r3, r1
 8008f0a:	331a      	adds	r3, #26
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	4613      	mov	r3, r2
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	1a9b      	subs	r3, r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	440b      	add	r3, r1
 8008f20:	3319      	adds	r3, #25
 8008f22:	2201      	movs	r2, #1
 8008f24:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008f26:	78fa      	ldrb	r2, [r7, #3]
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	440b      	add	r3, r1
 8008f34:	3344      	adds	r3, #68	@ 0x44
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f009 fc61 	bl	801280a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f54:	461a      	mov	r2, r3
 8008f56:	2340      	movs	r3, #64	@ 0x40
 8008f58:	6093      	str	r3, [r2, #8]
 8008f5a:	e31f      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	4611      	mov	r1, r2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f008 feb2 	bl	8011cce <USB_ReadChInterrupts>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d11a      	bne.n	8008faa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f80:	461a      	mov	r2, r3
 8008f82:	2308      	movs	r3, #8
 8008f84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	334d      	adds	r3, #77	@ 0x4d
 8008f96:	2206      	movs	r2, #6
 8008f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f009 fc31 	bl	801280a <USB_HC_Halt>
 8008fa8:	e2f8      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f008 fe8b 	bl	8011cce <USB_ReadChInterrupts>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	f003 0310 	and.w	r3, r3, #16
 8008fbe:	2b10      	cmp	r3, #16
 8008fc0:	d144      	bne.n	800904c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008fc2:	78fa      	ldrb	r2, [r7, #3]
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	011b      	lsls	r3, r3, #4
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	3344      	adds	r3, #68	@ 0x44
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	1a9b      	subs	r3, r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	334d      	adds	r3, #77	@ 0x4d
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	440b      	add	r3, r1
 8008ff8:	3319      	adds	r3, #25
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d114      	bne.n	800902a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	4613      	mov	r3, r2
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	1a9b      	subs	r3, r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	440b      	add	r3, r1
 800900e:	3318      	adds	r3, #24
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009016:	78fa      	ldrb	r2, [r7, #3]
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	1a9b      	subs	r3, r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	3319      	adds	r3, #25
 8009026:	2201      	movs	r2, #1
 8009028:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f009 fbe9 	bl	801280a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009044:	461a      	mov	r2, r3
 8009046:	2310      	movs	r3, #16
 8009048:	6093      	str	r3, [r2, #8]
 800904a:	e2a7      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	78fa      	ldrb	r2, [r7, #3]
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f008 fe3a 	bl	8011cce <USB_ReadChInterrupts>
 800905a:	4603      	mov	r3, r0
 800905c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009060:	2b80      	cmp	r3, #128	@ 0x80
 8009062:	f040 8083 	bne.w	800916c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	799b      	ldrb	r3, [r3, #6]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d111      	bne.n	8009092 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	1a9b      	subs	r3, r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	440b      	add	r3, r1
 800907c:	334d      	adds	r3, #77	@ 0x4d
 800907e:	2207      	movs	r2, #7
 8009080:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	78fa      	ldrb	r2, [r7, #3]
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f009 fbbd 	bl	801280a <USB_HC_Halt>
 8009090:	e062      	b.n	8009158 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009092:	78fa      	ldrb	r2, [r7, #3]
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	1a9b      	subs	r3, r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	440b      	add	r3, r1
 80090a0:	3344      	adds	r3, #68	@ 0x44
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	1c59      	adds	r1, r3, #1
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4613      	mov	r3, r2
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	1a9b      	subs	r3, r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4403      	add	r3, r0
 80090b2:	3344      	adds	r3, #68	@ 0x44
 80090b4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	6879      	ldr	r1, [r7, #4]
 80090ba:	4613      	mov	r3, r2
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	1a9b      	subs	r3, r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	440b      	add	r3, r1
 80090c4:	3344      	adds	r3, #68	@ 0x44
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d922      	bls.n	8009112 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80090cc:	78fa      	ldrb	r2, [r7, #3]
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	4613      	mov	r3, r2
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	440b      	add	r3, r1
 80090da:	3344      	adds	r3, #68	@ 0x44
 80090dc:	2200      	movs	r2, #0
 80090de:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80090e0:	78fa      	ldrb	r2, [r7, #3]
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	4613      	mov	r3, r2
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	1a9b      	subs	r3, r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	440b      	add	r3, r1
 80090ee:	334c      	adds	r3, #76	@ 0x4c
 80090f0:	2204      	movs	r2, #4
 80090f2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80090f4:	78fa      	ldrb	r2, [r7, #3]
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	1a9b      	subs	r3, r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	334c      	adds	r3, #76	@ 0x4c
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f012 fc16 	bl	801b93c <HAL_HCD_HC_NotifyURBChange_Callback>
 8009110:	e022      	b.n	8009158 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	440b      	add	r3, r1
 8009120:	334c      	adds	r3, #76	@ 0x4c
 8009122:	2202      	movs	r2, #2
 8009124:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	4413      	add	r3, r2
 800912e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800913c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009144:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	4413      	add	r3, r2
 800914e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009152:	461a      	mov	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	4413      	add	r3, r2
 8009160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009164:	461a      	mov	r2, r3
 8009166:	2380      	movs	r3, #128	@ 0x80
 8009168:	6093      	str	r3, [r2, #8]
 800916a:	e217      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	4611      	mov	r1, r2
 8009174:	4618      	mov	r0, r3
 8009176:	f008 fdaa 	bl	8011cce <USB_ReadChInterrupts>
 800917a:	4603      	mov	r3, r0
 800917c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009184:	d11b      	bne.n	80091be <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	4613      	mov	r3, r2
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	440b      	add	r3, r1
 8009194:	334d      	adds	r3, #77	@ 0x4d
 8009196:	2209      	movs	r2, #9
 8009198:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f009 fb31 	bl	801280a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b4:	461a      	mov	r2, r3
 80091b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091ba:	6093      	str	r3, [r2, #8]
 80091bc:	e1ee      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	78fa      	ldrb	r2, [r7, #3]
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f008 fd81 	bl	8011cce <USB_ReadChInterrupts>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	f040 81df 	bne.w	8009596 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091e4:	461a      	mov	r2, r3
 80091e6:	2302      	movs	r3, #2
 80091e8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80091ea:	78fa      	ldrb	r2, [r7, #3]
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	440b      	add	r3, r1
 80091f8:	334d      	adds	r3, #77	@ 0x4d
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	f040 8093 	bne.w	8009328 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009202:	78fa      	ldrb	r2, [r7, #3]
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	1a9b      	subs	r3, r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	334d      	adds	r3, #77	@ 0x4d
 8009212:	2202      	movs	r2, #2
 8009214:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009216:	78fa      	ldrb	r2, [r7, #3]
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	4613      	mov	r3, r2
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	1a9b      	subs	r3, r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	440b      	add	r3, r1
 8009224:	334c      	adds	r3, #76	@ 0x4c
 8009226:	2201      	movs	r2, #1
 8009228:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800922a:	78fa      	ldrb	r2, [r7, #3]
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	3326      	adds	r3, #38	@ 0x26
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d00b      	beq.n	8009258 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009240:	78fa      	ldrb	r2, [r7, #3]
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	4613      	mov	r3, r2
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	3326      	adds	r3, #38	@ 0x26
 8009250:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009252:	2b03      	cmp	r3, #3
 8009254:	f040 8190 	bne.w	8009578 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	799b      	ldrb	r3, [r3, #6]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d115      	bne.n	800928c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	4613      	mov	r3, r2
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	333d      	adds	r3, #61	@ 0x3d
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	f083 0301 	eor.w	r3, r3, #1
 8009278:	b2d8      	uxtb	r0, r3
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	333d      	adds	r3, #61	@ 0x3d
 8009288:	4602      	mov	r2, r0
 800928a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	799b      	ldrb	r3, [r3, #6]
 8009290:	2b01      	cmp	r3, #1
 8009292:	f040 8171 	bne.w	8009578 <HCD_HC_OUT_IRQHandler+0x954>
 8009296:	78fa      	ldrb	r2, [r7, #3]
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	4613      	mov	r3, r2
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	1a9b      	subs	r3, r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	3334      	adds	r3, #52	@ 0x34
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 8165 	beq.w	8009578 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	4613      	mov	r3, r2
 80092b4:	011b      	lsls	r3, r3, #4
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	3334      	adds	r3, #52	@ 0x34
 80092be:	6819      	ldr	r1, [r3, #0]
 80092c0:	78fa      	ldrb	r2, [r7, #3]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	1a9b      	subs	r3, r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4403      	add	r3, r0
 80092ce:	3328      	adds	r3, #40	@ 0x28
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	440b      	add	r3, r1
 80092d4:	1e59      	subs	r1, r3, #1
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4613      	mov	r3, r2
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	1a9b      	subs	r3, r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4403      	add	r3, r0
 80092e4:	3328      	adds	r3, #40	@ 0x28
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80092ec:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 813f 	beq.w	8009578 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	333d      	adds	r3, #61	@ 0x3d
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	f083 0301 	eor.w	r3, r3, #1
 8009312:	b2d8      	uxtb	r0, r3
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	4613      	mov	r3, r2
 8009318:	011b      	lsls	r3, r3, #4
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	333d      	adds	r3, #61	@ 0x3d
 8009322:	4602      	mov	r2, r0
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	e127      	b.n	8009578 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	011b      	lsls	r3, r3, #4
 8009330:	1a9b      	subs	r3, r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	334d      	adds	r3, #77	@ 0x4d
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b03      	cmp	r3, #3
 800933c:	d120      	bne.n	8009380 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	4613      	mov	r3, r2
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	1a9b      	subs	r3, r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	440b      	add	r3, r1
 800934c:	334d      	adds	r3, #77	@ 0x4d
 800934e:	2202      	movs	r2, #2
 8009350:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	011b      	lsls	r3, r3, #4
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	331b      	adds	r3, #27
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b01      	cmp	r3, #1
 8009366:	f040 8107 	bne.w	8009578 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	011b      	lsls	r3, r3, #4
 8009372:	1a9b      	subs	r3, r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	334c      	adds	r3, #76	@ 0x4c
 800937a:	2202      	movs	r2, #2
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	e0fb      	b.n	8009578 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009380:	78fa      	ldrb	r2, [r7, #3]
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	4613      	mov	r3, r2
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	440b      	add	r3, r1
 800938e:	334d      	adds	r3, #77	@ 0x4d
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b04      	cmp	r3, #4
 8009394:	d13a      	bne.n	800940c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	440b      	add	r3, r1
 80093a4:	334d      	adds	r3, #77	@ 0x4d
 80093a6:	2202      	movs	r2, #2
 80093a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	334c      	adds	r3, #76	@ 0x4c
 80093ba:	2202      	movs	r2, #2
 80093bc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	440b      	add	r3, r1
 80093cc:	331b      	adds	r3, #27
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	f040 80d1 	bne.w	8009578 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80093d6:	78fa      	ldrb	r2, [r7, #3]
 80093d8:	6879      	ldr	r1, [r7, #4]
 80093da:	4613      	mov	r3, r2
 80093dc:	011b      	lsls	r3, r3, #4
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	440b      	add	r3, r1
 80093e4:	331b      	adds	r3, #27
 80093e6:	2200      	movs	r2, #0
 80093e8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	0151      	lsls	r1, r2, #5
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	440a      	add	r2, r1
 8009400:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009408:	6053      	str	r3, [r2, #4]
 800940a:	e0b5      	b.n	8009578 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4613      	mov	r3, r2
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	440b      	add	r3, r1
 800941a:	334d      	adds	r3, #77	@ 0x4d
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2b05      	cmp	r3, #5
 8009420:	d114      	bne.n	800944c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	6879      	ldr	r1, [r7, #4]
 8009426:	4613      	mov	r3, r2
 8009428:	011b      	lsls	r3, r3, #4
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	440b      	add	r3, r1
 8009430:	334d      	adds	r3, #77	@ 0x4d
 8009432:	2202      	movs	r2, #2
 8009434:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	011b      	lsls	r3, r3, #4
 800943e:	1a9b      	subs	r3, r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	334c      	adds	r3, #76	@ 0x4c
 8009446:	2202      	movs	r2, #2
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	e095      	b.n	8009578 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800944c:	78fa      	ldrb	r2, [r7, #3]
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	4613      	mov	r3, r2
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	334d      	adds	r3, #77	@ 0x4d
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b06      	cmp	r3, #6
 8009460:	d114      	bne.n	800948c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	334d      	adds	r3, #77	@ 0x4d
 8009472:	2202      	movs	r2, #2
 8009474:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	334c      	adds	r3, #76	@ 0x4c
 8009486:	2205      	movs	r2, #5
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	e075      	b.n	8009578 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4613      	mov	r3, r2
 8009492:	011b      	lsls	r3, r3, #4
 8009494:	1a9b      	subs	r3, r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	334d      	adds	r3, #77	@ 0x4d
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b07      	cmp	r3, #7
 80094a0:	d00a      	beq.n	80094b8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80094a2:	78fa      	ldrb	r2, [r7, #3]
 80094a4:	6879      	ldr	r1, [r7, #4]
 80094a6:	4613      	mov	r3, r2
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	1a9b      	subs	r3, r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	440b      	add	r3, r1
 80094b0:	334d      	adds	r3, #77	@ 0x4d
 80094b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80094b4:	2b09      	cmp	r3, #9
 80094b6:	d170      	bne.n	800959a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	4613      	mov	r3, r2
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	334d      	adds	r3, #77	@ 0x4d
 80094c8:	2202      	movs	r2, #2
 80094ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80094cc:	78fa      	ldrb	r2, [r7, #3]
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	4613      	mov	r3, r2
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	3344      	adds	r3, #68	@ 0x44
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	011b      	lsls	r3, r3, #4
 80094e6:	1a9b      	subs	r3, r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4403      	add	r3, r0
 80094ec:	3344      	adds	r3, #68	@ 0x44
 80094ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	1a9b      	subs	r3, r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	3344      	adds	r3, #68	@ 0x44
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b02      	cmp	r3, #2
 8009504:	d914      	bls.n	8009530 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	011b      	lsls	r3, r3, #4
 800950e:	1a9b      	subs	r3, r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	3344      	adds	r3, #68	@ 0x44
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800951a:	78fa      	ldrb	r2, [r7, #3]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	334c      	adds	r3, #76	@ 0x4c
 800952a:	2204      	movs	r2, #4
 800952c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800952e:	e022      	b.n	8009576 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	1a9b      	subs	r3, r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	334c      	adds	r3, #76	@ 0x4c
 8009540:	2202      	movs	r2, #2
 8009542:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800955a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009562:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	4413      	add	r3, r2
 800956c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009570:	461a      	mov	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009576:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009578:	78fa      	ldrb	r2, [r7, #3]
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	4613      	mov	r3, r2
 800957e:	011b      	lsls	r3, r3, #4
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	334c      	adds	r3, #76	@ 0x4c
 8009588:	781a      	ldrb	r2, [r3, #0]
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f012 f9d4 	bl	801b93c <HAL_HCD_HC_NotifyURBChange_Callback>
 8009594:	e002      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009596:	bf00      	nop
 8009598:	e000      	b.n	800959c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800959a:	bf00      	nop
  }
}
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b08a      	sub	sp, #40	@ 0x28
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	f003 030f 	and.w	r3, r3, #15
 80095c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	0c5b      	lsrs	r3, r3, #17
 80095c8:	f003 030f 	and.w	r3, r3, #15
 80095cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	091b      	lsrs	r3, r3, #4
 80095d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d004      	beq.n	80095e8 <HCD_RXQLVL_IRQHandler+0x46>
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2b05      	cmp	r3, #5
 80095e2:	f000 80b6 	beq.w	8009752 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80095e6:	e0b7      	b.n	8009758 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 80b3 	beq.w	8009756 <HCD_RXQLVL_IRQHandler+0x1b4>
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	4613      	mov	r3, r2
 80095f6:	011b      	lsls	r3, r3, #4
 80095f8:	1a9b      	subs	r3, r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	332c      	adds	r3, #44	@ 0x2c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80a7 	beq.w	8009756 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	4613      	mov	r3, r2
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	3338      	adds	r3, #56	@ 0x38
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	18d1      	adds	r1, r2, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	69ba      	ldr	r2, [r7, #24]
 8009622:	4613      	mov	r3, r2
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4403      	add	r3, r0
 800962c:	3334      	adds	r3, #52	@ 0x34
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4299      	cmp	r1, r3
 8009632:	f200 8083 	bhi.w	800973c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	4613      	mov	r3, r2
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	440b      	add	r3, r1
 8009648:	332c      	adds	r3, #44	@ 0x2c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	b292      	uxth	r2, r2
 8009650:	4619      	mov	r1, r3
 8009652:	f008 fad1 	bl	8011bf8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	4613      	mov	r3, r2
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	332c      	adds	r3, #44	@ 0x2c
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	18d1      	adds	r1, r2, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	4613      	mov	r3, r2
 8009672:	011b      	lsls	r3, r3, #4
 8009674:	1a9b      	subs	r3, r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4403      	add	r3, r0
 800967a:	332c      	adds	r3, #44	@ 0x2c
 800967c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	4613      	mov	r3, r2
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	1a9b      	subs	r3, r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	3338      	adds	r3, #56	@ 0x38
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	18d1      	adds	r1, r2, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	4613      	mov	r3, r2
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	1a9b      	subs	r3, r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4403      	add	r3, r0
 80096a2:	3338      	adds	r3, #56	@ 0x38
 80096a4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	0cdb      	lsrs	r3, r3, #19
 80096b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ba:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	4613      	mov	r3, r2
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	440b      	add	r3, r1
 80096ca:	3328      	adds	r3, #40	@ 0x28
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d13f      	bne.n	8009756 <HCD_RXQLVL_IRQHandler+0x1b4>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d03c      	beq.n	8009756 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	4413      	add	r3, r2
 8009704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009708:	461a      	mov	r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	4613      	mov	r3, r2
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	1a9b      	subs	r3, r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	440b      	add	r3, r1
 800971c:	333c      	adds	r3, #60	@ 0x3c
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	f083 0301 	eor.w	r3, r3, #1
 8009724:	b2d8      	uxtb	r0, r3
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	4613      	mov	r3, r2
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	1a9b      	subs	r3, r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	440b      	add	r3, r1
 8009734:	333c      	adds	r3, #60	@ 0x3c
 8009736:	4602      	mov	r2, r0
 8009738:	701a      	strb	r2, [r3, #0]
      break;
 800973a:	e00c      	b.n	8009756 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	4613      	mov	r3, r2
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	440b      	add	r3, r1
 800974a:	334c      	adds	r3, #76	@ 0x4c
 800974c:	2204      	movs	r2, #4
 800974e:	701a      	strb	r2, [r3, #0]
      break;
 8009750:	e001      	b.n	8009756 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009752:	bf00      	nop
 8009754:	e000      	b.n	8009758 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009756:	bf00      	nop
  }
}
 8009758:	bf00      	nop
 800975a:	3728      	adds	r7, #40	@ 0x28
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800978c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f003 0302 	and.w	r3, r3, #2
 8009794:	2b02      	cmp	r3, #2
 8009796:	d10b      	bne.n	80097b0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d102      	bne.n	80097a8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f012 f8ae 	bl	801b904 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f043 0302 	orr.w	r3, r3, #2
 80097ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f003 0308 	and.w	r3, r3, #8
 80097b6:	2b08      	cmp	r3, #8
 80097b8:	d132      	bne.n	8009820 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f043 0308 	orr.w	r3, r3, #8
 80097c0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d126      	bne.n	800981a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7a5b      	ldrb	r3, [r3, #9]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d113      	bne.n	80097fc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80097da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097de:	d106      	bne.n	80097ee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2102      	movs	r1, #2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f008 fb90 	bl	8011f0c <USB_InitFSLSPClkSel>
 80097ec:	e011      	b.n	8009812 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2101      	movs	r1, #1
 80097f4:	4618      	mov	r0, r3
 80097f6:	f008 fb89 	bl	8011f0c <USB_InitFSLSPClkSel>
 80097fa:	e00a      	b.n	8009812 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	79db      	ldrb	r3, [r3, #7]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d106      	bne.n	8009812 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800980a:	461a      	mov	r2, r3
 800980c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009810:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f012 f8a4 	bl	801b960 <HAL_HCD_PortEnabled_Callback>
 8009818:	e002      	b.n	8009820 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f012 f8ae 	bl	801b97c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b20      	cmp	r3, #32
 8009828:	d103      	bne.n	8009832 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f043 0320 	orr.w	r3, r3, #32
 8009830:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009838:	461a      	mov	r2, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	6013      	str	r3, [r2, #0]
}
 800983e:	bf00      	nop
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e08b      	b.n	8009972 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d106      	bne.n	8009874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fa f93c 	bl	8003aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2224      	movs	r2, #36	@ 0x24
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0201 	bic.w	r2, r2, #1
 800988a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009898:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d107      	bne.n	80098c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098be:	609a      	str	r2, [r3, #8]
 80098c0:	e006      	b.n	80098d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80098ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d108      	bne.n	80098ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098e6:	605a      	str	r2, [r3, #4]
 80098e8:	e007      	b.n	80098fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6859      	ldr	r1, [r3, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4b1d      	ldr	r3, [pc, #116]	@ (800997c <HAL_I2C_Init+0x134>)
 8009906:	430b      	orrs	r3, r1
 8009908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68da      	ldr	r2, [r3, #12]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691a      	ldr	r2, [r3, #16]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	69d9      	ldr	r1, [r3, #28]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1a      	ldr	r2, [r3, #32]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	430a      	orrs	r2, r1
 8009942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f042 0201 	orr.w	r2, r2, #1
 8009952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	02008000 	.word	0x02008000

08009980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b20      	cmp	r3, #32
 8009994:	d138      	bne.n	8009a08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800999c:	2b01      	cmp	r3, #1
 800999e:	d101      	bne.n	80099a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80099a0:	2302      	movs	r3, #2
 80099a2:	e032      	b.n	8009a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2224      	movs	r2, #36	@ 0x24
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0201 	bic.w	r2, r2, #1
 80099c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6819      	ldr	r1, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	e000      	b.n	8009a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a08:	2302      	movs	r3, #2
  }
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b085      	sub	sp, #20
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d139      	bne.n	8009aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d101      	bne.n	8009a3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009a36:	2302      	movs	r3, #2
 8009a38:	e033      	b.n	8009aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2224      	movs	r2, #36	@ 0x24
 8009a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0201 	bic.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009a68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f042 0201 	orr.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	e000      	b.n	8009aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009aa0:	2302      	movs	r3, #2
  }
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e08f      	b.n	8009be0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7fa f8b1 	bl	8003c3c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2202      	movs	r2, #2
 8009ade:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699a      	ldr	r2, [r3, #24]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009af0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6999      	ldr	r1, [r3, #24]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009b06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6999      	ldr	r1, [r3, #24]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	041b      	lsls	r3, r3, #16
 8009b32:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a19      	ldr	r1, [r3, #32]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b46:	041b      	lsls	r3, r3, #16
 8009b48:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5c:	041b      	lsls	r3, r3, #16
 8009b5e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0206 	orr.w	r2, r2, #6
 8009bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0201 	orr.w	r2, r2, #1
 8009bcc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bfe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d023      	beq.n	8009c52 <HAL_LTDC_IRQHandler+0x6a>
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01e      	beq.n	8009c52 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0204 	bic.w	r2, r2, #4
 8009c22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2204      	movs	r2, #4
 8009c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c32:	f043 0201 	orr.w	r2, r3, #1
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f86f 	bl	8009d30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d023      	beq.n	8009ca4 <HAL_LTDC_IRQHandler+0xbc>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01e      	beq.n	8009ca4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0202 	bic.w	r2, r2, #2
 8009c74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c84:	f043 0202 	orr.w	r2, r3, #2
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2204      	movs	r2, #4
 8009c92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f846 	bl	8009d30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01b      	beq.n	8009ce6 <HAL_LTDC_IRQHandler+0xfe>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d016      	beq.n	8009ce6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f022 0201 	bic.w	r2, r2, #1
 8009cc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f82f 	bl	8009d44 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f003 0308 	and.w	r3, r3, #8
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01b      	beq.n	8009d28 <HAL_LTDC_IRQHandler+0x140>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d016      	beq.n	8009d28 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 0208 	bic.w	r2, r2, #8
 8009d08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2208      	movs	r2, #8
 8009d10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f818 	bl	8009d58 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009d28:	bf00      	nop
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009d6c:	b5b0      	push	{r4, r5, r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_LTDC_ConfigLayer+0x1a>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e02c      	b.n	8009de0 <HAL_LTDC_ConfigLayer+0x74>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2202      	movs	r2, #2
 8009d92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2134      	movs	r1, #52	@ 0x34
 8009d9c:	fb01 f303 	mul.w	r3, r1, r3
 8009da0:	4413      	add	r3, r2
 8009da2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4614      	mov	r4, r2
 8009daa:	461d      	mov	r5, r3
 8009dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f811 	bl	8009de8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bdb0      	pop	{r4, r5, r7, pc}

08009de8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b089      	sub	sp, #36	@ 0x24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	0c1b      	lsrs	r3, r3, #16
 8009e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e04:	4413      	add	r3, r2
 8009e06:	041b      	lsls	r3, r3, #16
 8009e08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	01db      	lsls	r3, r3, #7
 8009e14:	4413      	add	r3, r2
 8009e16:	3384      	adds	r3, #132	@ 0x84
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	6812      	ldr	r2, [r2, #0]
 8009e1e:	4611      	mov	r1, r2
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	01d2      	lsls	r2, r2, #7
 8009e24:	440a      	add	r2, r1
 8009e26:	3284      	adds	r2, #132	@ 0x84
 8009e28:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009e2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	0c1b      	lsrs	r3, r3, #16
 8009e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4619      	mov	r1, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	01db      	lsls	r3, r3, #7
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3384      	adds	r3, #132	@ 0x84
 8009e50:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e66:	4413      	add	r3, r2
 8009e68:	041b      	lsls	r3, r3, #16
 8009e6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	01db      	lsls	r3, r3, #7
 8009e76:	4413      	add	r3, r2
 8009e78:	3384      	adds	r3, #132	@ 0x84
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	4611      	mov	r1, r2
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	01d2      	lsls	r2, r2, #7
 8009e86:	440a      	add	r2, r1
 8009e88:	3284      	adds	r2, #132	@ 0x84
 8009e8a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009e8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e9e:	4413      	add	r3, r2
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	01db      	lsls	r3, r3, #7
 8009eac:	440b      	add	r3, r1
 8009eae:	3384      	adds	r3, #132	@ 0x84
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	01db      	lsls	r3, r3, #7
 8009ec2:	4413      	add	r3, r2
 8009ec4:	3384      	adds	r3, #132	@ 0x84
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	4611      	mov	r1, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	01d2      	lsls	r2, r2, #7
 8009ed2:	440a      	add	r2, r1
 8009ed4:	3284      	adds	r2, #132	@ 0x84
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	01db      	lsls	r3, r3, #7
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3384      	adds	r3, #132	@ 0x84
 8009eea:	461a      	mov	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009f02:	041b      	lsls	r3, r3, #16
 8009f04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	061b      	lsls	r3, r3, #24
 8009f0c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f14:	461a      	mov	r2, r3
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	431a      	orrs	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4619      	mov	r1, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	01db      	lsls	r3, r3, #7
 8009f28:	440b      	add	r3, r1
 8009f2a:	3384      	adds	r3, #132	@ 0x84
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	01db      	lsls	r3, r3, #7
 8009f3e:	4413      	add	r3, r2
 8009f40:	3384      	adds	r3, #132	@ 0x84
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	6812      	ldr	r2, [r2, #0]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	01d2      	lsls	r2, r2, #7
 8009f4e:	440a      	add	r2, r1
 8009f50:	3284      	adds	r2, #132	@ 0x84
 8009f52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	01db      	lsls	r3, r3, #7
 8009f62:	4413      	add	r3, r2
 8009f64:	3384      	adds	r3, #132	@ 0x84
 8009f66:	461a      	mov	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	01db      	lsls	r3, r3, #7
 8009f78:	4413      	add	r3, r2
 8009f7a:	3384      	adds	r3, #132	@ 0x84
 8009f7c:	69da      	ldr	r2, [r3, #28]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4619      	mov	r1, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	01db      	lsls	r3, r3, #7
 8009f88:	440b      	add	r3, r1
 8009f8a:	3384      	adds	r3, #132	@ 0x84
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4b4f      	ldr	r3, [pc, #316]	@ (800a0cc <LTDC_SetConfig+0x2e4>)
 8009f90:	4013      	ands	r3, r2
 8009f92:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	69da      	ldr	r2, [r3, #28]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	68f9      	ldr	r1, [r7, #12]
 8009f9e:	6809      	ldr	r1, [r1, #0]
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	01c9      	lsls	r1, r1, #7
 8009fa6:	4401      	add	r1, r0
 8009fa8:	3184      	adds	r1, #132	@ 0x84
 8009faa:	4313      	orrs	r3, r2
 8009fac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	01db      	lsls	r3, r3, #7
 8009fb8:	4413      	add	r3, r2
 8009fba:	3384      	adds	r3, #132	@ 0x84
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009fcc:	2304      	movs	r3, #4
 8009fce:	61fb      	str	r3, [r7, #28]
 8009fd0:	e01b      	b.n	800a00a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d102      	bne.n	8009fe0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	e014      	b.n	800a00a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	d00b      	beq.n	800a000 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d007      	beq.n	800a000 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d003      	beq.n	800a000 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ffc:	2b07      	cmp	r3, #7
 8009ffe:	d102      	bne.n	800a006 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a000:	2302      	movs	r3, #2
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	e001      	b.n	800a00a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a006:	2301      	movs	r3, #1
 800a008:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	01db      	lsls	r3, r3, #7
 800a014:	4413      	add	r3, r2
 800a016:	3384      	adds	r3, #132	@ 0x84
 800a018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	6812      	ldr	r2, [r2, #0]
 800a01e:	4611      	mov	r1, r2
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	01d2      	lsls	r2, r2, #7
 800a024:	440a      	add	r2, r1
 800a026:	3284      	adds	r2, #132	@ 0x84
 800a028:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a02c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a032:	69fa      	ldr	r2, [r7, #28]
 800a034:	fb02 f303 	mul.w	r3, r2, r3
 800a038:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6859      	ldr	r1, [r3, #4]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	1acb      	subs	r3, r1, r3
 800a044:	69f9      	ldr	r1, [r7, #28]
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a04c:	68f9      	ldr	r1, [r7, #12]
 800a04e:	6809      	ldr	r1, [r1, #0]
 800a050:	4608      	mov	r0, r1
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	01c9      	lsls	r1, r1, #7
 800a056:	4401      	add	r1, r0
 800a058:	3184      	adds	r1, #132	@ 0x84
 800a05a:	4313      	orrs	r3, r2
 800a05c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	01db      	lsls	r3, r3, #7
 800a068:	4413      	add	r3, r2
 800a06a:	3384      	adds	r3, #132	@ 0x84
 800a06c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4619      	mov	r1, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	01db      	lsls	r3, r3, #7
 800a078:	440b      	add	r3, r1
 800a07a:	3384      	adds	r3, #132	@ 0x84
 800a07c:	4619      	mov	r1, r3
 800a07e:	4b14      	ldr	r3, [pc, #80]	@ (800a0d0 <LTDC_SetConfig+0x2e8>)
 800a080:	4013      	ands	r3, r2
 800a082:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	01db      	lsls	r3, r3, #7
 800a08e:	4413      	add	r3, r2
 800a090:	3384      	adds	r3, #132	@ 0x84
 800a092:	461a      	mov	r2, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a098:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	01db      	lsls	r3, r3, #7
 800a0a4:	4413      	add	r3, r2
 800a0a6:	3384      	adds	r3, #132	@ 0x84
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	6812      	ldr	r2, [r2, #0]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	01d2      	lsls	r2, r2, #7
 800a0b4:	440a      	add	r2, r1
 800a0b6:	3284      	adds	r2, #132	@ 0x84
 800a0b8:	f043 0301 	orr.w	r3, r3, #1
 800a0bc:	6013      	str	r3, [r2, #0]
}
 800a0be:	bf00      	nop
 800a0c0:	3724      	adds	r7, #36	@ 0x24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	fffff8f8 	.word	0xfffff8f8
 800a0d0:	fffff800 	.word	0xfffff800

0800a0d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0d8:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a04      	ldr	r2, [pc, #16]	@ (800a0f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0e2:	6013      	str	r3, [r2, #0]
}
 800a0e4:	bf00      	nop
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40007000 	.word	0x40007000

0800a0f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a0fe:	4b23      	ldr	r3, [pc, #140]	@ (800a18c <HAL_PWREx_EnableOverDrive+0x98>)
 800a100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a102:	4a22      	ldr	r2, [pc, #136]	@ (800a18c <HAL_PWREx_EnableOverDrive+0x98>)
 800a104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a108:	6413      	str	r3, [r2, #64]	@ 0x40
 800a10a:	4b20      	ldr	r3, [pc, #128]	@ (800a18c <HAL_PWREx_EnableOverDrive+0x98>)
 800a10c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a10e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a112:	603b      	str	r3, [r7, #0]
 800a114:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a116:	4b1e      	ldr	r3, [pc, #120]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a1d      	ldr	r2, [pc, #116]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a11c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a120:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a122:	f7fb f9bb 	bl	800549c <HAL_GetTick>
 800a126:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a128:	e009      	b.n	800a13e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a12a:	f7fb f9b7 	bl	800549c <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a138:	d901      	bls.n	800a13e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e022      	b.n	800a184 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a13e:	4b14      	ldr	r3, [pc, #80]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a14a:	d1ee      	bne.n	800a12a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a14c:	4b10      	ldr	r3, [pc, #64]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a0f      	ldr	r2, [pc, #60]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a156:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a158:	f7fb f9a0 	bl	800549c <HAL_GetTick>
 800a15c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a15e:	e009      	b.n	800a174 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a160:	f7fb f99c 	bl	800549c <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a16e:	d901      	bls.n	800a174 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e007      	b.n	800a184 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a174:	4b06      	ldr	r3, [pc, #24]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a17c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a180:	d1ee      	bne.n	800a160 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	40023800 	.word	0x40023800
 800a190:	40007000 	.word	0x40007000

0800a194 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a19c:	f7fb f97e 	bl	800549c <HAL_GetTick>
 800a1a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e067      	b.n	800a27c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10b      	bne.n	800a1d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7f9 fe03 	bl	8003dcc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a1c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f85e 	bl	800a28c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	021a      	lsls	r2, r3, #8
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2120      	movs	r1, #32
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f856 	bl	800a2a8 <QSPI_WaitFlagStateUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d135      	bne.n	800a272 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	4b1d      	ldr	r3, [pc, #116]	@ (800a284 <HAL_QSPI_Init+0xf0>)
 800a20e:	4013      	ands	r3, r2
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6852      	ldr	r2, [r2, #4]
 800a214:	0611      	lsls	r1, r2, #24
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	68d2      	ldr	r2, [r2, #12]
 800a21a:	4311      	orrs	r1, r2
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	69d2      	ldr	r2, [r2, #28]
 800a220:	4311      	orrs	r1, r2
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	6a12      	ldr	r2, [r2, #32]
 800a226:	4311      	orrs	r1, r2
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6812      	ldr	r2, [r2, #0]
 800a22c:	430b      	orrs	r3, r1
 800a22e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	4b14      	ldr	r3, [pc, #80]	@ (800a288 <HAL_QSPI_Init+0xf4>)
 800a238:	4013      	ands	r3, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	6912      	ldr	r2, [r2, #16]
 800a23e:	0411      	lsls	r1, r2, #16
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	6952      	ldr	r2, [r2, #20]
 800a244:	4311      	orrs	r1, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	6992      	ldr	r2, [r2, #24]
 800a24a:	4311      	orrs	r1, r2
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	6812      	ldr	r2, [r2, #0]
 800a250:	430b      	orrs	r3, r1
 800a252:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a27a:	7afb      	ldrb	r3, [r7, #11]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	00ffff2f 	.word	0x00ffff2f
 800a288:	ffe0f8fe 	.word	0xffe0f8fe

0800a28c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a2b8:	e01a      	b.n	800a2f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c0:	d016      	beq.n	800a2f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2c2:	f7fb f8eb 	bl	800549c <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d302      	bcc.n	800a2d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10b      	bne.n	800a2f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2204      	movs	r2, #4
 800a2dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2e4:	f043 0201 	orr.w	r2, r3, #1
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e00e      	b.n	800a30e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689a      	ldr	r2, [r3, #8]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bf14      	ite	ne
 800a2fe:	2301      	movne	r3, #1
 800a300:	2300      	moveq	r3, #0
 800a302:	b2db      	uxtb	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	79fb      	ldrb	r3, [r7, #7]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d1d6      	bne.n	800a2ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a320:	2300      	movs	r3, #0
 800a322:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e291      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8087 	beq.w	800a44a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a33c:	4b96      	ldr	r3, [pc, #600]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f003 030c 	and.w	r3, r3, #12
 800a344:	2b04      	cmp	r3, #4
 800a346:	d00c      	beq.n	800a362 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a348:	4b93      	ldr	r3, [pc, #588]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f003 030c 	and.w	r3, r3, #12
 800a350:	2b08      	cmp	r3, #8
 800a352:	d112      	bne.n	800a37a <HAL_RCC_OscConfig+0x62>
 800a354:	4b90      	ldr	r3, [pc, #576]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a35c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a360:	d10b      	bne.n	800a37a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a362:	4b8d      	ldr	r3, [pc, #564]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d06c      	beq.n	800a448 <HAL_RCC_OscConfig+0x130>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d168      	bne.n	800a448 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e26b      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a382:	d106      	bne.n	800a392 <HAL_RCC_OscConfig+0x7a>
 800a384:	4b84      	ldr	r3, [pc, #528]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a83      	ldr	r2, [pc, #524]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a38a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	e02e      	b.n	800a3f0 <HAL_RCC_OscConfig+0xd8>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10c      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x9c>
 800a39a:	4b7f      	ldr	r3, [pc, #508]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a7e      	ldr	r2, [pc, #504]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	4b7c      	ldr	r3, [pc, #496]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a7b      	ldr	r2, [pc, #492]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	e01d      	b.n	800a3f0 <HAL_RCC_OscConfig+0xd8>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3bc:	d10c      	bne.n	800a3d8 <HAL_RCC_OscConfig+0xc0>
 800a3be:	4b76      	ldr	r3, [pc, #472]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a75      	ldr	r2, [pc, #468]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	4b73      	ldr	r3, [pc, #460]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a72      	ldr	r2, [pc, #456]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	e00b      	b.n	800a3f0 <HAL_RCC_OscConfig+0xd8>
 800a3d8:	4b6f      	ldr	r3, [pc, #444]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a6e      	ldr	r2, [pc, #440]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	4b6c      	ldr	r3, [pc, #432]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a6b      	ldr	r2, [pc, #428]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d013      	beq.n	800a420 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f8:	f7fb f850 	bl	800549c <HAL_GetTick>
 800a3fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a400:	f7fb f84c 	bl	800549c <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b64      	cmp	r3, #100	@ 0x64
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e21f      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a412:	4b61      	ldr	r3, [pc, #388]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0f0      	beq.n	800a400 <HAL_RCC_OscConfig+0xe8>
 800a41e:	e014      	b.n	800a44a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a420:	f7fb f83c 	bl	800549c <HAL_GetTick>
 800a424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a426:	e008      	b.n	800a43a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a428:	f7fb f838 	bl	800549c <HAL_GetTick>
 800a42c:	4602      	mov	r2, r0
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	2b64      	cmp	r3, #100	@ 0x64
 800a434:	d901      	bls.n	800a43a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e20b      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a43a:	4b57      	ldr	r3, [pc, #348]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1f0      	bne.n	800a428 <HAL_RCC_OscConfig+0x110>
 800a446:	e000      	b.n	800a44a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d069      	beq.n	800a52a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a456:	4b50      	ldr	r3, [pc, #320]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f003 030c 	and.w	r3, r3, #12
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00b      	beq.n	800a47a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a462:	4b4d      	ldr	r3, [pc, #308]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f003 030c 	and.w	r3, r3, #12
 800a46a:	2b08      	cmp	r3, #8
 800a46c:	d11c      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x190>
 800a46e:	4b4a      	ldr	r3, [pc, #296]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d116      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a47a:	4b47      	ldr	r3, [pc, #284]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <HAL_RCC_OscConfig+0x17a>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d001      	beq.n	800a492 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e1df      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a492:	4b41      	ldr	r3, [pc, #260]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	493d      	ldr	r1, [pc, #244]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4a6:	e040      	b.n	800a52a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d023      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4b0:	4b39      	ldr	r3, [pc, #228]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a38      	ldr	r2, [pc, #224]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4b6:	f043 0301 	orr.w	r3, r3, #1
 800a4ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4bc:	f7fa ffee 	bl	800549c <HAL_GetTick>
 800a4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4c4:	f7fa ffea 	bl	800549c <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e1bd      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4d6:	4b30      	ldr	r3, [pc, #192]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f0      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	4929      	ldr	r1, [pc, #164]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	600b      	str	r3, [r1, #0]
 800a4f6:	e018      	b.n	800a52a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4f8:	4b27      	ldr	r3, [pc, #156]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a26      	ldr	r2, [pc, #152]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4fe:	f023 0301 	bic.w	r3, r3, #1
 800a502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a504:	f7fa ffca 	bl	800549c <HAL_GetTick>
 800a508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a50a:	e008      	b.n	800a51e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a50c:	f7fa ffc6 	bl	800549c <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b02      	cmp	r3, #2
 800a518:	d901      	bls.n	800a51e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e199      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a51e:	4b1e      	ldr	r3, [pc, #120]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1f0      	bne.n	800a50c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0308 	and.w	r3, r3, #8
 800a532:	2b00      	cmp	r3, #0
 800a534:	d038      	beq.n	800a5a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d019      	beq.n	800a572 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a53e:	4b16      	ldr	r3, [pc, #88]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a542:	4a15      	ldr	r2, [pc, #84]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a544:	f043 0301 	orr.w	r3, r3, #1
 800a548:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a54a:	f7fa ffa7 	bl	800549c <HAL_GetTick>
 800a54e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a550:	e008      	b.n	800a564 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a552:	f7fa ffa3 	bl	800549c <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d901      	bls.n	800a564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e176      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a564:	4b0c      	ldr	r3, [pc, #48]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a568:	f003 0302 	and.w	r3, r3, #2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0f0      	beq.n	800a552 <HAL_RCC_OscConfig+0x23a>
 800a570:	e01a      	b.n	800a5a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a572:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a576:	4a08      	ldr	r2, [pc, #32]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a578:	f023 0301 	bic.w	r3, r3, #1
 800a57c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a57e:	f7fa ff8d 	bl	800549c <HAL_GetTick>
 800a582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a584:	e00a      	b.n	800a59c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a586:	f7fa ff89 	bl	800549c <HAL_GetTick>
 800a58a:	4602      	mov	r2, r0
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	2b02      	cmp	r3, #2
 800a592:	d903      	bls.n	800a59c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e15c      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
 800a598:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a59c:	4b91      	ldr	r3, [pc, #580]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a59e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5a0:	f003 0302 	and.w	r3, r3, #2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1ee      	bne.n	800a586 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80a4 	beq.w	800a6fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5b6:	4b8b      	ldr	r3, [pc, #556]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10d      	bne.n	800a5de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5c2:	4b88      	ldr	r3, [pc, #544]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c6:	4a87      	ldr	r2, [pc, #540]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a5c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5cc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a5ce:	4b85      	ldr	r3, [pc, #532]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5d6:	60bb      	str	r3, [r7, #8]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5de:	4b82      	ldr	r3, [pc, #520]	@ (800a7e8 <HAL_RCC_OscConfig+0x4d0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d118      	bne.n	800a61c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a5ea:	4b7f      	ldr	r3, [pc, #508]	@ (800a7e8 <HAL_RCC_OscConfig+0x4d0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a7e      	ldr	r2, [pc, #504]	@ (800a7e8 <HAL_RCC_OscConfig+0x4d0>)
 800a5f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5f6:	f7fa ff51 	bl	800549c <HAL_GetTick>
 800a5fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5fc:	e008      	b.n	800a610 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5fe:	f7fa ff4d 	bl	800549c <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	2b64      	cmp	r3, #100	@ 0x64
 800a60a:	d901      	bls.n	800a610 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e120      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a610:	4b75      	ldr	r3, [pc, #468]	@ (800a7e8 <HAL_RCC_OscConfig+0x4d0>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0f0      	beq.n	800a5fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d106      	bne.n	800a632 <HAL_RCC_OscConfig+0x31a>
 800a624:	4b6f      	ldr	r3, [pc, #444]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a628:	4a6e      	ldr	r2, [pc, #440]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a62a:	f043 0301 	orr.w	r3, r3, #1
 800a62e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a630:	e02d      	b.n	800a68e <HAL_RCC_OscConfig+0x376>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10c      	bne.n	800a654 <HAL_RCC_OscConfig+0x33c>
 800a63a:	4b6a      	ldr	r3, [pc, #424]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a63c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a63e:	4a69      	ldr	r2, [pc, #420]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a640:	f023 0301 	bic.w	r3, r3, #1
 800a644:	6713      	str	r3, [r2, #112]	@ 0x70
 800a646:	4b67      	ldr	r3, [pc, #412]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a64a:	4a66      	ldr	r2, [pc, #408]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a64c:	f023 0304 	bic.w	r3, r3, #4
 800a650:	6713      	str	r3, [r2, #112]	@ 0x70
 800a652:	e01c      	b.n	800a68e <HAL_RCC_OscConfig+0x376>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	2b05      	cmp	r3, #5
 800a65a:	d10c      	bne.n	800a676 <HAL_RCC_OscConfig+0x35e>
 800a65c:	4b61      	ldr	r3, [pc, #388]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a65e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a660:	4a60      	ldr	r2, [pc, #384]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a662:	f043 0304 	orr.w	r3, r3, #4
 800a666:	6713      	str	r3, [r2, #112]	@ 0x70
 800a668:	4b5e      	ldr	r3, [pc, #376]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a66a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a66c:	4a5d      	ldr	r2, [pc, #372]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	6713      	str	r3, [r2, #112]	@ 0x70
 800a674:	e00b      	b.n	800a68e <HAL_RCC_OscConfig+0x376>
 800a676:	4b5b      	ldr	r3, [pc, #364]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a67a:	4a5a      	ldr	r2, [pc, #360]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a67c:	f023 0301 	bic.w	r3, r3, #1
 800a680:	6713      	str	r3, [r2, #112]	@ 0x70
 800a682:	4b58      	ldr	r3, [pc, #352]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a686:	4a57      	ldr	r2, [pc, #348]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a688:	f023 0304 	bic.w	r3, r3, #4
 800a68c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d015      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a696:	f7fa ff01 	bl	800549c <HAL_GetTick>
 800a69a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a69c:	e00a      	b.n	800a6b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a69e:	f7fa fefd 	bl	800549c <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d901      	bls.n	800a6b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e0ce      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6b4:	4b4b      	ldr	r3, [pc, #300]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a6b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0ee      	beq.n	800a69e <HAL_RCC_OscConfig+0x386>
 800a6c0:	e014      	b.n	800a6ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6c2:	f7fa feeb 	bl	800549c <HAL_GetTick>
 800a6c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6c8:	e00a      	b.n	800a6e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ca:	f7fa fee7 	bl	800549c <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e0b8      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6e0:	4b40      	ldr	r3, [pc, #256]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a6e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1ee      	bne.n	800a6ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d105      	bne.n	800a6fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6f2:	4b3c      	ldr	r3, [pc, #240]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f6:	4a3b      	ldr	r2, [pc, #236]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a6f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80a4 	beq.w	800a850 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a708:	4b36      	ldr	r3, [pc, #216]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f003 030c 	and.w	r3, r3, #12
 800a710:	2b08      	cmp	r3, #8
 800a712:	d06b      	beq.n	800a7ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d149      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a71c:	4b31      	ldr	r3, [pc, #196]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a30      	ldr	r2, [pc, #192]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a728:	f7fa feb8 	bl	800549c <HAL_GetTick>
 800a72c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a72e:	e008      	b.n	800a742 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a730:	f7fa feb4 	bl	800549c <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d901      	bls.n	800a742 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e087      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a742:	4b28      	ldr	r3, [pc, #160]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f0      	bne.n	800a730 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	69da      	ldr	r2, [r3, #28]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	431a      	orrs	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75c:	019b      	lsls	r3, r3, #6
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a764:	085b      	lsrs	r3, r3, #1
 800a766:	3b01      	subs	r3, #1
 800a768:	041b      	lsls	r3, r3, #16
 800a76a:	431a      	orrs	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a770:	061b      	lsls	r3, r3, #24
 800a772:	4313      	orrs	r3, r2
 800a774:	4a1b      	ldr	r2, [pc, #108]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a776:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a77a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a77c:	4b19      	ldr	r3, [pc, #100]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a18      	ldr	r2, [pc, #96]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a788:	f7fa fe88 	bl	800549c <HAL_GetTick>
 800a78c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a78e:	e008      	b.n	800a7a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a790:	f7fa fe84 	bl	800549c <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d901      	bls.n	800a7a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e057      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7a2:	4b10      	ldr	r3, [pc, #64]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0f0      	beq.n	800a790 <HAL_RCC_OscConfig+0x478>
 800a7ae:	e04f      	b.n	800a850 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7bc:	f7fa fe6e 	bl	800549c <HAL_GetTick>
 800a7c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7c2:	e008      	b.n	800a7d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7c4:	f7fa fe6a 	bl	800549c <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d901      	bls.n	800a7d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e03d      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7d6:	4b03      	ldr	r3, [pc, #12]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1f0      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x4ac>
 800a7e2:	e035      	b.n	800a850 <HAL_RCC_OscConfig+0x538>
 800a7e4:	40023800 	.word	0x40023800
 800a7e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	@ (800a85c <HAL_RCC_OscConfig+0x544>)
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d028      	beq.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a804:	429a      	cmp	r2, r3
 800a806:	d121      	bne.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a812:	429a      	cmp	r2, r3
 800a814:	d11a      	bne.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a81c:	4013      	ands	r3, r2
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a822:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a824:	4293      	cmp	r3, r2
 800a826:	d111      	bne.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	3b01      	subs	r3, #1
 800a836:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a838:	429a      	cmp	r2, r3
 800a83a:	d107      	bne.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a846:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a848:	429a      	cmp	r2, r3
 800a84a:	d001      	beq.n	800a850 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e000      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	40023800 	.word	0x40023800

0800a860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e0d0      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a878:	4b6a      	ldr	r3, [pc, #424]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 030f 	and.w	r3, r3, #15
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d910      	bls.n	800a8a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a886:	4b67      	ldr	r3, [pc, #412]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f023 020f 	bic.w	r2, r3, #15
 800a88e:	4965      	ldr	r1, [pc, #404]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	4313      	orrs	r3, r2
 800a894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a896:	4b63      	ldr	r3, [pc, #396]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 030f 	and.w	r3, r3, #15
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d001      	beq.n	800a8a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0b8      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d020      	beq.n	800a8f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8c0:	4b59      	ldr	r3, [pc, #356]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	4a58      	ldr	r2, [pc, #352]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a8ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0308 	and.w	r3, r3, #8
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d005      	beq.n	800a8e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8d8:	4b53      	ldr	r3, [pc, #332]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	4a52      	ldr	r2, [pc, #328]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a8e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8e4:	4b50      	ldr	r3, [pc, #320]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	494d      	ldr	r1, [pc, #308]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d040      	beq.n	800a984 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d107      	bne.n	800a91a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a90a:	4b47      	ldr	r3, [pc, #284]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d115      	bne.n	800a942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e07f      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d107      	bne.n	800a932 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a922:	4b41      	ldr	r3, [pc, #260]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d109      	bne.n	800a942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e073      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a932:	4b3d      	ldr	r3, [pc, #244]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e06b      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a942:	4b39      	ldr	r3, [pc, #228]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f023 0203 	bic.w	r2, r3, #3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	4936      	ldr	r1, [pc, #216]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a950:	4313      	orrs	r3, r2
 800a952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a954:	f7fa fda2 	bl	800549c <HAL_GetTick>
 800a958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a95a:	e00a      	b.n	800a972 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a95c:	f7fa fd9e 	bl	800549c <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d901      	bls.n	800a972 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e053      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a972:	4b2d      	ldr	r3, [pc, #180]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f003 020c 	and.w	r2, r3, #12
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	429a      	cmp	r2, r3
 800a982:	d1eb      	bne.n	800a95c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a984:	4b27      	ldr	r3, [pc, #156]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 030f 	and.w	r3, r3, #15
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d210      	bcs.n	800a9b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a992:	4b24      	ldr	r3, [pc, #144]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f023 020f 	bic.w	r2, r3, #15
 800a99a:	4922      	ldr	r1, [pc, #136]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9a2:	4b20      	ldr	r3, [pc, #128]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 030f 	and.w	r3, r3, #15
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d001      	beq.n	800a9b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e032      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d008      	beq.n	800a9d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9c0:	4b19      	ldr	r3, [pc, #100]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	4916      	ldr	r1, [pc, #88]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d009      	beq.n	800a9f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a9de:	4b12      	ldr	r3, [pc, #72]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	00db      	lsls	r3, r3, #3
 800a9ec:	490e      	ldr	r1, [pc, #56]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a9f2:	f000 f821 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	091b      	lsrs	r3, r3, #4
 800a9fe:	f003 030f 	and.w	r3, r3, #15
 800aa02:	490a      	ldr	r1, [pc, #40]	@ (800aa2c <HAL_RCC_ClockConfig+0x1cc>)
 800aa04:	5ccb      	ldrb	r3, [r1, r3]
 800aa06:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0a:	4a09      	ldr	r2, [pc, #36]	@ (800aa30 <HAL_RCC_ClockConfig+0x1d0>)
 800aa0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aa0e:	4b09      	ldr	r3, [pc, #36]	@ (800aa34 <HAL_RCC_ClockConfig+0x1d4>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7f9 ff70 	bl	80048f8 <HAL_InitTick>

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	40023c00 	.word	0x40023c00
 800aa28:	40023800 	.word	0x40023800
 800aa2c:	0801f4b0 	.word	0x0801f4b0
 800aa30:	2000001c 	.word	0x2000001c
 800aa34:	20000068 	.word	0x20000068

0800aa38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa3c:	b090      	sub	sp, #64	@ 0x40
 800aa3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa48:	2300      	movs	r3, #0
 800aa4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa50:	4b59      	ldr	r3, [pc, #356]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f003 030c 	and.w	r3, r3, #12
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d00d      	beq.n	800aa78 <HAL_RCC_GetSysClockFreq+0x40>
 800aa5c:	2b08      	cmp	r3, #8
 800aa5e:	f200 80a1 	bhi.w	800aba4 <HAL_RCC_GetSysClockFreq+0x16c>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <HAL_RCC_GetSysClockFreq+0x34>
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d003      	beq.n	800aa72 <HAL_RCC_GetSysClockFreq+0x3a>
 800aa6a:	e09b      	b.n	800aba4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aa6c:	4b53      	ldr	r3, [pc, #332]	@ (800abbc <HAL_RCC_GetSysClockFreq+0x184>)
 800aa6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa70:	e09b      	b.n	800abaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aa72:	4b53      	ldr	r3, [pc, #332]	@ (800abc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aa74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa76:	e098      	b.n	800abaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa78:	4b4f      	ldr	r3, [pc, #316]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800aa82:	4b4d      	ldr	r3, [pc, #308]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d028      	beq.n	800aae0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa8e:	4b4a      	ldr	r3, [pc, #296]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	099b      	lsrs	r3, r3, #6
 800aa94:	2200      	movs	r2, #0
 800aa96:	623b      	str	r3, [r7, #32]
 800aa98:	627a      	str	r2, [r7, #36]	@ 0x24
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	4b47      	ldr	r3, [pc, #284]	@ (800abc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aaa4:	fb03 f201 	mul.w	r2, r3, r1
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	fb00 f303 	mul.w	r3, r0, r3
 800aaae:	4413      	add	r3, r2
 800aab0:	4a43      	ldr	r2, [pc, #268]	@ (800abc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aab2:	fba0 1202 	umull	r1, r2, r0, r2
 800aab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aab8:	460a      	mov	r2, r1
 800aaba:	62ba      	str	r2, [r7, #40]	@ 0x28
 800aabc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aabe:	4413      	add	r3, r2
 800aac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac4:	2200      	movs	r2, #0
 800aac6:	61bb      	str	r3, [r7, #24]
 800aac8:	61fa      	str	r2, [r7, #28]
 800aaca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800aad2:	f7f5 fc05 	bl	80002e0 <__aeabi_uldivmod>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4613      	mov	r3, r2
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aade:	e053      	b.n	800ab88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aae0:	4b35      	ldr	r3, [pc, #212]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	099b      	lsrs	r3, r3, #6
 800aae6:	2200      	movs	r2, #0
 800aae8:	613b      	str	r3, [r7, #16]
 800aaea:	617a      	str	r2, [r7, #20]
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800aaf2:	f04f 0b00 	mov.w	fp, #0
 800aaf6:	4652      	mov	r2, sl
 800aaf8:	465b      	mov	r3, fp
 800aafa:	f04f 0000 	mov.w	r0, #0
 800aafe:	f04f 0100 	mov.w	r1, #0
 800ab02:	0159      	lsls	r1, r3, #5
 800ab04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab08:	0150      	lsls	r0, r2, #5
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	ebb2 080a 	subs.w	r8, r2, sl
 800ab12:	eb63 090b 	sbc.w	r9, r3, fp
 800ab16:	f04f 0200 	mov.w	r2, #0
 800ab1a:	f04f 0300 	mov.w	r3, #0
 800ab1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ab22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ab26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ab2a:	ebb2 0408 	subs.w	r4, r2, r8
 800ab2e:	eb63 0509 	sbc.w	r5, r3, r9
 800ab32:	f04f 0200 	mov.w	r2, #0
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	00eb      	lsls	r3, r5, #3
 800ab3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab40:	00e2      	lsls	r2, r4, #3
 800ab42:	4614      	mov	r4, r2
 800ab44:	461d      	mov	r5, r3
 800ab46:	eb14 030a 	adds.w	r3, r4, sl
 800ab4a:	603b      	str	r3, [r7, #0]
 800ab4c:	eb45 030b 	adc.w	r3, r5, fp
 800ab50:	607b      	str	r3, [r7, #4]
 800ab52:	f04f 0200 	mov.w	r2, #0
 800ab56:	f04f 0300 	mov.w	r3, #0
 800ab5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab5e:	4629      	mov	r1, r5
 800ab60:	028b      	lsls	r3, r1, #10
 800ab62:	4621      	mov	r1, r4
 800ab64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ab68:	4621      	mov	r1, r4
 800ab6a:	028a      	lsls	r2, r1, #10
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab72:	2200      	movs	r2, #0
 800ab74:	60bb      	str	r3, [r7, #8]
 800ab76:	60fa      	str	r2, [r7, #12]
 800ab78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab7c:	f7f5 fbb0 	bl	80002e0 <__aeabi_uldivmod>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4613      	mov	r3, r2
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ab88:	4b0b      	ldr	r3, [pc, #44]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	0c1b      	lsrs	r3, r3, #16
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	3301      	adds	r3, #1
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ab98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aba2:	e002      	b.n	800abaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aba4:	4b05      	ldr	r3, [pc, #20]	@ (800abbc <HAL_RCC_GetSysClockFreq+0x184>)
 800aba6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800abac:	4618      	mov	r0, r3
 800abae:	3740      	adds	r7, #64	@ 0x40
 800abb0:	46bd      	mov	sp, r7
 800abb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abb6:	bf00      	nop
 800abb8:	40023800 	.word	0x40023800
 800abbc:	00f42400 	.word	0x00f42400
 800abc0:	017d7840 	.word	0x017d7840

0800abc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800abc8:	4b03      	ldr	r3, [pc, #12]	@ (800abd8 <HAL_RCC_GetHCLKFreq+0x14>)
 800abca:	681b      	ldr	r3, [r3, #0]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	2000001c 	.word	0x2000001c

0800abdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800abe0:	f7ff fff0 	bl	800abc4 <HAL_RCC_GetHCLKFreq>
 800abe4:	4602      	mov	r2, r0
 800abe6:	4b05      	ldr	r3, [pc, #20]	@ (800abfc <HAL_RCC_GetPCLK1Freq+0x20>)
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	0a9b      	lsrs	r3, r3, #10
 800abec:	f003 0307 	and.w	r3, r3, #7
 800abf0:	4903      	ldr	r1, [pc, #12]	@ (800ac00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800abf2:	5ccb      	ldrb	r3, [r1, r3]
 800abf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	40023800 	.word	0x40023800
 800ac00:	0801f4c0 	.word	0x0801f4c0

0800ac04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac08:	f7ff ffdc 	bl	800abc4 <HAL_RCC_GetHCLKFreq>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	0b5b      	lsrs	r3, r3, #13
 800ac14:	f003 0307 	and.w	r3, r3, #7
 800ac18:	4903      	ldr	r1, [pc, #12]	@ (800ac28 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac1a:	5ccb      	ldrb	r3, [r1, r3]
 800ac1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	40023800 	.word	0x40023800
 800ac28:	0801f4c0 	.word	0x0801f4c0

0800ac2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	220f      	movs	r2, #15
 800ac3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ac3c:	4b12      	ldr	r3, [pc, #72]	@ (800ac88 <HAL_RCC_GetClockConfig+0x5c>)
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0203 	and.w	r2, r3, #3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ac48:	4b0f      	ldr	r3, [pc, #60]	@ (800ac88 <HAL_RCC_GetClockConfig+0x5c>)
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ac54:	4b0c      	ldr	r3, [pc, #48]	@ (800ac88 <HAL_RCC_GetClockConfig+0x5c>)
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ac60:	4b09      	ldr	r3, [pc, #36]	@ (800ac88 <HAL_RCC_GetClockConfig+0x5c>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	08db      	lsrs	r3, r3, #3
 800ac66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ac6e:	4b07      	ldr	r3, [pc, #28]	@ (800ac8c <HAL_RCC_GetClockConfig+0x60>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 020f 	and.w	r2, r3, #15
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	601a      	str	r2, [r3, #0]
}
 800ac7a:	bf00      	nop
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	40023800 	.word	0x40023800
 800ac8c:	40023c00 	.word	0x40023c00

0800ac90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d012      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800acb8:	4b69      	ldr	r3, [pc, #420]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	4a68      	ldr	r2, [pc, #416]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acbe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800acc2:	6093      	str	r3, [r2, #8]
 800acc4:	4b66      	ldr	r3, [pc, #408]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800accc:	4964      	ldr	r1, [pc, #400]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acce:	4313      	orrs	r3, r2
 800acd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800acda:	2301      	movs	r3, #1
 800acdc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d017      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800acea:	4b5d      	ldr	r3, [pc, #372]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acf0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf8:	4959      	ldr	r1, [pc, #356]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad08:	d101      	bne.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ad16:	2301      	movs	r3, #1
 800ad18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d017      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ad26:	4b4e      	ldr	r3, [pc, #312]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad34:	494a      	ldr	r1, [pc, #296]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad44:	d101      	bne.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ad46:	2301      	movs	r3, #1
 800ad48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ad52:	2301      	movs	r3, #1
 800ad54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ad62:	2301      	movs	r3, #1
 800ad64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 808b 	beq.w	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad74:	4b3a      	ldr	r3, [pc, #232]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad78:	4a39      	ldr	r2, [pc, #228]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad7e:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad80:	4b37      	ldr	r3, [pc, #220]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad88:	60bb      	str	r3, [r7, #8]
 800ad8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad8c:	4b35      	ldr	r3, [pc, #212]	@ (800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a34      	ldr	r2, [pc, #208]	@ (800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad98:	f7fa fb80 	bl	800549c <HAL_GetTick>
 800ad9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ad9e:	e008      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ada0:	f7fa fb7c 	bl	800549c <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	2b64      	cmp	r3, #100	@ 0x64
 800adac:	d901      	bls.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e357      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800adb2:	4b2c      	ldr	r3, [pc, #176]	@ (800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0f0      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800adbe:	4b28      	ldr	r3, [pc, #160]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d035      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	429a      	cmp	r2, r3
 800adda:	d02e      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800addc:	4b20      	ldr	r3, [pc, #128]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ade0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ade4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ade6:	4b1e      	ldr	r3, [pc, #120]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ade8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adea:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adf0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800adf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adf6:	4a1a      	ldr	r2, [pc, #104]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adfc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800adfe:	4a18      	ldr	r2, [pc, #96]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ae04:	4b16      	ldr	r3, [pc, #88]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d114      	bne.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae10:	f7fa fb44 	bl	800549c <HAL_GetTick>
 800ae14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae16:	e00a      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae18:	f7fa fb40 	bl	800549c <HAL_GetTick>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d901      	bls.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e319      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae32:	f003 0302 	and.w	r3, r3, #2
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0ee      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae46:	d111      	bne.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ae48:	4b05      	ldr	r3, [pc, #20]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ae54:	4b04      	ldr	r3, [pc, #16]	@ (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ae56:	400b      	ands	r3, r1
 800ae58:	4901      	ldr	r1, [pc, #4]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	608b      	str	r3, [r1, #8]
 800ae5e:	e00b      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ae60:	40023800 	.word	0x40023800
 800ae64:	40007000 	.word	0x40007000
 800ae68:	0ffffcff 	.word	0x0ffffcff
 800ae6c:	4baa      	ldr	r3, [pc, #680]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	4aa9      	ldr	r2, [pc, #676]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800ae76:	6093      	str	r3, [r2, #8]
 800ae78:	4ba7      	ldr	r3, [pc, #668]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae84:	49a4      	ldr	r1, [pc, #656]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0310 	and.w	r3, r3, #16
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d010      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae96:	4ba0      	ldr	r3, [pc, #640]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae9c:	4a9e      	ldr	r2, [pc, #632]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aea2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800aea6:	4b9c      	ldr	r3, [pc, #624]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aea8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeb0:	4999      	ldr	r1, [pc, #612]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00a      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aec4:	4b94      	ldr	r3, [pc, #592]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aed2:	4991      	ldr	r1, [pc, #580]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aed4:	4313      	orrs	r3, r2
 800aed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aee6:	4b8c      	ldr	r3, [pc, #560]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aef4:	4988      	ldr	r1, [pc, #544]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800af08:	4b83      	ldr	r3, [pc, #524]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af16:	4980      	ldr	r1, [pc, #512]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800af2a:	4b7b      	ldr	r3, [pc, #492]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af30:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af38:	4977      	ldr	r1, [pc, #476]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af4c:	4b72      	ldr	r3, [pc, #456]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af52:	f023 0203 	bic.w	r2, r3, #3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5a:	496f      	ldr	r1, [pc, #444]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af6e:	4b6a      	ldr	r3, [pc, #424]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af74:	f023 020c 	bic.w	r2, r3, #12
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af7c:	4966      	ldr	r1, [pc, #408]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af90:	4b61      	ldr	r3, [pc, #388]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af96:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af9e:	495e      	ldr	r1, [pc, #376]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800afb2:	4b59      	ldr	r3, [pc, #356]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afc0:	4955      	ldr	r1, [pc, #340]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800afd4:	4b50      	ldr	r3, [pc, #320]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afe2:	494d      	ldr	r1, [pc, #308]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800aff6:	4b48      	ldr	r3, [pc, #288]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800affc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b004:	4944      	ldr	r1, [pc, #272]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b006:	4313      	orrs	r3, r2
 800b008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00a      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b018:	4b3f      	ldr	r3, [pc, #252]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b01e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b026:	493c      	ldr	r1, [pc, #240]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00a      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b03a:	4b37      	ldr	r3, [pc, #220]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b040:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b048:	4933      	ldr	r1, [pc, #204]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00a      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b05c:	4b2e      	ldr	r3, [pc, #184]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b062:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b06a:	492b      	ldr	r1, [pc, #172]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b06c:	4313      	orrs	r3, r2
 800b06e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d011      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b07e:	4b26      	ldr	r3, [pc, #152]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b084:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b08c:	4922      	ldr	r1, [pc, #136]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b09c:	d101      	bne.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0308 	and.w	r3, r3, #8
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b0be:	4b16      	ldr	r3, [pc, #88]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0cc:	4912      	ldr	r1, [pc, #72]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b0e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f0:	4909      	ldr	r1, [pc, #36]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d006      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 80d9 	beq.w	800b2be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b10c:	4b02      	ldr	r3, [pc, #8]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a01      	ldr	r2, [pc, #4]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b116:	e001      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b118:	40023800 	.word	0x40023800
 800b11c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b11e:	f7fa f9bd 	bl	800549c <HAL_GetTick>
 800b122:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b124:	e008      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b126:	f7fa f9b9 	bl	800549c <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b64      	cmp	r3, #100	@ 0x64
 800b132:	d901      	bls.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e194      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b138:	4b6c      	ldr	r3, [pc, #432]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1f0      	bne.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d021      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b154:	2b00      	cmp	r3, #0
 800b156:	d11d      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b158:	4b64      	ldr	r3, [pc, #400]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b15e:	0c1b      	lsrs	r3, r3, #16
 800b160:	f003 0303 	and.w	r3, r3, #3
 800b164:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b166:	4b61      	ldr	r3, [pc, #388]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b16c:	0e1b      	lsrs	r3, r3, #24
 800b16e:	f003 030f 	and.w	r3, r3, #15
 800b172:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	019a      	lsls	r2, r3, #6
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	041b      	lsls	r3, r3, #16
 800b17e:	431a      	orrs	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	061b      	lsls	r3, r3, #24
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	071b      	lsls	r3, r3, #28
 800b18c:	4957      	ldr	r1, [pc, #348]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b18e:	4313      	orrs	r3, r2
 800b190:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1a8:	d00a      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d02e      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1be:	d129      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b1c0:	4b4a      	ldr	r3, [pc, #296]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1c6:	0c1b      	lsrs	r3, r3, #16
 800b1c8:	f003 0303 	and.w	r3, r3, #3
 800b1cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b1ce:	4b47      	ldr	r3, [pc, #284]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1d4:	0f1b      	lsrs	r3, r3, #28
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	019a      	lsls	r2, r3, #6
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	431a      	orrs	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	061b      	lsls	r3, r3, #24
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	071b      	lsls	r3, r3, #28
 800b1f4:	493d      	ldr	r1, [pc, #244]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b1fc:	4b3b      	ldr	r3, [pc, #236]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b202:	f023 021f 	bic.w	r2, r3, #31
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20a:	3b01      	subs	r3, #1
 800b20c:	4937      	ldr	r1, [pc, #220]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01d      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b220:	4b32      	ldr	r3, [pc, #200]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b226:	0e1b      	lsrs	r3, r3, #24
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b22e:	4b2f      	ldr	r3, [pc, #188]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b234:	0f1b      	lsrs	r3, r3, #28
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	019a      	lsls	r2, r3, #6
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	041b      	lsls	r3, r3, #16
 800b248:	431a      	orrs	r2, r3
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	061b      	lsls	r3, r3, #24
 800b24e:	431a      	orrs	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	071b      	lsls	r3, r3, #28
 800b254:	4925      	ldr	r1, [pc, #148]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b256:	4313      	orrs	r3, r2
 800b258:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d011      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	019a      	lsls	r2, r3, #6
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	041b      	lsls	r3, r3, #16
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	061b      	lsls	r3, r3, #24
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	071b      	lsls	r3, r3, #28
 800b284:	4919      	ldr	r1, [pc, #100]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b286:	4313      	orrs	r3, r2
 800b288:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b28c:	4b17      	ldr	r3, [pc, #92]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a16      	ldr	r2, [pc, #88]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b292:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b298:	f7fa f900 	bl	800549c <HAL_GetTick>
 800b29c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b29e:	e008      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b2a0:	f7fa f8fc 	bl	800549c <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	2b64      	cmp	r3, #100	@ 0x64
 800b2ac:	d901      	bls.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e0d7      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b2b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0f0      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	f040 80cd 	bne.w	800b460 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b2c6:	4b09      	ldr	r3, [pc, #36]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a08      	ldr	r2, [pc, #32]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2d2:	f7fa f8e3 	bl	800549c <HAL_GetTick>
 800b2d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2d8:	e00a      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b2da:	f7fa f8df 	bl	800549c <HAL_GetTick>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	1ad3      	subs	r3, r2, r3
 800b2e4:	2b64      	cmp	r3, #100	@ 0x64
 800b2e6:	d903      	bls.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e0ba      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b2ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2f0:	4b5e      	ldr	r3, [pc, #376]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2fc:	d0ed      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d009      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d02e      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b322:	2b00      	cmp	r3, #0
 800b324:	d12a      	bne.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b326:	4b51      	ldr	r3, [pc, #324]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b32c:	0c1b      	lsrs	r3, r3, #16
 800b32e:	f003 0303 	and.w	r3, r3, #3
 800b332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b334:	4b4d      	ldr	r3, [pc, #308]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b33a:	0f1b      	lsrs	r3, r3, #28
 800b33c:	f003 0307 	and.w	r3, r3, #7
 800b340:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	019a      	lsls	r2, r3, #6
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	041b      	lsls	r3, r3, #16
 800b34c:	431a      	orrs	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	061b      	lsls	r3, r3, #24
 800b354:	431a      	orrs	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	071b      	lsls	r3, r3, #28
 800b35a:	4944      	ldr	r1, [pc, #272]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b362:	4b42      	ldr	r3, [pc, #264]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b368:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b370:	3b01      	subs	r3, #1
 800b372:	021b      	lsls	r3, r3, #8
 800b374:	493d      	ldr	r1, [pc, #244]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b376:	4313      	orrs	r3, r2
 800b378:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d022      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b38c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b390:	d11d      	bne.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b392:	4b36      	ldr	r3, [pc, #216]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b398:	0e1b      	lsrs	r3, r3, #24
 800b39a:	f003 030f 	and.w	r3, r3, #15
 800b39e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b3a0:	4b32      	ldr	r3, [pc, #200]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a6:	0f1b      	lsrs	r3, r3, #28
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	019a      	lsls	r2, r3, #6
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	041b      	lsls	r3, r3, #16
 800b3ba:	431a      	orrs	r2, r3
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	061b      	lsls	r3, r3, #24
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	071b      	lsls	r3, r3, #28
 800b3c6:	4929      	ldr	r1, [pc, #164]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d028      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b3da:	4b24      	ldr	r3, [pc, #144]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3e0:	0e1b      	lsrs	r3, r3, #24
 800b3e2:	f003 030f 	and.w	r3, r3, #15
 800b3e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b3e8:	4b20      	ldr	r3, [pc, #128]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ee:	0c1b      	lsrs	r3, r3, #16
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	019a      	lsls	r2, r3, #6
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	041b      	lsls	r3, r3, #16
 800b400:	431a      	orrs	r2, r3
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	061b      	lsls	r3, r3, #24
 800b406:	431a      	orrs	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	071b      	lsls	r3, r3, #28
 800b40e:	4917      	ldr	r1, [pc, #92]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b410:	4313      	orrs	r3, r2
 800b412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b416:	4b15      	ldr	r3, [pc, #84]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b41c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b424:	4911      	ldr	r1, [pc, #68]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b426:	4313      	orrs	r3, r2
 800b428:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b42c:	4b0f      	ldr	r3, [pc, #60]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a0e      	ldr	r2, [pc, #56]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b438:	f7fa f830 	bl	800549c <HAL_GetTick>
 800b43c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b43e:	e008      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b440:	f7fa f82c 	bl	800549c <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	2b64      	cmp	r3, #100	@ 0x64
 800b44c:	d901      	bls.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e007      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b452:	4b06      	ldr	r3, [pc, #24]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b45a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b45e:	d1ef      	bne.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3720      	adds	r7, #32
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	40023800 	.word	0x40023800

0800b470 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b470:	b480      	push	{r7}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b48e:	f040 808d 	bne.w	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b492:	4b93      	ldr	r3, [pc, #588]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b498:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b4a0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4a8:	d07c      	beq.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4b0:	d87b      	bhi.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4be:	d039      	beq.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b4c0:	e073      	b.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b4c2:	4b87      	ldr	r3, [pc, #540]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d108      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b4ce:	4b84      	ldr	r3, [pc, #528]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4d6:	4a83      	ldr	r2, [pc, #524]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4dc:	613b      	str	r3, [r7, #16]
 800b4de:	e007      	b.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b4e0:	4b7f      	ldr	r3, [pc, #508]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4e8:	4a7f      	ldr	r2, [pc, #508]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b4f0:	4b7b      	ldr	r3, [pc, #492]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4f6:	0e1b      	lsrs	r3, r3, #24
 800b4f8:	f003 030f 	and.w	r3, r3, #15
 800b4fc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b4fe:	4b78      	ldr	r3, [pc, #480]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b504:	099b      	lsrs	r3, r3, #6
 800b506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	fb03 f202 	mul.w	r2, r3, r2
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	fbb2 f3f3 	udiv	r3, r2, r3
 800b516:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b518:	4b71      	ldr	r3, [pc, #452]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b51e:	0a1b      	lsrs	r3, r3, #8
 800b520:	f003 031f 	and.w	r3, r3, #31
 800b524:	3301      	adds	r3, #1
 800b526:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b530:	617b      	str	r3, [r7, #20]
        break;
 800b532:	e03b      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b534:	4b6a      	ldr	r3, [pc, #424]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d108      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b540:	4b67      	ldr	r3, [pc, #412]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b548:	4a66      	ldr	r2, [pc, #408]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b54e:	613b      	str	r3, [r7, #16]
 800b550:	e007      	b.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b552:	4b63      	ldr	r3, [pc, #396]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b55a:	4a63      	ldr	r2, [pc, #396]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b560:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b562:	4b5f      	ldr	r3, [pc, #380]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b568:	0e1b      	lsrs	r3, r3, #24
 800b56a:	f003 030f 	and.w	r3, r3, #15
 800b56e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b570:	4b5b      	ldr	r3, [pc, #364]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b576:	099b      	lsrs	r3, r3, #6
 800b578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	fb03 f202 	mul.w	r2, r3, r2
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	fbb2 f3f3 	udiv	r3, r2, r3
 800b588:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b58a:	4b55      	ldr	r3, [pc, #340]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b590:	f003 031f 	and.w	r3, r3, #31
 800b594:	3301      	adds	r3, #1
 800b596:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a0:	617b      	str	r3, [r7, #20]
        break;
 800b5a2:	e003      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5a4:	4b51      	ldr	r3, [pc, #324]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b5a6:	617b      	str	r3, [r7, #20]
        break;
 800b5a8:	e000      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b5aa:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5b2:	f040 808d 	bne.w	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b5b6:	4b4a      	ldr	r3, [pc, #296]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b5c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b5cc:	d07c      	beq.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b5d4:	d87b      	bhi.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d004      	beq.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5e2:	d039      	beq.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b5e4:	e073      	b.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b5e6:	4b3e      	ldr	r3, [pc, #248]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d108      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b5f2:	4b3b      	ldr	r3, [pc, #236]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5fa:	4a3a      	ldr	r2, [pc, #232]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b600:	613b      	str	r3, [r7, #16]
 800b602:	e007      	b.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b604:	4b36      	ldr	r3, [pc, #216]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b60c:	4a36      	ldr	r2, [pc, #216]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b612:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b614:	4b32      	ldr	r3, [pc, #200]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b61a:	0e1b      	lsrs	r3, r3, #24
 800b61c:	f003 030f 	and.w	r3, r3, #15
 800b620:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b622:	4b2f      	ldr	r3, [pc, #188]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b628:	099b      	lsrs	r3, r3, #6
 800b62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	fb03 f202 	mul.w	r2, r3, r2
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b63c:	4b28      	ldr	r3, [pc, #160]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b63e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b642:	0a1b      	lsrs	r3, r3, #8
 800b644:	f003 031f 	and.w	r3, r3, #31
 800b648:	3301      	adds	r3, #1
 800b64a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	fbb2 f3f3 	udiv	r3, r2, r3
 800b654:	617b      	str	r3, [r7, #20]
        break;
 800b656:	e03b      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b658:	4b21      	ldr	r3, [pc, #132]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d108      	bne.n	800b676 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b664:	4b1e      	ldr	r3, [pc, #120]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b66c:	4a1d      	ldr	r2, [pc, #116]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b672:	613b      	str	r3, [r7, #16]
 800b674:	e007      	b.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b676:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b67e:	4a1a      	ldr	r2, [pc, #104]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b680:	fbb2 f3f3 	udiv	r3, r2, r3
 800b684:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b686:	4b16      	ldr	r3, [pc, #88]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b68c:	0e1b      	lsrs	r3, r3, #24
 800b68e:	f003 030f 	and.w	r3, r3, #15
 800b692:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b694:	4b12      	ldr	r3, [pc, #72]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b69a:	099b      	lsrs	r3, r3, #6
 800b69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	fb03 f202 	mul.w	r2, r3, r2
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ac:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b6ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6b4:	f003 031f 	and.w	r3, r3, #31
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c4:	617b      	str	r3, [r7, #20]
        break;
 800b6c6:	e003      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6c8:	4b08      	ldr	r3, [pc, #32]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b6ca:	617b      	str	r3, [r7, #20]
        break;
 800b6cc:	e000      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b6ce:	bf00      	nop
      }
    }
  }

  return frequency;
 800b6d0:	697b      	ldr	r3, [r7, #20]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	40023800 	.word	0x40023800
 800b6e4:	00f42400 	.word	0x00f42400
 800b6e8:	017d7840 	.word	0x017d7840
 800b6ec:	00bb8000 	.word	0x00bb8000

0800b6f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e071      	b.n	800b7e6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7f5b      	ldrb	r3, [r3, #29]
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d105      	bne.n	800b718 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7f8 fbea 	bl	8003eec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2202      	movs	r2, #2
 800b71c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	f003 0310 	and.w	r3, r3, #16
 800b728:	2b10      	cmp	r3, #16
 800b72a:	d053      	beq.n	800b7d4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	22ca      	movs	r2, #202	@ 0xca
 800b732:	625a      	str	r2, [r3, #36]	@ 0x24
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2253      	movs	r2, #83	@ 0x53
 800b73a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fb75 	bl	800be2c <RTC_EnterInitMode>
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b746:	7bfb      	ldrb	r3, [r7, #15]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d12a      	bne.n	800b7a2 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6899      	ldr	r1, [r3, #8]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	4b26      	ldr	r3, [pc, #152]	@ (800b7f0 <HAL_RTC_Init+0x100>)
 800b758:	400b      	ands	r3, r1
 800b75a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6899      	ldr	r1, [r3, #8]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	431a      	orrs	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	431a      	orrs	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	430a      	orrs	r2, r1
 800b778:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	68d2      	ldr	r2, [r2, #12]
 800b782:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6919      	ldr	r1, [r3, #16]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	041a      	lsls	r2, r3, #16
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	430a      	orrs	r2, r1
 800b796:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fb7e 	bl	800be9a <RTC_ExitInitMode>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d110      	bne.n	800b7ca <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 0208 	bic.w	r2, r2, #8
 800b7b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	699a      	ldr	r2, [r3, #24]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	22ff      	movs	r2, #255	@ 0xff
 800b7d0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b7d2:	e001      	b.n	800b7d8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	ff8fffbf 	.word	0xff8fffbf

0800b7f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7f4:	b590      	push	{r4, r7, lr}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	7f1b      	ldrb	r3, [r3, #28]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d101      	bne.n	800b810 <HAL_RTC_SetTime+0x1c>
 800b80c:	2302      	movs	r3, #2
 800b80e:	e085      	b.n	800b91c <HAL_RTC_SetTime+0x128>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2201      	movs	r2, #1
 800b814:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2202      	movs	r2, #2
 800b81a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d126      	bne.n	800b870 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d102      	bne.n	800b836 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2200      	movs	r2, #0
 800b834:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 fb52 	bl	800bee4 <RTC_ByteToBcd2>
 800b840:	4603      	mov	r3, r0
 800b842:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 fb4b 	bl	800bee4 <RTC_ByteToBcd2>
 800b84e:	4603      	mov	r3, r0
 800b850:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b852:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	789b      	ldrb	r3, [r3, #2]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 fb43 	bl	800bee4 <RTC_ByteToBcd2>
 800b85e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b860:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	78db      	ldrb	r3, [r3, #3]
 800b868:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b86a:	4313      	orrs	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e018      	b.n	800b8a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d102      	bne.n	800b884 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2200      	movs	r2, #0
 800b882:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	785b      	ldrb	r3, [r3, #1]
 800b88e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b890:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b896:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	78db      	ldrb	r3, [r3, #3]
 800b89c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	22ca      	movs	r2, #202	@ 0xca
 800b8a8:	625a      	str	r2, [r3, #36]	@ 0x24
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2253      	movs	r2, #83	@ 0x53
 800b8b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f000 faba 	bl	800be2c <RTC_EnterInitMode>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b8bc:	7cfb      	ldrb	r3, [r7, #19]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d11e      	bne.n	800b900 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	6979      	ldr	r1, [r7, #20]
 800b8c8:	4b16      	ldr	r3, [pc, #88]	@ (800b924 <HAL_RTC_SetTime+0x130>)
 800b8ca:	400b      	ands	r3, r1
 800b8cc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b8dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6899      	ldr	r1, [r3, #8]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	68da      	ldr	r2, [r3, #12]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	431a      	orrs	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 facf 	bl	800be9a <RTC_ExitInitMode>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b900:	7cfb      	ldrb	r3, [r7, #19]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d102      	bne.n	800b90c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	22ff      	movs	r2, #255	@ 0xff
 800b912:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	771a      	strb	r2, [r3, #28]

  return status;
 800b91a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	371c      	adds	r7, #28
 800b920:	46bd      	mov	sp, r7
 800b922:	bd90      	pop	{r4, r7, pc}
 800b924:	007f7f7f 	.word	0x007f7f7f

0800b928 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	4b22      	ldr	r3, [pc, #136]	@ (800b9e0 <HAL_RTC_GetTime+0xb8>)
 800b958:	4013      	ands	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	0c1b      	lsrs	r3, r3, #16
 800b960:	b2db      	uxtb	r3, r3
 800b962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b966:	b2da      	uxtb	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	0a1b      	lsrs	r3, r3, #8
 800b970:	b2db      	uxtb	r3, r3
 800b972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b976:	b2da      	uxtb	r2, r3
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b984:	b2da      	uxtb	r2, r3
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	0d9b      	lsrs	r3, r3, #22
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	b2da      	uxtb	r2, r3
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d11a      	bne.n	800b9d6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 fabb 	bl	800bf20 <RTC_Bcd2ToByte>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	785b      	ldrb	r3, [r3, #1]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fab2 	bl	800bf20 <RTC_Bcd2ToByte>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	461a      	mov	r2, r3
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	789b      	ldrb	r3, [r3, #2]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 faa9 	bl	800bf20 <RTC_Bcd2ToByte>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	007f7f7f 	.word	0x007f7f7f

0800b9e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b9e4:	b590      	push	{r4, r7, lr}
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	7f1b      	ldrb	r3, [r3, #28]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d101      	bne.n	800ba00 <HAL_RTC_SetDate+0x1c>
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	e06f      	b.n	800bae0 <HAL_RTC_SetDate+0xfc>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2201      	movs	r2, #1
 800ba04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2202      	movs	r2, #2
 800ba0a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10e      	bne.n	800ba30 <HAL_RTC_SetDate+0x4c>
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	785b      	ldrb	r3, [r3, #1]
 800ba16:	f003 0310 	and.w	r3, r3, #16
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d008      	beq.n	800ba30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	785b      	ldrb	r3, [r3, #1]
 800ba22:	f023 0310 	bic.w	r3, r3, #16
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	330a      	adds	r3, #10
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d11c      	bne.n	800ba70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	78db      	ldrb	r3, [r3, #3]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 fa52 	bl	800bee4 <RTC_ByteToBcd2>
 800ba40:	4603      	mov	r3, r0
 800ba42:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	785b      	ldrb	r3, [r3, #1]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f000 fa4b 	bl	800bee4 <RTC_ByteToBcd2>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba52:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	789b      	ldrb	r3, [r3, #2]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 fa43 	bl	800bee4 <RTC_ByteToBcd2>
 800ba5e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba60:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	e00e      	b.n	800ba8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	78db      	ldrb	r3, [r3, #3]
 800ba74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba7c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ba82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	22ca      	movs	r2, #202	@ 0xca
 800ba94:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2253      	movs	r2, #83	@ 0x53
 800ba9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 f9c4 	bl	800be2c <RTC_EnterInitMode>
 800baa4:	4603      	mov	r3, r0
 800baa6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800baa8:	7cfb      	ldrb	r3, [r7, #19]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10a      	bne.n	800bac4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	6979      	ldr	r1, [r7, #20]
 800bab4:	4b0c      	ldr	r3, [pc, #48]	@ (800bae8 <HAL_RTC_SetDate+0x104>)
 800bab6:	400b      	ands	r3, r1
 800bab8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 f9ed 	bl	800be9a <RTC_ExitInitMode>
 800bac0:	4603      	mov	r3, r0
 800bac2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bac4:	7cfb      	ldrb	r3, [r7, #19]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d102      	bne.n	800bad0 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2201      	movs	r2, #1
 800bace:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	22ff      	movs	r2, #255	@ 0xff
 800bad6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2200      	movs	r2, #0
 800badc:	771a      	strb	r2, [r3, #28]

  return status;
 800bade:	7cfb      	ldrb	r3, [r7, #19]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	371c      	adds	r7, #28
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd90      	pop	{r4, r7, pc}
 800bae8:	00ffff3f 	.word	0x00ffff3f

0800baec <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	4b21      	ldr	r3, [pc, #132]	@ (800bb88 <HAL_RTC_GetDate+0x9c>)
 800bb04:	4013      	ands	r3, r2
 800bb06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	0c1b      	lsrs	r3, r3, #16
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	0a1b      	lsrs	r3, r3, #8
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f003 031f 	and.w	r3, r3, #31
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	0b5b      	lsrs	r3, r3, #13
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	f003 0307 	and.w	r3, r3, #7
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d11a      	bne.n	800bb7c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	78db      	ldrb	r3, [r3, #3]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 f9e8 	bl	800bf20 <RTC_Bcd2ToByte>
 800bb50:	4603      	mov	r3, r0
 800bb52:	461a      	mov	r2, r3
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	785b      	ldrb	r3, [r3, #1]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 f9df 	bl	800bf20 <RTC_Bcd2ToByte>
 800bb62:	4603      	mov	r3, r0
 800bb64:	461a      	mov	r2, r3
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	789b      	ldrb	r3, [r3, #2]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 f9d6 	bl	800bf20 <RTC_Bcd2ToByte>
 800bb74:	4603      	mov	r3, r0
 800bb76:	461a      	mov	r2, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	00ffff3f 	.word	0x00ffff3f

0800bb8c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b089      	sub	sp, #36	@ 0x24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800bba0:	2300      	movs	r3, #0
 800bba2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	7f1b      	ldrb	r3, [r3, #28]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d101      	bne.n	800bbb0 <HAL_RTC_SetAlarm+0x24>
 800bbac:	2302      	movs	r3, #2
 800bbae:	e113      	b.n	800bdd8 <HAL_RTC_SetAlarm+0x24c>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2202      	movs	r2, #2
 800bbba:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d137      	bne.n	800bc32 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 f982 	bl	800bee4 <RTC_ByteToBcd2>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	785b      	ldrb	r3, [r3, #1]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 f97b 	bl	800bee4 <RTC_ByteToBcd2>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bbf2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	789b      	ldrb	r3, [r3, #2]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 f973 	bl	800bee4 <RTC_ByteToBcd2>
 800bbfe:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bc00:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	78db      	ldrb	r3, [r3, #3]
 800bc08:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bc0a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 f965 	bl	800bee4 <RTC_ByteToBcd2>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800bc1e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bc26:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	61fb      	str	r3, [r7, #28]
 800bc30:	e023      	b.n	800bc7a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d102      	bne.n	800bc46 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2200      	movs	r2, #0
 800bc44:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	785b      	ldrb	r3, [r3, #1]
 800bc50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bc52:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bc58:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	78db      	ldrb	r3, [r3, #3]
 800bc5e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bc60:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc68:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800bc6a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bc70:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bc76:	4313      	orrs	r3, r2
 800bc78:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bc82:	4313      	orrs	r3, r2
 800bc84:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	22ca      	movs	r2, #202	@ 0xca
 800bc8c:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2253      	movs	r2, #83	@ 0x53
 800bc94:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc9e:	d148      	bne.n	800bd32 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	689a      	ldr	r2, [r3, #8]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bcae:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	689a      	ldr	r2, [r3, #8]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bcbe:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	b2da      	uxtb	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800bcd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bcd2:	f7f9 fbe3 	bl	800549c <HAL_GetTick>
 800bcd6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bcd8:	e013      	b.n	800bd02 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bcda:	f7f9 fbdf 	bl	800549c <HAL_GetTick>
 800bcde:	4602      	mov	r2, r0
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bce8:	d90b      	bls.n	800bd02 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	22ff      	movs	r2, #255	@ 0xff
 800bcf0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2203      	movs	r2, #3
 800bcf6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e06a      	b.n	800bdd8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0e4      	beq.n	800bcda <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	69fa      	ldr	r2, [r7, #28]
 800bd16:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	689a      	ldr	r2, [r3, #8]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd2e:	609a      	str	r2, [r3, #8]
 800bd30:	e047      	b.n	800bdc2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	689a      	ldr	r2, [r3, #8]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bd40:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	689a      	ldr	r2, [r3, #8]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bd50:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bd62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bd64:	f7f9 fb9a 	bl	800549c <HAL_GetTick>
 800bd68:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bd6a:	e013      	b.n	800bd94 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd6c:	f7f9 fb96 	bl	800549c <HAL_GetTick>
 800bd70:	4602      	mov	r2, r0
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd7a:	d90b      	bls.n	800bd94 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	22ff      	movs	r2, #255	@ 0xff
 800bd82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2203      	movs	r2, #3
 800bd88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bd90:	2303      	movs	r3, #3
 800bd92:	e021      	b.n	800bdd8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f003 0302 	and.w	r3, r3, #2
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0e4      	beq.n	800bd6c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	69fa      	ldr	r2, [r7, #28]
 800bda8:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdc0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	22ff      	movs	r2, #255	@ 0xff
 800bdc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3724      	adds	r7, #36	@ 0x24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd90      	pop	{r4, r7, pc}

0800bde0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bde8:	2300      	movs	r3, #0
 800bdea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a0d      	ldr	r2, [pc, #52]	@ (800be28 <HAL_RTC_WaitForSynchro+0x48>)
 800bdf2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bdf4:	f7f9 fb52 	bl	800549c <HAL_GetTick>
 800bdf8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bdfa:	e009      	b.n	800be10 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bdfc:	f7f9 fb4e 	bl	800549c <HAL_GetTick>
 800be00:	4602      	mov	r2, r0
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be0a:	d901      	bls.n	800be10 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e007      	b.n	800be20 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	f003 0320 	and.w	r3, r3, #32
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d0ee      	beq.n	800bdfc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	0001ff5f 	.word	0x0001ff5f

0800be2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800be34:	2300      	movs	r3, #0
 800be36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be46:	2b00      	cmp	r3, #0
 800be48:	d122      	bne.n	800be90 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68da      	ldr	r2, [r3, #12]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800be58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be5a:	f7f9 fb1f 	bl	800549c <HAL_GetTick>
 800be5e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800be60:	e00c      	b.n	800be7c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800be62:	f7f9 fb1b 	bl	800549c <HAL_GetTick>
 800be66:	4602      	mov	r2, r0
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be70:	d904      	bls.n	800be7c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2204      	movs	r2, #4
 800be76:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be86:	2b00      	cmp	r3, #0
 800be88:	d102      	bne.n	800be90 <RTC_EnterInitMode+0x64>
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d1e8      	bne.n	800be62 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800be90:	7bfb      	ldrb	r3, [r7, #15]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68da      	ldr	r2, [r3, #12]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800beb4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	f003 0320 	and.w	r3, r3, #32
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7ff ff8b 	bl	800bde0 <HAL_RTC_WaitForSynchro>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2204      	movs	r2, #4
 800bed4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800beda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800beee:	2300      	movs	r3, #0
 800bef0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bef2:	e005      	b.n	800bf00 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	3301      	adds	r3, #1
 800bef8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	3b0a      	subs	r3, #10
 800befe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bf00:	79fb      	ldrb	r3, [r7, #7]
 800bf02:	2b09      	cmp	r3, #9
 800bf04:	d8f6      	bhi.n	800bef4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	79fb      	ldrb	r3, [r7, #7]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	b2db      	uxtb	r3, r3
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800bf2e:	79fb      	ldrb	r3, [r7, #7]
 800bf30:	091b      	lsrs	r3, r3, #4
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	461a      	mov	r2, r3
 800bf36:	4613      	mov	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4413      	add	r3, r2
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	f003 030f 	and.w	r3, r3, #15
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	4413      	add	r3, r2
 800bf4e:	b2db      	uxtb	r3, r3
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	7f1b      	ldrb	r3, [r3, #28]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d101      	bne.n	800bf78 <HAL_RTCEx_SetTimeStamp+0x1c>
 800bf74:	2302      	movs	r3, #2
 800bf76:	e050      	b.n	800c01a <HAL_RTCEx_SetTimeStamp+0xbe>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2202      	movs	r2, #2
 800bf82:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 0206 	bic.w	r2, r2, #6
 800bf92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	430a      	orrs	r2, r1
 800bfa2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	4b1f      	ldr	r3, [pc, #124]	@ (800c028 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	22ca      	movs	r2, #202	@ 0xca
 800bfbe:	625a      	str	r2, [r3, #36]	@ 0x24
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2253      	movs	r2, #83	@ 0x53
 800bfc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800bfe0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800bff2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689a      	ldr	r2, [r3, #8]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c002:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	22ff      	movs	r2, #255	@ 0xff
 800c00a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2201      	movs	r2, #1
 800c010:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	371c      	adds	r7, #28
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	fffff7f7 	.word	0xfffff7f7

0800c02c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c038:	2300      	movs	r3, #0
 800c03a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e156      	b.n	800c2f8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7f8 fbe0 	bl	8004824 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2202      	movs	r2, #2
 800c068:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f95b 	bl	800c328 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	2b02      	cmp	r3, #2
 800c078:	d00c      	beq.n	800c094 <HAL_SAI_Init+0x68>
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d80d      	bhi.n	800c09a <HAL_SAI_Init+0x6e>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <HAL_SAI_Init+0x5c>
 800c082:	2b01      	cmp	r3, #1
 800c084:	d003      	beq.n	800c08e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c086:	e008      	b.n	800c09a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c088:	2300      	movs	r3, #0
 800c08a:	61fb      	str	r3, [r7, #28]
      break;
 800c08c:	e006      	b.n	800c09c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c08e:	2310      	movs	r3, #16
 800c090:	61fb      	str	r3, [r7, #28]
      break;
 800c092:	e003      	b.n	800c09c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c094:	2320      	movs	r3, #32
 800c096:	61fb      	str	r3, [r7, #28]
      break;
 800c098:	e000      	b.n	800c09c <HAL_SAI_Init+0x70>
      break;
 800c09a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d81e      	bhi.n	800c0e2 <HAL_SAI_Init+0xb6>
 800c0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c0ac <HAL_SAI_Init+0x80>)
 800c0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0aa:	bf00      	nop
 800c0ac:	0800c0bd 	.word	0x0800c0bd
 800c0b0:	0800c0c3 	.word	0x0800c0c3
 800c0b4:	0800c0cb 	.word	0x0800c0cb
 800c0b8:	0800c0d3 	.word	0x0800c0d3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	617b      	str	r3, [r7, #20]
    }
    break;
 800c0c0:	e010      	b.n	800c0e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c0c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0c6:	617b      	str	r3, [r7, #20]
    }
    break;
 800c0c8:	e00c      	b.n	800c0e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c0ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c0ce:	617b      	str	r3, [r7, #20]
    }
    break;
 800c0d0:	e008      	b.n	800c0e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c0d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c0d6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	f043 0301 	orr.w	r3, r3, #1
 800c0de:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c0e0:	e000      	b.n	800c0e4 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c0e2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a85      	ldr	r2, [pc, #532]	@ (800c300 <HAL_SAI_Init+0x2d4>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d004      	beq.n	800c0f8 <HAL_SAI_Init+0xcc>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a84      	ldr	r2, [pc, #528]	@ (800c304 <HAL_SAI_Init+0x2d8>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d103      	bne.n	800c100 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c0f8:	4a83      	ldr	r2, [pc, #524]	@ (800c308 <HAL_SAI_Init+0x2dc>)
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	6013      	str	r3, [r2, #0]
 800c0fe:	e002      	b.n	800c106 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c100:	4a82      	ldr	r2, [pc, #520]	@ (800c30c <HAL_SAI_Init+0x2e0>)
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d04c      	beq.n	800c1a8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a7a      	ldr	r2, [pc, #488]	@ (800c300 <HAL_SAI_Init+0x2d4>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d004      	beq.n	800c126 <HAL_SAI_Init+0xfa>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a78      	ldr	r2, [pc, #480]	@ (800c304 <HAL_SAI_Init+0x2d8>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d104      	bne.n	800c130 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c126:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c12a:	f7ff f9a1 	bl	800b470 <HAL_RCCEx_GetPeriphCLKFreq>
 800c12e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a76      	ldr	r2, [pc, #472]	@ (800c310 <HAL_SAI_Init+0x2e4>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d004      	beq.n	800c144 <HAL_SAI_Init+0x118>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a75      	ldr	r2, [pc, #468]	@ (800c314 <HAL_SAI_Init+0x2e8>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d104      	bne.n	800c14e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c144:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c148:	f7ff f992 	bl	800b470 <HAL_RCCEx_GetPeriphCLKFreq>
 800c14c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	461a      	mov	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	025b      	lsls	r3, r3, #9
 800c160:	fbb2 f3f3 	udiv	r3, r2, r3
 800c164:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	4a6b      	ldr	r2, [pc, #428]	@ (800c318 <HAL_SAI_Init+0x2ec>)
 800c16a:	fba2 2303 	umull	r2, r3, r2, r3
 800c16e:	08da      	lsrs	r2, r3, #3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c174:	68f9      	ldr	r1, [r7, #12]
 800c176:	4b68      	ldr	r3, [pc, #416]	@ (800c318 <HAL_SAI_Init+0x2ec>)
 800c178:	fba3 2301 	umull	r2, r3, r3, r1
 800c17c:	08da      	lsrs	r2, r3, #3
 800c17e:	4613      	mov	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4413      	add	r3, r2
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	1aca      	subs	r2, r1, r3
 800c188:	2a08      	cmp	r2, #8
 800c18a:	d904      	bls.n	800c196 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c19a:	2b04      	cmp	r3, #4
 800c19c:	d104      	bne.n	800c1a8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	085a      	lsrs	r2, r3, #1
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d003      	beq.n	800c1b8 <HAL_SAI_Init+0x18c>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d109      	bne.n	800c1cc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d101      	bne.n	800c1c4 <HAL_SAI_Init+0x198>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	e001      	b.n	800c1c8 <HAL_SAI_Init+0x19c>
 800c1c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c1c8:	61bb      	str	r3, [r7, #24]
 800c1ca:	e008      	b.n	800c1de <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d102      	bne.n	800c1da <HAL_SAI_Init+0x1ae>
 800c1d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c1d8:	e000      	b.n	800c1dc <HAL_SAI_Init+0x1b0>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	6819      	ldr	r1, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	4b4c      	ldr	r3, [pc, #304]	@ (800c31c <HAL_SAI_Init+0x2f0>)
 800c1ea:	400b      	ands	r3, r1
 800c1ec:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	6819      	ldr	r1, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c202:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c208:	431a      	orrs	r2, r3
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c216:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c222:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a1b      	ldr	r3, [r3, #32]
 800c228:	051b      	lsls	r3, r3, #20
 800c22a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	430a      	orrs	r2, r1
 800c232:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6859      	ldr	r1, [r3, #4]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	4b38      	ldr	r3, [pc, #224]	@ (800c320 <HAL_SAI_Init+0x2f4>)
 800c240:	400b      	ands	r3, r1
 800c242:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6859      	ldr	r1, [r3, #4]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	699a      	ldr	r2, [r3, #24]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	431a      	orrs	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	430a      	orrs	r2, r1
 800c260:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	6899      	ldr	r1, [r3, #8]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	4b2d      	ldr	r3, [pc, #180]	@ (800c324 <HAL_SAI_Init+0x2f8>)
 800c26e:	400b      	ands	r3, r1
 800c270:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6899      	ldr	r1, [r3, #8]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c27c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c282:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c288:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c28e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c294:	3b01      	subs	r3, #1
 800c296:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c298:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68d9      	ldr	r1, [r3, #12]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c2b0:	400b      	ands	r3, r1
 800c2b2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68d9      	ldr	r1, [r3, #12]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2c2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2c8:	041b      	lsls	r3, r3, #16
 800c2ca:	431a      	orrs	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	021b      	lsls	r3, r3, #8
 800c2d4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3720      	adds	r7, #32
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	40015804 	.word	0x40015804
 800c304:	40015824 	.word	0x40015824
 800c308:	40015800 	.word	0x40015800
 800c30c:	40015c00 	.word	0x40015c00
 800c310:	40015c04 	.word	0x40015c04
 800c314:	40015c24 	.word	0x40015c24
 800c318:	cccccccd 	.word	0xcccccccd
 800c31c:	ff05c010 	.word	0xff05c010
 800c320:	ffff1ff0 	.word	0xffff1ff0
 800c324:	fff88000 	.word	0xfff88000

0800c328 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c330:	4b17      	ldr	r3, [pc, #92]	@ (800c390 <SAI_Disable+0x68>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a17      	ldr	r2, [pc, #92]	@ (800c394 <SAI_Disable+0x6c>)
 800c336:	fba2 2303 	umull	r2, r3, r2, r3
 800c33a:	0b1b      	lsrs	r3, r3, #12
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c352:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	1e5a      	subs	r2, r3, #1
 800c358:	60fa      	str	r2, [r7, #12]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10a      	bne.n	800c374 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c364:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	72fb      	strb	r3, [r7, #11]
      break;
 800c372:	e006      	b.n	800c382 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1e8      	bne.n	800c354 <SAI_Disable+0x2c>

  return status;
 800c382:	7afb      	ldrb	r3, [r7, #11]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	2000001c 	.word	0x2000001c
 800c394:	95cbec1b 	.word	0x95cbec1b

0800c398 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e022      	b.n	800c3f0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d105      	bne.n	800c3c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f7f7 fdc3 	bl	8003f48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2203      	movs	r2, #3
 800c3c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f814 	bl	800c3f8 <HAL_SD_InitCard>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d001      	beq.n	800c3da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e00a      	b.n	800c3f0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c3f8:	b5b0      	push	{r4, r5, r7, lr}
 800c3fa:	b08e      	sub	sp, #56	@ 0x38
 800c3fc:	af04      	add	r7, sp, #16
 800c3fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c400:	2300      	movs	r3, #0
 800c402:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c404:	2300      	movs	r3, #0
 800c406:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c408:	2300      	movs	r3, #0
 800c40a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c40c:	2300      	movs	r3, #0
 800c40e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c410:	2300      	movs	r3, #0
 800c412:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c414:	2376      	movs	r3, #118	@ 0x76
 800c416:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681d      	ldr	r5, [r3, #0]
 800c41c:	466c      	mov	r4, sp
 800c41e:	f107 0318 	add.w	r3, r7, #24
 800c422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c42a:	f107 030c 	add.w	r3, r7, #12
 800c42e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c430:	4628      	mov	r0, r5
 800c432:	f004 fd05 	bl	8010e40 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c444:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f004 fd42 	bl	8010ed4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c45e:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c460:	2002      	movs	r0, #2
 800c462:	f7f9 f827 	bl	80054b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 fb58 	bl	800db1c <SD_PowerON>
 800c46c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c482:	431a      	orrs	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e02e      	b.n	800c4ea <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f001 fa77 	bl	800d980 <SD_InitCard>
 800c492:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00b      	beq.n	800c4b2 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2201      	movs	r2, #1
 800c49e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a8:	431a      	orrs	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e01b      	b.n	800c4ea <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f004 fd9c 	bl	8010ff8 <SDMMC_CmdBlockLength>
 800c4c0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00f      	beq.n	800c4e8 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a09      	ldr	r2, [pc, #36]	@ (800c4f4 <HAL_SD_InitCard+0xfc>)
 800c4ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d6:	431a      	orrs	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e000      	b.n	800c4ea <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3728      	adds	r7, #40	@ 0x28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	004005ff 	.word	0x004005ff

0800c4f8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b092      	sub	sp, #72	@ 0x48
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c506:	f7f8 ffc9 	bl	800549c <HAL_GetTick>
 800c50a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d107      	bne.n	800c52a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c51e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e1bd      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b01      	cmp	r3, #1
 800c534:	f040 81b0 	bne.w	800c898 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c53e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	441a      	add	r2, r3
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c548:	429a      	cmp	r2, r3
 800c54a:	d907      	bls.n	800c55c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c550:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	e1a4      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2203      	movs	r2, #3
 800c560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2200      	movs	r2, #0
 800c56a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c570:	2b01      	cmp	r3, #1
 800c572:	d002      	beq.n	800c57a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c576:	025b      	lsls	r3, r3, #9
 800c578:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c57a:	f04f 33ff 	mov.w	r3, #4294967295
 800c57e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	025b      	lsls	r3, r3, #9
 800c584:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c586:	2390      	movs	r3, #144	@ 0x90
 800c588:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c58a:	2302      	movs	r3, #2
 800c58c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c58e:	2300      	movs	r3, #0
 800c590:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c592:	2301      	movs	r3, #1
 800c594:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f107 0214 	add.w	r2, r7, #20
 800c59e:	4611      	mov	r1, r2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f004 fcfd 	bl	8010fa0 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d90a      	bls.n	800c5c2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f004 fd61 	bl	8011080 <SDMMC_CmdReadMultiBlock>
 800c5be:	6478      	str	r0, [r7, #68]	@ 0x44
 800c5c0:	e009      	b.n	800c5d6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f004 fd34 	bl	801103c <SDMMC_CmdReadSingleBlock>
 800c5d4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d012      	beq.n	800c602 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a7a      	ldr	r2, [pc, #488]	@ (800c7cc <HAL_SD_ReadBlocks+0x2d4>)
 800c5e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5ea:	431a      	orrs	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	e151      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c606:	e061      	b.n	800c6cc <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c60e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d03c      	beq.n	800c690 <HAL_SD_ReadBlocks+0x198>
 800c616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d039      	beq.n	800c690 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c61c:	2300      	movs	r3, #0
 800c61e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c620:	e033      	b.n	800c68a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4618      	mov	r0, r3
 800c628:	f004 fc36 	bl	8010e98 <SDMMC_ReadFIFO>
 800c62c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	b2da      	uxtb	r2, r3
 800c632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c634:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c638:	3301      	adds	r3, #1
 800c63a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c63e:	3b01      	subs	r3, #1
 800c640:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c644:	0a1b      	lsrs	r3, r3, #8
 800c646:	b2da      	uxtb	r2, r3
 800c648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c64a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c64e:	3301      	adds	r3, #1
 800c650:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c654:	3b01      	subs	r3, #1
 800c656:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c65a:	0c1b      	lsrs	r3, r3, #16
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c660:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c664:	3301      	adds	r3, #1
 800c666:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c66a:	3b01      	subs	r3, #1
 800c66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c670:	0e1b      	lsrs	r3, r3, #24
 800c672:	b2da      	uxtb	r2, r3
 800c674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c676:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c67a:	3301      	adds	r3, #1
 800c67c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c67e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c680:	3b01      	subs	r3, #1
 800c682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800c684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c686:	3301      	adds	r3, #1
 800c688:	643b      	str	r3, [r7, #64]	@ 0x40
 800c68a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c68c:	2b07      	cmp	r3, #7
 800c68e:	d9c8      	bls.n	800c622 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c690:	f7f8 ff04 	bl	800549c <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d902      	bls.n	800c6a6 <HAL_SD_ReadBlocks+0x1ae>
 800c6a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d112      	bne.n	800c6cc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a48      	ldr	r2, [pc, #288]	@ (800c7cc <HAL_SD_ReadBlocks+0x2d4>)
 800c6ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e0ec      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6d2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d096      	beq.n	800c608 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d022      	beq.n	800c72e <HAL_SD_ReadBlocks+0x236>
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d91f      	bls.n	800c72e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	d01b      	beq.n	800c72e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f004 fd26 	bl	801114c <SDMMC_CmdStopTransfer>
 800c700:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c704:	2b00      	cmp	r3, #0
 800c706:	d012      	beq.n	800c72e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a2f      	ldr	r2, [pc, #188]	@ (800c7cc <HAL_SD_ReadBlocks+0x2d4>)
 800c70e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c716:	431a      	orrs	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	e0bb      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c734:	f003 0308 	and.w	r3, r3, #8
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d012      	beq.n	800c762 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a22      	ldr	r2, [pc, #136]	@ (800c7cc <HAL_SD_ReadBlocks+0x2d4>)
 800c742:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c748:	f043 0208 	orr.w	r2, r3, #8
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	e0a1      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c768:	f003 0302 	and.w	r3, r3, #2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d012      	beq.n	800c796 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a15      	ldr	r2, [pc, #84]	@ (800c7cc <HAL_SD_ReadBlocks+0x2d4>)
 800c776:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c77c:	f043 0202 	orr.w	r2, r3, #2
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	e087      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c79c:	f003 0320 	and.w	r3, r3, #32
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d064      	beq.n	800c86e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a08      	ldr	r2, [pc, #32]	@ (800c7cc <HAL_SD_ReadBlocks+0x2d4>)
 800c7aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b0:	f043 0220 	orr.w	r2, r3, #32
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e06d      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
 800c7ca:	bf00      	nop
 800c7cc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f004 fb5f 	bl	8010e98 <SDMMC_ReadFIFO>
 800c7da:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800c7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7de:	b2da      	uxtb	r2, r3
 800c7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f2:	0a1b      	lsrs	r3, r3, #8
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c802:	3b01      	subs	r3, #1
 800c804:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c808:	0c1b      	lsrs	r3, r3, #16
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c80e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c812:	3301      	adds	r3, #1
 800c814:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c818:	3b01      	subs	r3, #1
 800c81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81e:	0e1b      	lsrs	r3, r3, #24
 800c820:	b2da      	uxtb	r2, r3
 800c822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c824:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c828:	3301      	adds	r3, #1
 800c82a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c82c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c82e:	3b01      	subs	r3, #1
 800c830:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c832:	f7f8 fe33 	bl	800549c <HAL_GetTick>
 800c836:	4602      	mov	r2, r0
 800c838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c83e:	429a      	cmp	r2, r3
 800c840:	d902      	bls.n	800c848 <HAL_SD_ReadBlocks+0x350>
 800c842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c844:	2b00      	cmp	r3, #0
 800c846:	d112      	bne.n	800c86e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a18      	ldr	r2, [pc, #96]	@ (800c8b0 <HAL_SD_ReadBlocks+0x3b8>)
 800c84e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c854:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2200      	movs	r2, #0
 800c868:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e01b      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <HAL_SD_ReadBlocks+0x38a>
 800c87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1a6      	bne.n	800c7d0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c88a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	e006      	b.n	800c8a6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c89c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
  }
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3748      	adds	r7, #72	@ 0x48
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	004005ff 	.word	0x004005ff

0800c8b4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b092      	sub	sp, #72	@ 0x48
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
 800c8c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c8c2:	f7f8 fdeb 	bl	800549c <HAL_GetTick>
 800c8c6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d107      	bne.n	800c8e6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e165      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	f040 8158 	bne.w	800cba4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c8fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	441a      	add	r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c904:	429a      	cmp	r2, r3
 800c906:	d907      	bls.n	800c918 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c90c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	e14c      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2203      	movs	r2, #3
 800c91c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2200      	movs	r2, #0
 800c926:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d002      	beq.n	800c936 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c932:	025b      	lsls	r3, r3, #9
 800c934:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c936:	f04f 33ff 	mov.w	r3, #4294967295
 800c93a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	025b      	lsls	r3, r3, #9
 800c940:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c942:	2390      	movs	r3, #144	@ 0x90
 800c944:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c946:	2300      	movs	r3, #0
 800c948:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c94e:	2301      	movs	r3, #1
 800c950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f107 0218 	add.w	r2, r7, #24
 800c95a:	4611      	mov	r1, r2
 800c95c:	4618      	mov	r0, r3
 800c95e:	f004 fb1f 	bl	8010fa0 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d90a      	bls.n	800c97e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2220      	movs	r2, #32
 800c96c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c974:	4618      	mov	r0, r3
 800c976:	f004 fbc7 	bl	8011108 <SDMMC_CmdWriteMultiBlock>
 800c97a:	6478      	str	r0, [r7, #68]	@ 0x44
 800c97c:	e009      	b.n	800c992 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2210      	movs	r2, #16
 800c982:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c98a:	4618      	mov	r0, r3
 800c98c:	f004 fb9a 	bl	80110c4 <SDMMC_CmdWriteSingleBlock>
 800c990:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c994:	2b00      	cmp	r3, #0
 800c996:	d012      	beq.n	800c9be <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a87      	ldr	r2, [pc, #540]	@ (800cbbc <HAL_SD_WriteBlocks+0x308>)
 800c99e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9a6:	431a      	orrs	r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e0f9      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c9c2:	e065      	b.n	800ca90 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d040      	beq.n	800ca54 <HAL_SD_WriteBlocks+0x1a0>
 800c9d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d03d      	beq.n	800ca54 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9dc:	e037      	b.n	800ca4e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800c9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	021a      	lsls	r2, r3, #8
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9fe:	3301      	adds	r3, #1
 800ca00:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ca02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca04:	3b01      	subs	r3, #1
 800ca06:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800ca08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	041a      	lsls	r2, r3, #16
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ca14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca16:	3301      	adds	r3, #1
 800ca18:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ca1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800ca20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	061a      	lsls	r2, r3, #24
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ca2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca2e:	3301      	adds	r3, #1
 800ca30:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ca32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca34:	3b01      	subs	r3, #1
 800ca36:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f107 0214 	add.w	r2, r7, #20
 800ca40:	4611      	mov	r1, r2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f004 fa35 	bl	8010eb2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800ca48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca50:	2b07      	cmp	r3, #7
 800ca52:	d9c4      	bls.n	800c9de <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ca54:	f7f8 fd22 	bl	800549c <HAL_GetTick>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d902      	bls.n	800ca6a <HAL_SD_WriteBlocks+0x1b6>
 800ca64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d112      	bne.n	800ca90 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a53      	ldr	r2, [pc, #332]	@ (800cbbc <HAL_SD_WriteBlocks+0x308>)
 800ca70:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca78:	431a      	orrs	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	e090      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca96:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d092      	beq.n	800c9c4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d022      	beq.n	800caf2 <HAL_SD_WriteBlocks+0x23e>
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d91f      	bls.n	800caf2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cab6:	2b03      	cmp	r3, #3
 800cab8:	d01b      	beq.n	800caf2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f004 fb44 	bl	801114c <SDMMC_CmdStopTransfer>
 800cac4:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d012      	beq.n	800caf2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a3a      	ldr	r2, [pc, #232]	@ (800cbbc <HAL_SD_WriteBlocks+0x308>)
 800cad2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cada:	431a      	orrs	r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	e05f      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caf8:	f003 0308 	and.w	r3, r3, #8
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d012      	beq.n	800cb26 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a2d      	ldr	r2, [pc, #180]	@ (800cbbc <HAL_SD_WriteBlocks+0x308>)
 800cb06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb0c:	f043 0208 	orr.w	r2, r3, #8
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e045      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb2c:	f003 0302 	and.w	r3, r3, #2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d012      	beq.n	800cb5a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a20      	ldr	r2, [pc, #128]	@ (800cbbc <HAL_SD_WriteBlocks+0x308>)
 800cb3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb40:	f043 0202 	orr.w	r2, r3, #2
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e02b      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb60:	f003 0310 	and.w	r3, r3, #16
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d012      	beq.n	800cb8e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a13      	ldr	r2, [pc, #76]	@ (800cbbc <HAL_SD_WriteBlocks+0x308>)
 800cb6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb74:	f043 0210 	orr.w	r2, r3, #16
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e011      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cb96:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	e006      	b.n	800cbb2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cba8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
  }
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3748      	adds	r7, #72	@ 0x48
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	004005ff 	.word	0x004005ff

0800cbc0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08c      	sub	sp, #48	@ 0x30
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
 800cbcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d107      	bne.n	800cbe8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbdc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e0c3      	b.n	800cd70 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	f040 80bc 	bne.w	800cd6e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cbfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	441a      	add	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d907      	bls.n	800cc1a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc0e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cc16:	2301      	movs	r3, #1
 800cc18:	e0aa      	b.n	800cd70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2203      	movs	r2, #3
 800cc1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2200      	movs	r2, #0
 800cc28:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800cc38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc3e:	4a4e      	ldr	r2, [pc, #312]	@ (800cd78 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800cc40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc46:	4a4d      	ldr	r2, [pc, #308]	@ (800cd7c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800cc48:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc4e:	2200      	movs	r2, #0
 800cc50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc56:	2200      	movs	r2, #0
 800cc58:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc6a:	689a      	ldr	r2, [r3, #8]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	430a      	orrs	r2, r1
 800cc74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3380      	adds	r3, #128	@ 0x80
 800cc80:	4619      	mov	r1, r3
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	025b      	lsls	r3, r3, #9
 800cc88:	089b      	lsrs	r3, r3, #2
 800cc8a:	f7f9 fa29 	bl	80060e0 <HAL_DMA_Start_IT>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d017      	beq.n	800ccc4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800cca2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a35      	ldr	r2, [pc, #212]	@ (800cd80 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ccaa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e055      	b.n	800cd70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f042 0208 	orr.w	r2, r2, #8
 800ccd2:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d002      	beq.n	800cce2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800ccdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccde:	025b      	lsls	r3, r3, #9
 800cce0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cce2:	f04f 33ff 	mov.w	r3, #4294967295
 800cce6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	025b      	lsls	r3, r3, #9
 800ccec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ccee:	2390      	movs	r3, #144	@ 0x90
 800ccf0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f107 0210 	add.w	r2, r7, #16
 800cd06:	4611      	mov	r1, r2
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f004 f949 	bl	8010fa0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d90a      	bls.n	800cd2a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2282      	movs	r2, #130	@ 0x82
 800cd18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd20:	4618      	mov	r0, r3
 800cd22:	f004 f9ad 	bl	8011080 <SDMMC_CmdReadMultiBlock>
 800cd26:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cd28:	e009      	b.n	800cd3e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2281      	movs	r2, #129	@ 0x81
 800cd2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd36:	4618      	mov	r0, r3
 800cd38:	f004 f980 	bl	801103c <SDMMC_CmdReadSingleBlock>
 800cd3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d012      	beq.n	800cd6a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a0d      	ldr	r2, [pc, #52]	@ (800cd80 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cd4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd52:	431a      	orrs	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e002      	b.n	800cd70 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e000      	b.n	800cd70 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800cd6e:	2302      	movs	r3, #2
  }
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3730      	adds	r7, #48	@ 0x30
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	0800d78f 	.word	0x0800d78f
 800cd7c:	0800d801 	.word	0x0800d801
 800cd80:	004005ff 	.word	0x004005ff

0800cd84 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b08c      	sub	sp, #48	@ 0x30
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d107      	bne.n	800cdac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cda0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e0c6      	b.n	800cf3a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	f040 80bf 	bne.w	800cf38 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cdc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	441a      	add	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d907      	bls.n	800cdde <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e0ad      	b.n	800cf3a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2203      	movs	r2, #3
 800cde2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2200      	movs	r2, #0
 800cdec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f042 021a 	orr.w	r2, r2, #26
 800cdfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce02:	4a50      	ldr	r2, [pc, #320]	@ (800cf44 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800ce04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0a:	4a4f      	ldr	r2, [pc, #316]	@ (800cf48 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800ce0c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce12:	2200      	movs	r2, #0
 800ce14:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d002      	beq.n	800ce24 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ce1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce20:	025b      	lsls	r3, r3, #9
 800ce22:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d90a      	bls.n	800ce40 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	22a0      	movs	r2, #160	@ 0xa0
 800ce2e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce36:	4618      	mov	r0, r3
 800ce38:	f004 f966 	bl	8011108 <SDMMC_CmdWriteMultiBlock>
 800ce3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ce3e:	e009      	b.n	800ce54 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2290      	movs	r2, #144	@ 0x90
 800ce44:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f004 f939 	bl	80110c4 <SDMMC_CmdWriteSingleBlock>
 800ce52:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d012      	beq.n	800ce80 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a3b      	ldr	r2, [pc, #236]	@ (800cf4c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ce60:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce68:	431a      	orrs	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2201      	movs	r2, #1
 800ce72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e05c      	b.n	800cf3a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f042 0208 	orr.w	r2, r2, #8
 800ce8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce94:	2240      	movs	r2, #64	@ 0x40
 800ce96:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cea8:	689a      	ldr	r2, [r3, #8]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	430a      	orrs	r2, r1
 800ceb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ceb8:	68b9      	ldr	r1, [r7, #8]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	3380      	adds	r3, #128	@ 0x80
 800cec0:	461a      	mov	r2, r3
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	025b      	lsls	r3, r3, #9
 800cec6:	089b      	lsrs	r3, r3, #2
 800cec8:	f7f9 f90a 	bl	80060e0 <HAL_DMA_Start_IT>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d01a      	beq.n	800cf08 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f022 021a 	bic.w	r2, r2, #26
 800cee0:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a19      	ldr	r2, [pc, #100]	@ (800cf4c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cee8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e018      	b.n	800cf3a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf08:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	025b      	lsls	r3, r3, #9
 800cf12:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cf14:	2390      	movs	r3, #144	@ 0x90
 800cf16:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800cf20:	2301      	movs	r3, #1
 800cf22:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f107 0210 	add.w	r2, r7, #16
 800cf2c:	4611      	mov	r1, r2
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f004 f836 	bl	8010fa0 <SDMMC_ConfigData>

      return HAL_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	e000      	b.n	800cf3a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800cf38:	2302      	movs	r3, #2
  }
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3730      	adds	r7, #48	@ 0x30
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	0800d765 	.word	0x0800d765
 800cf48:	0800d801 	.word	0x0800d801
 800cf4c:	004005ff 	.word	0x004005ff

0800cf50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d008      	beq.n	800cf7e <HAL_SD_IRQHandler+0x2e>
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f003 0308 	and.w	r3, r3, #8
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 ffef 	bl	800df5a <SD_Read_IT>
 800cf7c:	e15a      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f000 808d 	beq.w	800d0a8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf96:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	4b9a      	ldr	r3, [pc, #616]	@ (800d20c <HAL_SD_IRQHandler+0x2bc>)
 800cfa4:	400b      	ands	r3, r1
 800cfa6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f022 0201 	bic.w	r2, r2, #1
 800cfb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f003 0308 	and.w	r3, r3, #8
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d039      	beq.n	800d036 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f003 0302 	and.w	r3, r3, #2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d104      	bne.n	800cfd6 <HAL_SD_IRQHandler+0x86>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f003 0320 	and.w	r3, r3, #32
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d011      	beq.n	800cffa <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f004 f8b6 	bl	801114c <SDMMC_CmdStopTransfer>
 800cfe0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d008      	beq.n	800cffa <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	431a      	orrs	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f921 	bl	800d23c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d002:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f003 0301 	and.w	r3, r3, #1
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d104      	bne.n	800d026 <HAL_SD_IRQHandler+0xd6>
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f003 0302 	and.w	r3, r3, #2
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f005 fec0 	bl	8012dac <HAL_SD_RxCpltCallback>
 800d02c:	e102      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f005 feb2 	bl	8012d98 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d034:	e0fe      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 80f9 	beq.w	800d234 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f003 0320 	and.w	r3, r3, #32
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d011      	beq.n	800d070 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4618      	mov	r0, r3
 800d052:	f004 f87b 	bl	801114c <SDMMC_CmdStopTransfer>
 800d056:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d008      	beq.n	800d070 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	431a      	orrs	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f8e6 	bl	800d23c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	f040 80dc 	bne.w	800d234 <HAL_SD_IRQHandler+0x2e4>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f003 0302 	and.w	r3, r3, #2
 800d082:	2b00      	cmp	r3, #0
 800d084:	f040 80d6 	bne.w	800d234 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0208 	bic.w	r2, r2, #8
 800d096:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f005 fe79 	bl	8012d98 <HAL_SD_TxCpltCallback>
}
 800d0a6:	e0c5      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d008      	beq.n	800d0c8 <HAL_SD_IRQHandler+0x178>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f003 0308 	and.w	r3, r3, #8
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 ff9b 	bl	800dffc <SD_Write_IT>
 800d0c6:	e0b5      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ce:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 80ae 	beq.w	800d234 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0de:	f003 0302 	and.w	r3, r3, #2
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d005      	beq.n	800d0f2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0ea:	f043 0202 	orr.w	r2, r3, #2
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0f8:	f003 0308 	and.w	r3, r3, #8
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d005      	beq.n	800d10c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d104:	f043 0208 	orr.w	r2, r3, #8
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d112:	f003 0320 	and.w	r3, r3, #32
 800d116:	2b00      	cmp	r3, #0
 800d118:	d005      	beq.n	800d126 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d11e:	f043 0220 	orr.w	r2, r3, #32
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d12c:	f003 0310 	and.w	r3, r3, #16
 800d130:	2b00      	cmp	r3, #0
 800d132:	d005      	beq.n	800d140 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d138:	f043 0210 	orr.w	r2, r3, #16
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d148:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d158:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4618      	mov	r0, r3
 800d160:	f003 fff4 	bl	801114c <SDMMC_CmdStopTransfer>
 800d164:	4602      	mov	r2, r0
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d16a:	431a      	orrs	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f003 0308 	and.w	r3, r3, #8
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00a      	beq.n	800d190 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2201      	movs	r2, #1
 800d17e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f857 	bl	800d23c <HAL_SD_ErrorCallback>
}
 800d18e:	e051      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d196:	2b00      	cmp	r3, #0
 800d198:	d04c      	beq.n	800d234 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f003 0310 	and.w	r3, r3, #16
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d104      	bne.n	800d1ae <HAL_SD_IRQHandler+0x25e>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f003 0320 	and.w	r3, r3, #32
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d011      	beq.n	800d1d2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1b2:	4a17      	ldr	r2, [pc, #92]	@ (800d210 <HAL_SD_IRQHandler+0x2c0>)
 800d1b4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7f9 f860 	bl	8006280 <HAL_DMA_Abort_IT>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d036      	beq.n	800d234 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 fb6a 	bl	800d8a4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d1d0:	e030      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d104      	bne.n	800d1e6 <HAL_SD_IRQHandler+0x296>
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f003 0302 	and.w	r3, r3, #2
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d018      	beq.n	800d218 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1ea:	4a0a      	ldr	r2, [pc, #40]	@ (800d214 <HAL_SD_IRQHandler+0x2c4>)
 800d1ec:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7f9 f844 	bl	8006280 <HAL_DMA_Abort_IT>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d01a      	beq.n	800d234 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d202:	4618      	mov	r0, r3
 800d204:	f000 fb85 	bl	800d912 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d208:	e014      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
 800d20a:	bf00      	nop
 800d20c:	ffff3ec5 	.word	0xffff3ec5
 800d210:	0800d8a5 	.word	0x0800d8a5
 800d214:	0800d913 	.word	0x0800d913
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f005 fda9 	bl	8012d84 <HAL_SD_AbortCallback>
}
 800d232:	e7ff      	b.n	800d234 <HAL_SD_IRQHandler+0x2e4>
 800d234:	bf00      	nop
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d25e:	0f9b      	lsrs	r3, r3, #30
 800d260:	b2da      	uxtb	r2, r3
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d26a:	0e9b      	lsrs	r3, r3, #26
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	f003 030f 	and.w	r3, r3, #15
 800d272:	b2da      	uxtb	r2, r3
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d27c:	0e1b      	lsrs	r3, r3, #24
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	f003 0303 	and.w	r3, r3, #3
 800d284:	b2da      	uxtb	r2, r3
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d28e:	0c1b      	lsrs	r3, r3, #16
 800d290:	b2da      	uxtb	r2, r3
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d29a:	0a1b      	lsrs	r3, r3, #8
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2b0:	0d1b      	lsrs	r3, r3, #20
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2bc:	0c1b      	lsrs	r3, r3, #16
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f003 030f 	and.w	r3, r3, #15
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2ce:	0bdb      	lsrs	r3, r3, #15
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2e0:	0b9b      	lsrs	r3, r3, #14
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2f2:	0b5b      	lsrs	r3, r3, #13
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	f003 0301 	and.w	r3, r3, #1
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d304:	0b1b      	lsrs	r3, r3, #12
 800d306:	b2db      	uxtb	r3, r3
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2200      	movs	r2, #0
 800d316:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d163      	bne.n	800d3e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d324:	009a      	lsls	r2, r3, #2
 800d326:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d32a:	4013      	ands	r3, r2
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d330:	0f92      	lsrs	r2, r2, #30
 800d332:	431a      	orrs	r2, r3
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d33c:	0edb      	lsrs	r3, r3, #27
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	f003 0307 	and.w	r3, r3, #7
 800d344:	b2da      	uxtb	r2, r3
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d34e:	0e1b      	lsrs	r3, r3, #24
 800d350:	b2db      	uxtb	r3, r3
 800d352:	f003 0307 	and.w	r3, r3, #7
 800d356:	b2da      	uxtb	r2, r3
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d360:	0d5b      	lsrs	r3, r3, #21
 800d362:	b2db      	uxtb	r3, r3
 800d364:	f003 0307 	and.w	r3, r3, #7
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d372:	0c9b      	lsrs	r3, r3, #18
 800d374:	b2db      	uxtb	r3, r3
 800d376:	f003 0307 	and.w	r3, r3, #7
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d384:	0bdb      	lsrs	r3, r3, #15
 800d386:	b2db      	uxtb	r3, r3
 800d388:	f003 0307 	and.w	r3, r3, #7
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	7e1b      	ldrb	r3, [r3, #24]
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	f003 0307 	and.w	r3, r3, #7
 800d3a6:	3302      	adds	r3, #2
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d3b2:	fb03 f202 	mul.w	r2, r3, r2
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	7a1b      	ldrb	r3, [r3, #8]
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	f003 030f 	and.w	r3, r3, #15
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	409a      	lsls	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d3d4:	0a52      	lsrs	r2, r2, #9
 800d3d6:	fb03 f202 	mul.w	r2, r3, r2
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3e4:	661a      	str	r2, [r3, #96]	@ 0x60
 800d3e6:	e031      	b.n	800d44c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d11d      	bne.n	800d42c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3f4:	041b      	lsls	r3, r3, #16
 800d3f6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3fe:	0c1b      	lsrs	r3, r3, #16
 800d400:	431a      	orrs	r2, r3
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	3301      	adds	r3, #1
 800d40c:	029a      	lsls	r2, r3, #10
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d420:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	661a      	str	r2, [r3, #96]	@ 0x60
 800d42a:	e00f      	b.n	800d44c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a58      	ldr	r2, [pc, #352]	@ (800d594 <HAL_SD_GetCardCSD+0x344>)
 800d432:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d438:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	e09d      	b.n	800d588 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d450:	0b9b      	lsrs	r3, r3, #14
 800d452:	b2db      	uxtb	r3, r3
 800d454:	f003 0301 	and.w	r3, r3, #1
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d462:	09db      	lsrs	r3, r3, #7
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d474:	b2db      	uxtb	r3, r3
 800d476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d47a:	b2da      	uxtb	r2, r3
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d484:	0fdb      	lsrs	r3, r3, #31
 800d486:	b2da      	uxtb	r2, r3
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d490:	0f5b      	lsrs	r3, r3, #29
 800d492:	b2db      	uxtb	r3, r3
 800d494:	f003 0303 	and.w	r3, r3, #3
 800d498:	b2da      	uxtb	r2, r3
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4a2:	0e9b      	lsrs	r3, r3, #26
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	f003 0307 	and.w	r3, r3, #7
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4b4:	0d9b      	lsrs	r3, r3, #22
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	f003 030f 	and.w	r3, r3, #15
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4c6:	0d5b      	lsrs	r3, r3, #21
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4e2:	0c1b      	lsrs	r3, r3, #16
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4f6:	0bdb      	lsrs	r3, r3, #15
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	f003 0301 	and.w	r3, r3, #1
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d50a:	0b9b      	lsrs	r3, r3, #14
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	f003 0301 	and.w	r3, r3, #1
 800d512:	b2da      	uxtb	r2, r3
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d51e:	0b5b      	lsrs	r3, r3, #13
 800d520:	b2db      	uxtb	r3, r3
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	b2da      	uxtb	r2, r3
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d532:	0b1b      	lsrs	r3, r3, #12
 800d534:	b2db      	uxtb	r3, r3
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d546:	0a9b      	lsrs	r3, r3, #10
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	f003 0303 	and.w	r3, r3, #3
 800d54e:	b2da      	uxtb	r2, r3
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d55a:	0a1b      	lsrs	r3, r3, #8
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	f003 0303 	and.w	r3, r3, #3
 800d562:	b2da      	uxtb	r2, r3
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d56e:	085b      	lsrs	r3, r3, #1
 800d570:	b2db      	uxtb	r3, r3
 800d572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d576:	b2da      	uxtb	r2, r3
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2201      	movs	r2, #1
 800d582:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr
 800d594:	004005ff 	.word	0x004005ff

0800d598 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d5f0:	b5b0      	push	{r4, r5, r7, lr}
 800d5f2:	b08e      	sub	sp, #56	@ 0x38
 800d5f4:	af04      	add	r7, sp, #16
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2203      	movs	r2, #3
 800d604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d60c:	2b03      	cmp	r3, #3
 800d60e:	d02e      	beq.n	800d66e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d616:	d106      	bne.n	800d626 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d61c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	639a      	str	r2, [r3, #56]	@ 0x38
 800d624:	e029      	b.n	800d67a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d62c:	d10a      	bne.n	800d644 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fb2a 	bl	800dc88 <SD_WideBus_Enable>
 800d634:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	431a      	orrs	r2, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	639a      	str	r2, [r3, #56]	@ 0x38
 800d642:	e01a      	b.n	800d67a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10a      	bne.n	800d660 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fb67 	bl	800dd1e <SD_WideBus_Disable>
 800d650:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	431a      	orrs	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	639a      	str	r2, [r3, #56]	@ 0x38
 800d65e:	e00c      	b.n	800d67a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d664:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d66c:	e005      	b.n	800d67a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d672:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00b      	beq.n	800d69a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a26      	ldr	r2, [pc, #152]	@ (800d720 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d688:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d698:	e01f      	b.n	800d6da <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	695b      	ldr	r3, [r3, #20]
 800d6b4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681d      	ldr	r5, [r3, #0]
 800d6c0:	466c      	mov	r4, sp
 800d6c2:	f107 0314 	add.w	r3, r7, #20
 800d6c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d6ce:	f107 0308 	add.w	r3, r7, #8
 800d6d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	f003 fbb3 	bl	8010e40 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f003 fc88 	bl	8010ff8 <SDMMC_CmdBlockLength>
 800d6e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00c      	beq.n	800d70a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a0a      	ldr	r2, [pc, #40]	@ (800d720 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d6f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	431a      	orrs	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d704:	2301      	movs	r3, #1
 800d706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800d712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d716:	4618      	mov	r0, r3
 800d718:	3728      	adds	r7, #40	@ 0x28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bdb0      	pop	{r4, r5, r7, pc}
 800d71e:	bf00      	nop
 800d720:	004005ff 	.word	0x004005ff

0800d724 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d730:	f107 030c 	add.w	r3, r7, #12
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fa7e 	bl	800dc38 <SD_SendStatus>
 800d73c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d005      	beq.n	800d750 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	431a      	orrs	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	0a5b      	lsrs	r3, r3, #9
 800d754:	f003 030f 	and.w	r3, r3, #15
 800d758:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d75a:	693b      	ldr	r3, [r7, #16]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3718      	adds	r7, #24
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d770:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d780:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d782:	bf00      	nop
 800d784:	3714      	adds	r7, #20
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b084      	sub	sp, #16
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d79a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7a0:	2b82      	cmp	r3, #130	@ 0x82
 800d7a2:	d111      	bne.n	800d7c8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f003 fccf 	bl	801114c <SDMMC_CmdStopTransfer>
 800d7ae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d008      	beq.n	800d7c8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	431a      	orrs	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f7ff fd3a 	bl	800d23c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f022 0208 	bic.w	r2, r2, #8
 800d7d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d7e0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f005 fadb 	bl	8012dac <HAL_SD_RxCpltCallback>
#endif
}
 800d7f6:	bf00      	nop
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
	...

0800d800 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d80c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7f8 fee2 	bl	80065d8 <HAL_DMA_GetError>
 800d814:	4603      	mov	r3, r0
 800d816:	2b02      	cmp	r3, #2
 800d818:	d03e      	beq.n	800d898 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d81e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d820:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d828:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d002      	beq.n	800d836 <SD_DMAError+0x36>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d12d      	bne.n	800d892 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a19      	ldr	r2, [pc, #100]	@ (800d8a0 <SD_DMAError+0xa0>)
 800d83c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d84c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d852:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d85a:	6978      	ldr	r0, [r7, #20]
 800d85c:	f7ff ff62 	bl	800d724 <HAL_SD_GetCardState>
 800d860:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	2b06      	cmp	r3, #6
 800d866:	d002      	beq.n	800d86e <SD_DMAError+0x6e>
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	2b05      	cmp	r3, #5
 800d86c:	d10a      	bne.n	800d884 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4618      	mov	r0, r3
 800d874:	f003 fc6a 	bl	801114c <SDMMC_CmdStopTransfer>
 800d878:	4602      	mov	r2, r0
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d87e:	431a      	orrs	r2, r3
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	2200      	movs	r2, #0
 800d890:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d892:	6978      	ldr	r0, [r7, #20]
 800d894:	f7ff fcd2 	bl	800d23c <HAL_SD_ErrorCallback>
#endif
  }
}
 800d898:	bf00      	nop
 800d89a:	3718      	adds	r7, #24
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	004005ff 	.word	0x004005ff

0800d8a4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d8ba:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff ff31 	bl	800d724 <HAL_SD_GetCardState>
 800d8c2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	2b06      	cmp	r3, #6
 800d8d6:	d002      	beq.n	800d8de <SD_DMATxAbort+0x3a>
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	2b05      	cmp	r3, #5
 800d8dc:	d10a      	bne.n	800d8f4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f003 fc32 	bl	801114c <SDMMC_CmdStopTransfer>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ee:	431a      	orrs	r2, r3
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d103      	bne.n	800d904 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f005 fa41 	bl	8012d84 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d902:	e002      	b.n	800d90a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d904:	68f8      	ldr	r0, [r7, #12]
 800d906:	f7ff fc99 	bl	800d23c <HAL_SD_ErrorCallback>
}
 800d90a:	bf00      	nop
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d91e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d928:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f7ff fefa 	bl	800d724 <HAL_SD_GetCardState>
 800d930:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2201      	movs	r2, #1
 800d936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2200      	movs	r2, #0
 800d93e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b06      	cmp	r3, #6
 800d944:	d002      	beq.n	800d94c <SD_DMARxAbort+0x3a>
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b05      	cmp	r3, #5
 800d94a:	d10a      	bne.n	800d962 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4618      	mov	r0, r3
 800d952:	f003 fbfb 	bl	801114c <SDMMC_CmdStopTransfer>
 800d956:	4602      	mov	r2, r0
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95c:	431a      	orrs	r2, r3
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d966:	2b00      	cmp	r3, #0
 800d968:	d103      	bne.n	800d972 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f005 fa0a 	bl	8012d84 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d970:	e002      	b.n	800d978 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f7ff fc62 	bl	800d23c <HAL_SD_ErrorCallback>
}
 800d978:	bf00      	nop
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d980:	b5b0      	push	{r4, r5, r7, lr}
 800d982:	b094      	sub	sp, #80	@ 0x50
 800d984:	af04      	add	r7, sp, #16
 800d986:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d988:	2301      	movs	r3, #1
 800d98a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4618      	mov	r0, r3
 800d992:	f003 faad 	bl	8010ef0 <SDMMC_GetPowerState>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d102      	bne.n	800d9a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d99c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d9a0:	e0b8      	b.n	800db14 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9a6:	2b03      	cmp	r3, #3
 800d9a8:	d02f      	beq.n	800da0a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f003 fcd7 	bl	8011362 <SDMMC_CmdSendCID>
 800d9b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d001      	beq.n	800d9c0 <SD_InitCard+0x40>
    {
      return errorstate;
 800d9bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9be:	e0a9      	b.n	800db14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f003 fad7 	bl	8010f7a <SDMMC_GetResponse>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2104      	movs	r1, #4
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f003 face 	bl	8010f7a <SDMMC_GetResponse>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2108      	movs	r1, #8
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f003 fac5 	bl	8010f7a <SDMMC_GetResponse>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	210c      	movs	r1, #12
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f003 fabc 	bl	8010f7a <SDMMC_GetResponse>
 800da02:	4602      	mov	r2, r0
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da0e:	2b03      	cmp	r3, #3
 800da10:	d00d      	beq.n	800da2e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f107 020e 	add.w	r2, r7, #14
 800da1a:	4611      	mov	r1, r2
 800da1c:	4618      	mov	r0, r3
 800da1e:	f003 fcdd 	bl	80113dc <SDMMC_CmdSetRelAdd>
 800da22:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <SD_InitCard+0xae>
    {
      return errorstate;
 800da2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da2c:	e072      	b.n	800db14 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da32:	2b03      	cmp	r3, #3
 800da34:	d036      	beq.n	800daa4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800da36:	89fb      	ldrh	r3, [r7, #14]
 800da38:	461a      	mov	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da46:	041b      	lsls	r3, r3, #16
 800da48:	4619      	mov	r1, r3
 800da4a:	4610      	mov	r0, r2
 800da4c:	f003 fca7 	bl	801139e <SDMMC_CmdSendCSD>
 800da50:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <SD_InitCard+0xdc>
    {
      return errorstate;
 800da58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da5a:	e05b      	b.n	800db14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2100      	movs	r1, #0
 800da62:	4618      	mov	r0, r3
 800da64:	f003 fa89 	bl	8010f7a <SDMMC_GetResponse>
 800da68:	4602      	mov	r2, r0
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2104      	movs	r1, #4
 800da74:	4618      	mov	r0, r3
 800da76:	f003 fa80 	bl	8010f7a <SDMMC_GetResponse>
 800da7a:	4602      	mov	r2, r0
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2108      	movs	r1, #8
 800da86:	4618      	mov	r0, r3
 800da88:	f003 fa77 	bl	8010f7a <SDMMC_GetResponse>
 800da8c:	4602      	mov	r2, r0
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	210c      	movs	r1, #12
 800da98:	4618      	mov	r0, r3
 800da9a:	f003 fa6e 	bl	8010f7a <SDMMC_GetResponse>
 800da9e:	4602      	mov	r2, r0
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2104      	movs	r1, #4
 800daaa:	4618      	mov	r0, r3
 800daac:	f003 fa65 	bl	8010f7a <SDMMC_GetResponse>
 800dab0:	4603      	mov	r3, r0
 800dab2:	0d1a      	lsrs	r2, r3, #20
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dab8:	f107 0310 	add.w	r3, r7, #16
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff fbc6 	bl	800d250 <HAL_SD_GetCardCSD>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d002      	beq.n	800dad0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800daca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800dace:	e021      	b.n	800db14 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6819      	ldr	r1, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dad8:	041b      	lsls	r3, r3, #16
 800dada:	2200      	movs	r2, #0
 800dadc:	461c      	mov	r4, r3
 800dade:	4615      	mov	r5, r2
 800dae0:	4622      	mov	r2, r4
 800dae2:	462b      	mov	r3, r5
 800dae4:	4608      	mov	r0, r1
 800dae6:	f003 fb53 	bl	8011190 <SDMMC_CmdSelDesel>
 800daea:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800daec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d001      	beq.n	800daf6 <SD_InitCard+0x176>
  {
    return errorstate;
 800daf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daf4:	e00e      	b.n	800db14 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681d      	ldr	r5, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	466c      	mov	r4, sp
 800dafe:	f103 0210 	add.w	r2, r3, #16
 800db02:	ca07      	ldmia	r2, {r0, r1, r2}
 800db04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db08:	3304      	adds	r3, #4
 800db0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db0c:	4628      	mov	r0, r5
 800db0e:	f003 f997 	bl	8010e40 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3740      	adds	r7, #64	@ 0x40
 800db18:	46bd      	mov	sp, r7
 800db1a:	bdb0      	pop	{r4, r5, r7, pc}

0800db1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db24:	2300      	movs	r3, #0
 800db26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800db28:	2300      	movs	r3, #0
 800db2a:	617b      	str	r3, [r7, #20]
 800db2c:	2300      	movs	r3, #0
 800db2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4618      	mov	r0, r3
 800db36:	f003 fb4e 	bl	80111d6 <SDMMC_CmdGoIdleState>
 800db3a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <SD_PowerON+0x2a>
  {
    return errorstate;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	e072      	b.n	800dc2c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4618      	mov	r0, r3
 800db4c:	f003 fb61 	bl	8011212 <SDMMC_CmdOperCond>
 800db50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00d      	beq.n	800db74 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4618      	mov	r0, r3
 800db64:	f003 fb37 	bl	80111d6 <SDMMC_CmdGoIdleState>
 800db68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d004      	beq.n	800db7a <SD_PowerON+0x5e>
    {
      return errorstate;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	e05b      	b.n	800dc2c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d137      	bne.n	800dbf2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2100      	movs	r1, #0
 800db88:	4618      	mov	r0, r3
 800db8a:	f003 fb61 	bl	8011250 <SDMMC_CmdAppCommand>
 800db8e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d02d      	beq.n	800dbf2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800db9a:	e047      	b.n	800dc2c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2100      	movs	r1, #0
 800dba2:	4618      	mov	r0, r3
 800dba4:	f003 fb54 	bl	8011250 <SDMMC_CmdAppCommand>
 800dba8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <SD_PowerON+0x98>
    {
      return errorstate;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	e03b      	b.n	800dc2c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	491e      	ldr	r1, [pc, #120]	@ (800dc34 <SD_PowerON+0x118>)
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f003 fb6a 	bl	8011294 <SDMMC_CmdAppOperCommand>
 800dbc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d002      	beq.n	800dbce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800dbcc:	e02e      	b.n	800dc2c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f003 f9d0 	bl	8010f7a <SDMMC_GetResponse>
 800dbda:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	0fdb      	lsrs	r3, r3, #31
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d101      	bne.n	800dbe8 <SD_PowerON+0xcc>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e000      	b.n	800dbea <SD_PowerON+0xce>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	613b      	str	r3, [r7, #16]

    count++;
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d802      	bhi.n	800dc02 <SD_PowerON+0xe6>
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d0cc      	beq.n	800db9c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d902      	bls.n	800dc12 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dc0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dc10:	e00c      	b.n	800dc2c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	645a      	str	r2, [r3, #68]	@ 0x44
 800dc22:	e002      	b.n	800dc2a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3718      	adds	r7, #24
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	c1100000 	.word	0xc1100000

0800dc38 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d102      	bne.n	800dc4e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dc48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dc4c:	e018      	b.n	800dc80 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc56:	041b      	lsls	r3, r3, #16
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f003 fbdf 	bl	801141e <SDMMC_CmdSendStatus>
 800dc60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <SD_SendStatus+0x34>
  {
    return errorstate;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	e009      	b.n	800dc80 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2100      	movs	r1, #0
 800dc72:	4618      	mov	r0, r3
 800dc74:	f003 f981 	bl	8010f7a <SDMMC_GetResponse>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dc90:	2300      	movs	r3, #0
 800dc92:	60fb      	str	r3, [r7, #12]
 800dc94:	2300      	movs	r3, #0
 800dc96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f003 f96b 	bl	8010f7a <SDMMC_GetResponse>
 800dca4:	4603      	mov	r3, r0
 800dca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dcaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dcae:	d102      	bne.n	800dcb6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dcb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dcb4:	e02f      	b.n	800dd16 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dcb6:	f107 030c 	add.w	r3, r7, #12
 800dcba:	4619      	mov	r1, r3
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 f879 	bl	800ddb4 <SD_FindSCR>
 800dcc2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	e023      	b.n	800dd16 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d01c      	beq.n	800dd12 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dce0:	041b      	lsls	r3, r3, #16
 800dce2:	4619      	mov	r1, r3
 800dce4:	4610      	mov	r0, r2
 800dce6:	f003 fab3 	bl	8011250 <SDMMC_CmdAppCommand>
 800dcea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	e00f      	b.n	800dd16 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2102      	movs	r1, #2
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f003 faed 	bl	80112dc <SDMMC_CmdBusWidth>
 800dd02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	e003      	b.n	800dd16 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e001      	b.n	800dd16 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b086      	sub	sp, #24
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dd26:	2300      	movs	r3, #0
 800dd28:	60fb      	str	r3, [r7, #12]
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2100      	movs	r1, #0
 800dd34:	4618      	mov	r0, r3
 800dd36:	f003 f920 	bl	8010f7a <SDMMC_GetResponse>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd44:	d102      	bne.n	800dd4c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dd4a:	e02f      	b.n	800ddac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dd4c:	f107 030c 	add.w	r3, r7, #12
 800dd50:	4619      	mov	r1, r3
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f82e 	bl	800ddb4 <SD_FindSCR>
 800dd58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d001      	beq.n	800dd64 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	e023      	b.n	800ddac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d01c      	beq.n	800dda8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd76:	041b      	lsls	r3, r3, #16
 800dd78:	4619      	mov	r1, r3
 800dd7a:	4610      	mov	r0, r2
 800dd7c:	f003 fa68 	bl	8011250 <SDMMC_CmdAppCommand>
 800dd80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	e00f      	b.n	800ddac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2100      	movs	r1, #0
 800dd92:	4618      	mov	r0, r3
 800dd94:	f003 faa2 	bl	80112dc <SDMMC_CmdBusWidth>
 800dd98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	e003      	b.n	800ddac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dda4:	2300      	movs	r3, #0
 800dda6:	e001      	b.n	800ddac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dda8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ddb4:	b590      	push	{r4, r7, lr}
 800ddb6:	b08f      	sub	sp, #60	@ 0x3c
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ddbe:	f7f7 fb6d 	bl	800549c <HAL_GetTick>
 800ddc2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60bb      	str	r3, [r7, #8]
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2108      	movs	r1, #8
 800ddda:	4618      	mov	r0, r3
 800dddc:	f003 f90c 	bl	8010ff8 <SDMMC_CmdBlockLength>
 800dde0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <SD_FindSCR+0x38>
  {
    return errorstate;
 800dde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddea:	e0b2      	b.n	800df52 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddf4:	041b      	lsls	r3, r3, #16
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4610      	mov	r0, r2
 800ddfa:	f003 fa29 	bl	8011250 <SDMMC_CmdAppCommand>
 800ddfe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800de00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <SD_FindSCR+0x56>
  {
    return errorstate;
 800de06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de08:	e0a3      	b.n	800df52 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800de0a:	f04f 33ff 	mov.w	r3, #4294967295
 800de0e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800de10:	2308      	movs	r3, #8
 800de12:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800de14:	2330      	movs	r3, #48	@ 0x30
 800de16:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800de18:	2302      	movs	r3, #2
 800de1a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800de20:	2301      	movs	r3, #1
 800de22:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f107 0210 	add.w	r2, r7, #16
 800de2c:	4611      	mov	r1, r2
 800de2e:	4618      	mov	r0, r3
 800de30:	f003 f8b6 	bl	8010fa0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4618      	mov	r0, r3
 800de3a:	f003 fa71 	bl	8011320 <SDMMC_CmdSendSCR>
 800de3e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800de40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de42:	2b00      	cmp	r3, #0
 800de44:	d02a      	beq.n	800de9c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800de46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de48:	e083      	b.n	800df52 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00f      	beq.n	800de78 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6819      	ldr	r1, [r3, #0]
 800de5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	f107 0208 	add.w	r2, r7, #8
 800de64:	18d4      	adds	r4, r2, r3
 800de66:	4608      	mov	r0, r1
 800de68:	f003 f816 	bl	8010e98 <SDMMC_ReadFIFO>
 800de6c:	4603      	mov	r3, r0
 800de6e:	6023      	str	r3, [r4, #0]
      index++;
 800de70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de72:	3301      	adds	r3, #1
 800de74:	637b      	str	r3, [r7, #52]	@ 0x34
 800de76:	e006      	b.n	800de86 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de82:	2b00      	cmp	r3, #0
 800de84:	d012      	beq.n	800deac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800de86:	f7f7 fb09 	bl	800549c <HAL_GetTick>
 800de8a:	4602      	mov	r2, r0
 800de8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de94:	d102      	bne.n	800de9c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800de96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800de9a:	e05a      	b.n	800df52 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dea2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d0cf      	beq.n	800de4a <SD_FindSCR+0x96>
 800deaa:	e000      	b.n	800deae <SD_FindSCR+0xfa>
      break;
 800deac:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deb4:	f003 0308 	and.w	r3, r3, #8
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d005      	beq.n	800dec8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2208      	movs	r2, #8
 800dec2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dec4:	2308      	movs	r3, #8
 800dec6:	e044      	b.n	800df52 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dece:	f003 0302 	and.w	r3, r3, #2
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d005      	beq.n	800dee2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2202      	movs	r2, #2
 800dedc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dede:	2302      	movs	r3, #2
 800dee0:	e037      	b.n	800df52 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dee8:	f003 0320 	and.w	r3, r3, #32
 800deec:	2b00      	cmp	r3, #0
 800deee:	d005      	beq.n	800defc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2220      	movs	r2, #32
 800def6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800def8:	2320      	movs	r3, #32
 800defa:	e02a      	b.n	800df52 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f240 523a 	movw	r2, #1338	@ 0x53a
 800df04:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	061a      	lsls	r2, r3, #24
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	021b      	lsls	r3, r3, #8
 800df0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800df12:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	0a1b      	lsrs	r3, r3, #8
 800df18:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df1c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	0e1b      	lsrs	r3, r3, #24
 800df22:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df26:	601a      	str	r2, [r3, #0]
    scr++;
 800df28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df2a:	3304      	adds	r3, #4
 800df2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	061a      	lsls	r2, r3, #24
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	021b      	lsls	r3, r3, #8
 800df36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800df3a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	0a1b      	lsrs	r3, r3, #8
 800df40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800df44:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	0e1b      	lsrs	r3, r3, #24
 800df4a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800df4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	373c      	adds	r7, #60	@ 0x3c
 800df56:	46bd      	mov	sp, r7
 800df58:	bd90      	pop	{r4, r7, pc}

0800df5a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b086      	sub	sp, #24
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df66:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df6c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d03f      	beq.n	800dff4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800df74:	2300      	movs	r3, #0
 800df76:	617b      	str	r3, [r7, #20]
 800df78:	e033      	b.n	800dfe2 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4618      	mov	r0, r3
 800df80:	f002 ff8a 	bl	8010e98 <SDMMC_ReadFIFO>
 800df84:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3301      	adds	r3, #1
 800df92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	3b01      	subs	r3, #1
 800df98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	0a1b      	lsrs	r3, r3, #8
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	0c1b      	lsrs	r3, r3, #16
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	0e1b      	lsrs	r3, r3, #24
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	2b07      	cmp	r3, #7
 800dfe6:	d9c8      	bls.n	800df7a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	693a      	ldr	r2, [r7, #16]
 800dff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800dff4:	bf00      	nop
 800dff6:	3718      	adds	r7, #24
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a1b      	ldr	r3, [r3, #32]
 800e008:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e00e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d043      	beq.n	800e09e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e016:	2300      	movs	r3, #0
 800e018:	617b      	str	r3, [r7, #20]
 800e01a:	e037      	b.n	800e08c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	3301      	adds	r3, #1
 800e026:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	021a      	lsls	r2, r3, #8
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	4313      	orrs	r3, r2
 800e038:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	3301      	adds	r3, #1
 800e03e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	3b01      	subs	r3, #1
 800e044:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	041a      	lsls	r2, r3, #16
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	4313      	orrs	r3, r2
 800e050:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3301      	adds	r3, #1
 800e056:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	061a      	lsls	r2, r3, #24
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	4313      	orrs	r3, r2
 800e068:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3301      	adds	r3, #1
 800e06e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	3b01      	subs	r3, #1
 800e074:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f107 0208 	add.w	r2, r7, #8
 800e07e:	4611      	mov	r1, r2
 800e080:	4618      	mov	r0, r3
 800e082:	f002 ff16 	bl	8010eb2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	3301      	adds	r3, #1
 800e08a:	617b      	str	r3, [r7, #20]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b07      	cmp	r3, #7
 800e090:	d9c4      	bls.n	800e01c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	693a      	ldr	r2, [r7, #16]
 800e09c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800e09e:	bf00      	nop
 800e0a0:	3718      	adds	r7, #24
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
 800e0ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e025      	b.n	800e106 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d106      	bne.n	800e0d4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7f6 fb9e 	bl	8004810 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2202      	movs	r2, #2
 800e0d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	4610      	mov	r0, r2
 800e0e8:	f002 fde4 	bl	8010cb4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6818      	ldr	r0, [r3, #0]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	6839      	ldr	r1, [r7, #0]
 800e0f8:	f002 fe38 	bl	8010d6c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2201      	movs	r2, #1
 800e100:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
	...

0800e110 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d101      	bne.n	800e122 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	e04c      	b.n	800e1bc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d106      	bne.n	800e13c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7f5 fff0 	bl	800411c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2202      	movs	r2, #2
 800e140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f022 0203 	bic.w	r2, r2, #3
 800e152:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	4b19      	ldr	r3, [pc, #100]	@ (800e1c4 <HAL_SPDIFRX_Init+0xb4>)
 800e160:	4013      	ands	r3, r2
 800e162:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800e16c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800e172:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800e178:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800e17e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800e184:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800e18a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800e190:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800e196:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800e19c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	fff88407 	.word	0xfff88407

0800e1c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e09d      	b.n	800e316 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d108      	bne.n	800e1f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e1ea:	d009      	beq.n	800e200 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	61da      	str	r2, [r3, #28]
 800e1f2:	e005      	b.n	800e200 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d106      	bne.n	800e220 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2200      	movs	r2, #0
 800e216:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7f5 ffe2 	bl	80041e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2202      	movs	r2, #2
 800e224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e236:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e240:	d902      	bls.n	800e248 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e242:	2300      	movs	r3, #0
 800e244:	60fb      	str	r3, [r7, #12]
 800e246:	e002      	b.n	800e24e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e24c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e256:	d007      	beq.n	800e268 <HAL_SPI_Init+0xa0>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e260:	d002      	beq.n	800e268 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e278:	431a      	orrs	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	f003 0302 	and.w	r3, r3, #2
 800e282:	431a      	orrs	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	695b      	ldr	r3, [r3, #20]
 800e288:	f003 0301 	and.w	r3, r3, #1
 800e28c:	431a      	orrs	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	699b      	ldr	r3, [r3, #24]
 800e292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e296:	431a      	orrs	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	69db      	ldr	r3, [r3, #28]
 800e29c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e2a0:	431a      	orrs	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2aa:	ea42 0103 	orr.w	r1, r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	430a      	orrs	r2, r1
 800e2bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	0c1b      	lsrs	r3, r3, #16
 800e2c4:	f003 0204 	and.w	r2, r3, #4
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2cc:	f003 0310 	and.w	r3, r3, #16
 800e2d0:	431a      	orrs	r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2d6:	f003 0308 	and.w	r3, r3, #8
 800e2da:	431a      	orrs	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e2e4:	ea42 0103 	orr.w	r1, r2, r3
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	430a      	orrs	r2, r1
 800e2f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	69da      	ldr	r2, [r3, #28]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b082      	sub	sp, #8
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d101      	bne.n	800e330 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	e049      	b.n	800e3c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e336:	b2db      	uxtb	r3, r3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d106      	bne.n	800e34a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7f5 ffaf 	bl	80042a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2202      	movs	r2, #2
 800e34e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3304      	adds	r3, #4
 800e35a:	4619      	mov	r1, r3
 800e35c:	4610      	mov	r0, r2
 800e35e:	f000 fc11 	bl	800eb84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2201      	movs	r2, #1
 800e366:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2201      	movs	r2, #1
 800e376:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2201      	movs	r2, #1
 800e37e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2201      	movs	r2, #1
 800e386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2201      	movs	r2, #1
 800e38e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2201      	movs	r2, #1
 800e396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3c2:	2300      	movs	r3, #0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d001      	beq.n	800e3e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e054      	b.n	800e48e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	68da      	ldr	r2, [r3, #12]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f042 0201 	orr.w	r2, r2, #1
 800e3fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a26      	ldr	r2, [pc, #152]	@ (800e49c <HAL_TIM_Base_Start_IT+0xd0>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d022      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x80>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e40e:	d01d      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x80>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a22      	ldr	r2, [pc, #136]	@ (800e4a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d018      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x80>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a21      	ldr	r2, [pc, #132]	@ (800e4a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d013      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x80>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a1f      	ldr	r2, [pc, #124]	@ (800e4a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d00e      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x80>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a1e      	ldr	r2, [pc, #120]	@ (800e4ac <HAL_TIM_Base_Start_IT+0xe0>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d009      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x80>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a1c      	ldr	r2, [pc, #112]	@ (800e4b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d004      	beq.n	800e44c <HAL_TIM_Base_Start_IT+0x80>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a1b      	ldr	r2, [pc, #108]	@ (800e4b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d115      	bne.n	800e478 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	689a      	ldr	r2, [r3, #8]
 800e452:	4b19      	ldr	r3, [pc, #100]	@ (800e4b8 <HAL_TIM_Base_Start_IT+0xec>)
 800e454:	4013      	ands	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2b06      	cmp	r3, #6
 800e45c:	d015      	beq.n	800e48a <HAL_TIM_Base_Start_IT+0xbe>
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e464:	d011      	beq.n	800e48a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f042 0201 	orr.w	r2, r2, #1
 800e474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e476:	e008      	b.n	800e48a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f042 0201 	orr.w	r2, r2, #1
 800e486:	601a      	str	r2, [r3, #0]
 800e488:	e000      	b.n	800e48c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e48a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e48c:	2300      	movs	r3, #0
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop
 800e49c:	40010000 	.word	0x40010000
 800e4a0:	40000400 	.word	0x40000400
 800e4a4:	40000800 	.word	0x40000800
 800e4a8:	40000c00 	.word	0x40000c00
 800e4ac:	40010400 	.word	0x40010400
 800e4b0:	40014000 	.word	0x40014000
 800e4b4:	40001800 	.word	0x40001800
 800e4b8:	00010007 	.word	0x00010007

0800e4bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d101      	bne.n	800e4ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e049      	b.n	800e562 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7f5 ff4e 	bl	8004384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2202      	movs	r2, #2
 800e4ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4610      	mov	r0, r2
 800e4fc:	f000 fb42 	bl	800eb84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2201      	movs	r2, #1
 800e504:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2201      	movs	r2, #1
 800e514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e560:	2300      	movs	r3, #0
}
 800e562:	4618      	mov	r0, r3
 800e564:	3708      	adds	r7, #8
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b084      	sub	sp, #16
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	f003 0302 	and.w	r3, r3, #2
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d020      	beq.n	800e5ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f003 0302 	and.w	r3, r3, #2
 800e592:	2b00      	cmp	r3, #0
 800e594:	d01b      	beq.n	800e5ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f06f 0202 	mvn.w	r2, #2
 800e59e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	699b      	ldr	r3, [r3, #24]
 800e5ac:	f003 0303 	and.w	r3, r3, #3
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d003      	beq.n	800e5bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 fac7 	bl	800eb48 <HAL_TIM_IC_CaptureCallback>
 800e5ba:	e005      	b.n	800e5c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 fab9 	bl	800eb34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 faca 	bl	800eb5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	f003 0304 	and.w	r3, r3, #4
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d020      	beq.n	800e61a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f003 0304 	and.w	r3, r3, #4
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d01b      	beq.n	800e61a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f06f 0204 	mvn.w	r2, #4
 800e5ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2202      	movs	r2, #2
 800e5f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	699b      	ldr	r3, [r3, #24]
 800e5f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d003      	beq.n	800e608 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 faa1 	bl	800eb48 <HAL_TIM_IC_CaptureCallback>
 800e606:	e005      	b.n	800e614 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 fa93 	bl	800eb34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 faa4 	bl	800eb5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	f003 0308 	and.w	r3, r3, #8
 800e620:	2b00      	cmp	r3, #0
 800e622:	d020      	beq.n	800e666 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f003 0308 	and.w	r3, r3, #8
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d01b      	beq.n	800e666 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f06f 0208 	mvn.w	r2, #8
 800e636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2204      	movs	r2, #4
 800e63c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	69db      	ldr	r3, [r3, #28]
 800e644:	f003 0303 	and.w	r3, r3, #3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d003      	beq.n	800e654 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 fa7b 	bl	800eb48 <HAL_TIM_IC_CaptureCallback>
 800e652:	e005      	b.n	800e660 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 fa6d 	bl	800eb34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 fa7e 	bl	800eb5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	f003 0310 	and.w	r3, r3, #16
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d020      	beq.n	800e6b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f003 0310 	and.w	r3, r3, #16
 800e676:	2b00      	cmp	r3, #0
 800e678:	d01b      	beq.n	800e6b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f06f 0210 	mvn.w	r2, #16
 800e682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2208      	movs	r2, #8
 800e688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	69db      	ldr	r3, [r3, #28]
 800e690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e694:	2b00      	cmp	r3, #0
 800e696:	d003      	beq.n	800e6a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 fa55 	bl	800eb48 <HAL_TIM_IC_CaptureCallback>
 800e69e:	e005      	b.n	800e6ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fa47 	bl	800eb34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fa58 	bl	800eb5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	f003 0301 	and.w	r3, r3, #1
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00c      	beq.n	800e6d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d007      	beq.n	800e6d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f06f 0201 	mvn.w	r2, #1
 800e6ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7f4 ff73 	bl	80035bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d104      	bne.n	800e6ea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00c      	beq.n	800e704 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d007      	beq.n	800e704 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 fef4 	bl	800f4ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00c      	beq.n	800e728 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e714:	2b00      	cmp	r3, #0
 800e716:	d007      	beq.n	800e728 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 feec 	bl	800f500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00c      	beq.n	800e74c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d007      	beq.n	800e74c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 fa12 	bl	800eb70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	f003 0320 	and.w	r3, r3, #32
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00c      	beq.n	800e770 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f003 0320 	and.w	r3, r3, #32
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d007      	beq.n	800e770 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f06f 0220 	mvn.w	r2, #32
 800e768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 feb4 	bl	800f4d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e770:	bf00      	nop
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e784:	2300      	movs	r3, #0
 800e786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d101      	bne.n	800e796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e792:	2302      	movs	r3, #2
 800e794:	e0ff      	b.n	800e996 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2b14      	cmp	r3, #20
 800e7a2:	f200 80f0 	bhi.w	800e986 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ac:	0800e801 	.word	0x0800e801
 800e7b0:	0800e987 	.word	0x0800e987
 800e7b4:	0800e987 	.word	0x0800e987
 800e7b8:	0800e987 	.word	0x0800e987
 800e7bc:	0800e841 	.word	0x0800e841
 800e7c0:	0800e987 	.word	0x0800e987
 800e7c4:	0800e987 	.word	0x0800e987
 800e7c8:	0800e987 	.word	0x0800e987
 800e7cc:	0800e883 	.word	0x0800e883
 800e7d0:	0800e987 	.word	0x0800e987
 800e7d4:	0800e987 	.word	0x0800e987
 800e7d8:	0800e987 	.word	0x0800e987
 800e7dc:	0800e8c3 	.word	0x0800e8c3
 800e7e0:	0800e987 	.word	0x0800e987
 800e7e4:	0800e987 	.word	0x0800e987
 800e7e8:	0800e987 	.word	0x0800e987
 800e7ec:	0800e905 	.word	0x0800e905
 800e7f0:	0800e987 	.word	0x0800e987
 800e7f4:	0800e987 	.word	0x0800e987
 800e7f8:	0800e987 	.word	0x0800e987
 800e7fc:	0800e945 	.word	0x0800e945
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68b9      	ldr	r1, [r7, #8]
 800e806:	4618      	mov	r0, r3
 800e808:	f000 fa62 	bl	800ecd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	699a      	ldr	r2, [r3, #24]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f042 0208 	orr.w	r2, r2, #8
 800e81a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	699a      	ldr	r2, [r3, #24]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f022 0204 	bic.w	r2, r2, #4
 800e82a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6999      	ldr	r1, [r3, #24]
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	691a      	ldr	r2, [r3, #16]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	430a      	orrs	r2, r1
 800e83c:	619a      	str	r2, [r3, #24]
      break;
 800e83e:	e0a5      	b.n	800e98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	68b9      	ldr	r1, [r7, #8]
 800e846:	4618      	mov	r0, r3
 800e848:	f000 fab4 	bl	800edb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	699a      	ldr	r2, [r3, #24]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e85a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	699a      	ldr	r2, [r3, #24]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e86a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6999      	ldr	r1, [r3, #24]
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	691b      	ldr	r3, [r3, #16]
 800e876:	021a      	lsls	r2, r3, #8
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	430a      	orrs	r2, r1
 800e87e:	619a      	str	r2, [r3, #24]
      break;
 800e880:	e084      	b.n	800e98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	68b9      	ldr	r1, [r7, #8]
 800e888:	4618      	mov	r0, r3
 800e88a:	f000 fb0b 	bl	800eea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	69da      	ldr	r2, [r3, #28]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f042 0208 	orr.w	r2, r2, #8
 800e89c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69da      	ldr	r2, [r3, #28]
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f022 0204 	bic.w	r2, r2, #4
 800e8ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	69d9      	ldr	r1, [r3, #28]
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	691a      	ldr	r2, [r3, #16]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	430a      	orrs	r2, r1
 800e8be:	61da      	str	r2, [r3, #28]
      break;
 800e8c0:	e064      	b.n	800e98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	68b9      	ldr	r1, [r7, #8]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 fb61 	bl	800ef90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	69da      	ldr	r2, [r3, #28]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e8dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	69da      	ldr	r2, [r3, #28]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e8ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	69d9      	ldr	r1, [r3, #28]
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	691b      	ldr	r3, [r3, #16]
 800e8f8:	021a      	lsls	r2, r3, #8
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	430a      	orrs	r2, r1
 800e900:	61da      	str	r2, [r3, #28]
      break;
 800e902:	e043      	b.n	800e98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68b9      	ldr	r1, [r7, #8]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f000 fb98 	bl	800f040 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f042 0208 	orr.w	r2, r2, #8
 800e91e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f022 0204 	bic.w	r2, r2, #4
 800e92e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	691a      	ldr	r2, [r3, #16]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	430a      	orrs	r2, r1
 800e940:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e942:	e023      	b.n	800e98c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68b9      	ldr	r1, [r7, #8]
 800e94a:	4618      	mov	r0, r3
 800e94c:	f000 fbca 	bl	800f0e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e95e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e96e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	691b      	ldr	r3, [r3, #16]
 800e97a:	021a      	lsls	r2, r3, #8
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	430a      	orrs	r2, r1
 800e982:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e984:	e002      	b.n	800e98c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e986:	2301      	movs	r3, #1
 800e988:	75fb      	strb	r3, [r7, #23]
      break;
 800e98a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e994:	7dfb      	ldrb	r3, [r7, #23]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop

0800e9a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d101      	bne.n	800e9bc <HAL_TIM_ConfigClockSource+0x1c>
 800e9b8:	2302      	movs	r3, #2
 800e9ba:	e0b4      	b.n	800eb26 <HAL_TIM_ConfigClockSource+0x186>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	4b56      	ldr	r3, [pc, #344]	@ (800eb30 <HAL_TIM_ConfigClockSource+0x190>)
 800e9d8:	4013      	ands	r3, r2
 800e9da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	68ba      	ldr	r2, [r7, #8]
 800e9ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e9f4:	d03e      	beq.n	800ea74 <HAL_TIM_ConfigClockSource+0xd4>
 800e9f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e9fa:	f200 8087 	bhi.w	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
 800e9fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea02:	f000 8086 	beq.w	800eb12 <HAL_TIM_ConfigClockSource+0x172>
 800ea06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea0a:	d87f      	bhi.n	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
 800ea0c:	2b70      	cmp	r3, #112	@ 0x70
 800ea0e:	d01a      	beq.n	800ea46 <HAL_TIM_ConfigClockSource+0xa6>
 800ea10:	2b70      	cmp	r3, #112	@ 0x70
 800ea12:	d87b      	bhi.n	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
 800ea14:	2b60      	cmp	r3, #96	@ 0x60
 800ea16:	d050      	beq.n	800eaba <HAL_TIM_ConfigClockSource+0x11a>
 800ea18:	2b60      	cmp	r3, #96	@ 0x60
 800ea1a:	d877      	bhi.n	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
 800ea1c:	2b50      	cmp	r3, #80	@ 0x50
 800ea1e:	d03c      	beq.n	800ea9a <HAL_TIM_ConfigClockSource+0xfa>
 800ea20:	2b50      	cmp	r3, #80	@ 0x50
 800ea22:	d873      	bhi.n	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
 800ea24:	2b40      	cmp	r3, #64	@ 0x40
 800ea26:	d058      	beq.n	800eada <HAL_TIM_ConfigClockSource+0x13a>
 800ea28:	2b40      	cmp	r3, #64	@ 0x40
 800ea2a:	d86f      	bhi.n	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
 800ea2c:	2b30      	cmp	r3, #48	@ 0x30
 800ea2e:	d064      	beq.n	800eafa <HAL_TIM_ConfigClockSource+0x15a>
 800ea30:	2b30      	cmp	r3, #48	@ 0x30
 800ea32:	d86b      	bhi.n	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
 800ea34:	2b20      	cmp	r3, #32
 800ea36:	d060      	beq.n	800eafa <HAL_TIM_ConfigClockSource+0x15a>
 800ea38:	2b20      	cmp	r3, #32
 800ea3a:	d867      	bhi.n	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d05c      	beq.n	800eafa <HAL_TIM_ConfigClockSource+0x15a>
 800ea40:	2b10      	cmp	r3, #16
 800ea42:	d05a      	beq.n	800eafa <HAL_TIM_ConfigClockSource+0x15a>
 800ea44:	e062      	b.n	800eb0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea56:	f000 fc13 	bl	800f280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ea68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	609a      	str	r2, [r3, #8]
      break;
 800ea72:	e04f      	b.n	800eb14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea84:	f000 fbfc 	bl	800f280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	689a      	ldr	r2, [r3, #8]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea96:	609a      	str	r2, [r3, #8]
      break;
 800ea98:	e03c      	b.n	800eb14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	f000 fb70 	bl	800f18c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2150      	movs	r1, #80	@ 0x50
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 fbc9 	bl	800f24a <TIM_ITRx_SetConfig>
      break;
 800eab8:	e02c      	b.n	800eb14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eac6:	461a      	mov	r2, r3
 800eac8:	f000 fb8f 	bl	800f1ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2160      	movs	r1, #96	@ 0x60
 800ead2:	4618      	mov	r0, r3
 800ead4:	f000 fbb9 	bl	800f24a <TIM_ITRx_SetConfig>
      break;
 800ead8:	e01c      	b.n	800eb14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eae6:	461a      	mov	r2, r3
 800eae8:	f000 fb50 	bl	800f18c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2140      	movs	r1, #64	@ 0x40
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 fba9 	bl	800f24a <TIM_ITRx_SetConfig>
      break;
 800eaf8:	e00c      	b.n	800eb14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f000 fba0 	bl	800f24a <TIM_ITRx_SetConfig>
      break;
 800eb0a:	e003      	b.n	800eb14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb10:	e000      	b.n	800eb14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800eb12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	fffeff88 	.word	0xfffeff88

0800eb34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eb50:	bf00      	nop
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a43      	ldr	r2, [pc, #268]	@ (800eca4 <TIM_Base_SetConfig+0x120>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d013      	beq.n	800ebc4 <TIM_Base_SetConfig+0x40>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eba2:	d00f      	beq.n	800ebc4 <TIM_Base_SetConfig+0x40>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	4a40      	ldr	r2, [pc, #256]	@ (800eca8 <TIM_Base_SetConfig+0x124>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d00b      	beq.n	800ebc4 <TIM_Base_SetConfig+0x40>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4a3f      	ldr	r2, [pc, #252]	@ (800ecac <TIM_Base_SetConfig+0x128>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d007      	beq.n	800ebc4 <TIM_Base_SetConfig+0x40>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	4a3e      	ldr	r2, [pc, #248]	@ (800ecb0 <TIM_Base_SetConfig+0x12c>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d003      	beq.n	800ebc4 <TIM_Base_SetConfig+0x40>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	4a3d      	ldr	r2, [pc, #244]	@ (800ecb4 <TIM_Base_SetConfig+0x130>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d108      	bne.n	800ebd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4a32      	ldr	r2, [pc, #200]	@ (800eca4 <TIM_Base_SetConfig+0x120>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d02b      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebe4:	d027      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4a2f      	ldr	r2, [pc, #188]	@ (800eca8 <TIM_Base_SetConfig+0x124>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d023      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4a2e      	ldr	r2, [pc, #184]	@ (800ecac <TIM_Base_SetConfig+0x128>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d01f      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	4a2d      	ldr	r2, [pc, #180]	@ (800ecb0 <TIM_Base_SetConfig+0x12c>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d01b      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4a2c      	ldr	r2, [pc, #176]	@ (800ecb4 <TIM_Base_SetConfig+0x130>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d017      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4a2b      	ldr	r2, [pc, #172]	@ (800ecb8 <TIM_Base_SetConfig+0x134>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d013      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4a2a      	ldr	r2, [pc, #168]	@ (800ecbc <TIM_Base_SetConfig+0x138>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d00f      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4a29      	ldr	r2, [pc, #164]	@ (800ecc0 <TIM_Base_SetConfig+0x13c>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d00b      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4a28      	ldr	r2, [pc, #160]	@ (800ecc4 <TIM_Base_SetConfig+0x140>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d007      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4a27      	ldr	r2, [pc, #156]	@ (800ecc8 <TIM_Base_SetConfig+0x144>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d003      	beq.n	800ec36 <TIM_Base_SetConfig+0xb2>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	4a26      	ldr	r2, [pc, #152]	@ (800eccc <TIM_Base_SetConfig+0x148>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d108      	bne.n	800ec48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	689a      	ldr	r2, [r3, #8]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4a0e      	ldr	r2, [pc, #56]	@ (800eca4 <TIM_Base_SetConfig+0x120>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d003      	beq.n	800ec76 <TIM_Base_SetConfig+0xf2>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4a10      	ldr	r2, [pc, #64]	@ (800ecb4 <TIM_Base_SetConfig+0x130>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d103      	bne.n	800ec7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	691a      	ldr	r2, [r3, #16]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f043 0204 	orr.w	r2, r3, #4
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	601a      	str	r2, [r3, #0]
}
 800ec96:	bf00      	nop
 800ec98:	3714      	adds	r7, #20
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	40010000 	.word	0x40010000
 800eca8:	40000400 	.word	0x40000400
 800ecac:	40000800 	.word	0x40000800
 800ecb0:	40000c00 	.word	0x40000c00
 800ecb4:	40010400 	.word	0x40010400
 800ecb8:	40014000 	.word	0x40014000
 800ecbc:	40014400 	.word	0x40014400
 800ecc0:	40014800 	.word	0x40014800
 800ecc4:	40001800 	.word	0x40001800
 800ecc8:	40001c00 	.word	0x40001c00
 800eccc:	40002000 	.word	0x40002000

0800ecd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b087      	sub	sp, #28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a1b      	ldr	r3, [r3, #32]
 800ecde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6a1b      	ldr	r3, [r3, #32]
 800ece4:	f023 0201 	bic.w	r2, r3, #1
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	699b      	ldr	r3, [r3, #24]
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	4b2b      	ldr	r3, [pc, #172]	@ (800eda8 <TIM_OC1_SetConfig+0xd8>)
 800ecfc:	4013      	ands	r3, r2
 800ecfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f023 0303 	bic.w	r3, r3, #3
 800ed06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	f023 0302 	bic.w	r3, r3, #2
 800ed18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a21      	ldr	r2, [pc, #132]	@ (800edac <TIM_OC1_SetConfig+0xdc>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d003      	beq.n	800ed34 <TIM_OC1_SetConfig+0x64>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4a20      	ldr	r2, [pc, #128]	@ (800edb0 <TIM_OC1_SetConfig+0xe0>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d10c      	bne.n	800ed4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	f023 0308 	bic.w	r3, r3, #8
 800ed3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	697a      	ldr	r2, [r7, #20]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	f023 0304 	bic.w	r3, r3, #4
 800ed4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4a16      	ldr	r2, [pc, #88]	@ (800edac <TIM_OC1_SetConfig+0xdc>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d003      	beq.n	800ed5e <TIM_OC1_SetConfig+0x8e>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4a15      	ldr	r2, [pc, #84]	@ (800edb0 <TIM_OC1_SetConfig+0xe0>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d111      	bne.n	800ed82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ed6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	695b      	ldr	r3, [r3, #20]
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	4313      	orrs	r3, r2
 800ed76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	699b      	ldr	r3, [r3, #24]
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	693a      	ldr	r2, [r7, #16]
 800ed86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	685a      	ldr	r2, [r3, #4]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	697a      	ldr	r2, [r7, #20]
 800ed9a:	621a      	str	r2, [r3, #32]
}
 800ed9c:	bf00      	nop
 800ed9e:	371c      	adds	r7, #28
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr
 800eda8:	fffeff8f 	.word	0xfffeff8f
 800edac:	40010000 	.word	0x40010000
 800edb0:	40010400 	.word	0x40010400

0800edb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b087      	sub	sp, #28
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6a1b      	ldr	r3, [r3, #32]
 800edc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a1b      	ldr	r3, [r3, #32]
 800edc8:	f023 0210 	bic.w	r2, r3, #16
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	699b      	ldr	r3, [r3, #24]
 800edda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	4b2e      	ldr	r3, [pc, #184]	@ (800ee98 <TIM_OC2_SetConfig+0xe4>)
 800ede0:	4013      	ands	r3, r2
 800ede2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	021b      	lsls	r3, r3, #8
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	f023 0320 	bic.w	r3, r3, #32
 800edfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	011b      	lsls	r3, r3, #4
 800ee06:	697a      	ldr	r2, [r7, #20]
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4a23      	ldr	r2, [pc, #140]	@ (800ee9c <TIM_OC2_SetConfig+0xe8>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d003      	beq.n	800ee1c <TIM_OC2_SetConfig+0x68>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4a22      	ldr	r2, [pc, #136]	@ (800eea0 <TIM_OC2_SetConfig+0xec>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d10d      	bne.n	800ee38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	011b      	lsls	r3, r3, #4
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	4a18      	ldr	r2, [pc, #96]	@ (800ee9c <TIM_OC2_SetConfig+0xe8>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d003      	beq.n	800ee48 <TIM_OC2_SetConfig+0x94>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4a17      	ldr	r2, [pc, #92]	@ (800eea0 <TIM_OC2_SetConfig+0xec>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d113      	bne.n	800ee70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	695b      	ldr	r3, [r3, #20]
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	693a      	ldr	r2, [r7, #16]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	693a      	ldr	r2, [r7, #16]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	693a      	ldr	r2, [r7, #16]
 800ee74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	685a      	ldr	r2, [r3, #4]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	697a      	ldr	r2, [r7, #20]
 800ee88:	621a      	str	r2, [r3, #32]
}
 800ee8a:	bf00      	nop
 800ee8c:	371c      	adds	r7, #28
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	feff8fff 	.word	0xfeff8fff
 800ee9c:	40010000 	.word	0x40010000
 800eea0:	40010400 	.word	0x40010400

0800eea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b087      	sub	sp, #28
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	69db      	ldr	r3, [r3, #28]
 800eeca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eecc:	68fa      	ldr	r2, [r7, #12]
 800eece:	4b2d      	ldr	r3, [pc, #180]	@ (800ef84 <TIM_OC3_SetConfig+0xe0>)
 800eed0:	4013      	ands	r3, r2
 800eed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f023 0303 	bic.w	r3, r3, #3
 800eeda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eeec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	021b      	lsls	r3, r3, #8
 800eef4:	697a      	ldr	r2, [r7, #20]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4a22      	ldr	r2, [pc, #136]	@ (800ef88 <TIM_OC3_SetConfig+0xe4>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d003      	beq.n	800ef0a <TIM_OC3_SetConfig+0x66>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4a21      	ldr	r2, [pc, #132]	@ (800ef8c <TIM_OC3_SetConfig+0xe8>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d10d      	bne.n	800ef26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	021b      	lsls	r3, r3, #8
 800ef18:	697a      	ldr	r2, [r7, #20]
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a17      	ldr	r2, [pc, #92]	@ (800ef88 <TIM_OC3_SetConfig+0xe4>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d003      	beq.n	800ef36 <TIM_OC3_SetConfig+0x92>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a16      	ldr	r2, [pc, #88]	@ (800ef8c <TIM_OC3_SetConfig+0xe8>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d113      	bne.n	800ef5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	695b      	ldr	r3, [r3, #20]
 800ef4a:	011b      	lsls	r3, r3, #4
 800ef4c:	693a      	ldr	r2, [r7, #16]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	011b      	lsls	r3, r3, #4
 800ef58:	693a      	ldr	r2, [r7, #16]
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	693a      	ldr	r2, [r7, #16]
 800ef62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	685a      	ldr	r2, [r3, #4]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	697a      	ldr	r2, [r7, #20]
 800ef76:	621a      	str	r2, [r3, #32]
}
 800ef78:	bf00      	nop
 800ef7a:	371c      	adds	r7, #28
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	fffeff8f 	.word	0xfffeff8f
 800ef88:	40010000 	.word	0x40010000
 800ef8c:	40010400 	.word	0x40010400

0800ef90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b087      	sub	sp, #28
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a1b      	ldr	r3, [r3, #32]
 800ef9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6a1b      	ldr	r3, [r3, #32]
 800efa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	69db      	ldr	r3, [r3, #28]
 800efb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800efb8:	68fa      	ldr	r2, [r7, #12]
 800efba:	4b1e      	ldr	r3, [pc, #120]	@ (800f034 <TIM_OC4_SetConfig+0xa4>)
 800efbc:	4013      	ands	r3, r2
 800efbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800efc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	021b      	lsls	r3, r3, #8
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	4313      	orrs	r3, r2
 800efd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800efda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	031b      	lsls	r3, r3, #12
 800efe2:	693a      	ldr	r2, [r7, #16]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a13      	ldr	r2, [pc, #76]	@ (800f038 <TIM_OC4_SetConfig+0xa8>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d003      	beq.n	800eff8 <TIM_OC4_SetConfig+0x68>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a12      	ldr	r2, [pc, #72]	@ (800f03c <TIM_OC4_SetConfig+0xac>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d109      	bne.n	800f00c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800effe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	695b      	ldr	r3, [r3, #20]
 800f004:	019b      	lsls	r3, r3, #6
 800f006:	697a      	ldr	r2, [r7, #20]
 800f008:	4313      	orrs	r3, r2
 800f00a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	685a      	ldr	r2, [r3, #4]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	621a      	str	r2, [r3, #32]
}
 800f026:	bf00      	nop
 800f028:	371c      	adds	r7, #28
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	feff8fff 	.word	0xfeff8fff
 800f038:	40010000 	.word	0x40010000
 800f03c:	40010400 	.word	0x40010400

0800f040 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f040:	b480      	push	{r7}
 800f042:	b087      	sub	sp, #28
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6a1b      	ldr	r3, [r3, #32]
 800f054:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	4b1b      	ldr	r3, [pc, #108]	@ (800f0d8 <TIM_OC5_SetConfig+0x98>)
 800f06c:	4013      	ands	r3, r2
 800f06e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	4313      	orrs	r3, r2
 800f078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f080:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	041b      	lsls	r3, r3, #16
 800f088:	693a      	ldr	r2, [r7, #16]
 800f08a:	4313      	orrs	r3, r2
 800f08c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a12      	ldr	r2, [pc, #72]	@ (800f0dc <TIM_OC5_SetConfig+0x9c>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d003      	beq.n	800f09e <TIM_OC5_SetConfig+0x5e>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a11      	ldr	r2, [pc, #68]	@ (800f0e0 <TIM_OC5_SetConfig+0xa0>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d109      	bne.n	800f0b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	021b      	lsls	r3, r3, #8
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	697a      	ldr	r2, [r7, #20]
 800f0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	685a      	ldr	r2, [r3, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	693a      	ldr	r2, [r7, #16]
 800f0ca:	621a      	str	r2, [r3, #32]
}
 800f0cc:	bf00      	nop
 800f0ce:	371c      	adds	r7, #28
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	fffeff8f 	.word	0xfffeff8f
 800f0dc:	40010000 	.word	0x40010000
 800f0e0:	40010400 	.word	0x40010400

0800f0e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6a1b      	ldr	r3, [r3, #32]
 800f0f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	4b1c      	ldr	r3, [pc, #112]	@ (800f180 <TIM_OC6_SetConfig+0x9c>)
 800f110:	4013      	ands	r3, r2
 800f112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	021b      	lsls	r3, r3, #8
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	051b      	lsls	r3, r3, #20
 800f12e:	693a      	ldr	r2, [r7, #16]
 800f130:	4313      	orrs	r3, r2
 800f132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4a13      	ldr	r2, [pc, #76]	@ (800f184 <TIM_OC6_SetConfig+0xa0>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d003      	beq.n	800f144 <TIM_OC6_SetConfig+0x60>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4a12      	ldr	r2, [pc, #72]	@ (800f188 <TIM_OC6_SetConfig+0xa4>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d109      	bne.n	800f158 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f14a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	695b      	ldr	r3, [r3, #20]
 800f150:	029b      	lsls	r3, r3, #10
 800f152:	697a      	ldr	r2, [r7, #20]
 800f154:	4313      	orrs	r3, r2
 800f156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	697a      	ldr	r2, [r7, #20]
 800f15c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	685a      	ldr	r2, [r3, #4]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	693a      	ldr	r2, [r7, #16]
 800f170:	621a      	str	r2, [r3, #32]
}
 800f172:	bf00      	nop
 800f174:	371c      	adds	r7, #28
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	feff8fff 	.word	0xfeff8fff
 800f184:	40010000 	.word	0x40010000
 800f188:	40010400 	.word	0x40010400

0800f18c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b087      	sub	sp, #28
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6a1b      	ldr	r3, [r3, #32]
 800f19c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	f023 0201 	bic.w	r2, r3, #1
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	699b      	ldr	r3, [r3, #24]
 800f1ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f1b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	011b      	lsls	r3, r3, #4
 800f1bc:	693a      	ldr	r2, [r7, #16]
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	f023 030a 	bic.w	r3, r3, #10
 800f1c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f1ca:	697a      	ldr	r2, [r7, #20]
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	621a      	str	r2, [r3, #32]
}
 800f1de:	bf00      	nop
 800f1e0:	371c      	adds	r7, #28
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b087      	sub	sp, #28
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	60f8      	str	r0, [r7, #12]
 800f1f2:	60b9      	str	r1, [r7, #8]
 800f1f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
 800f1fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6a1b      	ldr	r3, [r3, #32]
 800f200:	f023 0210 	bic.w	r2, r3, #16
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	699b      	ldr	r3, [r3, #24]
 800f20c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	031b      	lsls	r3, r3, #12
 800f21a:	693a      	ldr	r2, [r7, #16]
 800f21c:	4313      	orrs	r3, r2
 800f21e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f226:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	011b      	lsls	r3, r3, #4
 800f22c:	697a      	ldr	r2, [r7, #20]
 800f22e:	4313      	orrs	r3, r2
 800f230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	693a      	ldr	r2, [r7, #16]
 800f236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	697a      	ldr	r2, [r7, #20]
 800f23c:	621a      	str	r2, [r3, #32]
}
 800f23e:	bf00      	nop
 800f240:	371c      	adds	r7, #28
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f24a:	b480      	push	{r7}
 800f24c:	b085      	sub	sp, #20
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	4313      	orrs	r3, r2
 800f268:	f043 0307 	orr.w	r3, r3, #7
 800f26c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	68fa      	ldr	r2, [r7, #12]
 800f272:	609a      	str	r2, [r3, #8]
}
 800f274:	bf00      	nop
 800f276:	3714      	adds	r7, #20
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
 800f28c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f29a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	021a      	lsls	r2, r3, #8
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	431a      	orrs	r2, r3
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	697a      	ldr	r2, [r7, #20]
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	609a      	str	r2, [r3, #8]
}
 800f2b4:	bf00      	nop
 800f2b6:	371c      	adds	r7, #28
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d101      	bne.n	800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f2d4:	2302      	movs	r3, #2
 800f2d6:	e06d      	b.n	800f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2202      	movs	r2, #2
 800f2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a30      	ldr	r2, [pc, #192]	@ (800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d004      	beq.n	800f30c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a2f      	ldr	r2, [pc, #188]	@ (800f3c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d108      	bne.n	800f31e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	4313      	orrs	r3, r2
 800f31c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68fa      	ldr	r2, [r7, #12]
 800f32c:	4313      	orrs	r3, r2
 800f32e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	68fa      	ldr	r2, [r7, #12]
 800f336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4a20      	ldr	r2, [pc, #128]	@ (800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	d022      	beq.n	800f388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f34a:	d01d      	beq.n	800f388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4a1d      	ldr	r2, [pc, #116]	@ (800f3c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d018      	beq.n	800f388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4a1c      	ldr	r2, [pc, #112]	@ (800f3cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d013      	beq.n	800f388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4a1a      	ldr	r2, [pc, #104]	@ (800f3d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d00e      	beq.n	800f388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4a15      	ldr	r2, [pc, #84]	@ (800f3c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d009      	beq.n	800f388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4a16      	ldr	r2, [pc, #88]	@ (800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d004      	beq.n	800f388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	4a15      	ldr	r2, [pc, #84]	@ (800f3d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d10c      	bne.n	800f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f38e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	4313      	orrs	r3, r2
 800f398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	40010000 	.word	0x40010000
 800f3c4:	40010400 	.word	0x40010400
 800f3c8:	40000400 	.word	0x40000400
 800f3cc:	40000800 	.word	0x40000800
 800f3d0:	40000c00 	.word	0x40000c00
 800f3d4:	40014000 	.word	0x40014000
 800f3d8:	40001800 	.word	0x40001800

0800f3dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b085      	sub	sp, #20
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d101      	bne.n	800f3f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f3f4:	2302      	movs	r3, #2
 800f3f6:	e065      	b.n	800f4c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	4313      	orrs	r3, r2
 800f40c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	4313      	orrs	r3, r2
 800f41a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	4313      	orrs	r3, r2
 800f428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4313      	orrs	r3, r2
 800f436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	4313      	orrs	r3, r2
 800f444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	695b      	ldr	r3, [r3, #20]
 800f450:	4313      	orrs	r3, r2
 800f452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f45e:	4313      	orrs	r3, r2
 800f460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	699b      	ldr	r3, [r3, #24]
 800f46c:	041b      	lsls	r3, r3, #16
 800f46e:	4313      	orrs	r3, r2
 800f470:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4a16      	ldr	r2, [pc, #88]	@ (800f4d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d004      	beq.n	800f486 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4a14      	ldr	r2, [pc, #80]	@ (800f4d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d115      	bne.n	800f4b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f490:	051b      	lsls	r3, r3, #20
 800f492:	4313      	orrs	r3, r2
 800f494:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	69db      	ldr	r3, [r3, #28]
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	6a1b      	ldr	r3, [r3, #32]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f4c2:	2300      	movs	r3, #0
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3714      	adds	r7, #20
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ce:	4770      	bx	lr
 800f4d0:	40010000 	.word	0x40010000
 800f4d4:	40010400 	.word	0x40010400

0800f4d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f4e0:	bf00      	nop
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr

0800f4ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f4f4:	bf00      	nop
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f508:	bf00      	nop
 800f50a:	370c      	adds	r7, #12
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr

0800f514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f522:	2301      	movs	r3, #1
 800f524:	e040      	b.n	800f5a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d106      	bne.n	800f53c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2200      	movs	r2, #0
 800f532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7f5 f812 	bl	8004560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2224      	movs	r2, #36	@ 0x24
 800f540:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f022 0201 	bic.w	r2, r2, #1
 800f550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f556:	2b00      	cmp	r3, #0
 800f558:	d002      	beq.n	800f560 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 ffb6 	bl	80104cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 fd4f 	bl	8010004 <UART_SetConfig>
 800f566:	4603      	mov	r3, r0
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f56c:	2301      	movs	r3, #1
 800f56e:	e01b      	b.n	800f5a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	685a      	ldr	r2, [r3, #4]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f57e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	689a      	ldr	r2, [r3, #8]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f58e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f042 0201 	orr.w	r2, r2, #1
 800f59e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f001 f835 	bl	8010610 <UART_CheckIdleState>
 800f5a6:	4603      	mov	r3, r0
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b08a      	sub	sp, #40	@ 0x28
 800f5b4:	af02      	add	r7, sp, #8
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	603b      	str	r3, [r7, #0]
 800f5bc:	4613      	mov	r3, r2
 800f5be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f5c4:	2b20      	cmp	r3, #32
 800f5c6:	d177      	bne.n	800f6b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d002      	beq.n	800f5d4 <HAL_UART_Transmit+0x24>
 800f5ce:	88fb      	ldrh	r3, [r7, #6]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d101      	bne.n	800f5d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e070      	b.n	800f6ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2221      	movs	r2, #33	@ 0x21
 800f5e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5e6:	f7f5 ff59 	bl	800549c <HAL_GetTick>
 800f5ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	88fa      	ldrh	r2, [r7, #6]
 800f5f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	88fa      	ldrh	r2, [r7, #6]
 800f5f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	689b      	ldr	r3, [r3, #8]
 800f600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f604:	d108      	bne.n	800f618 <HAL_UART_Transmit+0x68>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	691b      	ldr	r3, [r3, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d104      	bne.n	800f618 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f60e:	2300      	movs	r3, #0
 800f610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	61bb      	str	r3, [r7, #24]
 800f616:	e003      	b.n	800f620 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f61c:	2300      	movs	r3, #0
 800f61e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f620:	e02f      	b.n	800f682 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	2200      	movs	r2, #0
 800f62a:	2180      	movs	r1, #128	@ 0x80
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	f001 f846 	bl	80106be <UART_WaitOnFlagUntilTimeout>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d004      	beq.n	800f642 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2220      	movs	r2, #32
 800f63c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f63e:	2303      	movs	r3, #3
 800f640:	e03b      	b.n	800f6ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10b      	bne.n	800f660 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f648:	69bb      	ldr	r3, [r7, #24]
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	461a      	mov	r2, r3
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f656:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	3302      	adds	r3, #2
 800f65c:	61bb      	str	r3, [r7, #24]
 800f65e:	e007      	b.n	800f670 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	781a      	ldrb	r2, [r3, #0]
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	3301      	adds	r3, #1
 800f66e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f676:	b29b      	uxth	r3, r3
 800f678:	3b01      	subs	r3, #1
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f688:	b29b      	uxth	r3, r3
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1c9      	bne.n	800f622 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	2200      	movs	r2, #0
 800f696:	2140      	movs	r1, #64	@ 0x40
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f001 f810 	bl	80106be <UART_WaitOnFlagUntilTimeout>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d004      	beq.n	800f6ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2220      	movs	r2, #32
 800f6a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f6aa:	2303      	movs	r3, #3
 800f6ac:	e005      	b.n	800f6ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2220      	movs	r2, #32
 800f6b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	e000      	b.n	800f6ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f6b8:	2302      	movs	r3, #2
  }
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3720      	adds	r7, #32
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b08a      	sub	sp, #40	@ 0x28
 800f6c6:	af02      	add	r7, sp, #8
 800f6c8:	60f8      	str	r0, [r7, #12]
 800f6ca:	60b9      	str	r1, [r7, #8]
 800f6cc:	603b      	str	r3, [r7, #0]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6d8:	2b20      	cmp	r3, #32
 800f6da:	f040 80b5 	bne.w	800f848 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d002      	beq.n	800f6ea <HAL_UART_Receive+0x28>
 800f6e4:	88fb      	ldrh	r3, [r7, #6]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d101      	bne.n	800f6ee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e0ad      	b.n	800f84a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2222      	movs	r2, #34	@ 0x22
 800f6fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2200      	movs	r2, #0
 800f702:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f704:	f7f5 feca 	bl	800549c <HAL_GetTick>
 800f708:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	88fa      	ldrh	r2, [r7, #6]
 800f70e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	88fa      	ldrh	r2, [r7, #6]
 800f716:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f722:	d10e      	bne.n	800f742 <HAL_UART_Receive+0x80>
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	691b      	ldr	r3, [r3, #16]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d105      	bne.n	800f738 <HAL_UART_Receive+0x76>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f732:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f736:	e02d      	b.n	800f794 <HAL_UART_Receive+0xd2>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	22ff      	movs	r2, #255	@ 0xff
 800f73c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f740:	e028      	b.n	800f794 <HAL_UART_Receive+0xd2>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d10d      	bne.n	800f766 <HAL_UART_Receive+0xa4>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d104      	bne.n	800f75c <HAL_UART_Receive+0x9a>
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	22ff      	movs	r2, #255	@ 0xff
 800f756:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f75a:	e01b      	b.n	800f794 <HAL_UART_Receive+0xd2>
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	227f      	movs	r2, #127	@ 0x7f
 800f760:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f764:	e016      	b.n	800f794 <HAL_UART_Receive+0xd2>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	689b      	ldr	r3, [r3, #8]
 800f76a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f76e:	d10d      	bne.n	800f78c <HAL_UART_Receive+0xca>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d104      	bne.n	800f782 <HAL_UART_Receive+0xc0>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	227f      	movs	r2, #127	@ 0x7f
 800f77c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f780:	e008      	b.n	800f794 <HAL_UART_Receive+0xd2>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	223f      	movs	r2, #63	@ 0x3f
 800f786:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f78a:	e003      	b.n	800f794 <HAL_UART_Receive+0xd2>
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2200      	movs	r2, #0
 800f790:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f79a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7a4:	d108      	bne.n	800f7b8 <HAL_UART_Receive+0xf6>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	691b      	ldr	r3, [r3, #16]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d104      	bne.n	800f7b8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	61bb      	str	r3, [r7, #24]
 800f7b6:	e003      	b.n	800f7c0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f7c0:	e036      	b.n	800f830 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	2120      	movs	r1, #32
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f000 ff76 	bl	80106be <UART_WaitOnFlagUntilTimeout>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d005      	beq.n	800f7e4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2220      	movs	r2, #32
 800f7dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f7e0:	2303      	movs	r3, #3
 800f7e2:	e032      	b.n	800f84a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d10c      	bne.n	800f804 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	8a7b      	ldrh	r3, [r7, #18]
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	69bb      	ldr	r3, [r7, #24]
 800f7fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	3302      	adds	r3, #2
 800f800:	61bb      	str	r3, [r7, #24]
 800f802:	e00c      	b.n	800f81e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	8a7b      	ldrh	r3, [r7, #18]
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	4013      	ands	r3, r2
 800f812:	b2da      	uxtb	r2, r3
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	3301      	adds	r3, #1
 800f81c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f824:	b29b      	uxth	r3, r3
 800f826:	3b01      	subs	r3, #1
 800f828:	b29a      	uxth	r2, r3
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f836:	b29b      	uxth	r3, r3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d1c2      	bne.n	800f7c2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2220      	movs	r2, #32
 800f840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f844:	2300      	movs	r3, #0
 800f846:	e000      	b.n	800f84a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f848:	2302      	movs	r3, #2
  }
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3720      	adds	r7, #32
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}

0800f852 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f852:	b580      	push	{r7, lr}
 800f854:	b08a      	sub	sp, #40	@ 0x28
 800f856:	af00      	add	r7, sp, #0
 800f858:	60f8      	str	r0, [r7, #12]
 800f85a:	60b9      	str	r1, [r7, #8]
 800f85c:	4613      	mov	r3, r2
 800f85e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f866:	2b20      	cmp	r3, #32
 800f868:	d132      	bne.n	800f8d0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <HAL_UART_Receive_DMA+0x24>
 800f870:	88fb      	ldrh	r3, [r7, #6]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d101      	bne.n	800f87a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	e02b      	b.n	800f8d2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d018      	beq.n	800f8c0 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	e853 3f00 	ldrex	r3, [r3]
 800f89a:	613b      	str	r3, [r7, #16]
   return(result);
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f8a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ac:	623b      	str	r3, [r7, #32]
 800f8ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b0:	69f9      	ldr	r1, [r7, #28]
 800f8b2:	6a3a      	ldr	r2, [r7, #32]
 800f8b4:	e841 2300 	strex	r3, r2, [r1]
 800f8b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1e6      	bne.n	800f88e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f8c0:	88fb      	ldrh	r3, [r7, #6]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	68b9      	ldr	r1, [r7, #8]
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f000 ff66 	bl	8010798 <UART_Start_Receive_DMA>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	e000      	b.n	800f8d2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f8d0:	2302      	movs	r3, #2
  }
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3728      	adds	r7, #40	@ 0x28
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b090      	sub	sp, #64	@ 0x40
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	689b      	ldr	r3, [r3, #8]
 800f8f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8fa:	2b80      	cmp	r3, #128	@ 0x80
 800f8fc:	d139      	bne.n	800f972 <HAL_UART_DMAStop+0x98>
 800f8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f900:	2b21      	cmp	r3, #33	@ 0x21
 800f902:	d136      	bne.n	800f972 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	3308      	adds	r3, #8
 800f90a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f90c:	6a3b      	ldr	r3, [r7, #32]
 800f90e:	e853 3f00 	ldrex	r3, [r3]
 800f912:	61fb      	str	r3, [r7, #28]
   return(result);
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f91a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	3308      	adds	r3, #8
 800f922:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f92a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f92c:	e841 2300 	strex	r3, r2, [r1]
 800f930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f934:	2b00      	cmp	r3, #0
 800f936:	d1e5      	bne.n	800f904 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d015      	beq.n	800f96c <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f944:	4618      	mov	r0, r3
 800f946:	f7f6 fc2b 	bl	80061a0 <HAL_DMA_Abort>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00d      	beq.n	800f96c <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f954:	4618      	mov	r0, r3
 800f956:	f7f6 fe3f 	bl	80065d8 <HAL_DMA_GetError>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b20      	cmp	r3, #32
 800f95e:	d105      	bne.n	800f96c <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2210      	movs	r2, #16
 800f964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f968:	2303      	movs	r3, #3
 800f96a:	e044      	b.n	800f9f6 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 ffb3 	bl	80108d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f97c:	2b40      	cmp	r3, #64	@ 0x40
 800f97e:	d139      	bne.n	800f9f4 <HAL_UART_DMAStop+0x11a>
 800f980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f982:	2b22      	cmp	r3, #34	@ 0x22
 800f984:	d136      	bne.n	800f9f4 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	3308      	adds	r3, #8
 800f98c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	e853 3f00 	ldrex	r3, [r3]
 800f994:	60bb      	str	r3, [r7, #8]
   return(result);
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f99c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	3308      	adds	r3, #8
 800f9a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9a6:	61ba      	str	r2, [r7, #24]
 800f9a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9aa:	6979      	ldr	r1, [r7, #20]
 800f9ac:	69ba      	ldr	r2, [r7, #24]
 800f9ae:	e841 2300 	strex	r3, r2, [r1]
 800f9b2:	613b      	str	r3, [r7, #16]
   return(result);
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1e5      	bne.n	800f986 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d015      	beq.n	800f9ee <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7f6 fbea 	bl	80061a0 <HAL_DMA_Abort>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d00d      	beq.n	800f9ee <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7f6 fdfe 	bl	80065d8 <HAL_DMA_GetError>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b20      	cmp	r3, #32
 800f9e0:	d105      	bne.n	800f9ee <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2210      	movs	r2, #16
 800f9e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	e003      	b.n	800f9f6 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 ff98 	bl	8010924 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3740      	adds	r7, #64	@ 0x40
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b0ba      	sub	sp, #232	@ 0xe8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	69db      	ldr	r3, [r3, #28]
 800fa0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	689b      	ldr	r3, [r3, #8]
 800fa22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fa26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fa2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fa2e:	4013      	ands	r3, r2
 800fa30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fa34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d115      	bne.n	800fa68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fa3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa40:	f003 0320 	and.w	r3, r3, #32
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d00f      	beq.n	800fa68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fa48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa4c:	f003 0320 	and.w	r3, r3, #32
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d009      	beq.n	800fa68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f000 82b1 	beq.w	800ffc0 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	4798      	blx	r3
      }
      return;
 800fa66:	e2ab      	b.n	800ffc0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fa68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f000 8117 	beq.w	800fca0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fa72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa76:	f003 0301 	and.w	r3, r3, #1
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d106      	bne.n	800fa8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800fa7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fa82:	4b85      	ldr	r3, [pc, #532]	@ (800fc98 <HAL_UART_IRQHandler+0x298>)
 800fa84:	4013      	ands	r3, r2
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 810a 	beq.w	800fca0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fa8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa90:	f003 0301 	and.w	r3, r3, #1
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d011      	beq.n	800fabc <HAL_UART_IRQHandler+0xbc>
 800fa98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d00b      	beq.n	800fabc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2201      	movs	r2, #1
 800faaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fab2:	f043 0201 	orr.w	r2, r3, #1
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fac0:	f003 0302 	and.w	r3, r3, #2
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d011      	beq.n	800faec <HAL_UART_IRQHandler+0xec>
 800fac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800facc:	f003 0301 	and.w	r3, r3, #1
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00b      	beq.n	800faec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2202      	movs	r2, #2
 800fada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fae2:	f043 0204 	orr.w	r2, r3, #4
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800faec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800faf0:	f003 0304 	and.w	r3, r3, #4
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d011      	beq.n	800fb1c <HAL_UART_IRQHandler+0x11c>
 800faf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fafc:	f003 0301 	and.w	r3, r3, #1
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00b      	beq.n	800fb1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2204      	movs	r2, #4
 800fb0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb12:	f043 0202 	orr.w	r2, r3, #2
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb20:	f003 0308 	and.w	r3, r3, #8
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d017      	beq.n	800fb58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fb28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb2c:	f003 0320 	and.w	r3, r3, #32
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d105      	bne.n	800fb40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fb34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00b      	beq.n	800fb58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	2208      	movs	r2, #8
 800fb46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb4e:	f043 0208 	orr.w	r2, r3, #8
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d012      	beq.n	800fb8a <HAL_UART_IRQHandler+0x18a>
 800fb64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00c      	beq.n	800fb8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fb78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb80:	f043 0220 	orr.w	r2, r3, #32
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f000 8217 	beq.w	800ffc4 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fb96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb9a:	f003 0320 	and.w	r3, r3, #32
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d00d      	beq.n	800fbbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fba6:	f003 0320 	and.w	r3, r3, #32
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d007      	beq.n	800fbbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d003      	beq.n	800fbbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbd2:	2b40      	cmp	r3, #64	@ 0x40
 800fbd4:	d005      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fbd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fbda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d04f      	beq.n	800fc82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 fe9e 	bl	8010924 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	689b      	ldr	r3, [r3, #8]
 800fbee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbf2:	2b40      	cmp	r3, #64	@ 0x40
 800fbf4:	d141      	bne.n	800fc7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fc04:	e853 3f00 	ldrex	r3, [r3]
 800fc08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fc0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fc10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	3308      	adds	r3, #8
 800fc1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fc22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fc26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fc2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fc32:	e841 2300 	strex	r3, r2, [r1]
 800fc36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fc3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d1d9      	bne.n	800fbf6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d013      	beq.n	800fc72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc4e:	4a13      	ldr	r2, [pc, #76]	@ (800fc9c <HAL_UART_IRQHandler+0x29c>)
 800fc50:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f6 fb12 	bl	8006280 <HAL_DMA_Abort_IT>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d017      	beq.n	800fc92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc70:	e00f      	b.n	800fc92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7f5 faa0 	bl	80051b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc78:	e00b      	b.n	800fc92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f7f5 fa9c 	bl	80051b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc80:	e007      	b.n	800fc92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7f5 fa98 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800fc90:	e198      	b.n	800ffc4 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc92:	bf00      	nop
    return;
 800fc94:	e196      	b.n	800ffc4 <HAL_UART_IRQHandler+0x5c4>
 800fc96:	bf00      	nop
 800fc98:	04000120 	.word	0x04000120
 800fc9c:	08010c3b 	.word	0x08010c3b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	f040 8166 	bne.w	800ff76 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fcaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcae:	f003 0310 	and.w	r3, r3, #16
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f000 815f 	beq.w	800ff76 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fcb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcbc:	f003 0310 	and.w	r3, r3, #16
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f000 8158 	beq.w	800ff76 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2210      	movs	r2, #16
 800fccc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	689b      	ldr	r3, [r3, #8]
 800fcd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcd8:	2b40      	cmp	r3, #64	@ 0x40
 800fcda:	f040 80d0 	bne.w	800fe7e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fcea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 80ab 	beq.w	800fe4a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fcfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	f080 80a3 	bcs.w	800fe4a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fd0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd12:	69db      	ldr	r3, [r3, #28]
 800fd14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd18:	f000 8086 	beq.w	800fe28 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fd28:	e853 3f00 	ldrex	r3, [r3]
 800fd2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fd30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fd34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	461a      	mov	r2, r3
 800fd42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fd46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fd4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fd52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fd56:	e841 2300 	strex	r3, r2, [r1]
 800fd5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fd5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1da      	bne.n	800fd1c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3308      	adds	r3, #8
 800fd6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fd70:	e853 3f00 	ldrex	r3, [r3]
 800fd74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fd76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fd78:	f023 0301 	bic.w	r3, r3, #1
 800fd7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	3308      	adds	r3, #8
 800fd86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fd8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fd8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fd92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fd96:	e841 2300 	strex	r3, r2, [r1]
 800fd9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fd9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1e1      	bne.n	800fd66 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3308      	adds	r3, #8
 800fda8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fdac:	e853 3f00 	ldrex	r3, [r3]
 800fdb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fdb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fdb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3308      	adds	r3, #8
 800fdc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fdc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fdc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fdcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fdce:	e841 2300 	strex	r3, r2, [r1]
 800fdd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fdd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1e3      	bne.n	800fda2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2220      	movs	r2, #32
 800fdde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdf0:	e853 3f00 	ldrex	r3, [r3]
 800fdf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fdf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fdf8:	f023 0310 	bic.w	r3, r3, #16
 800fdfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	461a      	mov	r2, r3
 800fe06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fe0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fe10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe12:	e841 2300 	strex	r3, r2, [r1]
 800fe16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fe18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d1e4      	bne.n	800fde8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7f6 f9bc 	bl	80061a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	1ad3      	subs	r3, r2, r3
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	4619      	mov	r1, r3
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 f8d2 	bl	800ffec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fe48:	e0be      	b.n	800ffc8 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fe50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fe54:	429a      	cmp	r2, r3
 800fe56:	f040 80b7 	bne.w	800ffc8 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe5e:	69db      	ldr	r3, [r3, #28]
 800fe60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe64:	f040 80b0 	bne.w	800ffc8 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2202      	movs	r2, #2
 800fe6c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fe74:	4619      	mov	r1, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 f8b8 	bl	800ffec <HAL_UARTEx_RxEventCallback>
      return;
 800fe7c:	e0a4      	b.n	800ffc8 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	1ad3      	subs	r3, r2, r3
 800fe8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	f000 8096 	beq.w	800ffcc <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800fea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f000 8091 	beq.w	800ffcc <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feb2:	e853 3f00 	ldrex	r3, [r3]
 800feb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800feb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800febe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	461a      	mov	r2, r3
 800fec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fecc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fece:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fed4:	e841 2300 	strex	r3, r2, [r1]
 800fed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800feda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1e4      	bne.n	800feaa <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	3308      	adds	r3, #8
 800fee6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feea:	e853 3f00 	ldrex	r3, [r3]
 800feee:	623b      	str	r3, [r7, #32]
   return(result);
 800fef0:	6a3b      	ldr	r3, [r7, #32]
 800fef2:	f023 0301 	bic.w	r3, r3, #1
 800fef6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	3308      	adds	r3, #8
 800ff00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ff04:	633a      	str	r2, [r7, #48]	@ 0x30
 800ff06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff0c:	e841 2300 	strex	r3, r2, [r1]
 800ff10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ff12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1e3      	bne.n	800fee0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2220      	movs	r2, #32
 800ff1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2200      	movs	r2, #0
 800ff24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	e853 3f00 	ldrex	r3, [r3]
 800ff38:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f023 0310 	bic.w	r3, r3, #16
 800ff40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ff4e:	61fb      	str	r3, [r7, #28]
 800ff50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff52:	69b9      	ldr	r1, [r7, #24]
 800ff54:	69fa      	ldr	r2, [r7, #28]
 800ff56:	e841 2300 	strex	r3, r2, [r1]
 800ff5a:	617b      	str	r3, [r7, #20]
   return(result);
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1e4      	bne.n	800ff2c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2202      	movs	r2, #2
 800ff66:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ff68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f000 f83c 	bl	800ffec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ff74:	e02a      	b.n	800ffcc <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ff76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00e      	beq.n	800ffa0 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ff82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d008      	beq.n	800ffa0 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d01c      	beq.n	800ffd0 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	4798      	blx	r3
    }
    return;
 800ff9e:	e017      	b.n	800ffd0 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ffa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d012      	beq.n	800ffd2 <HAL_UART_IRQHandler+0x5d2>
 800ffac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00c      	beq.n	800ffd2 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fe50 	bl	8010c5e <UART_EndTransmit_IT>
    return;
 800ffbe:	e008      	b.n	800ffd2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ffc0:	bf00      	nop
 800ffc2:	e006      	b.n	800ffd2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800ffc4:	bf00      	nop
 800ffc6:	e004      	b.n	800ffd2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ffc8:	bf00      	nop
 800ffca:	e002      	b.n	800ffd2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ffcc:	bf00      	nop
 800ffce:	e000      	b.n	800ffd2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800ffd0:	bf00      	nop
  }

}
 800ffd2:	37e8      	adds	r7, #232	@ 0xe8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	460b      	mov	r3, r1
 800fff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fff8:	bf00      	nop
 800fffa:	370c      	adds	r7, #12
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b088      	sub	sp, #32
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801000c:	2300      	movs	r3, #0
 801000e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	689a      	ldr	r2, [r3, #8]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	691b      	ldr	r3, [r3, #16]
 8010018:	431a      	orrs	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	695b      	ldr	r3, [r3, #20]
 801001e:	431a      	orrs	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	69db      	ldr	r3, [r3, #28]
 8010024:	4313      	orrs	r3, r2
 8010026:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	681a      	ldr	r2, [r3, #0]
 801002e:	4ba6      	ldr	r3, [pc, #664]	@ (80102c8 <UART_SetConfig+0x2c4>)
 8010030:	4013      	ands	r3, r2
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	6812      	ldr	r2, [r2, #0]
 8010036:	6979      	ldr	r1, [r7, #20]
 8010038:	430b      	orrs	r3, r1
 801003a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	68da      	ldr	r2, [r3, #12]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	430a      	orrs	r2, r1
 8010050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	699b      	ldr	r3, [r3, #24]
 8010056:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6a1b      	ldr	r3, [r3, #32]
 801005c:	697a      	ldr	r2, [r7, #20]
 801005e:	4313      	orrs	r3, r2
 8010060:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	697a      	ldr	r2, [r7, #20]
 8010072:	430a      	orrs	r2, r1
 8010074:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a94      	ldr	r2, [pc, #592]	@ (80102cc <UART_SetConfig+0x2c8>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d120      	bne.n	80100c2 <UART_SetConfig+0xbe>
 8010080:	4b93      	ldr	r3, [pc, #588]	@ (80102d0 <UART_SetConfig+0x2cc>)
 8010082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010086:	f003 0303 	and.w	r3, r3, #3
 801008a:	2b03      	cmp	r3, #3
 801008c:	d816      	bhi.n	80100bc <UART_SetConfig+0xb8>
 801008e:	a201      	add	r2, pc, #4	@ (adr r2, 8010094 <UART_SetConfig+0x90>)
 8010090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010094:	080100a5 	.word	0x080100a5
 8010098:	080100b1 	.word	0x080100b1
 801009c:	080100ab 	.word	0x080100ab
 80100a0:	080100b7 	.word	0x080100b7
 80100a4:	2301      	movs	r3, #1
 80100a6:	77fb      	strb	r3, [r7, #31]
 80100a8:	e150      	b.n	801034c <UART_SetConfig+0x348>
 80100aa:	2302      	movs	r3, #2
 80100ac:	77fb      	strb	r3, [r7, #31]
 80100ae:	e14d      	b.n	801034c <UART_SetConfig+0x348>
 80100b0:	2304      	movs	r3, #4
 80100b2:	77fb      	strb	r3, [r7, #31]
 80100b4:	e14a      	b.n	801034c <UART_SetConfig+0x348>
 80100b6:	2308      	movs	r3, #8
 80100b8:	77fb      	strb	r3, [r7, #31]
 80100ba:	e147      	b.n	801034c <UART_SetConfig+0x348>
 80100bc:	2310      	movs	r3, #16
 80100be:	77fb      	strb	r3, [r7, #31]
 80100c0:	e144      	b.n	801034c <UART_SetConfig+0x348>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4a83      	ldr	r2, [pc, #524]	@ (80102d4 <UART_SetConfig+0x2d0>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d132      	bne.n	8010132 <UART_SetConfig+0x12e>
 80100cc:	4b80      	ldr	r3, [pc, #512]	@ (80102d0 <UART_SetConfig+0x2cc>)
 80100ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100d2:	f003 030c 	and.w	r3, r3, #12
 80100d6:	2b0c      	cmp	r3, #12
 80100d8:	d828      	bhi.n	801012c <UART_SetConfig+0x128>
 80100da:	a201      	add	r2, pc, #4	@ (adr r2, 80100e0 <UART_SetConfig+0xdc>)
 80100dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e0:	08010115 	.word	0x08010115
 80100e4:	0801012d 	.word	0x0801012d
 80100e8:	0801012d 	.word	0x0801012d
 80100ec:	0801012d 	.word	0x0801012d
 80100f0:	08010121 	.word	0x08010121
 80100f4:	0801012d 	.word	0x0801012d
 80100f8:	0801012d 	.word	0x0801012d
 80100fc:	0801012d 	.word	0x0801012d
 8010100:	0801011b 	.word	0x0801011b
 8010104:	0801012d 	.word	0x0801012d
 8010108:	0801012d 	.word	0x0801012d
 801010c:	0801012d 	.word	0x0801012d
 8010110:	08010127 	.word	0x08010127
 8010114:	2300      	movs	r3, #0
 8010116:	77fb      	strb	r3, [r7, #31]
 8010118:	e118      	b.n	801034c <UART_SetConfig+0x348>
 801011a:	2302      	movs	r3, #2
 801011c:	77fb      	strb	r3, [r7, #31]
 801011e:	e115      	b.n	801034c <UART_SetConfig+0x348>
 8010120:	2304      	movs	r3, #4
 8010122:	77fb      	strb	r3, [r7, #31]
 8010124:	e112      	b.n	801034c <UART_SetConfig+0x348>
 8010126:	2308      	movs	r3, #8
 8010128:	77fb      	strb	r3, [r7, #31]
 801012a:	e10f      	b.n	801034c <UART_SetConfig+0x348>
 801012c:	2310      	movs	r3, #16
 801012e:	77fb      	strb	r3, [r7, #31]
 8010130:	e10c      	b.n	801034c <UART_SetConfig+0x348>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a68      	ldr	r2, [pc, #416]	@ (80102d8 <UART_SetConfig+0x2d4>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d120      	bne.n	801017e <UART_SetConfig+0x17a>
 801013c:	4b64      	ldr	r3, [pc, #400]	@ (80102d0 <UART_SetConfig+0x2cc>)
 801013e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010142:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010146:	2b30      	cmp	r3, #48	@ 0x30
 8010148:	d013      	beq.n	8010172 <UART_SetConfig+0x16e>
 801014a:	2b30      	cmp	r3, #48	@ 0x30
 801014c:	d814      	bhi.n	8010178 <UART_SetConfig+0x174>
 801014e:	2b20      	cmp	r3, #32
 8010150:	d009      	beq.n	8010166 <UART_SetConfig+0x162>
 8010152:	2b20      	cmp	r3, #32
 8010154:	d810      	bhi.n	8010178 <UART_SetConfig+0x174>
 8010156:	2b00      	cmp	r3, #0
 8010158:	d002      	beq.n	8010160 <UART_SetConfig+0x15c>
 801015a:	2b10      	cmp	r3, #16
 801015c:	d006      	beq.n	801016c <UART_SetConfig+0x168>
 801015e:	e00b      	b.n	8010178 <UART_SetConfig+0x174>
 8010160:	2300      	movs	r3, #0
 8010162:	77fb      	strb	r3, [r7, #31]
 8010164:	e0f2      	b.n	801034c <UART_SetConfig+0x348>
 8010166:	2302      	movs	r3, #2
 8010168:	77fb      	strb	r3, [r7, #31]
 801016a:	e0ef      	b.n	801034c <UART_SetConfig+0x348>
 801016c:	2304      	movs	r3, #4
 801016e:	77fb      	strb	r3, [r7, #31]
 8010170:	e0ec      	b.n	801034c <UART_SetConfig+0x348>
 8010172:	2308      	movs	r3, #8
 8010174:	77fb      	strb	r3, [r7, #31]
 8010176:	e0e9      	b.n	801034c <UART_SetConfig+0x348>
 8010178:	2310      	movs	r3, #16
 801017a:	77fb      	strb	r3, [r7, #31]
 801017c:	e0e6      	b.n	801034c <UART_SetConfig+0x348>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4a56      	ldr	r2, [pc, #344]	@ (80102dc <UART_SetConfig+0x2d8>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d120      	bne.n	80101ca <UART_SetConfig+0x1c6>
 8010188:	4b51      	ldr	r3, [pc, #324]	@ (80102d0 <UART_SetConfig+0x2cc>)
 801018a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801018e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010192:	2bc0      	cmp	r3, #192	@ 0xc0
 8010194:	d013      	beq.n	80101be <UART_SetConfig+0x1ba>
 8010196:	2bc0      	cmp	r3, #192	@ 0xc0
 8010198:	d814      	bhi.n	80101c4 <UART_SetConfig+0x1c0>
 801019a:	2b80      	cmp	r3, #128	@ 0x80
 801019c:	d009      	beq.n	80101b2 <UART_SetConfig+0x1ae>
 801019e:	2b80      	cmp	r3, #128	@ 0x80
 80101a0:	d810      	bhi.n	80101c4 <UART_SetConfig+0x1c0>
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <UART_SetConfig+0x1a8>
 80101a6:	2b40      	cmp	r3, #64	@ 0x40
 80101a8:	d006      	beq.n	80101b8 <UART_SetConfig+0x1b4>
 80101aa:	e00b      	b.n	80101c4 <UART_SetConfig+0x1c0>
 80101ac:	2300      	movs	r3, #0
 80101ae:	77fb      	strb	r3, [r7, #31]
 80101b0:	e0cc      	b.n	801034c <UART_SetConfig+0x348>
 80101b2:	2302      	movs	r3, #2
 80101b4:	77fb      	strb	r3, [r7, #31]
 80101b6:	e0c9      	b.n	801034c <UART_SetConfig+0x348>
 80101b8:	2304      	movs	r3, #4
 80101ba:	77fb      	strb	r3, [r7, #31]
 80101bc:	e0c6      	b.n	801034c <UART_SetConfig+0x348>
 80101be:	2308      	movs	r3, #8
 80101c0:	77fb      	strb	r3, [r7, #31]
 80101c2:	e0c3      	b.n	801034c <UART_SetConfig+0x348>
 80101c4:	2310      	movs	r3, #16
 80101c6:	77fb      	strb	r3, [r7, #31]
 80101c8:	e0c0      	b.n	801034c <UART_SetConfig+0x348>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	4a44      	ldr	r2, [pc, #272]	@ (80102e0 <UART_SetConfig+0x2dc>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d125      	bne.n	8010220 <UART_SetConfig+0x21c>
 80101d4:	4b3e      	ldr	r3, [pc, #248]	@ (80102d0 <UART_SetConfig+0x2cc>)
 80101d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80101de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80101e2:	d017      	beq.n	8010214 <UART_SetConfig+0x210>
 80101e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80101e8:	d817      	bhi.n	801021a <UART_SetConfig+0x216>
 80101ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101ee:	d00b      	beq.n	8010208 <UART_SetConfig+0x204>
 80101f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101f4:	d811      	bhi.n	801021a <UART_SetConfig+0x216>
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d003      	beq.n	8010202 <UART_SetConfig+0x1fe>
 80101fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101fe:	d006      	beq.n	801020e <UART_SetConfig+0x20a>
 8010200:	e00b      	b.n	801021a <UART_SetConfig+0x216>
 8010202:	2300      	movs	r3, #0
 8010204:	77fb      	strb	r3, [r7, #31]
 8010206:	e0a1      	b.n	801034c <UART_SetConfig+0x348>
 8010208:	2302      	movs	r3, #2
 801020a:	77fb      	strb	r3, [r7, #31]
 801020c:	e09e      	b.n	801034c <UART_SetConfig+0x348>
 801020e:	2304      	movs	r3, #4
 8010210:	77fb      	strb	r3, [r7, #31]
 8010212:	e09b      	b.n	801034c <UART_SetConfig+0x348>
 8010214:	2308      	movs	r3, #8
 8010216:	77fb      	strb	r3, [r7, #31]
 8010218:	e098      	b.n	801034c <UART_SetConfig+0x348>
 801021a:	2310      	movs	r3, #16
 801021c:	77fb      	strb	r3, [r7, #31]
 801021e:	e095      	b.n	801034c <UART_SetConfig+0x348>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4a2f      	ldr	r2, [pc, #188]	@ (80102e4 <UART_SetConfig+0x2e0>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d125      	bne.n	8010276 <UART_SetConfig+0x272>
 801022a:	4b29      	ldr	r3, [pc, #164]	@ (80102d0 <UART_SetConfig+0x2cc>)
 801022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010230:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010234:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010238:	d017      	beq.n	801026a <UART_SetConfig+0x266>
 801023a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801023e:	d817      	bhi.n	8010270 <UART_SetConfig+0x26c>
 8010240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010244:	d00b      	beq.n	801025e <UART_SetConfig+0x25a>
 8010246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801024a:	d811      	bhi.n	8010270 <UART_SetConfig+0x26c>
 801024c:	2b00      	cmp	r3, #0
 801024e:	d003      	beq.n	8010258 <UART_SetConfig+0x254>
 8010250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010254:	d006      	beq.n	8010264 <UART_SetConfig+0x260>
 8010256:	e00b      	b.n	8010270 <UART_SetConfig+0x26c>
 8010258:	2301      	movs	r3, #1
 801025a:	77fb      	strb	r3, [r7, #31]
 801025c:	e076      	b.n	801034c <UART_SetConfig+0x348>
 801025e:	2302      	movs	r3, #2
 8010260:	77fb      	strb	r3, [r7, #31]
 8010262:	e073      	b.n	801034c <UART_SetConfig+0x348>
 8010264:	2304      	movs	r3, #4
 8010266:	77fb      	strb	r3, [r7, #31]
 8010268:	e070      	b.n	801034c <UART_SetConfig+0x348>
 801026a:	2308      	movs	r3, #8
 801026c:	77fb      	strb	r3, [r7, #31]
 801026e:	e06d      	b.n	801034c <UART_SetConfig+0x348>
 8010270:	2310      	movs	r3, #16
 8010272:	77fb      	strb	r3, [r7, #31]
 8010274:	e06a      	b.n	801034c <UART_SetConfig+0x348>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a1b      	ldr	r2, [pc, #108]	@ (80102e8 <UART_SetConfig+0x2e4>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d138      	bne.n	80102f2 <UART_SetConfig+0x2ee>
 8010280:	4b13      	ldr	r3, [pc, #76]	@ (80102d0 <UART_SetConfig+0x2cc>)
 8010282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010286:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 801028a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801028e:	d017      	beq.n	80102c0 <UART_SetConfig+0x2bc>
 8010290:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010294:	d82a      	bhi.n	80102ec <UART_SetConfig+0x2e8>
 8010296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801029a:	d00b      	beq.n	80102b4 <UART_SetConfig+0x2b0>
 801029c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102a0:	d824      	bhi.n	80102ec <UART_SetConfig+0x2e8>
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d003      	beq.n	80102ae <UART_SetConfig+0x2aa>
 80102a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102aa:	d006      	beq.n	80102ba <UART_SetConfig+0x2b6>
 80102ac:	e01e      	b.n	80102ec <UART_SetConfig+0x2e8>
 80102ae:	2300      	movs	r3, #0
 80102b0:	77fb      	strb	r3, [r7, #31]
 80102b2:	e04b      	b.n	801034c <UART_SetConfig+0x348>
 80102b4:	2302      	movs	r3, #2
 80102b6:	77fb      	strb	r3, [r7, #31]
 80102b8:	e048      	b.n	801034c <UART_SetConfig+0x348>
 80102ba:	2304      	movs	r3, #4
 80102bc:	77fb      	strb	r3, [r7, #31]
 80102be:	e045      	b.n	801034c <UART_SetConfig+0x348>
 80102c0:	2308      	movs	r3, #8
 80102c2:	77fb      	strb	r3, [r7, #31]
 80102c4:	e042      	b.n	801034c <UART_SetConfig+0x348>
 80102c6:	bf00      	nop
 80102c8:	efff69f3 	.word	0xefff69f3
 80102cc:	40011000 	.word	0x40011000
 80102d0:	40023800 	.word	0x40023800
 80102d4:	40004400 	.word	0x40004400
 80102d8:	40004800 	.word	0x40004800
 80102dc:	40004c00 	.word	0x40004c00
 80102e0:	40005000 	.word	0x40005000
 80102e4:	40011400 	.word	0x40011400
 80102e8:	40007800 	.word	0x40007800
 80102ec:	2310      	movs	r3, #16
 80102ee:	77fb      	strb	r3, [r7, #31]
 80102f0:	e02c      	b.n	801034c <UART_SetConfig+0x348>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a72      	ldr	r2, [pc, #456]	@ (80104c0 <UART_SetConfig+0x4bc>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d125      	bne.n	8010348 <UART_SetConfig+0x344>
 80102fc:	4b71      	ldr	r3, [pc, #452]	@ (80104c4 <UART_SetConfig+0x4c0>)
 80102fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010302:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010306:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801030a:	d017      	beq.n	801033c <UART_SetConfig+0x338>
 801030c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010310:	d817      	bhi.n	8010342 <UART_SetConfig+0x33e>
 8010312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010316:	d00b      	beq.n	8010330 <UART_SetConfig+0x32c>
 8010318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801031c:	d811      	bhi.n	8010342 <UART_SetConfig+0x33e>
 801031e:	2b00      	cmp	r3, #0
 8010320:	d003      	beq.n	801032a <UART_SetConfig+0x326>
 8010322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010326:	d006      	beq.n	8010336 <UART_SetConfig+0x332>
 8010328:	e00b      	b.n	8010342 <UART_SetConfig+0x33e>
 801032a:	2300      	movs	r3, #0
 801032c:	77fb      	strb	r3, [r7, #31]
 801032e:	e00d      	b.n	801034c <UART_SetConfig+0x348>
 8010330:	2302      	movs	r3, #2
 8010332:	77fb      	strb	r3, [r7, #31]
 8010334:	e00a      	b.n	801034c <UART_SetConfig+0x348>
 8010336:	2304      	movs	r3, #4
 8010338:	77fb      	strb	r3, [r7, #31]
 801033a:	e007      	b.n	801034c <UART_SetConfig+0x348>
 801033c:	2308      	movs	r3, #8
 801033e:	77fb      	strb	r3, [r7, #31]
 8010340:	e004      	b.n	801034c <UART_SetConfig+0x348>
 8010342:	2310      	movs	r3, #16
 8010344:	77fb      	strb	r3, [r7, #31]
 8010346:	e001      	b.n	801034c <UART_SetConfig+0x348>
 8010348:	2310      	movs	r3, #16
 801034a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	69db      	ldr	r3, [r3, #28]
 8010350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010354:	d15b      	bne.n	801040e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8010356:	7ffb      	ldrb	r3, [r7, #31]
 8010358:	2b08      	cmp	r3, #8
 801035a:	d828      	bhi.n	80103ae <UART_SetConfig+0x3aa>
 801035c:	a201      	add	r2, pc, #4	@ (adr r2, 8010364 <UART_SetConfig+0x360>)
 801035e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010362:	bf00      	nop
 8010364:	08010389 	.word	0x08010389
 8010368:	08010391 	.word	0x08010391
 801036c:	08010399 	.word	0x08010399
 8010370:	080103af 	.word	0x080103af
 8010374:	0801039f 	.word	0x0801039f
 8010378:	080103af 	.word	0x080103af
 801037c:	080103af 	.word	0x080103af
 8010380:	080103af 	.word	0x080103af
 8010384:	080103a7 	.word	0x080103a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010388:	f7fa fc28 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 801038c:	61b8      	str	r0, [r7, #24]
        break;
 801038e:	e013      	b.n	80103b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010390:	f7fa fc38 	bl	800ac04 <HAL_RCC_GetPCLK2Freq>
 8010394:	61b8      	str	r0, [r7, #24]
        break;
 8010396:	e00f      	b.n	80103b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010398:	4b4b      	ldr	r3, [pc, #300]	@ (80104c8 <UART_SetConfig+0x4c4>)
 801039a:	61bb      	str	r3, [r7, #24]
        break;
 801039c:	e00c      	b.n	80103b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801039e:	f7fa fb4b 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 80103a2:	61b8      	str	r0, [r7, #24]
        break;
 80103a4:	e008      	b.n	80103b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80103a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80103aa:	61bb      	str	r3, [r7, #24]
        break;
 80103ac:	e004      	b.n	80103b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80103ae:	2300      	movs	r3, #0
 80103b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80103b2:	2301      	movs	r3, #1
 80103b4:	77bb      	strb	r3, [r7, #30]
        break;
 80103b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d074      	beq.n	80104a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	005a      	lsls	r2, r3, #1
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	085b      	lsrs	r3, r3, #1
 80103c8:	441a      	add	r2, r3
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80103d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	2b0f      	cmp	r3, #15
 80103d8:	d916      	bls.n	8010408 <UART_SetConfig+0x404>
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103e0:	d212      	bcs.n	8010408 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	f023 030f 	bic.w	r3, r3, #15
 80103ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	085b      	lsrs	r3, r3, #1
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	f003 0307 	and.w	r3, r3, #7
 80103f6:	b29a      	uxth	r2, r3
 80103f8:	89fb      	ldrh	r3, [r7, #14]
 80103fa:	4313      	orrs	r3, r2
 80103fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	89fa      	ldrh	r2, [r7, #14]
 8010404:	60da      	str	r2, [r3, #12]
 8010406:	e04f      	b.n	80104a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010408:	2301      	movs	r3, #1
 801040a:	77bb      	strb	r3, [r7, #30]
 801040c:	e04c      	b.n	80104a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801040e:	7ffb      	ldrb	r3, [r7, #31]
 8010410:	2b08      	cmp	r3, #8
 8010412:	d828      	bhi.n	8010466 <UART_SetConfig+0x462>
 8010414:	a201      	add	r2, pc, #4	@ (adr r2, 801041c <UART_SetConfig+0x418>)
 8010416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801041a:	bf00      	nop
 801041c:	08010441 	.word	0x08010441
 8010420:	08010449 	.word	0x08010449
 8010424:	08010451 	.word	0x08010451
 8010428:	08010467 	.word	0x08010467
 801042c:	08010457 	.word	0x08010457
 8010430:	08010467 	.word	0x08010467
 8010434:	08010467 	.word	0x08010467
 8010438:	08010467 	.word	0x08010467
 801043c:	0801045f 	.word	0x0801045f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010440:	f7fa fbcc 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 8010444:	61b8      	str	r0, [r7, #24]
        break;
 8010446:	e013      	b.n	8010470 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010448:	f7fa fbdc 	bl	800ac04 <HAL_RCC_GetPCLK2Freq>
 801044c:	61b8      	str	r0, [r7, #24]
        break;
 801044e:	e00f      	b.n	8010470 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010450:	4b1d      	ldr	r3, [pc, #116]	@ (80104c8 <UART_SetConfig+0x4c4>)
 8010452:	61bb      	str	r3, [r7, #24]
        break;
 8010454:	e00c      	b.n	8010470 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010456:	f7fa faef 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 801045a:	61b8      	str	r0, [r7, #24]
        break;
 801045c:	e008      	b.n	8010470 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801045e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010462:	61bb      	str	r3, [r7, #24]
        break;
 8010464:	e004      	b.n	8010470 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010466:	2300      	movs	r3, #0
 8010468:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801046a:	2301      	movs	r3, #1
 801046c:	77bb      	strb	r3, [r7, #30]
        break;
 801046e:	bf00      	nop
    }

    if (pclk != 0U)
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d018      	beq.n	80104a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	085a      	lsrs	r2, r3, #1
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	441a      	add	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	fbb2 f3f3 	udiv	r3, r2, r3
 8010488:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	2b0f      	cmp	r3, #15
 801048e:	d909      	bls.n	80104a4 <UART_SetConfig+0x4a0>
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010496:	d205      	bcs.n	80104a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	b29a      	uxth	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	60da      	str	r2, [r3, #12]
 80104a2:	e001      	b.n	80104a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
 80104a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2200      	movs	r2, #0
 80104b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80104b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3720      	adds	r7, #32
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	40007c00 	.word	0x40007c00
 80104c4:	40023800 	.word	0x40023800
 80104c8:	00f42400 	.word	0x00f42400

080104cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104d8:	f003 0308 	and.w	r3, r3, #8
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d00a      	beq.n	80104f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	430a      	orrs	r2, r1
 80104f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104fa:	f003 0301 	and.w	r3, r3, #1
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00a      	beq.n	8010518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	430a      	orrs	r2, r1
 8010516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801051c:	f003 0302 	and.w	r3, r3, #2
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00a      	beq.n	801053a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	430a      	orrs	r2, r1
 8010538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801053e:	f003 0304 	and.w	r3, r3, #4
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00a      	beq.n	801055c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	430a      	orrs	r2, r1
 801055a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010560:	f003 0310 	and.w	r3, r3, #16
 8010564:	2b00      	cmp	r3, #0
 8010566:	d00a      	beq.n	801057e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	689b      	ldr	r3, [r3, #8]
 801056e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	430a      	orrs	r2, r1
 801057c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010582:	f003 0320 	and.w	r3, r3, #32
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00a      	beq.n	80105a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	430a      	orrs	r2, r1
 801059e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d01a      	beq.n	80105e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	430a      	orrs	r2, r1
 80105c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105ca:	d10a      	bne.n	80105e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	430a      	orrs	r2, r1
 80105e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00a      	beq.n	8010604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	430a      	orrs	r2, r1
 8010602:	605a      	str	r2, [r3, #4]
  }
}
 8010604:	bf00      	nop
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b08c      	sub	sp, #48	@ 0x30
 8010614:	af02      	add	r7, sp, #8
 8010616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010620:	f7f4 ff3c 	bl	800549c <HAL_GetTick>
 8010624:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	f003 0308 	and.w	r3, r3, #8
 8010630:	2b08      	cmp	r3, #8
 8010632:	d12e      	bne.n	8010692 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010634:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063c:	2200      	movs	r2, #0
 801063e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 f83b 	bl	80106be <UART_WaitOnFlagUntilTimeout>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d021      	beq.n	8010692 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	e853 3f00 	ldrex	r3, [r3]
 801065a:	60fb      	str	r3, [r7, #12]
   return(result);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010662:	623b      	str	r3, [r7, #32]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	461a      	mov	r2, r3
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	61fb      	str	r3, [r7, #28]
 801066e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010670:	69b9      	ldr	r1, [r7, #24]
 8010672:	69fa      	ldr	r2, [r7, #28]
 8010674:	e841 2300 	strex	r3, r2, [r1]
 8010678:	617b      	str	r3, [r7, #20]
   return(result);
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d1e6      	bne.n	801064e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2220      	movs	r2, #32
 8010684:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2200      	movs	r2, #0
 801068a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801068e:	2303      	movs	r3, #3
 8010690:	e011      	b.n	80106b6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2220      	movs	r2, #32
 8010696:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2220      	movs	r2, #32
 801069c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80106b4:	2300      	movs	r3, #0
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3728      	adds	r7, #40	@ 0x28
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80106be:	b580      	push	{r7, lr}
 80106c0:	b084      	sub	sp, #16
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	60f8      	str	r0, [r7, #12]
 80106c6:	60b9      	str	r1, [r7, #8]
 80106c8:	603b      	str	r3, [r7, #0]
 80106ca:	4613      	mov	r3, r2
 80106cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106ce:	e04f      	b.n	8010770 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d6:	d04b      	beq.n	8010770 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106d8:	f7f4 fee0 	bl	800549c <HAL_GetTick>
 80106dc:	4602      	mov	r2, r0
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	69ba      	ldr	r2, [r7, #24]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d302      	bcc.n	80106ee <UART_WaitOnFlagUntilTimeout+0x30>
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d101      	bne.n	80106f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80106ee:	2303      	movs	r3, #3
 80106f0:	e04e      	b.n	8010790 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f003 0304 	and.w	r3, r3, #4
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d037      	beq.n	8010770 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	2b80      	cmp	r3, #128	@ 0x80
 8010704:	d034      	beq.n	8010770 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2b40      	cmp	r3, #64	@ 0x40
 801070a:	d031      	beq.n	8010770 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	69db      	ldr	r3, [r3, #28]
 8010712:	f003 0308 	and.w	r3, r3, #8
 8010716:	2b08      	cmp	r3, #8
 8010718:	d110      	bne.n	801073c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2208      	movs	r2, #8
 8010720:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f000 f8fe 	bl	8010924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2208      	movs	r2, #8
 801072c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2200      	movs	r2, #0
 8010734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8010738:	2301      	movs	r3, #1
 801073a:	e029      	b.n	8010790 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	69db      	ldr	r3, [r3, #28]
 8010742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801074a:	d111      	bne.n	8010770 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010754:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f000 f8e4 	bl	8010924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2220      	movs	r2, #32
 8010760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2200      	movs	r2, #0
 8010768:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801076c:	2303      	movs	r3, #3
 801076e:	e00f      	b.n	8010790 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	69da      	ldr	r2, [r3, #28]
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	4013      	ands	r3, r2
 801077a:	68ba      	ldr	r2, [r7, #8]
 801077c:	429a      	cmp	r2, r3
 801077e:	bf0c      	ite	eq
 8010780:	2301      	moveq	r3, #1
 8010782:	2300      	movne	r3, #0
 8010784:	b2db      	uxtb	r3, r3
 8010786:	461a      	mov	r2, r3
 8010788:	79fb      	ldrb	r3, [r7, #7]
 801078a:	429a      	cmp	r2, r3
 801078c:	d0a0      	beq.n	80106d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b096      	sub	sp, #88	@ 0x58
 801079c:	af00      	add	r7, sp, #0
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	4613      	mov	r3, r2
 80107a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	88fa      	ldrh	r2, [r7, #6]
 80107b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2222      	movs	r2, #34	@ 0x22
 80107c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d028      	beq.n	801081e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107d0:	4a3e      	ldr	r2, [pc, #248]	@ (80108cc <UART_Start_Receive_DMA+0x134>)
 80107d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107d8:	4a3d      	ldr	r2, [pc, #244]	@ (80108d0 <UART_Start_Receive_DMA+0x138>)
 80107da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107e0:	4a3c      	ldr	r2, [pc, #240]	@ (80108d4 <UART_Start_Receive_DMA+0x13c>)
 80107e2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107e8:	2200      	movs	r2, #0
 80107ea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	3324      	adds	r3, #36	@ 0x24
 80107f6:	4619      	mov	r1, r3
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107fc:	461a      	mov	r2, r3
 80107fe:	88fb      	ldrh	r3, [r7, #6]
 8010800:	f7f5 fc6e 	bl	80060e0 <HAL_DMA_Start_IT>
 8010804:	4603      	mov	r3, r0
 8010806:	2b00      	cmp	r3, #0
 8010808:	d009      	beq.n	801081e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2210      	movs	r2, #16
 801080e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2220      	movs	r2, #32
 8010816:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 801081a:	2301      	movs	r3, #1
 801081c:	e051      	b.n	80108c2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	691b      	ldr	r3, [r3, #16]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d018      	beq.n	8010858 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801082e:	e853 3f00 	ldrex	r3, [r3]
 8010832:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801083a:	657b      	str	r3, [r7, #84]	@ 0x54
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	461a      	mov	r2, r3
 8010842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010844:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010846:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010848:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801084a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801084c:	e841 2300 	strex	r3, r2, [r1]
 8010850:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1e6      	bne.n	8010826 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	3308      	adds	r3, #8
 801085e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010862:	e853 3f00 	ldrex	r3, [r3]
 8010866:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801086a:	f043 0301 	orr.w	r3, r3, #1
 801086e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	3308      	adds	r3, #8
 8010876:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010878:	637a      	str	r2, [r7, #52]	@ 0x34
 801087a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801087e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010880:	e841 2300 	strex	r3, r2, [r1]
 8010884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1e5      	bne.n	8010858 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	3308      	adds	r3, #8
 8010892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	e853 3f00 	ldrex	r3, [r3]
 801089a:	613b      	str	r3, [r7, #16]
   return(result);
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	3308      	adds	r3, #8
 80108aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80108ac:	623a      	str	r2, [r7, #32]
 80108ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b0:	69f9      	ldr	r1, [r7, #28]
 80108b2:	6a3a      	ldr	r2, [r7, #32]
 80108b4:	e841 2300 	strex	r3, r2, [r1]
 80108b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1e5      	bne.n	801088c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80108c0:	2300      	movs	r3, #0
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3758      	adds	r7, #88	@ 0x58
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	080109ed 	.word	0x080109ed
 80108d0:	08010b4b 	.word	0x08010b4b
 80108d4:	08010bbd 	.word	0x08010bbd

080108d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80108d8:	b480      	push	{r7}
 80108da:	b089      	sub	sp, #36	@ 0x24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	e853 3f00 	ldrex	r3, [r3]
 80108ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80108f4:	61fb      	str	r3, [r7, #28]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	61bb      	str	r3, [r7, #24]
 8010900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010902:	6979      	ldr	r1, [r7, #20]
 8010904:	69ba      	ldr	r2, [r7, #24]
 8010906:	e841 2300 	strex	r3, r2, [r1]
 801090a:	613b      	str	r3, [r7, #16]
   return(result);
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d1e6      	bne.n	80108e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2220      	movs	r2, #32
 8010916:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010918:	bf00      	nop
 801091a:	3724      	adds	r7, #36	@ 0x24
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010924:	b480      	push	{r7}
 8010926:	b095      	sub	sp, #84	@ 0x54
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010934:	e853 3f00 	ldrex	r3, [r3]
 8010938:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	461a      	mov	r2, r3
 8010948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801094a:	643b      	str	r3, [r7, #64]	@ 0x40
 801094c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801094e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010952:	e841 2300 	strex	r3, r2, [r1]
 8010956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095a:	2b00      	cmp	r3, #0
 801095c:	d1e6      	bne.n	801092c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	3308      	adds	r3, #8
 8010964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010966:	6a3b      	ldr	r3, [r7, #32]
 8010968:	e853 3f00 	ldrex	r3, [r3]
 801096c:	61fb      	str	r3, [r7, #28]
   return(result);
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	f023 0301 	bic.w	r3, r3, #1
 8010974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	3308      	adds	r3, #8
 801097c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801097e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010980:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010986:	e841 2300 	strex	r3, r2, [r1]
 801098a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1e5      	bne.n	801095e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010996:	2b01      	cmp	r3, #1
 8010998:	d118      	bne.n	80109cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	e853 3f00 	ldrex	r3, [r3]
 80109a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	f023 0310 	bic.w	r3, r3, #16
 80109ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	461a      	mov	r2, r3
 80109b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109b8:	61bb      	str	r3, [r7, #24]
 80109ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109bc:	6979      	ldr	r1, [r7, #20]
 80109be:	69ba      	ldr	r2, [r7, #24]
 80109c0:	e841 2300 	strex	r3, r2, [r1]
 80109c4:	613b      	str	r3, [r7, #16]
   return(result);
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1e6      	bne.n	801099a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2220      	movs	r2, #32
 80109d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2200      	movs	r2, #0
 80109de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80109e0:	bf00      	nop
 80109e2:	3754      	adds	r7, #84	@ 0x54
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b09c      	sub	sp, #112	@ 0x70
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	69db      	ldr	r3, [r3, #28]
 80109fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a02:	d071      	beq.n	8010ae8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a06:	2200      	movs	r2, #0
 8010a08:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a14:	e853 3f00 	ldrex	r3, [r3]
 8010a18:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	461a      	mov	r2, r3
 8010a28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a2c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010a30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010a32:	e841 2300 	strex	r3, r2, [r1]
 8010a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1e6      	bne.n	8010a0c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	3308      	adds	r3, #8
 8010a44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a48:	e853 3f00 	ldrex	r3, [r3]
 8010a4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a50:	f023 0301 	bic.w	r3, r3, #1
 8010a54:	667b      	str	r3, [r7, #100]	@ 0x64
 8010a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	3308      	adds	r3, #8
 8010a5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010a5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8010a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010a64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010a66:	e841 2300 	strex	r3, r2, [r1]
 8010a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1e5      	bne.n	8010a3e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	3308      	adds	r3, #8
 8010a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a7a:	6a3b      	ldr	r3, [r7, #32]
 8010a7c:	e853 3f00 	ldrex	r3, [r3]
 8010a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	3308      	adds	r3, #8
 8010a90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a9a:	e841 2300 	strex	r3, r2, [r1]
 8010a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1e5      	bne.n	8010a72 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010aa8:	2220      	movs	r2, #32
 8010aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	d118      	bne.n	8010ae8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	e853 3f00 	ldrex	r3, [r3]
 8010ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	f023 0310 	bic.w	r3, r3, #16
 8010aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ad4:	61bb      	str	r3, [r7, #24]
 8010ad6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad8:	6979      	ldr	r1, [r7, #20]
 8010ada:	69ba      	ldr	r2, [r7, #24]
 8010adc:	e841 2300 	strex	r3, r2, [r1]
 8010ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1e6      	bne.n	8010ab6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010aea:	2200      	movs	r2, #0
 8010aec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d122      	bne.n	8010b3c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8010af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010af8:	2200      	movs	r2, #0
 8010afa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010b0e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d204      	bcs.n	8010b20 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b18:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010b1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	4619      	mov	r1, r3
 8010b34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010b36:	f7ff fa59 	bl	800ffec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010b3a:	e002      	b.n	8010b42 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8010b3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010b3e:	f7f4 fb01 	bl	8005144 <HAL_UART_RxCpltCallback>
}
 8010b42:	bf00      	nop
 8010b44:	3770      	adds	r7, #112	@ 0x70
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b084      	sub	sp, #16
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d123      	bne.n	8010bae <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010b6c:	085b      	lsrs	r3, r3, #1
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010b84:	897a      	ldrh	r2, [r7, #10]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d803      	bhi.n	8010b92 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	897a      	ldrh	r2, [r7, #10]
 8010b8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	68f8      	ldr	r0, [r7, #12]
 8010ba8:	f7ff fa20 	bl	800ffec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010bac:	e002      	b.n	8010bb4 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	f7f4 faec 	bl	800518c <HAL_UART_RxHalfCpltCallback>
}
 8010bb4:	bf00      	nop
 8010bb6:	3710      	adds	r7, #16
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b086      	sub	sp, #24
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010be2:	2b80      	cmp	r3, #128	@ 0x80
 8010be4:	d109      	bne.n	8010bfa <UART_DMAError+0x3e>
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	2b21      	cmp	r3, #33	@ 0x21
 8010bea:	d106      	bne.n	8010bfa <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8010bf4:	6978      	ldr	r0, [r7, #20]
 8010bf6:	f7ff fe6f 	bl	80108d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c04:	2b40      	cmp	r3, #64	@ 0x40
 8010c06:	d109      	bne.n	8010c1c <UART_DMAError+0x60>
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2b22      	cmp	r3, #34	@ 0x22
 8010c0c:	d106      	bne.n	8010c1c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8010c16:	6978      	ldr	r0, [r7, #20]
 8010c18:	f7ff fe84 	bl	8010924 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010c22:	f043 0210 	orr.w	r2, r3, #16
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c2c:	6978      	ldr	r0, [r7, #20]
 8010c2e:	f7f4 fac3 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c32:	bf00      	nop
 8010c34:	3718      	adds	r7, #24
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}

08010c3a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010c3a:	b580      	push	{r7, lr}
 8010c3c:	b084      	sub	sp, #16
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f7f4 fab1 	bl	80051b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c56:	bf00      	nop
 8010c58:	3710      	adds	r7, #16
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b088      	sub	sp, #32
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	e853 3f00 	ldrex	r3, [r3]
 8010c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c7a:	61fb      	str	r3, [r7, #28]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	461a      	mov	r2, r3
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	61bb      	str	r3, [r7, #24]
 8010c86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c88:	6979      	ldr	r1, [r7, #20]
 8010c8a:	69ba      	ldr	r2, [r7, #24]
 8010c8c:	e841 2300 	strex	r3, r2, [r1]
 8010c90:	613b      	str	r3, [r7, #16]
   return(result);
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1e6      	bne.n	8010c66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2220      	movs	r2, #32
 8010c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f7ff f997 	bl	800ffd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010caa:	bf00      	nop
 8010cac:	3720      	adds	r7, #32
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
	...

08010cb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d121      	bne.n	8010d0a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	4b27      	ldr	r3, [pc, #156]	@ (8010d68 <FMC_SDRAM_Init+0xb4>)
 8010ccc:	4013      	ands	r3, r2
 8010cce:	683a      	ldr	r2, [r7, #0]
 8010cd0:	6851      	ldr	r1, [r2, #4]
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	6892      	ldr	r2, [r2, #8]
 8010cd6:	4311      	orrs	r1, r2
 8010cd8:	683a      	ldr	r2, [r7, #0]
 8010cda:	68d2      	ldr	r2, [r2, #12]
 8010cdc:	4311      	orrs	r1, r2
 8010cde:	683a      	ldr	r2, [r7, #0]
 8010ce0:	6912      	ldr	r2, [r2, #16]
 8010ce2:	4311      	orrs	r1, r2
 8010ce4:	683a      	ldr	r2, [r7, #0]
 8010ce6:	6952      	ldr	r2, [r2, #20]
 8010ce8:	4311      	orrs	r1, r2
 8010cea:	683a      	ldr	r2, [r7, #0]
 8010cec:	6992      	ldr	r2, [r2, #24]
 8010cee:	4311      	orrs	r1, r2
 8010cf0:	683a      	ldr	r2, [r7, #0]
 8010cf2:	69d2      	ldr	r2, [r2, #28]
 8010cf4:	4311      	orrs	r1, r2
 8010cf6:	683a      	ldr	r2, [r7, #0]
 8010cf8:	6a12      	ldr	r2, [r2, #32]
 8010cfa:	4311      	orrs	r1, r2
 8010cfc:	683a      	ldr	r2, [r7, #0]
 8010cfe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010d00:	430a      	orrs	r2, r1
 8010d02:	431a      	orrs	r2, r3
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	601a      	str	r2, [r3, #0]
 8010d08:	e026      	b.n	8010d58 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	69d9      	ldr	r1, [r3, #28]
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	6a1b      	ldr	r3, [r3, #32]
 8010d1a:	4319      	orrs	r1, r3
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d20:	430b      	orrs	r3, r1
 8010d22:	431a      	orrs	r2, r3
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	685a      	ldr	r2, [r3, #4]
 8010d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8010d68 <FMC_SDRAM_Init+0xb4>)
 8010d2e:	4013      	ands	r3, r2
 8010d30:	683a      	ldr	r2, [r7, #0]
 8010d32:	6851      	ldr	r1, [r2, #4]
 8010d34:	683a      	ldr	r2, [r7, #0]
 8010d36:	6892      	ldr	r2, [r2, #8]
 8010d38:	4311      	orrs	r1, r2
 8010d3a:	683a      	ldr	r2, [r7, #0]
 8010d3c:	68d2      	ldr	r2, [r2, #12]
 8010d3e:	4311      	orrs	r1, r2
 8010d40:	683a      	ldr	r2, [r7, #0]
 8010d42:	6912      	ldr	r2, [r2, #16]
 8010d44:	4311      	orrs	r1, r2
 8010d46:	683a      	ldr	r2, [r7, #0]
 8010d48:	6952      	ldr	r2, [r2, #20]
 8010d4a:	4311      	orrs	r1, r2
 8010d4c:	683a      	ldr	r2, [r7, #0]
 8010d4e:	6992      	ldr	r2, [r2, #24]
 8010d50:	430a      	orrs	r2, r1
 8010d52:	431a      	orrs	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010d58:	2300      	movs	r3, #0
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	370c      	adds	r7, #12
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	ffff8000 	.word	0xffff8000

08010d6c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d128      	bne.n	8010dd0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	1e59      	subs	r1, r3, #1
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	3b01      	subs	r3, #1
 8010d92:	011b      	lsls	r3, r3, #4
 8010d94:	4319      	orrs	r1, r3
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	3b01      	subs	r3, #1
 8010d9c:	021b      	lsls	r3, r3, #8
 8010d9e:	4319      	orrs	r1, r3
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	3b01      	subs	r3, #1
 8010da6:	031b      	lsls	r3, r3, #12
 8010da8:	4319      	orrs	r1, r3
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	691b      	ldr	r3, [r3, #16]
 8010dae:	3b01      	subs	r3, #1
 8010db0:	041b      	lsls	r3, r3, #16
 8010db2:	4319      	orrs	r1, r3
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	695b      	ldr	r3, [r3, #20]
 8010db8:	3b01      	subs	r3, #1
 8010dba:	051b      	lsls	r3, r3, #20
 8010dbc:	4319      	orrs	r1, r3
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	699b      	ldr	r3, [r3, #24]
 8010dc2:	3b01      	subs	r3, #1
 8010dc4:	061b      	lsls	r3, r3, #24
 8010dc6:	430b      	orrs	r3, r1
 8010dc8:	431a      	orrs	r2, r3
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	609a      	str	r2, [r3, #8]
 8010dce:	e02d      	b.n	8010e2c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	689a      	ldr	r2, [r3, #8]
 8010dd4:	4b19      	ldr	r3, [pc, #100]	@ (8010e3c <FMC_SDRAM_Timing_Init+0xd0>)
 8010dd6:	4013      	ands	r3, r2
 8010dd8:	68ba      	ldr	r2, [r7, #8]
 8010dda:	68d2      	ldr	r2, [r2, #12]
 8010ddc:	3a01      	subs	r2, #1
 8010dde:	0311      	lsls	r1, r2, #12
 8010de0:	68ba      	ldr	r2, [r7, #8]
 8010de2:	6952      	ldr	r2, [r2, #20]
 8010de4:	3a01      	subs	r2, #1
 8010de6:	0512      	lsls	r2, r2, #20
 8010de8:	430a      	orrs	r2, r1
 8010dea:	431a      	orrs	r2, r3
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	1e59      	subs	r1, r3, #1
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	3b01      	subs	r3, #1
 8010e04:	011b      	lsls	r3, r3, #4
 8010e06:	4319      	orrs	r1, r3
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	689b      	ldr	r3, [r3, #8]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	021b      	lsls	r3, r3, #8
 8010e10:	4319      	orrs	r1, r3
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	691b      	ldr	r3, [r3, #16]
 8010e16:	3b01      	subs	r3, #1
 8010e18:	041b      	lsls	r3, r3, #16
 8010e1a:	4319      	orrs	r1, r3
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	699b      	ldr	r3, [r3, #24]
 8010e20:	3b01      	subs	r3, #1
 8010e22:	061b      	lsls	r3, r3, #24
 8010e24:	430b      	orrs	r3, r1
 8010e26:	431a      	orrs	r2, r3
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010e2c:	2300      	movs	r3, #0
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3714      	adds	r7, #20
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	ff0f0fff 	.word	0xff0f0fff

08010e40 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010e40:	b084      	sub	sp, #16
 8010e42:	b480      	push	{r7}
 8010e44:	b085      	sub	sp, #20
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
 8010e4a:	f107 001c 	add.w	r0, r7, #28
 8010e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010e52:	2300      	movs	r3, #0
 8010e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010e56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010e58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010e5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8010e5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8010e62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8010e66:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8010e6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	685a      	ldr	r2, [r3, #4]
 8010e76:	4b07      	ldr	r3, [pc, #28]	@ (8010e94 <SDMMC_Init+0x54>)
 8010e78:	4013      	ands	r3, r2
 8010e7a:	68fa      	ldr	r2, [r7, #12]
 8010e7c:	431a      	orrs	r2, r3
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010e82:	2300      	movs	r3, #0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3714      	adds	r7, #20
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	b004      	add	sp, #16
 8010e90:	4770      	bx	lr
 8010e92:	bf00      	nop
 8010e94:	ffff8100 	.word	0xffff8100

08010e98 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010eb2:	b480      	push	{r7}
 8010eb4:	b083      	sub	sp, #12
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
 8010eba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010ec6:	2300      	movs	r3, #0
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	370c      	adds	r7, #12
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010ed4:	b480      	push	{r7}
 8010ed6:	b083      	sub	sp, #12
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2203      	movs	r2, #3
 8010ee0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010ee2:	2300      	movs	r3, #0
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f003 0303 	and.w	r3, r3, #3
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010f30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010f36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68da      	ldr	r2, [r3, #12]
 8010f42:	4b06      	ldr	r3, [pc, #24]	@ (8010f5c <SDMMC_SendCommand+0x50>)
 8010f44:	4013      	ands	r3, r2
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	431a      	orrs	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3714      	adds	r7, #20
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr
 8010f5c:	fffff000 	.word	0xfffff000

08010f60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	b2db      	uxtb	r3, r3
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	370c      	adds	r7, #12
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr

08010f7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010f7a:	b480      	push	{r7}
 8010f7c:	b085      	sub	sp, #20
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
 8010f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	3314      	adds	r3, #20
 8010f88:	461a      	mov	r2, r3
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
}  
 8010f94:	4618      	mov	r0, r3
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	685a      	ldr	r2, [r3, #4]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fc6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010fcc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010fd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fde:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	431a      	orrs	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010fea:	2300      	movs	r3, #0

}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3714      	adds	r7, #20
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b088      	sub	sp, #32
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011006:	2310      	movs	r3, #16
 8011008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801100a:	2340      	movs	r3, #64	@ 0x40
 801100c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801100e:	2300      	movs	r3, #0
 8011010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011018:	f107 0308 	add.w	r3, r7, #8
 801101c:	4619      	mov	r1, r3
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7ff ff74 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011028:	2110      	movs	r1, #16
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 fa1a 	bl	8011464 <SDMMC_GetCmdResp1>
 8011030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011032:	69fb      	ldr	r3, [r7, #28]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3720      	adds	r7, #32
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b088      	sub	sp, #32
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801104a:	2311      	movs	r3, #17
 801104c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801104e:	2340      	movs	r3, #64	@ 0x40
 8011050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011052:	2300      	movs	r3, #0
 8011054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801105a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801105c:	f107 0308 	add.w	r3, r7, #8
 8011060:	4619      	mov	r1, r3
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7ff ff52 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011068:	f241 3288 	movw	r2, #5000	@ 0x1388
 801106c:	2111      	movs	r1, #17
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 f9f8 	bl	8011464 <SDMMC_GetCmdResp1>
 8011074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011076:	69fb      	ldr	r3, [r7, #28]
}
 8011078:	4618      	mov	r0, r3
 801107a:	3720      	adds	r7, #32
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b088      	sub	sp, #32
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801108e:	2312      	movs	r3, #18
 8011090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011092:	2340      	movs	r3, #64	@ 0x40
 8011094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011096:	2300      	movs	r3, #0
 8011098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801109a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801109e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110a0:	f107 0308 	add.w	r3, r7, #8
 80110a4:	4619      	mov	r1, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7ff ff30 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80110ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110b0:	2112      	movs	r1, #18
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 f9d6 	bl	8011464 <SDMMC_GetCmdResp1>
 80110b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110ba:	69fb      	ldr	r3, [r7, #28]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3720      	adds	r7, #32
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b088      	sub	sp, #32
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80110d2:	2318      	movs	r3, #24
 80110d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110d6:	2340      	movs	r3, #64	@ 0x40
 80110d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110da:	2300      	movs	r3, #0
 80110dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110e4:	f107 0308 	add.w	r3, r7, #8
 80110e8:	4619      	mov	r1, r3
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f7ff ff0e 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80110f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110f4:	2118      	movs	r1, #24
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 f9b4 	bl	8011464 <SDMMC_GetCmdResp1>
 80110fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110fe:	69fb      	ldr	r3, [r7, #28]
}
 8011100:	4618      	mov	r0, r3
 8011102:	3720      	adds	r7, #32
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b088      	sub	sp, #32
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011116:	2319      	movs	r3, #25
 8011118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801111a:	2340      	movs	r3, #64	@ 0x40
 801111c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801111e:	2300      	movs	r3, #0
 8011120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011128:	f107 0308 	add.w	r3, r7, #8
 801112c:	4619      	mov	r1, r3
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7ff feec 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011138:	2119      	movs	r1, #25
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 f992 	bl	8011464 <SDMMC_GetCmdResp1>
 8011140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011142:	69fb      	ldr	r3, [r7, #28]
}
 8011144:	4618      	mov	r0, r3
 8011146:	3720      	adds	r7, #32
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b088      	sub	sp, #32
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011154:	2300      	movs	r3, #0
 8011156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011158:	230c      	movs	r3, #12
 801115a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801115c:	2340      	movs	r3, #64	@ 0x40
 801115e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011160:	2300      	movs	r3, #0
 8011162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801116a:	f107 0308 	add.w	r3, r7, #8
 801116e:	4619      	mov	r1, r3
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7ff fecb 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011176:	4a05      	ldr	r2, [pc, #20]	@ (801118c <SDMMC_CmdStopTransfer+0x40>)
 8011178:	210c      	movs	r1, #12
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f000 f972 	bl	8011464 <SDMMC_GetCmdResp1>
 8011180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011182:	69fb      	ldr	r3, [r7, #28]
}
 8011184:	4618      	mov	r0, r3
 8011186:	3720      	adds	r7, #32
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}
 801118c:	05f5e100 	.word	0x05f5e100

08011190 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b08a      	sub	sp, #40	@ 0x28
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80111a0:	2307      	movs	r3, #7
 80111a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111a4:	2340      	movs	r3, #64	@ 0x40
 80111a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111a8:	2300      	movs	r3, #0
 80111aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111b0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111b2:	f107 0310 	add.w	r3, r7, #16
 80111b6:	4619      	mov	r1, r3
 80111b8:	68f8      	ldr	r0, [r7, #12]
 80111ba:	f7ff fea7 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80111be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111c2:	2107      	movs	r1, #7
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f000 f94d 	bl	8011464 <SDMMC_GetCmdResp1>
 80111ca:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80111cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3728      	adds	r7, #40	@ 0x28
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b088      	sub	sp, #32
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80111de:	2300      	movs	r3, #0
 80111e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80111e2:	2300      	movs	r3, #0
 80111e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80111e6:	2300      	movs	r3, #0
 80111e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111ea:	2300      	movs	r3, #0
 80111ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111f4:	f107 0308 	add.w	r3, r7, #8
 80111f8:	4619      	mov	r1, r3
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7ff fe86 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fb67 	bl	80118d4 <SDMMC_GetCmdError>
 8011206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011208:	69fb      	ldr	r3, [r7, #28]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3720      	adds	r7, #32
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b088      	sub	sp, #32
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801121a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801121e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011220:	2308      	movs	r3, #8
 8011222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011224:	2340      	movs	r3, #64	@ 0x40
 8011226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011228:	2300      	movs	r3, #0
 801122a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801122c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011230:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011232:	f107 0308 	add.w	r3, r7, #8
 8011236:	4619      	mov	r1, r3
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f7ff fe67 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fafa 	bl	8011838 <SDMMC_GetCmdResp7>
 8011244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011246:	69fb      	ldr	r3, [r7, #28]
}
 8011248:	4618      	mov	r0, r3
 801124a:	3720      	adds	r7, #32
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}

08011250 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b088      	sub	sp, #32
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801125e:	2337      	movs	r3, #55	@ 0x37
 8011260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011262:	2340      	movs	r3, #64	@ 0x40
 8011264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011266:	2300      	movs	r3, #0
 8011268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801126a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801126e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011270:	f107 0308 	add.w	r3, r7, #8
 8011274:	4619      	mov	r1, r3
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7ff fe48 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801127c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011280:	2137      	movs	r1, #55	@ 0x37
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f000 f8ee 	bl	8011464 <SDMMC_GetCmdResp1>
 8011288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801128a:	69fb      	ldr	r3, [r7, #28]
}
 801128c:	4618      	mov	r0, r3
 801128e:	3720      	adds	r7, #32
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b088      	sub	sp, #32
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801129e:	683a      	ldr	r2, [r7, #0]
 80112a0:	4b0d      	ldr	r3, [pc, #52]	@ (80112d8 <SDMMC_CmdAppOperCommand+0x44>)
 80112a2:	4313      	orrs	r3, r2
 80112a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80112a6:	2329      	movs	r3, #41	@ 0x29
 80112a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112aa:	2340      	movs	r3, #64	@ 0x40
 80112ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112ae:	2300      	movs	r3, #0
 80112b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80112b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112b8:	f107 0308 	add.w	r3, r7, #8
 80112bc:	4619      	mov	r1, r3
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7ff fe24 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fa03 	bl	80116d0 <SDMMC_GetCmdResp3>
 80112ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112cc:	69fb      	ldr	r3, [r7, #28]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3720      	adds	r7, #32
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	80100000 	.word	0x80100000

080112dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b088      	sub	sp, #32
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80112ea:	2306      	movs	r3, #6
 80112ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112ee:	2340      	movs	r3, #64	@ 0x40
 80112f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112f2:	2300      	movs	r3, #0
 80112f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80112fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112fc:	f107 0308 	add.w	r3, r7, #8
 8011300:	4619      	mov	r1, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7ff fe02 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011308:	f241 3288 	movw	r2, #5000	@ 0x1388
 801130c:	2106      	movs	r1, #6
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f000 f8a8 	bl	8011464 <SDMMC_GetCmdResp1>
 8011314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011316:	69fb      	ldr	r3, [r7, #28]
}
 8011318:	4618      	mov	r0, r3
 801131a:	3720      	adds	r7, #32
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b088      	sub	sp, #32
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011328:	2300      	movs	r3, #0
 801132a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801132c:	2333      	movs	r3, #51	@ 0x33
 801132e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011330:	2340      	movs	r3, #64	@ 0x40
 8011332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011334:	2300      	movs	r3, #0
 8011336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801133c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801133e:	f107 0308 	add.w	r3, r7, #8
 8011342:	4619      	mov	r1, r3
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f7ff fde1 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801134a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801134e:	2133      	movs	r1, #51	@ 0x33
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 f887 	bl	8011464 <SDMMC_GetCmdResp1>
 8011356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011358:	69fb      	ldr	r3, [r7, #28]
}
 801135a:	4618      	mov	r0, r3
 801135c:	3720      	adds	r7, #32
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011362:	b580      	push	{r7, lr}
 8011364:	b088      	sub	sp, #32
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801136a:	2300      	movs	r3, #0
 801136c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801136e:	2302      	movs	r3, #2
 8011370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011372:	23c0      	movs	r3, #192	@ 0xc0
 8011374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011376:	2300      	movs	r3, #0
 8011378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801137a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801137e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011380:	f107 0308 	add.w	r3, r7, #8
 8011384:	4619      	mov	r1, r3
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ff fdc0 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 f957 	bl	8011640 <SDMMC_GetCmdResp2>
 8011392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011394:	69fb      	ldr	r3, [r7, #28]
}
 8011396:	4618      	mov	r0, r3
 8011398:	3720      	adds	r7, #32
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801139e:	b580      	push	{r7, lr}
 80113a0:	b088      	sub	sp, #32
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
 80113a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80113ac:	2309      	movs	r3, #9
 80113ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80113b0:	23c0      	movs	r3, #192	@ 0xc0
 80113b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113b4:	2300      	movs	r3, #0
 80113b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113be:	f107 0308 	add.w	r3, r7, #8
 80113c2:	4619      	mov	r1, r3
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7ff fda1 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f000 f938 	bl	8011640 <SDMMC_GetCmdResp2>
 80113d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113d2:	69fb      	ldr	r3, [r7, #28]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3720      	adds	r7, #32
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b088      	sub	sp, #32
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80113e6:	2300      	movs	r3, #0
 80113e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80113ea:	2303      	movs	r3, #3
 80113ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113ee:	2340      	movs	r3, #64	@ 0x40
 80113f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113f2:	2300      	movs	r3, #0
 80113f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113fc:	f107 0308 	add.w	r3, r7, #8
 8011400:	4619      	mov	r1, r3
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f7ff fd82 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	2103      	movs	r1, #3
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 f99d 	bl	801174c <SDMMC_GetCmdResp6>
 8011412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011414:	69fb      	ldr	r3, [r7, #28]
}
 8011416:	4618      	mov	r0, r3
 8011418:	3720      	adds	r7, #32
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b088      	sub	sp, #32
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
 8011426:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801142c:	230d      	movs	r3, #13
 801142e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011430:	2340      	movs	r3, #64	@ 0x40
 8011432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011434:	2300      	movs	r3, #0
 8011436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801143c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801143e:	f107 0308 	add.w	r3, r7, #8
 8011442:	4619      	mov	r1, r3
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7ff fd61 	bl	8010f0c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801144a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801144e:	210d      	movs	r1, #13
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f000 f807 	bl	8011464 <SDMMC_GetCmdResp1>
 8011456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011458:	69fb      	ldr	r3, [r7, #28]
}
 801145a:	4618      	mov	r0, r3
 801145c:	3720      	adds	r7, #32
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
	...

08011464 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b088      	sub	sp, #32
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	460b      	mov	r3, r1
 801146e:	607a      	str	r2, [r7, #4]
 8011470:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011472:	4b70      	ldr	r3, [pc, #448]	@ (8011634 <SDMMC_GetCmdResp1+0x1d0>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	4a70      	ldr	r2, [pc, #448]	@ (8011638 <SDMMC_GetCmdResp1+0x1d4>)
 8011478:	fba2 2303 	umull	r2, r3, r2, r3
 801147c:	0a5a      	lsrs	r2, r3, #9
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	fb02 f303 	mul.w	r3, r2, r3
 8011484:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	1e5a      	subs	r2, r3, #1
 801148a:	61fa      	str	r2, [r7, #28]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d102      	bne.n	8011496 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011490:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011494:	e0c9      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801149a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801149c:	69bb      	ldr	r3, [r7, #24]
 801149e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d0ef      	beq.n	8011486 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d1ea      	bne.n	8011486 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114b4:	f003 0304 	and.w	r3, r3, #4
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d004      	beq.n	80114c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2204      	movs	r2, #4
 80114c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114c2:	2304      	movs	r3, #4
 80114c4:	e0b1      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114ca:	f003 0301 	and.w	r3, r3, #1
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d004      	beq.n	80114dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2201      	movs	r2, #1
 80114d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114d8:	2301      	movs	r3, #1
 80114da:	e0a6      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	22c5      	movs	r2, #197	@ 0xc5
 80114e0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f7ff fd3c 	bl	8010f60 <SDMMC_GetCommandResponse>
 80114e8:	4603      	mov	r3, r0
 80114ea:	461a      	mov	r2, r3
 80114ec:	7afb      	ldrb	r3, [r7, #11]
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d001      	beq.n	80114f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114f2:	2301      	movs	r3, #1
 80114f4:	e099      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80114f6:	2100      	movs	r1, #0
 80114f8:	68f8      	ldr	r0, [r7, #12]
 80114fa:	f7ff fd3e 	bl	8010f7a <SDMMC_GetResponse>
 80114fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011500:	697a      	ldr	r2, [r7, #20]
 8011502:	4b4e      	ldr	r3, [pc, #312]	@ (801163c <SDMMC_GetCmdResp1+0x1d8>)
 8011504:	4013      	ands	r3, r2
 8011506:	2b00      	cmp	r3, #0
 8011508:	d101      	bne.n	801150e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801150a:	2300      	movs	r3, #0
 801150c:	e08d      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	2b00      	cmp	r3, #0
 8011512:	da02      	bge.n	801151a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011514:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011518:	e087      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011520:	2b00      	cmp	r3, #0
 8011522:	d001      	beq.n	8011528 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011524:	2340      	movs	r3, #64	@ 0x40
 8011526:	e080      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801152e:	2b00      	cmp	r3, #0
 8011530:	d001      	beq.n	8011536 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011532:	2380      	movs	r3, #128	@ 0x80
 8011534:	e079      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801153c:	2b00      	cmp	r3, #0
 801153e:	d002      	beq.n	8011546 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011544:	e071      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801154c:	2b00      	cmp	r3, #0
 801154e:	d002      	beq.n	8011556 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011554:	e069      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801155c:	2b00      	cmp	r3, #0
 801155e:	d002      	beq.n	8011566 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011564:	e061      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801156c:	2b00      	cmp	r3, #0
 801156e:	d002      	beq.n	8011576 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011570:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011574:	e059      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801157c:	2b00      	cmp	r3, #0
 801157e:	d002      	beq.n	8011586 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011584:	e051      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801158c:	2b00      	cmp	r3, #0
 801158e:	d002      	beq.n	8011596 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011594:	e049      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801159c:	2b00      	cmp	r3, #0
 801159e:	d002      	beq.n	80115a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80115a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80115a4:	e041      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d002      	beq.n	80115b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80115b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80115b4:	e039      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d002      	beq.n	80115c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80115c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80115c4:	e031      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d002      	beq.n	80115d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80115d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80115d4:	e029      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80115e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80115e4:	e021      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d002      	beq.n	80115f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80115f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80115f4:	e019      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d002      	beq.n	8011606 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011600:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011604:	e011      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801160c:	2b00      	cmp	r3, #0
 801160e:	d002      	beq.n	8011616 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011610:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011614:	e009      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	f003 0308 	and.w	r3, r3, #8
 801161c:	2b00      	cmp	r3, #0
 801161e:	d002      	beq.n	8011626 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011620:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011624:	e001      	b.n	801162a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011626:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801162a:	4618      	mov	r0, r3
 801162c:	3720      	adds	r7, #32
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	2000001c 	.word	0x2000001c
 8011638:	10624dd3 	.word	0x10624dd3
 801163c:	fdffe008 	.word	0xfdffe008

08011640 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011640:	b480      	push	{r7}
 8011642:	b085      	sub	sp, #20
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011648:	4b1f      	ldr	r3, [pc, #124]	@ (80116c8 <SDMMC_GetCmdResp2+0x88>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	4a1f      	ldr	r2, [pc, #124]	@ (80116cc <SDMMC_GetCmdResp2+0x8c>)
 801164e:	fba2 2303 	umull	r2, r3, r2, r3
 8011652:	0a5b      	lsrs	r3, r3, #9
 8011654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011658:	fb02 f303 	mul.w	r3, r2, r3
 801165c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	1e5a      	subs	r2, r3, #1
 8011662:	60fa      	str	r2, [r7, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d102      	bne.n	801166e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011668:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801166c:	e026      	b.n	80116bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011672:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801167a:	2b00      	cmp	r3, #0
 801167c:	d0ef      	beq.n	801165e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011684:	2b00      	cmp	r3, #0
 8011686:	d1ea      	bne.n	801165e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801168c:	f003 0304 	and.w	r3, r3, #4
 8011690:	2b00      	cmp	r3, #0
 8011692:	d004      	beq.n	801169e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2204      	movs	r2, #4
 8011698:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801169a:	2304      	movs	r3, #4
 801169c:	e00e      	b.n	80116bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116a2:	f003 0301 	and.w	r3, r3, #1
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d004      	beq.n	80116b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2201      	movs	r2, #1
 80116ae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80116b0:	2301      	movs	r3, #1
 80116b2:	e003      	b.n	80116bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	22c5      	movs	r2, #197	@ 0xc5
 80116b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	2000001c 	.word	0x2000001c
 80116cc:	10624dd3 	.word	0x10624dd3

080116d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116d8:	4b1a      	ldr	r3, [pc, #104]	@ (8011744 <SDMMC_GetCmdResp3+0x74>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	4a1a      	ldr	r2, [pc, #104]	@ (8011748 <SDMMC_GetCmdResp3+0x78>)
 80116de:	fba2 2303 	umull	r2, r3, r2, r3
 80116e2:	0a5b      	lsrs	r3, r3, #9
 80116e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80116e8:	fb02 f303 	mul.w	r3, r2, r3
 80116ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	1e5a      	subs	r2, r3, #1
 80116f2:	60fa      	str	r2, [r7, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d102      	bne.n	80116fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80116fc:	e01b      	b.n	8011736 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011702:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801170a:	2b00      	cmp	r3, #0
 801170c:	d0ef      	beq.n	80116ee <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011714:	2b00      	cmp	r3, #0
 8011716:	d1ea      	bne.n	80116ee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801171c:	f003 0304 	and.w	r3, r3, #4
 8011720:	2b00      	cmp	r3, #0
 8011722:	d004      	beq.n	801172e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2204      	movs	r2, #4
 8011728:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801172a:	2304      	movs	r3, #4
 801172c:	e003      	b.n	8011736 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	22c5      	movs	r2, #197	@ 0xc5
 8011732:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3714      	adds	r7, #20
 801173a:	46bd      	mov	sp, r7
 801173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011740:	4770      	bx	lr
 8011742:	bf00      	nop
 8011744:	2000001c 	.word	0x2000001c
 8011748:	10624dd3 	.word	0x10624dd3

0801174c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b088      	sub	sp, #32
 8011750:	af00      	add	r7, sp, #0
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	460b      	mov	r3, r1
 8011756:	607a      	str	r2, [r7, #4]
 8011758:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801175a:	4b35      	ldr	r3, [pc, #212]	@ (8011830 <SDMMC_GetCmdResp6+0xe4>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	4a35      	ldr	r2, [pc, #212]	@ (8011834 <SDMMC_GetCmdResp6+0xe8>)
 8011760:	fba2 2303 	umull	r2, r3, r2, r3
 8011764:	0a5b      	lsrs	r3, r3, #9
 8011766:	f241 3288 	movw	r2, #5000	@ 0x1388
 801176a:	fb02 f303 	mul.w	r3, r2, r3
 801176e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011770:	69fb      	ldr	r3, [r7, #28]
 8011772:	1e5a      	subs	r2, r3, #1
 8011774:	61fa      	str	r2, [r7, #28]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d102      	bne.n	8011780 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801177a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801177e:	e052      	b.n	8011826 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011784:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801178c:	2b00      	cmp	r3, #0
 801178e:	d0ef      	beq.n	8011770 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011796:	2b00      	cmp	r3, #0
 8011798:	d1ea      	bne.n	8011770 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801179e:	f003 0304 	and.w	r3, r3, #4
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d004      	beq.n	80117b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2204      	movs	r2, #4
 80117aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80117ac:	2304      	movs	r3, #4
 80117ae:	e03a      	b.n	8011826 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117b4:	f003 0301 	and.w	r3, r3, #1
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d004      	beq.n	80117c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2201      	movs	r2, #1
 80117c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117c2:	2301      	movs	r3, #1
 80117c4:	e02f      	b.n	8011826 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	f7ff fbca 	bl	8010f60 <SDMMC_GetCommandResponse>
 80117cc:	4603      	mov	r3, r0
 80117ce:	461a      	mov	r2, r3
 80117d0:	7afb      	ldrb	r3, [r7, #11]
 80117d2:	4293      	cmp	r3, r2
 80117d4:	d001      	beq.n	80117da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117d6:	2301      	movs	r3, #1
 80117d8:	e025      	b.n	8011826 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	22c5      	movs	r2, #197	@ 0xc5
 80117de:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80117e0:	2100      	movs	r1, #0
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f7ff fbc9 	bl	8010f7a <SDMMC_GetResponse>
 80117e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d106      	bne.n	8011802 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	0c1b      	lsrs	r3, r3, #16
 80117f8:	b29a      	uxth	r2, r3
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80117fe:	2300      	movs	r3, #0
 8011800:	e011      	b.n	8011826 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011808:	2b00      	cmp	r3, #0
 801180a:	d002      	beq.n	8011812 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801180c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011810:	e009      	b.n	8011826 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011818:	2b00      	cmp	r3, #0
 801181a:	d002      	beq.n	8011822 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801181c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011820:	e001      	b.n	8011826 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011826:	4618      	mov	r0, r3
 8011828:	3720      	adds	r7, #32
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	2000001c 	.word	0x2000001c
 8011834:	10624dd3 	.word	0x10624dd3

08011838 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011838:	b480      	push	{r7}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011840:	4b22      	ldr	r3, [pc, #136]	@ (80118cc <SDMMC_GetCmdResp7+0x94>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4a22      	ldr	r2, [pc, #136]	@ (80118d0 <SDMMC_GetCmdResp7+0x98>)
 8011846:	fba2 2303 	umull	r2, r3, r2, r3
 801184a:	0a5b      	lsrs	r3, r3, #9
 801184c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011850:	fb02 f303 	mul.w	r3, r2, r3
 8011854:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	1e5a      	subs	r2, r3, #1
 801185a:	60fa      	str	r2, [r7, #12]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d102      	bne.n	8011866 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011860:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011864:	e02c      	b.n	80118c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801186a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011872:	2b00      	cmp	r3, #0
 8011874:	d0ef      	beq.n	8011856 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1ea      	bne.n	8011856 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011884:	f003 0304 	and.w	r3, r3, #4
 8011888:	2b00      	cmp	r3, #0
 801188a:	d004      	beq.n	8011896 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2204      	movs	r2, #4
 8011890:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011892:	2304      	movs	r3, #4
 8011894:	e014      	b.n	80118c0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801189a:	f003 0301 	and.w	r3, r3, #1
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d004      	beq.n	80118ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2201      	movs	r2, #1
 80118a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80118a8:	2301      	movs	r3, #1
 80118aa:	e009      	b.n	80118c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d002      	beq.n	80118be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2240      	movs	r2, #64	@ 0x40
 80118bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80118be:	2300      	movs	r3, #0
  
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3714      	adds	r7, #20
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr
 80118cc:	2000001c 	.word	0x2000001c
 80118d0:	10624dd3 	.word	0x10624dd3

080118d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b085      	sub	sp, #20
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118dc:	4b11      	ldr	r3, [pc, #68]	@ (8011924 <SDMMC_GetCmdError+0x50>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a11      	ldr	r2, [pc, #68]	@ (8011928 <SDMMC_GetCmdError+0x54>)
 80118e2:	fba2 2303 	umull	r2, r3, r2, r3
 80118e6:	0a5b      	lsrs	r3, r3, #9
 80118e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80118ec:	fb02 f303 	mul.w	r3, r2, r3
 80118f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	1e5a      	subs	r2, r3, #1
 80118f6:	60fa      	str	r2, [r7, #12]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d102      	bne.n	8011902 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011900:	e009      	b.n	8011916 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801190a:	2b00      	cmp	r3, #0
 801190c:	d0f1      	beq.n	80118f2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	22c5      	movs	r2, #197	@ 0xc5
 8011912:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8011914:	2300      	movs	r3, #0
}
 8011916:	4618      	mov	r0, r3
 8011918:	3714      	adds	r7, #20
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop
 8011924:	2000001c 	.word	0x2000001c
 8011928:	10624dd3 	.word	0x10624dd3

0801192c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801192c:	b084      	sub	sp, #16
 801192e:	b580      	push	{r7, lr}
 8011930:	b084      	sub	sp, #16
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
 8011936:	f107 001c 	add.w	r0, r7, #28
 801193a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801193e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011942:	2b01      	cmp	r3, #1
 8011944:	d121      	bne.n	801198a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801194a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	68da      	ldr	r2, [r3, #12]
 8011956:	4b21      	ldr	r3, [pc, #132]	@ (80119dc <USB_CoreInit+0xb0>)
 8011958:	4013      	ands	r3, r2
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801196a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801196e:	2b01      	cmp	r3, #1
 8011970:	d105      	bne.n	801197e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	68db      	ldr	r3, [r3, #12]
 8011976:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f000 f9d4 	bl	8011d2c <USB_CoreReset>
 8011984:	4603      	mov	r3, r0
 8011986:	73fb      	strb	r3, [r7, #15]
 8011988:	e010      	b.n	80119ac <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	68db      	ldr	r3, [r3, #12]
 801198e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f000 f9c8 	bl	8011d2c <USB_CoreReset>
 801199c:	4603      	mov	r3, r0
 801199e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80119ac:	7fbb      	ldrb	r3, [r7, #30]
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d10b      	bne.n	80119ca <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	689b      	ldr	r3, [r3, #8]
 80119b6:	f043 0206 	orr.w	r2, r3, #6
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	689b      	ldr	r3, [r3, #8]
 80119c2:	f043 0220 	orr.w	r2, r3, #32
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80119ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119d6:	b004      	add	sp, #16
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	ffbdffbf 	.word	0xffbdffbf

080119e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	689b      	ldr	r3, [r3, #8]
 80119ec:	f043 0201 	orr.w	r2, r3, #1
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80119f4:	2300      	movs	r3, #0
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	370c      	adds	r7, #12
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr

08011a02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011a02:	b480      	push	{r7}
 8011a04:	b083      	sub	sp, #12
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	689b      	ldr	r3, [r3, #8]
 8011a0e:	f023 0201 	bic.w	r2, r3, #1
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011a16:	2300      	movs	r3, #0
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	370c      	adds	r7, #12
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr

08011a24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	460b      	mov	r3, r1
 8011a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011a30:	2300      	movs	r3, #0
 8011a32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011a40:	78fb      	ldrb	r3, [r7, #3]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d115      	bne.n	8011a72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011a52:	200a      	movs	r0, #10
 8011a54:	f7f3 fd2e 	bl	80054b4 <HAL_Delay>
      ms += 10U;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	330a      	adds	r3, #10
 8011a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 f956 	bl	8011d10 <USB_GetMode>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d01e      	beq.n	8011aa8 <USB_SetCurrentMode+0x84>
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8011a6e:	d9f0      	bls.n	8011a52 <USB_SetCurrentMode+0x2e>
 8011a70:	e01a      	b.n	8011aa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011a72:	78fb      	ldrb	r3, [r7, #3]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d115      	bne.n	8011aa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011a84:	200a      	movs	r0, #10
 8011a86:	f7f3 fd15 	bl	80054b4 <HAL_Delay>
      ms += 10U;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	330a      	adds	r3, #10
 8011a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 f93d 	bl	8011d10 <USB_GetMode>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d005      	beq.n	8011aa8 <USB_SetCurrentMode+0x84>
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8011aa0:	d9f0      	bls.n	8011a84 <USB_SetCurrentMode+0x60>
 8011aa2:	e001      	b.n	8011aa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e005      	b.n	8011ab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2bc8      	cmp	r3, #200	@ 0xc8
 8011aac:	d101      	bne.n	8011ab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	e000      	b.n	8011ab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011ab2:	2300      	movs	r3, #0
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3710      	adds	r7, #16
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b085      	sub	sp, #20
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	3301      	adds	r3, #1
 8011ace:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011ad6:	d901      	bls.n	8011adc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011ad8:	2303      	movs	r3, #3
 8011ada:	e01b      	b.n	8011b14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	691b      	ldr	r3, [r3, #16]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	daf2      	bge.n	8011aca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	019b      	lsls	r3, r3, #6
 8011aec:	f043 0220 	orr.w	r2, r3, #32
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	3301      	adds	r3, #1
 8011af8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b00:	d901      	bls.n	8011b06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011b02:	2303      	movs	r3, #3
 8011b04:	e006      	b.n	8011b14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	691b      	ldr	r3, [r3, #16]
 8011b0a:	f003 0320 	and.w	r3, r3, #32
 8011b0e:	2b20      	cmp	r3, #32
 8011b10:	d0f0      	beq.n	8011af4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011b12:	2300      	movs	r3, #0
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3714      	adds	r7, #20
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b085      	sub	sp, #20
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	3301      	adds	r3, #1
 8011b30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b38:	d901      	bls.n	8011b3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	e018      	b.n	8011b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	691b      	ldr	r3, [r3, #16]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	daf2      	bge.n	8011b2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011b46:	2300      	movs	r3, #0
 8011b48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2210      	movs	r2, #16
 8011b4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	3301      	adds	r3, #1
 8011b54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b5c:	d901      	bls.n	8011b62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011b5e:	2303      	movs	r3, #3
 8011b60:	e006      	b.n	8011b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	691b      	ldr	r3, [r3, #16]
 8011b66:	f003 0310 	and.w	r3, r3, #16
 8011b6a:	2b10      	cmp	r3, #16
 8011b6c:	d0f0      	beq.n	8011b50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011b6e:	2300      	movs	r3, #0
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3714      	adds	r7, #20
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr

08011b7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b089      	sub	sp, #36	@ 0x24
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	4611      	mov	r1, r2
 8011b88:	461a      	mov	r2, r3
 8011b8a:	460b      	mov	r3, r1
 8011b8c:	71fb      	strb	r3, [r7, #7]
 8011b8e:	4613      	mov	r3, r2
 8011b90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d123      	bne.n	8011bea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011ba2:	88bb      	ldrh	r3, [r7, #4]
 8011ba4:	3303      	adds	r3, #3
 8011ba6:	089b      	lsrs	r3, r3, #2
 8011ba8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011baa:	2300      	movs	r3, #0
 8011bac:	61bb      	str	r3, [r7, #24]
 8011bae:	e018      	b.n	8011be2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011bb0:	79fb      	ldrb	r3, [r7, #7]
 8011bb2:	031a      	lsls	r2, r3, #12
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	4413      	add	r3, r2
 8011bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011bca:	69fb      	ldr	r3, [r7, #28]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011bd6:	69fb      	ldr	r3, [r7, #28]
 8011bd8:	3301      	adds	r3, #1
 8011bda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	3301      	adds	r3, #1
 8011be0:	61bb      	str	r3, [r7, #24]
 8011be2:	69ba      	ldr	r2, [r7, #24]
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d3e2      	bcc.n	8011bb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011bea:	2300      	movs	r3, #0
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3724      	adds	r7, #36	@ 0x24
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr

08011bf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b08b      	sub	sp, #44	@ 0x2c
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	4613      	mov	r3, r2
 8011c04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011c0e:	88fb      	ldrh	r3, [r7, #6]
 8011c10:	089b      	lsrs	r3, r3, #2
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011c16:	88fb      	ldrh	r3, [r7, #6]
 8011c18:	f003 0303 	and.w	r3, r3, #3
 8011c1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011c1e:	2300      	movs	r3, #0
 8011c20:	623b      	str	r3, [r7, #32]
 8011c22:	e014      	b.n	8011c4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011c24:	69bb      	ldr	r3, [r7, #24]
 8011c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8011c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c32:	3301      	adds	r3, #1
 8011c34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c38:	3301      	adds	r3, #1
 8011c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c3e:	3301      	adds	r3, #1
 8011c40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c44:	3301      	adds	r3, #1
 8011c46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	3301      	adds	r3, #1
 8011c4c:	623b      	str	r3, [r7, #32]
 8011c4e:	6a3a      	ldr	r2, [r7, #32]
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d3e6      	bcc.n	8011c24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011c56:	8bfb      	ldrh	r3, [r7, #30]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d01e      	beq.n	8011c9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011c60:	69bb      	ldr	r3, [r7, #24]
 8011c62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c66:	461a      	mov	r2, r3
 8011c68:	f107 0310 	add.w	r3, r7, #16
 8011c6c:	6812      	ldr	r2, [r2, #0]
 8011c6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011c70:	693a      	ldr	r2, [r7, #16]
 8011c72:	6a3b      	ldr	r3, [r7, #32]
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	00db      	lsls	r3, r3, #3
 8011c78:	fa22 f303 	lsr.w	r3, r2, r3
 8011c7c:	b2da      	uxtb	r2, r3
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c80:	701a      	strb	r2, [r3, #0]
      i++;
 8011c82:	6a3b      	ldr	r3, [r7, #32]
 8011c84:	3301      	adds	r3, #1
 8011c86:	623b      	str	r3, [r7, #32]
      pDest++;
 8011c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011c8e:	8bfb      	ldrh	r3, [r7, #30]
 8011c90:	3b01      	subs	r3, #1
 8011c92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011c94:	8bfb      	ldrh	r3, [r7, #30]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1ea      	bne.n	8011c70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	372c      	adds	r7, #44	@ 0x2c
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	695b      	ldr	r3, [r3, #20]
 8011cb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	68fa      	ldr	r2, [r7, #12]
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3714      	adds	r7, #20
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr

08011cce <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8011cce:	b480      	push	{r7}
 8011cd0:	b085      	sub	sp, #20
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
 8011cd6:	460b      	mov	r3, r1
 8011cd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8011cde:	78fb      	ldrb	r3, [r7, #3]
 8011ce0:	015a      	lsls	r2, r3, #5
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011cea:	689b      	ldr	r3, [r3, #8]
 8011cec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8011cee:	78fb      	ldrb	r3, [r7, #3]
 8011cf0:	015a      	lsls	r2, r3, #5
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011cfa:	68db      	ldr	r3, [r3, #12]
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	4013      	ands	r3, r2
 8011d00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011d02:	68bb      	ldr	r3, [r7, #8]
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3714      	adds	r7, #20
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr

08011d10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	695b      	ldr	r3, [r3, #20]
 8011d1c:	f003 0301 	and.w	r3, r3, #1
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b085      	sub	sp, #20
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011d34:	2300      	movs	r3, #0
 8011d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011d44:	d901      	bls.n	8011d4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011d46:	2303      	movs	r3, #3
 8011d48:	e022      	b.n	8011d90 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	691b      	ldr	r3, [r3, #16]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	daf2      	bge.n	8011d38 <USB_CoreReset+0xc>

  count = 10U;
 8011d52:	230a      	movs	r3, #10
 8011d54:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8011d56:	e002      	b.n	8011d5e <USB_CoreReset+0x32>
  {
    count--;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d1f9      	bne.n	8011d58 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	691b      	ldr	r3, [r3, #16]
 8011d68:	f043 0201 	orr.w	r2, r3, #1
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	3301      	adds	r3, #1
 8011d74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011d7c:	d901      	bls.n	8011d82 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8011d7e:	2303      	movs	r3, #3
 8011d80:	e006      	b.n	8011d90 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	691b      	ldr	r3, [r3, #16]
 8011d86:	f003 0301 	and.w	r3, r3, #1
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d0f0      	beq.n	8011d70 <USB_CoreReset+0x44>

  return HAL_OK;
 8011d8e:	2300      	movs	r3, #0
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3714      	adds	r7, #20
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011d9c:	b084      	sub	sp, #16
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b086      	sub	sp, #24
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
 8011da6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011dae:	2300      	movs	r3, #0
 8011db0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dc6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d119      	bne.n	8011e0e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8011dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d10a      	bne.n	8011df8 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011df0:	f043 0304 	orr.w	r3, r3, #4
 8011df4:	6013      	str	r3, [r2, #0]
 8011df6:	e014      	b.n	8011e22 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011e06:	f023 0304 	bic.w	r3, r3, #4
 8011e0a:	6013      	str	r3, [r2, #0]
 8011e0c:	e009      	b.n	8011e22 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011e1c:	f023 0304 	bic.w	r3, r3, #4
 8011e20:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011e22:	2110      	movs	r1, #16
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f7ff fe49 	bl	8011abc <USB_FlushTxFifo>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d001      	beq.n	8011e34 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8011e30:	2301      	movs	r3, #1
 8011e32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7ff fe73 	bl	8011b20 <USB_FlushRxFifo>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d001      	beq.n	8011e44 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8011e40:	2301      	movs	r3, #1
 8011e42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011e44:	2300      	movs	r3, #0
 8011e46:	613b      	str	r3, [r7, #16]
 8011e48:	e015      	b.n	8011e76 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	015a      	lsls	r2, r3, #5
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	4413      	add	r3, r2
 8011e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e56:	461a      	mov	r2, r3
 8011e58:	f04f 33ff 	mov.w	r3, #4294967295
 8011e5c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	015a      	lsls	r2, r3, #5
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	4413      	add	r3, r2
 8011e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	3301      	adds	r3, #1
 8011e74:	613b      	str	r3, [r7, #16]
 8011e76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	d3e3      	bcc.n	8011e4a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2200      	movs	r2, #0
 8011e86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e8e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	4a18      	ldr	r2, [pc, #96]	@ (8011ef4 <USB_HostInit+0x158>)
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d10b      	bne.n	8011eb0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4a15      	ldr	r2, [pc, #84]	@ (8011ef8 <USB_HostInit+0x15c>)
 8011ea4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	4a14      	ldr	r2, [pc, #80]	@ (8011efc <USB_HostInit+0x160>)
 8011eaa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8011eae:	e009      	b.n	8011ec4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2280      	movs	r2, #128	@ 0x80
 8011eb4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	4a11      	ldr	r2, [pc, #68]	@ (8011f00 <USB_HostInit+0x164>)
 8011eba:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	4a11      	ldr	r2, [pc, #68]	@ (8011f04 <USB_HostInit+0x168>)
 8011ec0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d105      	bne.n	8011ed8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	699b      	ldr	r3, [r3, #24]
 8011ed0:	f043 0210 	orr.w	r2, r3, #16
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	699a      	ldr	r2, [r3, #24]
 8011edc:	4b0a      	ldr	r3, [pc, #40]	@ (8011f08 <USB_HostInit+0x16c>)
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8011ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3718      	adds	r7, #24
 8011eea:	46bd      	mov	sp, r7
 8011eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ef0:	b004      	add	sp, #16
 8011ef2:	4770      	bx	lr
 8011ef4:	40040000 	.word	0x40040000
 8011ef8:	01000200 	.word	0x01000200
 8011efc:	00e00300 	.word	0x00e00300
 8011f00:	00600080 	.word	0x00600080
 8011f04:	004000e0 	.word	0x004000e0
 8011f08:	a3200008 	.word	0xa3200008

08011f0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	460b      	mov	r3, r1
 8011f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	68fa      	ldr	r2, [r7, #12]
 8011f26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011f2a:	f023 0303 	bic.w	r3, r3, #3
 8011f2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	78fb      	ldrb	r3, [r7, #3]
 8011f3a:	f003 0303 	and.w	r3, r3, #3
 8011f3e:	68f9      	ldr	r1, [r7, #12]
 8011f40:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011f44:	4313      	orrs	r3, r2
 8011f46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011f48:	78fb      	ldrb	r3, [r7, #3]
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d107      	bne.n	8011f5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f54:	461a      	mov	r2, r3
 8011f56:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8011f5a:	6053      	str	r3, [r2, #4]
 8011f5c:	e00c      	b.n	8011f78 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8011f5e:	78fb      	ldrb	r3, [r7, #3]
 8011f60:	2b02      	cmp	r3, #2
 8011f62:	d107      	bne.n	8011f74 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011f70:	6053      	str	r3, [r2, #4]
 8011f72:	e001      	b.n	8011f78 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8011f74:	2301      	movs	r3, #1
 8011f76:	e000      	b.n	8011f7a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011f78:	2300      	movs	r3, #0
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3714      	adds	r7, #20
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr

08011f86 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f86:	b580      	push	{r7, lr}
 8011f88:	b084      	sub	sp, #16
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011f92:	2300      	movs	r3, #0
 8011f94:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8011fa6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	68fa      	ldr	r2, [r7, #12]
 8011fac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011fb4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8011fb6:	2064      	movs	r0, #100	@ 0x64
 8011fb8:	f7f3 fa7c 	bl	80054b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011fc8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8011fca:	200a      	movs	r0, #10
 8011fcc:	f7f3 fa72 	bl	80054b4 <HAL_Delay>

  return HAL_OK;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8011fda:	b480      	push	{r7}
 8011fdc:	b085      	sub	sp, #20
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011fea:	2300      	movs	r3, #0
 8011fec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8011ffe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012006:	2b00      	cmp	r3, #0
 8012008:	d109      	bne.n	801201e <USB_DriveVbus+0x44>
 801200a:	78fb      	ldrb	r3, [r7, #3]
 801200c:	2b01      	cmp	r3, #1
 801200e:	d106      	bne.n	801201e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	68fa      	ldr	r2, [r7, #12]
 8012014:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8012018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801201c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012028:	d109      	bne.n	801203e <USB_DriveVbus+0x64>
 801202a:	78fb      	ldrb	r3, [r7, #3]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d106      	bne.n	801203e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	68fa      	ldr	r2, [r7, #12]
 8012034:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8012038:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801203c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 801203e:	2300      	movs	r3, #0
}
 8012040:	4618      	mov	r0, r3
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr

0801204c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 801204c:	b480      	push	{r7}
 801204e:	b085      	sub	sp, #20
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8012058:	2300      	movs	r3, #0
 801205a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	0c5b      	lsrs	r3, r3, #17
 801206a:	f003 0303 	and.w	r3, r3, #3
}
 801206e:	4618      	mov	r0, r3
 8012070:	3714      	adds	r7, #20
 8012072:	46bd      	mov	sp, r7
 8012074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012078:	4770      	bx	lr

0801207a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 801207a:	b480      	push	{r7}
 801207c:	b085      	sub	sp, #20
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801208c:	689b      	ldr	r3, [r3, #8]
 801208e:	b29b      	uxth	r3, r3
}
 8012090:	4618      	mov	r0, r3
 8012092:	3714      	adds	r7, #20
 8012094:	46bd      	mov	sp, r7
 8012096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209a:	4770      	bx	lr

0801209c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b088      	sub	sp, #32
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	4608      	mov	r0, r1
 80120a6:	4611      	mov	r1, r2
 80120a8:	461a      	mov	r2, r3
 80120aa:	4603      	mov	r3, r0
 80120ac:	70fb      	strb	r3, [r7, #3]
 80120ae:	460b      	mov	r3, r1
 80120b0:	70bb      	strb	r3, [r7, #2]
 80120b2:	4613      	mov	r3, r2
 80120b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80120b6:	2300      	movs	r3, #0
 80120b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80120be:	78fb      	ldrb	r3, [r7, #3]
 80120c0:	015a      	lsls	r2, r3, #5
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	4413      	add	r3, r2
 80120c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120ca:	461a      	mov	r2, r3
 80120cc:	f04f 33ff 	mov.w	r3, #4294967295
 80120d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80120d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80120d6:	2b03      	cmp	r3, #3
 80120d8:	d87c      	bhi.n	80121d4 <USB_HC_Init+0x138>
 80120da:	a201      	add	r2, pc, #4	@ (adr r2, 80120e0 <USB_HC_Init+0x44>)
 80120dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120e0:	080120f1 	.word	0x080120f1
 80120e4:	08012197 	.word	0x08012197
 80120e8:	080120f1 	.word	0x080120f1
 80120ec:	08012159 	.word	0x08012159
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80120f0:	78fb      	ldrb	r3, [r7, #3]
 80120f2:	015a      	lsls	r2, r3, #5
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	4413      	add	r3, r2
 80120f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120fc:	461a      	mov	r2, r3
 80120fe:	f240 439d 	movw	r3, #1181	@ 0x49d
 8012102:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8012104:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012108:	2b00      	cmp	r3, #0
 801210a:	da10      	bge.n	801212e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801210c:	78fb      	ldrb	r3, [r7, #3]
 801210e:	015a      	lsls	r2, r3, #5
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	4413      	add	r3, r2
 8012114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012118:	68db      	ldr	r3, [r3, #12]
 801211a:	78fa      	ldrb	r2, [r7, #3]
 801211c:	0151      	lsls	r1, r2, #5
 801211e:	693a      	ldr	r2, [r7, #16]
 8012120:	440a      	add	r2, r1
 8012122:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801212a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 801212c:	e055      	b.n	80121da <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	4a6f      	ldr	r2, [pc, #444]	@ (80122f0 <USB_HC_Init+0x254>)
 8012132:	4293      	cmp	r3, r2
 8012134:	d151      	bne.n	80121da <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8012136:	78fb      	ldrb	r3, [r7, #3]
 8012138:	015a      	lsls	r2, r3, #5
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	4413      	add	r3, r2
 801213e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	78fa      	ldrb	r2, [r7, #3]
 8012146:	0151      	lsls	r1, r2, #5
 8012148:	693a      	ldr	r2, [r7, #16]
 801214a:	440a      	add	r2, r1
 801214c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012150:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8012154:	60d3      	str	r3, [r2, #12]
      break;
 8012156:	e040      	b.n	80121da <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012158:	78fb      	ldrb	r3, [r7, #3]
 801215a:	015a      	lsls	r2, r3, #5
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	4413      	add	r3, r2
 8012160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012164:	461a      	mov	r2, r3
 8012166:	f240 639d 	movw	r3, #1693	@ 0x69d
 801216a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801216c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012170:	2b00      	cmp	r3, #0
 8012172:	da34      	bge.n	80121de <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012174:	78fb      	ldrb	r3, [r7, #3]
 8012176:	015a      	lsls	r2, r3, #5
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	4413      	add	r3, r2
 801217c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	78fa      	ldrb	r2, [r7, #3]
 8012184:	0151      	lsls	r1, r2, #5
 8012186:	693a      	ldr	r2, [r7, #16]
 8012188:	440a      	add	r2, r1
 801218a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801218e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012192:	60d3      	str	r3, [r2, #12]
      }

      break;
 8012194:	e023      	b.n	80121de <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012196:	78fb      	ldrb	r3, [r7, #3]
 8012198:	015a      	lsls	r2, r3, #5
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	4413      	add	r3, r2
 801219e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121a2:	461a      	mov	r2, r3
 80121a4:	f240 2325 	movw	r3, #549	@ 0x225
 80121a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80121aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	da17      	bge.n	80121e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80121b2:	78fb      	ldrb	r3, [r7, #3]
 80121b4:	015a      	lsls	r2, r3, #5
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	4413      	add	r3, r2
 80121ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	78fa      	ldrb	r2, [r7, #3]
 80121c2:	0151      	lsls	r1, r2, #5
 80121c4:	693a      	ldr	r2, [r7, #16]
 80121c6:	440a      	add	r2, r1
 80121c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121cc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80121d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80121d2:	e006      	b.n	80121e2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80121d4:	2301      	movs	r3, #1
 80121d6:	77fb      	strb	r3, [r7, #31]
      break;
 80121d8:	e004      	b.n	80121e4 <USB_HC_Init+0x148>
      break;
 80121da:	bf00      	nop
 80121dc:	e002      	b.n	80121e4 <USB_HC_Init+0x148>
      break;
 80121de:	bf00      	nop
 80121e0:	e000      	b.n	80121e4 <USB_HC_Init+0x148>
      break;
 80121e2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80121e4:	78fb      	ldrb	r3, [r7, #3]
 80121e6:	015a      	lsls	r2, r3, #5
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	4413      	add	r3, r2
 80121ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121f0:	461a      	mov	r2, r3
 80121f2:	2300      	movs	r3, #0
 80121f4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80121f6:	78fb      	ldrb	r3, [r7, #3]
 80121f8:	015a      	lsls	r2, r3, #5
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	4413      	add	r3, r2
 80121fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	78fa      	ldrb	r2, [r7, #3]
 8012206:	0151      	lsls	r1, r2, #5
 8012208:	693a      	ldr	r2, [r7, #16]
 801220a:	440a      	add	r2, r1
 801220c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012210:	f043 0302 	orr.w	r3, r3, #2
 8012214:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801221c:	699a      	ldr	r2, [r3, #24]
 801221e:	78fb      	ldrb	r3, [r7, #3]
 8012220:	f003 030f 	and.w	r3, r3, #15
 8012224:	2101      	movs	r1, #1
 8012226:	fa01 f303 	lsl.w	r3, r1, r3
 801222a:	6939      	ldr	r1, [r7, #16]
 801222c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8012230:	4313      	orrs	r3, r2
 8012232:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	699b      	ldr	r3, [r3, #24]
 8012238:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8012240:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012244:	2b00      	cmp	r3, #0
 8012246:	da03      	bge.n	8012250 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8012248:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801224c:	61bb      	str	r3, [r7, #24]
 801224e:	e001      	b.n	8012254 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8012250:	2300      	movs	r3, #0
 8012252:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7ff fef9 	bl	801204c <USB_GetHostSpeed>
 801225a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 801225c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012260:	2b02      	cmp	r3, #2
 8012262:	d106      	bne.n	8012272 <USB_HC_Init+0x1d6>
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2b02      	cmp	r3, #2
 8012268:	d003      	beq.n	8012272 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 801226a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801226e:	617b      	str	r3, [r7, #20]
 8012270:	e001      	b.n	8012276 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8012272:	2300      	movs	r3, #0
 8012274:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012276:	787b      	ldrb	r3, [r7, #1]
 8012278:	059b      	lsls	r3, r3, #22
 801227a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801227e:	78bb      	ldrb	r3, [r7, #2]
 8012280:	02db      	lsls	r3, r3, #11
 8012282:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012286:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012288:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801228c:	049b      	lsls	r3, r3, #18
 801228e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012292:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8012294:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012296:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801229a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	431a      	orrs	r2, r3
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80122a4:	78fa      	ldrb	r2, [r7, #3]
 80122a6:	0151      	lsls	r1, r2, #5
 80122a8:	693a      	ldr	r2, [r7, #16]
 80122aa:	440a      	add	r2, r1
 80122ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80122b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80122b4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80122b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80122ba:	2b03      	cmp	r3, #3
 80122bc:	d003      	beq.n	80122c6 <USB_HC_Init+0x22a>
 80122be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	d10f      	bne.n	80122e6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80122c6:	78fb      	ldrb	r3, [r7, #3]
 80122c8:	015a      	lsls	r2, r3, #5
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	4413      	add	r3, r2
 80122ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	78fa      	ldrb	r2, [r7, #3]
 80122d6:	0151      	lsls	r1, r2, #5
 80122d8:	693a      	ldr	r2, [r7, #16]
 80122da:	440a      	add	r2, r1
 80122dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80122e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80122e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3720      	adds	r7, #32
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	40040000 	.word	0x40040000

080122f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b08c      	sub	sp, #48	@ 0x30
 80122f8:	af02      	add	r7, sp, #8
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	4613      	mov	r3, r2
 8012300:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	785b      	ldrb	r3, [r3, #1]
 801230a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 801230c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012310:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	4a5d      	ldr	r2, [pc, #372]	@ (801248c <USB_HC_StartXfer+0x198>)
 8012316:	4293      	cmp	r3, r2
 8012318:	d12f      	bne.n	801237a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 801231a:	79fb      	ldrb	r3, [r7, #7]
 801231c:	2b01      	cmp	r3, #1
 801231e:	d11c      	bne.n	801235a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	7c9b      	ldrb	r3, [r3, #18]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d003      	beq.n	8012330 <USB_HC_StartXfer+0x3c>
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	7c9b      	ldrb	r3, [r3, #18]
 801232c:	2b02      	cmp	r3, #2
 801232e:	d124      	bne.n	801237a <USB_HC_StartXfer+0x86>
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	799b      	ldrb	r3, [r3, #6]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d120      	bne.n	801237a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	015a      	lsls	r2, r3, #5
 801233c:	6a3b      	ldr	r3, [r7, #32]
 801233e:	4413      	add	r3, r2
 8012340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	69fa      	ldr	r2, [r7, #28]
 8012348:	0151      	lsls	r1, r2, #5
 801234a:	6a3a      	ldr	r2, [r7, #32]
 801234c:	440a      	add	r2, r1
 801234e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012356:	60d3      	str	r3, [r2, #12]
 8012358:	e00f      	b.n	801237a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	791b      	ldrb	r3, [r3, #4]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d10b      	bne.n	801237a <USB_HC_StartXfer+0x86>
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	795b      	ldrb	r3, [r3, #5]
 8012366:	2b01      	cmp	r3, #1
 8012368:	d107      	bne.n	801237a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	785b      	ldrb	r3, [r3, #1]
 801236e:	4619      	mov	r1, r3
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f000 fb6b 	bl	8012a4c <USB_DoPing>
        return HAL_OK;
 8012376:	2300      	movs	r3, #0
 8012378:	e232      	b.n	80127e0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	799b      	ldrb	r3, [r3, #6]
 801237e:	2b01      	cmp	r3, #1
 8012380:	d158      	bne.n	8012434 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8012382:	2301      	movs	r3, #1
 8012384:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	78db      	ldrb	r3, [r3, #3]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d007      	beq.n	801239e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801238e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012390:	68ba      	ldr	r2, [r7, #8]
 8012392:	8a92      	ldrh	r2, [r2, #20]
 8012394:	fb03 f202 	mul.w	r2, r3, r2
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	61da      	str	r2, [r3, #28]
 801239c:	e07c      	b.n	8012498 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	7c9b      	ldrb	r3, [r3, #18]
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d130      	bne.n	8012408 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	6a1b      	ldr	r3, [r3, #32]
 80123aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80123ac:	d918      	bls.n	80123e0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	8a9b      	ldrh	r3, [r3, #20]
 80123b2:	461a      	mov	r2, r3
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	69da      	ldr	r2, [r3, #28]
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	2b01      	cmp	r3, #1
 80123c6:	d003      	beq.n	80123d0 <USB_HC_StartXfer+0xdc>
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	2b02      	cmp	r3, #2
 80123ce:	d103      	bne.n	80123d8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	2202      	movs	r2, #2
 80123d4:	60da      	str	r2, [r3, #12]
 80123d6:	e05f      	b.n	8012498 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	2201      	movs	r2, #1
 80123dc:	60da      	str	r2, [r3, #12]
 80123de:	e05b      	b.n	8012498 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	6a1a      	ldr	r2, [r3, #32]
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d007      	beq.n	8012400 <USB_HC_StartXfer+0x10c>
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	2b02      	cmp	r3, #2
 80123f6:	d003      	beq.n	8012400 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	2204      	movs	r2, #4
 80123fc:	60da      	str	r2, [r3, #12]
 80123fe:	e04b      	b.n	8012498 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	2203      	movs	r2, #3
 8012404:	60da      	str	r2, [r3, #12]
 8012406:	e047      	b.n	8012498 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8012408:	79fb      	ldrb	r3, [r7, #7]
 801240a:	2b01      	cmp	r3, #1
 801240c:	d10d      	bne.n	801242a <USB_HC_StartXfer+0x136>
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	6a1b      	ldr	r3, [r3, #32]
 8012412:	68ba      	ldr	r2, [r7, #8]
 8012414:	8a92      	ldrh	r2, [r2, #20]
 8012416:	4293      	cmp	r3, r2
 8012418:	d907      	bls.n	801242a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801241a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801241c:	68ba      	ldr	r2, [r7, #8]
 801241e:	8a92      	ldrh	r2, [r2, #20]
 8012420:	fb03 f202 	mul.w	r2, r3, r2
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	61da      	str	r2, [r3, #28]
 8012428:	e036      	b.n	8012498 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	6a1a      	ldr	r2, [r3, #32]
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	61da      	str	r2, [r3, #28]
 8012432:	e031      	b.n	8012498 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	6a1b      	ldr	r3, [r3, #32]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d018      	beq.n	801246e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	6a1b      	ldr	r3, [r3, #32]
 8012440:	68ba      	ldr	r2, [r7, #8]
 8012442:	8a92      	ldrh	r2, [r2, #20]
 8012444:	4413      	add	r3, r2
 8012446:	3b01      	subs	r3, #1
 8012448:	68ba      	ldr	r2, [r7, #8]
 801244a:	8a92      	ldrh	r2, [r2, #20]
 801244c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012450:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8012452:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012454:	8b7b      	ldrh	r3, [r7, #26]
 8012456:	429a      	cmp	r2, r3
 8012458:	d90b      	bls.n	8012472 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 801245a:	8b7b      	ldrh	r3, [r7, #26]
 801245c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801245e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012460:	68ba      	ldr	r2, [r7, #8]
 8012462:	8a92      	ldrh	r2, [r2, #20]
 8012464:	fb03 f202 	mul.w	r2, r3, r2
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	61da      	str	r2, [r3, #28]
 801246c:	e001      	b.n	8012472 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 801246e:	2301      	movs	r3, #1
 8012470:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	78db      	ldrb	r3, [r3, #3]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d00a      	beq.n	8012490 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801247a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801247c:	68ba      	ldr	r2, [r7, #8]
 801247e:	8a92      	ldrh	r2, [r2, #20]
 8012480:	fb03 f202 	mul.w	r2, r3, r2
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	61da      	str	r2, [r3, #28]
 8012488:	e006      	b.n	8012498 <USB_HC_StartXfer+0x1a4>
 801248a:	bf00      	nop
 801248c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	6a1a      	ldr	r2, [r3, #32]
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	69db      	ldr	r3, [r3, #28]
 801249c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80124a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80124a2:	04d9      	lsls	r1, r3, #19
 80124a4:	4ba3      	ldr	r3, [pc, #652]	@ (8012734 <USB_HC_StartXfer+0x440>)
 80124a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80124a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	7d9b      	ldrb	r3, [r3, #22]
 80124ae:	075b      	lsls	r3, r3, #29
 80124b0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80124b4:	69f9      	ldr	r1, [r7, #28]
 80124b6:	0148      	lsls	r0, r1, #5
 80124b8:	6a39      	ldr	r1, [r7, #32]
 80124ba:	4401      	add	r1, r0
 80124bc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80124c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80124c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80124c4:	79fb      	ldrb	r3, [r7, #7]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d009      	beq.n	80124de <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	6999      	ldr	r1, [r3, #24]
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	015a      	lsls	r2, r3, #5
 80124d2:	6a3b      	ldr	r3, [r7, #32]
 80124d4:	4413      	add	r3, r2
 80124d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80124da:	460a      	mov	r2, r1
 80124dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80124de:	6a3b      	ldr	r3, [r7, #32]
 80124e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	f003 0301 	and.w	r3, r3, #1
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	bf0c      	ite	eq
 80124ee:	2301      	moveq	r3, #1
 80124f0:	2300      	movne	r3, #0
 80124f2:	b2db      	uxtb	r3, r3
 80124f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	015a      	lsls	r2, r3, #5
 80124fa:	6a3b      	ldr	r3, [r7, #32]
 80124fc:	4413      	add	r3, r2
 80124fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	69fa      	ldr	r2, [r7, #28]
 8012506:	0151      	lsls	r1, r2, #5
 8012508:	6a3a      	ldr	r2, [r7, #32]
 801250a:	440a      	add	r2, r1
 801250c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012510:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012514:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	015a      	lsls	r2, r3, #5
 801251a:	6a3b      	ldr	r3, [r7, #32]
 801251c:	4413      	add	r3, r2
 801251e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	7e7b      	ldrb	r3, [r7, #25]
 8012526:	075b      	lsls	r3, r3, #29
 8012528:	69f9      	ldr	r1, [r7, #28]
 801252a:	0148      	lsls	r0, r1, #5
 801252c:	6a39      	ldr	r1, [r7, #32]
 801252e:	4401      	add	r1, r0
 8012530:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8012534:	4313      	orrs	r3, r2
 8012536:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	799b      	ldrb	r3, [r3, #6]
 801253c:	2b01      	cmp	r3, #1
 801253e:	f040 80c3 	bne.w	80126c8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	7c5b      	ldrb	r3, [r3, #17]
 8012546:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8012548:	68ba      	ldr	r2, [r7, #8]
 801254a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801254c:	4313      	orrs	r3, r2
 801254e:	69fa      	ldr	r2, [r7, #28]
 8012550:	0151      	lsls	r1, r2, #5
 8012552:	6a3a      	ldr	r2, [r7, #32]
 8012554:	440a      	add	r2, r1
 8012556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 801255a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801255e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	015a      	lsls	r2, r3, #5
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	4413      	add	r3, r2
 8012568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801256c:	68db      	ldr	r3, [r3, #12]
 801256e:	69fa      	ldr	r2, [r7, #28]
 8012570:	0151      	lsls	r1, r2, #5
 8012572:	6a3a      	ldr	r2, [r7, #32]
 8012574:	440a      	add	r2, r1
 8012576:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801257a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801257e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	79db      	ldrb	r3, [r3, #7]
 8012584:	2b01      	cmp	r3, #1
 8012586:	d123      	bne.n	80125d0 <USB_HC_StartXfer+0x2dc>
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	78db      	ldrb	r3, [r3, #3]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d11f      	bne.n	80125d0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	015a      	lsls	r2, r3, #5
 8012594:	6a3b      	ldr	r3, [r7, #32]
 8012596:	4413      	add	r3, r2
 8012598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	69fa      	ldr	r2, [r7, #28]
 80125a0:	0151      	lsls	r1, r2, #5
 80125a2:	6a3a      	ldr	r2, [r7, #32]
 80125a4:	440a      	add	r2, r1
 80125a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80125aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80125ae:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	015a      	lsls	r2, r3, #5
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	4413      	add	r3, r2
 80125b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	69fa      	ldr	r2, [r7, #28]
 80125c0:	0151      	lsls	r1, r2, #5
 80125c2:	6a3a      	ldr	r2, [r7, #32]
 80125c4:	440a      	add	r2, r1
 80125c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80125ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125ce:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	7c9b      	ldrb	r3, [r3, #18]
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d003      	beq.n	80125e0 <USB_HC_StartXfer+0x2ec>
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	7c9b      	ldrb	r3, [r3, #18]
 80125dc:	2b03      	cmp	r3, #3
 80125de:	d117      	bne.n	8012610 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80125e4:	2b01      	cmp	r3, #1
 80125e6:	d113      	bne.n	8012610 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	78db      	ldrb	r3, [r3, #3]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d10f      	bne.n	8012610 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	015a      	lsls	r2, r3, #5
 80125f4:	6a3b      	ldr	r3, [r7, #32]
 80125f6:	4413      	add	r3, r2
 80125f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	69fa      	ldr	r2, [r7, #28]
 8012600:	0151      	lsls	r1, r2, #5
 8012602:	6a3a      	ldr	r2, [r7, #32]
 8012604:	440a      	add	r2, r1
 8012606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801260a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801260e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	7c9b      	ldrb	r3, [r3, #18]
 8012614:	2b01      	cmp	r3, #1
 8012616:	d162      	bne.n	80126de <USB_HC_StartXfer+0x3ea>
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	78db      	ldrb	r3, [r3, #3]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d15e      	bne.n	80126de <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	3b01      	subs	r3, #1
 8012626:	2b03      	cmp	r3, #3
 8012628:	d858      	bhi.n	80126dc <USB_HC_StartXfer+0x3e8>
 801262a:	a201      	add	r2, pc, #4	@ (adr r2, 8012630 <USB_HC_StartXfer+0x33c>)
 801262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012630:	08012641 	.word	0x08012641
 8012634:	08012663 	.word	0x08012663
 8012638:	08012685 	.word	0x08012685
 801263c:	080126a7 	.word	0x080126a7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8012640:	69fb      	ldr	r3, [r7, #28]
 8012642:	015a      	lsls	r2, r3, #5
 8012644:	6a3b      	ldr	r3, [r7, #32]
 8012646:	4413      	add	r3, r2
 8012648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	69fa      	ldr	r2, [r7, #28]
 8012650:	0151      	lsls	r1, r2, #5
 8012652:	6a3a      	ldr	r2, [r7, #32]
 8012654:	440a      	add	r2, r1
 8012656:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801265a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801265e:	6053      	str	r3, [r2, #4]
          break;
 8012660:	e03d      	b.n	80126de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8012662:	69fb      	ldr	r3, [r7, #28]
 8012664:	015a      	lsls	r2, r3, #5
 8012666:	6a3b      	ldr	r3, [r7, #32]
 8012668:	4413      	add	r3, r2
 801266a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	69fa      	ldr	r2, [r7, #28]
 8012672:	0151      	lsls	r1, r2, #5
 8012674:	6a3a      	ldr	r2, [r7, #32]
 8012676:	440a      	add	r2, r1
 8012678:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801267c:	f043 030e 	orr.w	r3, r3, #14
 8012680:	6053      	str	r3, [r2, #4]
          break;
 8012682:	e02c      	b.n	80126de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	015a      	lsls	r2, r3, #5
 8012688:	6a3b      	ldr	r3, [r7, #32]
 801268a:	4413      	add	r3, r2
 801268c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	69fa      	ldr	r2, [r7, #28]
 8012694:	0151      	lsls	r1, r2, #5
 8012696:	6a3a      	ldr	r2, [r7, #32]
 8012698:	440a      	add	r2, r1
 801269a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801269e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80126a2:	6053      	str	r3, [r2, #4]
          break;
 80126a4:	e01b      	b.n	80126de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80126a6:	69fb      	ldr	r3, [r7, #28]
 80126a8:	015a      	lsls	r2, r3, #5
 80126aa:	6a3b      	ldr	r3, [r7, #32]
 80126ac:	4413      	add	r3, r2
 80126ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	69fa      	ldr	r2, [r7, #28]
 80126b6:	0151      	lsls	r1, r2, #5
 80126b8:	6a3a      	ldr	r2, [r7, #32]
 80126ba:	440a      	add	r2, r1
 80126bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80126c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80126c4:	6053      	str	r3, [r2, #4]
          break;
 80126c6:	e00a      	b.n	80126de <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	015a      	lsls	r2, r3, #5
 80126cc:	6a3b      	ldr	r3, [r7, #32]
 80126ce:	4413      	add	r3, r2
 80126d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126d4:	461a      	mov	r2, r3
 80126d6:	2300      	movs	r3, #0
 80126d8:	6053      	str	r3, [r2, #4]
 80126da:	e000      	b.n	80126de <USB_HC_StartXfer+0x3ea>
          break;
 80126dc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80126de:	69fb      	ldr	r3, [r7, #28]
 80126e0:	015a      	lsls	r2, r3, #5
 80126e2:	6a3b      	ldr	r3, [r7, #32]
 80126e4:	4413      	add	r3, r2
 80126e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80126f4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	78db      	ldrb	r3, [r3, #3]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d004      	beq.n	8012708 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012704:	613b      	str	r3, [r7, #16]
 8012706:	e003      	b.n	8012710 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801270e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012716:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	015a      	lsls	r2, r3, #5
 801271c:	6a3b      	ldr	r3, [r7, #32]
 801271e:	4413      	add	r3, r2
 8012720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012724:	461a      	mov	r2, r3
 8012726:	693b      	ldr	r3, [r7, #16]
 8012728:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801272a:	79fb      	ldrb	r3, [r7, #7]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d003      	beq.n	8012738 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8012730:	2300      	movs	r3, #0
 8012732:	e055      	b.n	80127e0 <USB_HC_StartXfer+0x4ec>
 8012734:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	78db      	ldrb	r3, [r3, #3]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d14e      	bne.n	80127de <USB_HC_StartXfer+0x4ea>
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	6a1b      	ldr	r3, [r3, #32]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d04a      	beq.n	80127de <USB_HC_StartXfer+0x4ea>
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	79db      	ldrb	r3, [r3, #7]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d146      	bne.n	80127de <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	7c9b      	ldrb	r3, [r3, #18]
 8012754:	2b03      	cmp	r3, #3
 8012756:	d831      	bhi.n	80127bc <USB_HC_StartXfer+0x4c8>
 8012758:	a201      	add	r2, pc, #4	@ (adr r2, 8012760 <USB_HC_StartXfer+0x46c>)
 801275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801275e:	bf00      	nop
 8012760:	08012771 	.word	0x08012771
 8012764:	08012795 	.word	0x08012795
 8012768:	08012771 	.word	0x08012771
 801276c:	08012795 	.word	0x08012795
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	6a1b      	ldr	r3, [r3, #32]
 8012774:	3303      	adds	r3, #3
 8012776:	089b      	lsrs	r3, r3, #2
 8012778:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801277a:	8afa      	ldrh	r2, [r7, #22]
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012780:	b29b      	uxth	r3, r3
 8012782:	429a      	cmp	r2, r3
 8012784:	d91c      	bls.n	80127c0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	699b      	ldr	r3, [r3, #24]
 801278a:	f043 0220 	orr.w	r2, r3, #32
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	619a      	str	r2, [r3, #24]
        }
        break;
 8012792:	e015      	b.n	80127c0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	6a1b      	ldr	r3, [r3, #32]
 8012798:	3303      	adds	r3, #3
 801279a:	089b      	lsrs	r3, r3, #2
 801279c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801279e:	8afa      	ldrh	r2, [r7, #22]
 80127a0:	6a3b      	ldr	r3, [r7, #32]
 80127a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80127a6:	691b      	ldr	r3, [r3, #16]
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d90a      	bls.n	80127c4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	699b      	ldr	r3, [r3, #24]
 80127b2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80127ba:	e003      	b.n	80127c4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80127bc:	bf00      	nop
 80127be:	e002      	b.n	80127c6 <USB_HC_StartXfer+0x4d2>
        break;
 80127c0:	bf00      	nop
 80127c2:	e000      	b.n	80127c6 <USB_HC_StartXfer+0x4d2>
        break;
 80127c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	6999      	ldr	r1, [r3, #24]
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	785a      	ldrb	r2, [r3, #1]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	6a1b      	ldr	r3, [r3, #32]
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	2000      	movs	r0, #0
 80127d6:	9000      	str	r0, [sp, #0]
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	f7ff f9cf 	bl	8011b7c <USB_WritePacket>
  }

  return HAL_OK;
 80127de:	2300      	movs	r3, #0
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3728      	adds	r7, #40	@ 0x28
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80127fa:	695b      	ldr	r3, [r3, #20]
 80127fc:	b29b      	uxth	r3, r3
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3714      	adds	r7, #20
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr

0801280a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801280a:	b480      	push	{r7}
 801280c:	b089      	sub	sp, #36	@ 0x24
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
 8012812:	460b      	mov	r3, r1
 8012814:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801281a:	78fb      	ldrb	r3, [r7, #3]
 801281c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801281e:	2300      	movs	r3, #0
 8012820:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	015a      	lsls	r2, r3, #5
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	4413      	add	r3, r2
 801282a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	0c9b      	lsrs	r3, r3, #18
 8012832:	f003 0303 	and.w	r3, r3, #3
 8012836:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012838:	69bb      	ldr	r3, [r7, #24]
 801283a:	015a      	lsls	r2, r3, #5
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	4413      	add	r3, r2
 8012840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	0fdb      	lsrs	r3, r3, #31
 8012848:	f003 0301 	and.w	r3, r3, #1
 801284c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	015a      	lsls	r2, r3, #5
 8012852:	69fb      	ldr	r3, [r7, #28]
 8012854:	4413      	add	r3, r2
 8012856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	0fdb      	lsrs	r3, r3, #31
 801285e:	f003 0301 	and.w	r3, r3, #1
 8012862:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	f003 0320 	and.w	r3, r3, #32
 801286c:	2b20      	cmp	r3, #32
 801286e:	d10d      	bne.n	801288c <USB_HC_Halt+0x82>
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d10a      	bne.n	801288c <USB_HC_Halt+0x82>
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d005      	beq.n	8012888 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	2b01      	cmp	r3, #1
 8012880:	d002      	beq.n	8012888 <USB_HC_Halt+0x7e>
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	2b03      	cmp	r3, #3
 8012886:	d101      	bne.n	801288c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8012888:	2300      	movs	r3, #0
 801288a:	e0d8      	b.n	8012a3e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d002      	beq.n	8012898 <USB_HC_Halt+0x8e>
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	2b02      	cmp	r3, #2
 8012896:	d173      	bne.n	8012980 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	015a      	lsls	r2, r3, #5
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	4413      	add	r3, r2
 80128a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	69ba      	ldr	r2, [r7, #24]
 80128a8:	0151      	lsls	r1, r2, #5
 80128aa:	69fa      	ldr	r2, [r7, #28]
 80128ac:	440a      	add	r2, r1
 80128ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80128b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80128b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	689b      	ldr	r3, [r3, #8]
 80128bc:	f003 0320 	and.w	r3, r3, #32
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d14a      	bne.n	801295a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d133      	bne.n	8012938 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	015a      	lsls	r2, r3, #5
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	4413      	add	r3, r2
 80128d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	69ba      	ldr	r2, [r7, #24]
 80128e0:	0151      	lsls	r1, r2, #5
 80128e2:	69fa      	ldr	r2, [r7, #28]
 80128e4:	440a      	add	r2, r1
 80128e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80128ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80128ee:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	015a      	lsls	r2, r3, #5
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	4413      	add	r3, r2
 80128f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	69ba      	ldr	r2, [r7, #24]
 8012900:	0151      	lsls	r1, r2, #5
 8012902:	69fa      	ldr	r2, [r7, #28]
 8012904:	440a      	add	r2, r1
 8012906:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801290a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801290e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	3301      	adds	r3, #1
 8012914:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801291c:	d82e      	bhi.n	801297c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801291e:	69bb      	ldr	r3, [r7, #24]
 8012920:	015a      	lsls	r2, r3, #5
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	4413      	add	r3, r2
 8012926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012934:	d0ec      	beq.n	8012910 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012936:	e081      	b.n	8012a3c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	015a      	lsls	r2, r3, #5
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	4413      	add	r3, r2
 8012940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	69ba      	ldr	r2, [r7, #24]
 8012948:	0151      	lsls	r1, r2, #5
 801294a:	69fa      	ldr	r2, [r7, #28]
 801294c:	440a      	add	r2, r1
 801294e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012952:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012956:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012958:	e070      	b.n	8012a3c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801295a:	69bb      	ldr	r3, [r7, #24]
 801295c:	015a      	lsls	r2, r3, #5
 801295e:	69fb      	ldr	r3, [r7, #28]
 8012960:	4413      	add	r3, r2
 8012962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	69ba      	ldr	r2, [r7, #24]
 801296a:	0151      	lsls	r1, r2, #5
 801296c:	69fa      	ldr	r2, [r7, #28]
 801296e:	440a      	add	r2, r1
 8012970:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012978:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801297a:	e05f      	b.n	8012a3c <USB_HC_Halt+0x232>
            break;
 801297c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801297e:	e05d      	b.n	8012a3c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	015a      	lsls	r2, r3, #5
 8012984:	69fb      	ldr	r3, [r7, #28]
 8012986:	4413      	add	r3, r2
 8012988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	69ba      	ldr	r2, [r7, #24]
 8012990:	0151      	lsls	r1, r2, #5
 8012992:	69fa      	ldr	r2, [r7, #28]
 8012994:	440a      	add	r2, r1
 8012996:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801299a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801299e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80129a6:	691b      	ldr	r3, [r3, #16]
 80129a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d133      	bne.n	8012a18 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80129b0:	69bb      	ldr	r3, [r7, #24]
 80129b2:	015a      	lsls	r2, r3, #5
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	4413      	add	r3, r2
 80129b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	69ba      	ldr	r2, [r7, #24]
 80129c0:	0151      	lsls	r1, r2, #5
 80129c2:	69fa      	ldr	r2, [r7, #28]
 80129c4:	440a      	add	r2, r1
 80129c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80129ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80129ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	015a      	lsls	r2, r3, #5
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	4413      	add	r3, r2
 80129d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	69ba      	ldr	r2, [r7, #24]
 80129e0:	0151      	lsls	r1, r2, #5
 80129e2:	69fa      	ldr	r2, [r7, #28]
 80129e4:	440a      	add	r2, r1
 80129e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80129ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80129ee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	3301      	adds	r3, #1
 80129f4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80129fc:	d81d      	bhi.n	8012a3a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80129fe:	69bb      	ldr	r3, [r7, #24]
 8012a00:	015a      	lsls	r2, r3, #5
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	4413      	add	r3, r2
 8012a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012a10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012a14:	d0ec      	beq.n	80129f0 <USB_HC_Halt+0x1e6>
 8012a16:	e011      	b.n	8012a3c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	015a      	lsls	r2, r3, #5
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	4413      	add	r3, r2
 8012a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	69ba      	ldr	r2, [r7, #24]
 8012a28:	0151      	lsls	r1, r2, #5
 8012a2a:	69fa      	ldr	r2, [r7, #28]
 8012a2c:	440a      	add	r2, r1
 8012a2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012a32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012a36:	6013      	str	r3, [r2, #0]
 8012a38:	e000      	b.n	8012a3c <USB_HC_Halt+0x232>
          break;
 8012a3a:	bf00      	nop
    }
  }

  return HAL_OK;
 8012a3c:	2300      	movs	r3, #0
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3724      	adds	r7, #36	@ 0x24
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr
	...

08012a4c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b087      	sub	sp, #28
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	460b      	mov	r3, r1
 8012a56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012a5c:	78fb      	ldrb	r3, [r7, #3]
 8012a5e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012a60:	2301      	movs	r3, #1
 8012a62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	04da      	lsls	r2, r3, #19
 8012a68:	4b15      	ldr	r3, [pc, #84]	@ (8012ac0 <USB_DoPing+0x74>)
 8012a6a:	4013      	ands	r3, r2
 8012a6c:	693a      	ldr	r2, [r7, #16]
 8012a6e:	0151      	lsls	r1, r2, #5
 8012a70:	697a      	ldr	r2, [r7, #20]
 8012a72:	440a      	add	r2, r1
 8012a74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012a78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012a7c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	015a      	lsls	r2, r3, #5
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	4413      	add	r3, r2
 8012a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012a94:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012a9c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	015a      	lsls	r2, r3, #5
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012aaa:	461a      	mov	r2, r3
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	371c      	adds	r7, #28
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr
 8012abe:	bf00      	nop
 8012ac0:	1ff80000 	.word	0x1ff80000

08012ac4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b088      	sub	sp, #32
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8012acc:	2300      	movs	r3, #0
 8012ace:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7fe ff92 	bl	8011a02 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012ade:	2110      	movs	r1, #16
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f7fe ffeb 	bl	8011abc <USB_FlushTxFifo>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d001      	beq.n	8012af0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8012aec:	2301      	movs	r3, #1
 8012aee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f7ff f815 	bl	8011b20 <USB_FlushRxFifo>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d001      	beq.n	8012b00 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8012afc:	2301      	movs	r3, #1
 8012afe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012b00:	2300      	movs	r3, #0
 8012b02:	61bb      	str	r3, [r7, #24]
 8012b04:	e01f      	b.n	8012b46 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8012b06:	69bb      	ldr	r3, [r7, #24]
 8012b08:	015a      	lsls	r2, r3, #5
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012b1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012b2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	015a      	lsls	r2, r3, #5
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	4413      	add	r3, r2
 8012b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	3301      	adds	r3, #1
 8012b44:	61bb      	str	r3, [r7, #24]
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	2b0f      	cmp	r3, #15
 8012b4a:	d9dc      	bls.n	8012b06 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	61bb      	str	r3, [r7, #24]
 8012b50:	e034      	b.n	8012bbc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	015a      	lsls	r2, r3, #5
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	4413      	add	r3, r2
 8012b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012b68:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012b70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012b78:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	015a      	lsls	r2, r3, #5
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	4413      	add	r3, r2
 8012b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012b86:	461a      	mov	r2, r3
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012b98:	d80c      	bhi.n	8012bb4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	015a      	lsls	r2, r3, #5
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	4413      	add	r3, r2
 8012ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012bac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012bb0:	d0ec      	beq.n	8012b8c <USB_StopHost+0xc8>
 8012bb2:	e000      	b.n	8012bb6 <USB_StopHost+0xf2>
        break;
 8012bb4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	3301      	adds	r3, #1
 8012bba:	61bb      	str	r3, [r7, #24]
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	2b0f      	cmp	r3, #15
 8012bc0:	d9c7      	bls.n	8012b52 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012bc8:	461a      	mov	r2, r3
 8012bca:	f04f 33ff 	mov.w	r3, #4294967295
 8012bce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8012bd6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f7fe ff01 	bl	80119e0 <USB_EnableGlobalInt>

  return ret;
 8012bde:	7ffb      	ldrb	r3, [r7, #31]
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3720      	adds	r7, #32
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}

08012be8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012bec:	4904      	ldr	r1, [pc, #16]	@ (8012c00 <MX_FATFS_Init+0x18>)
 8012bee:	4805      	ldr	r0, [pc, #20]	@ (8012c04 <MX_FATFS_Init+0x1c>)
 8012bf0:	f005 fd3c 	bl	801866c <FATFS_LinkDriver>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	4b03      	ldr	r3, [pc, #12]	@ (8012c08 <MX_FATFS_Init+0x20>)
 8012bfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012bfc:	bf00      	nop
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	2000225c 	.word	0x2000225c
 8012c04:	0801f4d0 	.word	0x0801f4d0
 8012c08:	20002258 	.word	0x20002258

08012c0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012c10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr

08012c1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012c22:	2300      	movs	r3, #0
 8012c24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012c26:	f000 f8d2 	bl	8012dce <BSP_SD_IsDetected>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d001      	beq.n	8012c34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012c30:	2302      	movs	r3, #2
 8012c32:	e012      	b.n	8012c5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012c34:	480b      	ldr	r0, [pc, #44]	@ (8012c64 <BSP_SD_Init+0x48>)
 8012c36:	f7f9 fbaf 	bl	800c398 <HAL_SD_Init>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012c3e:	79fb      	ldrb	r3, [r7, #7]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d109      	bne.n	8012c58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012c44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012c48:	4806      	ldr	r0, [pc, #24]	@ (8012c64 <BSP_SD_Init+0x48>)
 8012c4a:	f7fa fcd1 	bl	800d5f0 <HAL_SD_ConfigWideBusOperation>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d001      	beq.n	8012c58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012c54:	2301      	movs	r3, #1
 8012c56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012c58:	79fb      	ldrb	r3, [r7, #7]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	2000147c 	.word	0x2000147c

08012c68 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b088      	sub	sp, #32
 8012c6c:	af02      	add	r7, sp, #8
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	60b9      	str	r1, [r7, #8]
 8012c72:	607a      	str	r2, [r7, #4]
 8012c74:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8012c76:	2300      	movs	r3, #0
 8012c78:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	9300      	str	r3, [sp, #0]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	68ba      	ldr	r2, [r7, #8]
 8012c82:	68f9      	ldr	r1, [r7, #12]
 8012c84:	4806      	ldr	r0, [pc, #24]	@ (8012ca0 <BSP_SD_ReadBlocks+0x38>)
 8012c86:	f7f9 fc37 	bl	800c4f8 <HAL_SD_ReadBlocks>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d001      	beq.n	8012c94 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012c90:	2301      	movs	r3, #1
 8012c92:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3718      	adds	r7, #24
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	2000147c 	.word	0x2000147c

08012ca4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b088      	sub	sp, #32
 8012ca8:	af02      	add	r7, sp, #8
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	60b9      	str	r1, [r7, #8]
 8012cae:	607a      	str	r2, [r7, #4]
 8012cb0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	9300      	str	r3, [sp, #0]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	68ba      	ldr	r2, [r7, #8]
 8012cbe:	68f9      	ldr	r1, [r7, #12]
 8012cc0:	4806      	ldr	r0, [pc, #24]	@ (8012cdc <BSP_SD_WriteBlocks+0x38>)
 8012cc2:	f7f9 fdf7 	bl	800c8b4 <HAL_SD_WriteBlocks>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d001      	beq.n	8012cd0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012ccc:	2301      	movs	r3, #1
 8012cce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3718      	adds	r7, #24
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	2000147c 	.word	0x2000147c

08012ce0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b086      	sub	sp, #24
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012cec:	2300      	movs	r3, #0
 8012cee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	68ba      	ldr	r2, [r7, #8]
 8012cf4:	68f9      	ldr	r1, [r7, #12]
 8012cf6:	4806      	ldr	r0, [pc, #24]	@ (8012d10 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012cf8:	f7f9 ff62 	bl	800cbc0 <HAL_SD_ReadBlocks_DMA>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d001      	beq.n	8012d06 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012d02:	2301      	movs	r3, #1
 8012d04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3718      	adds	r7, #24
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	2000147c 	.word	0x2000147c

08012d14 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b086      	sub	sp, #24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012d20:	2300      	movs	r3, #0
 8012d22:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	68ba      	ldr	r2, [r7, #8]
 8012d28:	68f9      	ldr	r1, [r7, #12]
 8012d2a:	4806      	ldr	r0, [pc, #24]	@ (8012d44 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012d2c:	f7fa f82a 	bl	800cd84 <HAL_SD_WriteBlocks_DMA>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d001      	beq.n	8012d3a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012d36:	2301      	movs	r3, #1
 8012d38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3718      	adds	r7, #24
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	2000147c 	.word	0x2000147c

08012d48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012d4c:	4805      	ldr	r0, [pc, #20]	@ (8012d64 <BSP_SD_GetCardState+0x1c>)
 8012d4e:	f7fa fce9 	bl	800d724 <HAL_SD_GetCardState>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b04      	cmp	r3, #4
 8012d56:	bf14      	ite	ne
 8012d58:	2301      	movne	r3, #1
 8012d5a:	2300      	moveq	r3, #0
 8012d5c:	b2db      	uxtb	r3, r3
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	2000147c 	.word	0x2000147c

08012d68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012d70:	6879      	ldr	r1, [r7, #4]
 8012d72:	4803      	ldr	r0, [pc, #12]	@ (8012d80 <BSP_SD_GetCardInfo+0x18>)
 8012d74:	f7fa fc10 	bl	800d598 <HAL_SD_GetCardInfo>
}
 8012d78:	bf00      	nop
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}
 8012d80:	2000147c 	.word	0x2000147c

08012d84 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012d8c:	f000 f818 	bl	8012dc0 <BSP_SD_AbortCallback>
}
 8012d90:	bf00      	nop
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}

08012d98 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012da0:	f000 f9be 	bl	8013120 <BSP_SD_WriteCpltCallback>
}
 8012da4:	bf00      	nop
 8012da6:	3708      	adds	r7, #8
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012db4:	f000 f9c2 	bl	801313c <BSP_SD_ReadCpltCallback>
}
 8012db8:	bf00      	nop
 8012dba:	3708      	adds	r7, #8
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	af00      	add	r7, sp, #0

}
 8012dc4:	bf00      	nop
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr

08012dce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012dce:	b580      	push	{r7, lr}
 8012dd0:	b082      	sub	sp, #8
 8012dd2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012dd8:	f000 f80c 	bl	8012df4 <BSP_PlatformIsDetected>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d101      	bne.n	8012de6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012de2:	2300      	movs	r3, #0
 8012de4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012de6:	79fb      	ldrb	r3, [r7, #7]
 8012de8:	b2db      	uxtb	r3, r3
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3708      	adds	r7, #8
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
	...

08012df4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b082      	sub	sp, #8
 8012df8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012dfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8012e02:	4806      	ldr	r0, [pc, #24]	@ (8012e1c <BSP_PlatformIsDetected+0x28>)
 8012e04:	f7f4 fbba 	bl	800757c <HAL_GPIO_ReadPin>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d001      	beq.n	8012e12 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012e12:	79fb      	ldrb	r3, [r7, #7]
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	3708      	adds	r7, #8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	40020800 	.word	0x40020800

08012e20 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8012e28:	f005 fcb8 	bl	801879c <osKernelSysTick>
 8012e2c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8012e2e:	e006      	b.n	8012e3e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012e30:	f7ff ff8a 	bl	8012d48 <BSP_SD_GetCardState>
 8012e34:	4603      	mov	r3, r0
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d101      	bne.n	8012e3e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	e009      	b.n	8012e52 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8012e3e:	f005 fcad 	bl	801879c <osKernelSysTick>
 8012e42:	4602      	mov	r2, r0
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d8f0      	bhi.n	8012e30 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3710      	adds	r7, #16
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
	...

08012e5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b082      	sub	sp, #8
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012e66:	4b0b      	ldr	r3, [pc, #44]	@ (8012e94 <SD_CheckStatus+0x38>)
 8012e68:	2201      	movs	r2, #1
 8012e6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012e6c:	f7ff ff6c 	bl	8012d48 <BSP_SD_GetCardState>
 8012e70:	4603      	mov	r3, r0
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d107      	bne.n	8012e86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012e76:	4b07      	ldr	r3, [pc, #28]	@ (8012e94 <SD_CheckStatus+0x38>)
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	b2db      	uxtb	r3, r3
 8012e7c:	f023 0301 	bic.w	r3, r3, #1
 8012e80:	b2da      	uxtb	r2, r3
 8012e82:	4b04      	ldr	r3, [pc, #16]	@ (8012e94 <SD_CheckStatus+0x38>)
 8012e84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012e86:	4b03      	ldr	r3, [pc, #12]	@ (8012e94 <SD_CheckStatus+0x38>)
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	b2db      	uxtb	r3, r3
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}
 8012e94:	2000006d 	.word	0x2000006d

08012e98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012e98:	b590      	push	{r4, r7, lr}
 8012e9a:	b087      	sub	sp, #28
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8012ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8012f18 <SD_initialize+0x80>)
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8012ea8:	f005 fc6c 	bl	8018784 <osKernelRunning>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d02b      	beq.n	8012f0a <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 8012eb2:	79fb      	ldrb	r3, [r7, #7]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7ff ffd1 	bl	8012e5c <SD_CheckStatus>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	4b16      	ldr	r3, [pc, #88]	@ (8012f18 <SD_initialize+0x80>)
 8012ec0:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012ec2:	4b15      	ldr	r3, [pc, #84]	@ (8012f18 <SD_initialize+0x80>)
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	d01e      	beq.n	8012f0a <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 8012ecc:	4b13      	ldr	r3, [pc, #76]	@ (8012f1c <SD_initialize+0x84>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d10e      	bne.n	8012ef2 <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8012ed4:	4b12      	ldr	r3, [pc, #72]	@ (8012f20 <SD_initialize+0x88>)
 8012ed6:	f107 0408 	add.w	r4, r7, #8
 8012eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8012ee0:	f107 0308 	add.w	r3, r7, #8
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f005 fd9f 	bl	8018a2a <osMessageCreate>
 8012eec:	4603      	mov	r3, r0
 8012eee:	4a0b      	ldr	r2, [pc, #44]	@ (8012f1c <SD_initialize+0x84>)
 8012ef0:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8012ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8012f1c <SD_initialize+0x84>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d107      	bne.n	8012f0a <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8012efa:	4b07      	ldr	r3, [pc, #28]	@ (8012f18 <SD_initialize+0x80>)
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	f043 0301 	orr.w	r3, r3, #1
 8012f04:	b2da      	uxtb	r2, r3
 8012f06:	4b04      	ldr	r3, [pc, #16]	@ (8012f18 <SD_initialize+0x80>)
 8012f08:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8012f0a:	4b03      	ldr	r3, [pc, #12]	@ (8012f18 <SD_initialize+0x80>)
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	b2db      	uxtb	r3, r3
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	371c      	adds	r7, #28
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd90      	pop	{r4, r7, pc}
 8012f18:	2000006d 	.word	0x2000006d
 8012f1c:	20002494 	.word	0x20002494
 8012f20:	0801f418 	.word	0x0801f418

08012f24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012f2e:	79fb      	ldrb	r3, [r7, #7]
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7ff ff93 	bl	8012e5c <SD_CheckStatus>
 8012f36:	4603      	mov	r3, r0
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b08a      	sub	sp, #40	@ 0x28
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	60b9      	str	r1, [r7, #8]
 8012f48:	607a      	str	r2, [r7, #4]
 8012f4a:	603b      	str	r3, [r7, #0]
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8012f50:	2301      	movs	r3, #1
 8012f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012f56:	f247 5030 	movw	r0, #30000	@ 0x7530
 8012f5a:	f7ff ff61 	bl	8012e20 <SD_CheckStatusWithTimeout>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	da02      	bge.n	8012f6a <SD_read+0x2a>
  {
    return res;
 8012f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f68:	e032      	b.n	8012fd0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8012f6a:	683a      	ldr	r2, [r7, #0]
 8012f6c:	6879      	ldr	r1, [r7, #4]
 8012f6e:	68b8      	ldr	r0, [r7, #8]
 8012f70:	f7ff feb6 	bl	8012ce0 <BSP_SD_ReadBlocks_DMA>
 8012f74:	4603      	mov	r3, r0
 8012f76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8012f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d124      	bne.n	8012fcc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012f82:	4b15      	ldr	r3, [pc, #84]	@ (8012fd8 <SD_read+0x98>)
 8012f84:	6819      	ldr	r1, [r3, #0]
 8012f86:	f107 0314 	add.w	r3, r7, #20
 8012f8a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f005 fdb4 	bl	8018afc <osMessageGet>

    if (event.status == osEventMessage)
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	2b10      	cmp	r3, #16
 8012f98:	d118      	bne.n	8012fcc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d115      	bne.n	8012fcc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012fa0:	f005 fbfc 	bl	801879c <osKernelSysTick>
 8012fa4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012fa6:	e008      	b.n	8012fba <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012fa8:	f7ff fece 	bl	8012d48 <BSP_SD_GetCardState>
 8012fac:	4603      	mov	r3, r0
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d103      	bne.n	8012fba <SD_read+0x7a>
              {
                res = RES_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8012fb8:	e008      	b.n	8012fcc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012fba:	f005 fbef 	bl	801879c <osKernelSysTick>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	6a3b      	ldr	r3, [r7, #32]
 8012fc2:	1ad3      	subs	r3, r2, r3
 8012fc4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	d9ed      	bls.n	8012fa8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3728      	adds	r7, #40	@ 0x28
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	20002494 	.word	0x20002494

08012fdc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b08a      	sub	sp, #40	@ 0x28
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60b9      	str	r1, [r7, #8]
 8012fe4:	607a      	str	r2, [r7, #4]
 8012fe6:	603b      	str	r3, [r7, #0]
 8012fe8:	4603      	mov	r3, r0
 8012fea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012fec:	2301      	movs	r3, #1
 8012fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012ff2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8012ff6:	f7ff ff13 	bl	8012e20 <SD_CheckStatusWithTimeout>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	da02      	bge.n	8013006 <SD_write+0x2a>
  {
    return res;
 8013000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013004:	e02e      	b.n	8013064 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013006:	683a      	ldr	r2, [r7, #0]
 8013008:	6879      	ldr	r1, [r7, #4]
 801300a:	68b8      	ldr	r0, [r7, #8]
 801300c:	f7ff fe82 	bl	8012d14 <BSP_SD_WriteBlocks_DMA>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d124      	bne.n	8013060 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8013016:	4b15      	ldr	r3, [pc, #84]	@ (801306c <SD_write+0x90>)
 8013018:	6819      	ldr	r1, [r3, #0]
 801301a:	f107 0314 	add.w	r3, r7, #20
 801301e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8013022:	4618      	mov	r0, r3
 8013024:	f005 fd6a 	bl	8018afc <osMessageGet>

    if (event.status == osEventMessage)
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	2b10      	cmp	r3, #16
 801302c:	d118      	bne.n	8013060 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 801302e:	69bb      	ldr	r3, [r7, #24]
 8013030:	2b02      	cmp	r3, #2
 8013032:	d115      	bne.n	8013060 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8013034:	f005 fbb2 	bl	801879c <osKernelSysTick>
 8013038:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801303a:	e008      	b.n	801304e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801303c:	f7ff fe84 	bl	8012d48 <BSP_SD_GetCardState>
 8013040:	4603      	mov	r3, r0
 8013042:	2b00      	cmp	r3, #0
 8013044:	d103      	bne.n	801304e <SD_write+0x72>
          {
            res = RES_OK;
 8013046:	2300      	movs	r3, #0
 8013048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801304c:	e008      	b.n	8013060 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801304e:	f005 fba5 	bl	801879c <osKernelSysTick>
 8013052:	4602      	mov	r2, r0
 8013054:	6a3b      	ldr	r3, [r7, #32]
 8013056:	1ad3      	subs	r3, r2, r3
 8013058:	f247 522f 	movw	r2, #29999	@ 0x752f
 801305c:	4293      	cmp	r3, r2
 801305e:	d9ed      	bls.n	801303c <SD_write+0x60>
    }

  }
#endif

  return res;
 8013060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013064:	4618      	mov	r0, r3
 8013066:	3728      	adds	r7, #40	@ 0x28
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}
 801306c:	20002494 	.word	0x20002494

08013070 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b08c      	sub	sp, #48	@ 0x30
 8013074:	af00      	add	r7, sp, #0
 8013076:	4603      	mov	r3, r0
 8013078:	603a      	str	r2, [r7, #0]
 801307a:	71fb      	strb	r3, [r7, #7]
 801307c:	460b      	mov	r3, r1
 801307e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013080:	2301      	movs	r3, #1
 8013082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013086:	4b25      	ldr	r3, [pc, #148]	@ (801311c <SD_ioctl+0xac>)
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	b2db      	uxtb	r3, r3
 801308c:	f003 0301 	and.w	r3, r3, #1
 8013090:	2b00      	cmp	r3, #0
 8013092:	d001      	beq.n	8013098 <SD_ioctl+0x28>
 8013094:	2303      	movs	r3, #3
 8013096:	e03c      	b.n	8013112 <SD_ioctl+0xa2>

  switch (cmd)
 8013098:	79bb      	ldrb	r3, [r7, #6]
 801309a:	2b03      	cmp	r3, #3
 801309c:	d834      	bhi.n	8013108 <SD_ioctl+0x98>
 801309e:	a201      	add	r2, pc, #4	@ (adr r2, 80130a4 <SD_ioctl+0x34>)
 80130a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a4:	080130b5 	.word	0x080130b5
 80130a8:	080130bd 	.word	0x080130bd
 80130ac:	080130d5 	.word	0x080130d5
 80130b0:	080130ef 	.word	0x080130ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80130b4:	2300      	movs	r3, #0
 80130b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80130ba:	e028      	b.n	801310e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80130bc:	f107 030c 	add.w	r3, r7, #12
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7ff fe51 	bl	8012d68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80130c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80130cc:	2300      	movs	r3, #0
 80130ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80130d2:	e01c      	b.n	801310e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80130d4:	f107 030c 	add.w	r3, r7, #12
 80130d8:	4618      	mov	r0, r3
 80130da:	f7ff fe45 	bl	8012d68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80130de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80130e6:	2300      	movs	r3, #0
 80130e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80130ec:	e00f      	b.n	801310e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80130ee:	f107 030c 	add.w	r3, r7, #12
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff fe38 	bl	8012d68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80130f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130fa:	0a5a      	lsrs	r2, r3, #9
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013100:	2300      	movs	r3, #0
 8013102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013106:	e002      	b.n	801310e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013108:	2304      	movs	r3, #4
 801310a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801310e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013112:	4618      	mov	r0, r3
 8013114:	3730      	adds	r7, #48	@ 0x30
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	2000006d 	.word	0x2000006d

08013120 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8013124:	4b04      	ldr	r3, [pc, #16]	@ (8013138 <BSP_SD_WriteCpltCallback+0x18>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	2200      	movs	r2, #0
 801312a:	2102      	movs	r1, #2
 801312c:	4618      	mov	r0, r3
 801312e:	f005 fca5 	bl	8018a7c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8013132:	bf00      	nop
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	20002494 	.word	0x20002494

0801313c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8013140:	4b04      	ldr	r3, [pc, #16]	@ (8013154 <BSP_SD_ReadCpltCallback+0x18>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	2200      	movs	r2, #0
 8013146:	2101      	movs	r1, #1
 8013148:	4618      	mov	r0, r3
 801314a:	f005 fc97 	bl	8018a7c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 801314e:	bf00      	nop
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	20002494 	.word	0x20002494

08013158 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8013158:	b590      	push	{r4, r7, lr}
 801315a:	b089      	sub	sp, #36	@ 0x24
 801315c:	af04      	add	r7, sp, #16
 801315e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8013160:	2301      	movs	r3, #1
 8013162:	2202      	movs	r2, #2
 8013164:	2102      	movs	r1, #2
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f000 fcbd 	bl	8013ae6 <USBH_FindInterface>
 801316c:	4603      	mov	r3, r0
 801316e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8013170:	7bfb      	ldrb	r3, [r7, #15]
 8013172:	2bff      	cmp	r3, #255	@ 0xff
 8013174:	d002      	beq.n	801317c <USBH_CDC_InterfaceInit+0x24>
 8013176:	7bfb      	ldrb	r3, [r7, #15]
 8013178:	2b01      	cmp	r3, #1
 801317a:	d901      	bls.n	8013180 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801317c:	2302      	movs	r3, #2
 801317e:	e13d      	b.n	80133fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8013180:	7bfb      	ldrb	r3, [r7, #15]
 8013182:	4619      	mov	r1, r3
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f000 fc92 	bl	8013aae <USBH_SelectInterface>
 801318a:	4603      	mov	r3, r0
 801318c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801318e:	7bbb      	ldrb	r3, [r7, #14]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d001      	beq.n	8013198 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8013194:	2302      	movs	r3, #2
 8013196:	e131      	b.n	80133fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 801319e:	2050      	movs	r0, #80	@ 0x50
 80131a0:	f008 fdf0 	bl	801bd84 <malloc>
 80131a4:	4603      	mov	r3, r0
 80131a6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80131ae:	69db      	ldr	r3, [r3, #28]
 80131b0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d101      	bne.n	80131bc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80131b8:	2302      	movs	r3, #2
 80131ba:	e11f      	b.n	80133fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80131bc:	2250      	movs	r2, #80	@ 0x50
 80131be:	2100      	movs	r1, #0
 80131c0:	68b8      	ldr	r0, [r7, #8]
 80131c2:	f008 ff31 	bl	801c028 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80131c6:	7bfb      	ldrb	r3, [r7, #15]
 80131c8:	687a      	ldr	r2, [r7, #4]
 80131ca:	211a      	movs	r1, #26
 80131cc:	fb01 f303 	mul.w	r3, r1, r3
 80131d0:	4413      	add	r3, r2
 80131d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	b25b      	sxtb	r3, r3
 80131da:	2b00      	cmp	r3, #0
 80131dc:	da15      	bge.n	801320a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80131de:	7bfb      	ldrb	r3, [r7, #15]
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	211a      	movs	r1, #26
 80131e4:	fb01 f303 	mul.w	r3, r1, r3
 80131e8:	4413      	add	r3, r2
 80131ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80131ee:	781a      	ldrb	r2, [r3, #0]
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80131f4:	7bfb      	ldrb	r3, [r7, #15]
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	211a      	movs	r1, #26
 80131fa:	fb01 f303 	mul.w	r3, r1, r3
 80131fe:	4413      	add	r3, r2
 8013200:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8013204:	881a      	ldrh	r2, [r3, #0]
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	785b      	ldrb	r3, [r3, #1]
 801320e:	4619      	mov	r1, r3
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f002 f90c 	bl	801542e <USBH_AllocPipe>
 8013216:	4603      	mov	r3, r0
 8013218:	461a      	mov	r2, r3
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	7819      	ldrb	r1, [r3, #0]
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	7858      	ldrb	r0, [r3, #1]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013232:	68ba      	ldr	r2, [r7, #8]
 8013234:	8952      	ldrh	r2, [r2, #10]
 8013236:	9202      	str	r2, [sp, #8]
 8013238:	2203      	movs	r2, #3
 801323a:	9201      	str	r2, [sp, #4]
 801323c:	9300      	str	r3, [sp, #0]
 801323e:	4623      	mov	r3, r4
 8013240:	4602      	mov	r2, r0
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f002 f8c4 	bl	80153d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	2200      	movs	r2, #0
 801324e:	4619      	mov	r1, r3
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f008 fd11 	bl	801bc78 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8013256:	2300      	movs	r3, #0
 8013258:	2200      	movs	r2, #0
 801325a:	210a      	movs	r1, #10
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 fc42 	bl	8013ae6 <USBH_FindInterface>
 8013262:	4603      	mov	r3, r0
 8013264:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8013266:	7bfb      	ldrb	r3, [r7, #15]
 8013268:	2bff      	cmp	r3, #255	@ 0xff
 801326a:	d002      	beq.n	8013272 <USBH_CDC_InterfaceInit+0x11a>
 801326c:	7bfb      	ldrb	r3, [r7, #15]
 801326e:	2b01      	cmp	r3, #1
 8013270:	d901      	bls.n	8013276 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8013272:	2302      	movs	r3, #2
 8013274:	e0c2      	b.n	80133fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8013276:	7bfb      	ldrb	r3, [r7, #15]
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	211a      	movs	r1, #26
 801327c:	fb01 f303 	mul.w	r3, r1, r3
 8013280:	4413      	add	r3, r2
 8013282:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	b25b      	sxtb	r3, r3
 801328a:	2b00      	cmp	r3, #0
 801328c:	da16      	bge.n	80132bc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801328e:	7bfb      	ldrb	r3, [r7, #15]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	211a      	movs	r1, #26
 8013294:	fb01 f303 	mul.w	r3, r1, r3
 8013298:	4413      	add	r3, r2
 801329a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801329e:	781a      	ldrb	r2, [r3, #0]
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80132a4:	7bfb      	ldrb	r3, [r7, #15]
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	211a      	movs	r1, #26
 80132aa:	fb01 f303 	mul.w	r3, r1, r3
 80132ae:	4413      	add	r3, r2
 80132b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80132b4:	881a      	ldrh	r2, [r3, #0]
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	835a      	strh	r2, [r3, #26]
 80132ba:	e015      	b.n	80132e8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80132bc:	7bfb      	ldrb	r3, [r7, #15]
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	211a      	movs	r1, #26
 80132c2:	fb01 f303 	mul.w	r3, r1, r3
 80132c6:	4413      	add	r3, r2
 80132c8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80132cc:	781a      	ldrb	r2, [r3, #0]
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80132d2:	7bfb      	ldrb	r3, [r7, #15]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	211a      	movs	r1, #26
 80132d8:	fb01 f303 	mul.w	r3, r1, r3
 80132dc:	4413      	add	r3, r2
 80132de:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80132e2:	881a      	ldrh	r2, [r3, #0]
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80132e8:	7bfb      	ldrb	r3, [r7, #15]
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	211a      	movs	r1, #26
 80132ee:	fb01 f303 	mul.w	r3, r1, r3
 80132f2:	4413      	add	r3, r2
 80132f4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	b25b      	sxtb	r3, r3
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	da16      	bge.n	801332e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8013300:	7bfb      	ldrb	r3, [r7, #15]
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	211a      	movs	r1, #26
 8013306:	fb01 f303 	mul.w	r3, r1, r3
 801330a:	4413      	add	r3, r2
 801330c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8013310:	781a      	ldrb	r2, [r3, #0]
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013316:	7bfb      	ldrb	r3, [r7, #15]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	211a      	movs	r1, #26
 801331c:	fb01 f303 	mul.w	r3, r1, r3
 8013320:	4413      	add	r3, r2
 8013322:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8013326:	881a      	ldrh	r2, [r3, #0]
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	835a      	strh	r2, [r3, #26]
 801332c:	e015      	b.n	801335a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801332e:	7bfb      	ldrb	r3, [r7, #15]
 8013330:	687a      	ldr	r2, [r7, #4]
 8013332:	211a      	movs	r1, #26
 8013334:	fb01 f303 	mul.w	r3, r1, r3
 8013338:	4413      	add	r3, r2
 801333a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 801333e:	781a      	ldrb	r2, [r3, #0]
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013344:	7bfb      	ldrb	r3, [r7, #15]
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	211a      	movs	r1, #26
 801334a:	fb01 f303 	mul.w	r3, r1, r3
 801334e:	4413      	add	r3, r2
 8013350:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8013354:	881a      	ldrh	r2, [r3, #0]
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	7b9b      	ldrb	r3, [r3, #14]
 801335e:	4619      	mov	r1, r3
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f002 f864 	bl	801542e <USBH_AllocPipe>
 8013366:	4603      	mov	r3, r0
 8013368:	461a      	mov	r2, r3
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	7bdb      	ldrb	r3, [r3, #15]
 8013372:	4619      	mov	r1, r3
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f002 f85a 	bl	801542e <USBH_AllocPipe>
 801337a:	4603      	mov	r3, r0
 801337c:	461a      	mov	r2, r3
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	7b59      	ldrb	r1, [r3, #13]
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	7b98      	ldrb	r0, [r3, #14]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013396:	68ba      	ldr	r2, [r7, #8]
 8013398:	8b12      	ldrh	r2, [r2, #24]
 801339a:	9202      	str	r2, [sp, #8]
 801339c:	2202      	movs	r2, #2
 801339e:	9201      	str	r2, [sp, #4]
 80133a0:	9300      	str	r3, [sp, #0]
 80133a2:	4623      	mov	r3, r4
 80133a4:	4602      	mov	r2, r0
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f002 f812 	bl	80153d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	7b19      	ldrb	r1, [r3, #12]
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	7bd8      	ldrb	r0, [r3, #15]
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80133c0:	68ba      	ldr	r2, [r7, #8]
 80133c2:	8b52      	ldrh	r2, [r2, #26]
 80133c4:	9202      	str	r2, [sp, #8]
 80133c6:	2202      	movs	r2, #2
 80133c8:	9201      	str	r2, [sp, #4]
 80133ca:	9300      	str	r3, [sp, #0]
 80133cc:	4623      	mov	r3, r4
 80133ce:	4602      	mov	r2, r0
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f001 fffd 	bl	80153d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	2200      	movs	r2, #0
 80133da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	7b5b      	ldrb	r3, [r3, #13]
 80133e2:	2200      	movs	r2, #0
 80133e4:	4619      	mov	r1, r3
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f008 fc46 	bl	801bc78 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	7b1b      	ldrb	r3, [r3, #12]
 80133f0:	2200      	movs	r2, #0
 80133f2:	4619      	mov	r1, r3
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f008 fc3f 	bl	801bc78 <USBH_LL_SetToggle>

  return USBH_OK;
 80133fa:	2300      	movs	r3, #0
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3714      	adds	r7, #20
 8013400:	46bd      	mov	sp, r7
 8013402:	bd90      	pop	{r4, r7, pc}

08013404 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b084      	sub	sp, #16
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013412:	69db      	ldr	r3, [r3, #28]
 8013414:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d00e      	beq.n	801343c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	4619      	mov	r1, r3
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f001 fff2 	bl	801540e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	781b      	ldrb	r3, [r3, #0]
 801342e:	4619      	mov	r1, r3
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f002 f81d 	bl	8015470 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2200      	movs	r2, #0
 801343a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	7b1b      	ldrb	r3, [r3, #12]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d00e      	beq.n	8013462 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	7b1b      	ldrb	r3, [r3, #12]
 8013448:	4619      	mov	r1, r3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f001 ffdf 	bl	801540e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	7b1b      	ldrb	r3, [r3, #12]
 8013454:	4619      	mov	r1, r3
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f002 f80a 	bl	8015470 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2200      	movs	r2, #0
 8013460:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	7b5b      	ldrb	r3, [r3, #13]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00e      	beq.n	8013488 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	7b5b      	ldrb	r3, [r3, #13]
 801346e:	4619      	mov	r1, r3
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f001 ffcc 	bl	801540e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	7b5b      	ldrb	r3, [r3, #13]
 801347a:	4619      	mov	r1, r3
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f001 fff7 	bl	8015470 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2200      	movs	r2, #0
 8013486:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801348e:	69db      	ldr	r3, [r3, #28]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d00b      	beq.n	80134ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801349a:	69db      	ldr	r3, [r3, #28]
 801349c:	4618      	mov	r0, r3
 801349e:	f008 fc79 	bl	801bd94 <free>
    phost->pActiveClass->pData = 0U;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80134a8:	2200      	movs	r2, #0
 80134aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80134ac:	2300      	movs	r3, #0
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}

080134b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80134b6:	b580      	push	{r7, lr}
 80134b8:	b084      	sub	sp, #16
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80134c4:	69db      	ldr	r3, [r3, #28]
 80134c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	3340      	adds	r3, #64	@ 0x40
 80134cc:	4619      	mov	r1, r3
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f000 f8b1 	bl	8013636 <GetLineCoding>
 80134d4:	4603      	mov	r3, r0
 80134d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80134d8:	7afb      	ldrb	r3, [r7, #11]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d105      	bne.n	80134ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80134e4:	2102      	movs	r1, #2
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80134ea:	7afb      	ldrb	r3, [r7, #11]
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3710      	adds	r7, #16
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80134fc:	2301      	movs	r3, #1
 80134fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8013500:	2300      	movs	r3, #0
 8013502:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801350a:	69db      	ldr	r3, [r3, #28]
 801350c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8013514:	2b04      	cmp	r3, #4
 8013516:	d877      	bhi.n	8013608 <USBH_CDC_Process+0x114>
 8013518:	a201      	add	r2, pc, #4	@ (adr r2, 8013520 <USBH_CDC_Process+0x2c>)
 801351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801351e:	bf00      	nop
 8013520:	08013535 	.word	0x08013535
 8013524:	0801353b 	.word	0x0801353b
 8013528:	0801356b 	.word	0x0801356b
 801352c:	080135df 	.word	0x080135df
 8013530:	080135ed 	.word	0x080135ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	73fb      	strb	r3, [r7, #15]
      break;
 8013538:	e06d      	b.n	8013616 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801353e:	4619      	mov	r1, r3
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f000 f897 	bl	8013674 <SetLineCoding>
 8013546:	4603      	mov	r3, r0
 8013548:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801354a:	7bbb      	ldrb	r3, [r7, #14]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d104      	bne.n	801355a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	2202      	movs	r2, #2
 8013554:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013558:	e058      	b.n	801360c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801355a:	7bbb      	ldrb	r3, [r7, #14]
 801355c:	2b01      	cmp	r3, #1
 801355e:	d055      	beq.n	801360c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	2204      	movs	r2, #4
 8013564:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8013568:	e050      	b.n	801360c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	3340      	adds	r3, #64	@ 0x40
 801356e:	4619      	mov	r1, r3
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f000 f860 	bl	8013636 <GetLineCoding>
 8013576:	4603      	mov	r3, r0
 8013578:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801357a:	7bbb      	ldrb	r3, [r7, #14]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d126      	bne.n	80135ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	2200      	movs	r2, #0
 8013584:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013592:	791b      	ldrb	r3, [r3, #4]
 8013594:	429a      	cmp	r2, r3
 8013596:	d13b      	bne.n	8013610 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d133      	bne.n	8013610 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d12b      	bne.n	8013610 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d124      	bne.n	8013610 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 f96a 	bl	80138a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80135cc:	e020      	b.n	8013610 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80135ce:	7bbb      	ldrb	r3, [r7, #14]
 80135d0:	2b01      	cmp	r3, #1
 80135d2:	d01d      	beq.n	8013610 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	2204      	movs	r2, #4
 80135d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80135dc:	e018      	b.n	8013610 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f000 f867 	bl	80136b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f000 f8e6 	bl	80137b6 <CDC_ProcessReception>
      break;
 80135ea:	e014      	b.n	8013616 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80135ec:	2100      	movs	r1, #0
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f001 f8ff 	bl	80147f2 <USBH_ClrFeature>
 80135f4:	4603      	mov	r3, r0
 80135f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80135f8:	7bbb      	ldrb	r3, [r7, #14]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d10a      	bne.n	8013614 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	2200      	movs	r2, #0
 8013602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8013606:	e005      	b.n	8013614 <USBH_CDC_Process+0x120>

    default:
      break;
 8013608:	bf00      	nop
 801360a:	e004      	b.n	8013616 <USBH_CDC_Process+0x122>
      break;
 801360c:	bf00      	nop
 801360e:	e002      	b.n	8013616 <USBH_CDC_Process+0x122>
      break;
 8013610:	bf00      	nop
 8013612:	e000      	b.n	8013616 <USBH_CDC_Process+0x122>
      break;
 8013614:	bf00      	nop

  }

  return status;
 8013616:	7bfb      	ldrb	r3, [r7, #15]
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8013620:	b480      	push	{r7}
 8013622:	b083      	sub	sp, #12
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8013628:	2300      	movs	r3, #0
}
 801362a:	4618      	mov	r0, r3
 801362c:	370c      	adds	r7, #12
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr

08013636 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8013636:	b580      	push	{r7, lr}
 8013638:	b082      	sub	sp, #8
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
 801363e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	22a1      	movs	r2, #161	@ 0xa1
 8013644:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2221      	movs	r2, #33	@ 0x21
 801364a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2200      	movs	r2, #0
 8013650:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2200      	movs	r2, #0
 8013656:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2207      	movs	r2, #7
 801365c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	2207      	movs	r2, #7
 8013662:	4619      	mov	r1, r3
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f001 fbf9 	bl	8014e5c <USBH_CtlReq>
 801366a:	4603      	mov	r3, r0
}
 801366c:	4618      	mov	r0, r3
 801366e:	3708      	adds	r7, #8
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}

08013674 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2221      	movs	r2, #33	@ 0x21
 8013682:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2220      	movs	r2, #32
 8013688:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2200      	movs	r2, #0
 801368e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2200      	movs	r2, #0
 8013694:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2207      	movs	r2, #7
 801369a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	2207      	movs	r2, #7
 80136a0:	4619      	mov	r1, r3
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f001 fbda 	bl	8014e5c <USBH_CtlReq>
 80136a8:	4603      	mov	r3, r0
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3708      	adds	r7, #8
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b086      	sub	sp, #24
 80136b6:	af02      	add	r7, sp, #8
 80136b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80136c0:	69db      	ldr	r3, [r3, #28]
 80136c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80136c4:	2300      	movs	r3, #0
 80136c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d002      	beq.n	80136d8 <CDC_ProcessTransmission+0x26>
 80136d2:	2b02      	cmp	r3, #2
 80136d4:	d023      	beq.n	801371e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80136d6:	e06a      	b.n	80137ae <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136dc:	68fa      	ldr	r2, [r7, #12]
 80136de:	8b12      	ldrh	r2, [r2, #24]
 80136e0:	4293      	cmp	r3, r2
 80136e2:	d90b      	bls.n	80136fc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	69d9      	ldr	r1, [r3, #28]
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	8b1a      	ldrh	r2, [r3, #24]
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	7b5b      	ldrb	r3, [r3, #13]
 80136f0:	2001      	movs	r0, #1
 80136f2:	9000      	str	r0, [sp, #0]
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f001 fe28 	bl	801534a <USBH_BulkSendData>
 80136fa:	e00b      	b.n	8013714 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8013704:	b29a      	uxth	r2, r3
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	7b5b      	ldrb	r3, [r3, #13]
 801370a:	2001      	movs	r0, #1
 801370c:	9000      	str	r0, [sp, #0]
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f001 fe1b 	bl	801534a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	2202      	movs	r2, #2
 8013718:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 801371c:	e047      	b.n	80137ae <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	7b5b      	ldrb	r3, [r3, #13]
 8013722:	4619      	mov	r1, r3
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f008 fa7d 	bl	801bc24 <USBH_LL_GetURBState>
 801372a:	4603      	mov	r3, r0
 801372c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801372e:	7afb      	ldrb	r3, [r7, #11]
 8013730:	2b01      	cmp	r3, #1
 8013732:	d12e      	bne.n	8013792 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013738:	68fa      	ldr	r2, [r7, #12]
 801373a:	8b12      	ldrh	r2, [r2, #24]
 801373c:	4293      	cmp	r3, r2
 801373e:	d90e      	bls.n	801375e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013744:	68fa      	ldr	r2, [r7, #12]
 8013746:	8b12      	ldrh	r2, [r2, #24]
 8013748:	1a9a      	subs	r2, r3, r2
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	69db      	ldr	r3, [r3, #28]
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	8b12      	ldrh	r2, [r2, #24]
 8013756:	441a      	add	r2, r3
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	61da      	str	r2, [r3, #28]
 801375c:	e002      	b.n	8013764 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	2200      	movs	r2, #0
 8013762:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013768:	2b00      	cmp	r3, #0
 801376a:	d004      	beq.n	8013776 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	2201      	movs	r2, #1
 8013770:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8013774:	e006      	b.n	8013784 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	2200      	movs	r2, #0
 801377a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 801377e:	6878      	ldr	r0, [r7, #4]
 8013780:	f000 f87a 	bl	8013878 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8013784:	2300      	movs	r3, #0
 8013786:	2200      	movs	r2, #0
 8013788:	2104      	movs	r1, #4
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f000 febc 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8013790:	e00c      	b.n	80137ac <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8013792:	7afb      	ldrb	r3, [r7, #11]
 8013794:	2b02      	cmp	r3, #2
 8013796:	d109      	bne.n	80137ac <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	2201      	movs	r2, #1
 801379c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 80137a0:	2300      	movs	r3, #0
 80137a2:	2200      	movs	r2, #0
 80137a4:	2104      	movs	r1, #4
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f000 feae 	bl	8014508 <USBH_OS_PutMessage>
      break;
 80137ac:	bf00      	nop
  }
}
 80137ae:	bf00      	nop
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b086      	sub	sp, #24
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80137c4:	69db      	ldr	r3, [r3, #28]
 80137c6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80137c8:	2300      	movs	r3, #0
 80137ca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80137d2:	2b03      	cmp	r3, #3
 80137d4:	d002      	beq.n	80137dc <CDC_ProcessReception+0x26>
 80137d6:	2b04      	cmp	r3, #4
 80137d8:	d00e      	beq.n	80137f8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80137da:	e049      	b.n	8013870 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	6a19      	ldr	r1, [r3, #32]
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	8b5a      	ldrh	r2, [r3, #26]
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	7b1b      	ldrb	r3, [r3, #12]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f001 fdd3 	bl	8015394 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	2204      	movs	r2, #4
 80137f2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80137f6:	e03b      	b.n	8013870 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	7b1b      	ldrb	r3, [r3, #12]
 80137fc:	4619      	mov	r1, r3
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f008 fa10 	bl	801bc24 <USBH_LL_GetURBState>
 8013804:	4603      	mov	r3, r0
 8013806:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8013808:	7cfb      	ldrb	r3, [r7, #19]
 801380a:	2b01      	cmp	r3, #1
 801380c:	d12f      	bne.n	801386e <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	7b1b      	ldrb	r3, [r3, #12]
 8013812:	4619      	mov	r1, r3
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f008 f973 	bl	801bb00 <USBH_LL_GetLastXferSize>
 801381a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013820:	68fa      	ldr	r2, [r7, #12]
 8013822:	429a      	cmp	r2, r3
 8013824:	d016      	beq.n	8013854 <CDC_ProcessReception+0x9e>
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	8b5b      	ldrh	r3, [r3, #26]
 801382a:	461a      	mov	r2, r3
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	4293      	cmp	r3, r2
 8013830:	d110      	bne.n	8013854 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	1ad2      	subs	r2, r2, r3
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	6a1a      	ldr	r2, [r3, #32]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	441a      	add	r2, r3
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	2203      	movs	r2, #3
 801384e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8013852:	e006      	b.n	8013862 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	2200      	movs	r2, #0
 8013858:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f000 f815 	bl	801388c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8013862:	2300      	movs	r3, #0
 8013864:	2200      	movs	r2, #0
 8013866:	2104      	movs	r1, #4
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f000 fe4d 	bl	8014508 <USBH_OS_PutMessage>
      break;
 801386e:	bf00      	nop
  }
}
 8013870:	bf00      	nop
 8013872:	3718      	adds	r7, #24
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013878:	b480      	push	{r7}
 801387a:	b083      	sub	sp, #12
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013880:	bf00      	nop
 8013882:	370c      	adds	r7, #12
 8013884:	46bd      	mov	sp, r7
 8013886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388a:	4770      	bx	lr

0801388c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801388c:	b480      	push	{r7}
 801388e:	b083      	sub	sp, #12
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013894:	bf00      	nop
 8013896:	370c      	adds	r7, #12
 8013898:	46bd      	mov	sp, r7
 801389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389e:	4770      	bx	lr

080138a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80138a0:	b480      	push	{r7}
 80138a2:	b083      	sub	sp, #12
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80138a8:	bf00      	nop
 80138aa:	370c      	adds	r7, #12
 80138ac:	46bd      	mov	sp, r7
 80138ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b2:	4770      	bx	lr

080138b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80138b4:	b5b0      	push	{r4, r5, r7, lr}
 80138b6:	b090      	sub	sp, #64	@ 0x40
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	60b9      	str	r1, [r7, #8]
 80138be:	4613      	mov	r3, r2
 80138c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d101      	bne.n	80138cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80138c8:	2302      	movs	r3, #2
 80138ca:	e04d      	b.n	8013968 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	79fa      	ldrb	r2, [r7, #7]
 80138d0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2200      	movs	r2, #0
 80138d8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2200      	movs	r2, #0
 80138e0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	f000 f847 	bl	8013978 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2200      	movs	r2, #0
 80138ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2200      	movs	r2, #0
 80138f6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2200      	movs	r2, #0
 8013906:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d003      	beq.n	8013918 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	68ba      	ldr	r2, [r7, #8]
 8013914:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8013918:	4b15      	ldr	r3, [pc, #84]	@ (8013970 <USBH_Init+0xbc>)
 801391a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801391e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8013924:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013928:	2100      	movs	r1, #0
 801392a:	4618      	mov	r0, r3
 801392c:	f005 f87d 	bl	8018a2a <osMessageCreate>
 8013930:	4602      	mov	r2, r0
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8013938:	4b0e      	ldr	r3, [pc, #56]	@ (8013974 <USBH_Init+0xc0>)
 801393a:	f107 0414 	add.w	r4, r7, #20
 801393e:	461d      	mov	r5, r3
 8013940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 801394c:	f107 0314 	add.w	r3, r7, #20
 8013950:	68f9      	ldr	r1, [r7, #12]
 8013952:	4618      	mov	r0, r3
 8013954:	f004 ff32 	bl	80187bc <osThreadCreate>
 8013958:	4602      	mov	r2, r0
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8013960:	68f8      	ldr	r0, [r7, #12]
 8013962:	f008 f819 	bl	801b998 <USBH_LL_Init>

  return USBH_OK;
 8013966:	2300      	movs	r3, #0
}
 8013968:	4618      	mov	r0, r3
 801396a:	3740      	adds	r7, #64	@ 0x40
 801396c:	46bd      	mov	sp, r7
 801396e:	bdb0      	pop	{r4, r5, r7, pc}
 8013970:	0801f42c 	.word	0x0801f42c
 8013974:	0801f448 	.word	0x0801f448

08013978 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013980:	2300      	movs	r3, #0
 8013982:	60fb      	str	r3, [r7, #12]
 8013984:	e009      	b.n	801399a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	33e0      	adds	r3, #224	@ 0xe0
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	4413      	add	r3, r2
 8013990:	2200      	movs	r2, #0
 8013992:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	3301      	adds	r3, #1
 8013998:	60fb      	str	r3, [r7, #12]
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	2b0f      	cmp	r3, #15
 801399e:	d9f2      	bls.n	8013986 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80139a0:	2300      	movs	r3, #0
 80139a2:	60fb      	str	r3, [r7, #12]
 80139a4:	e009      	b.n	80139ba <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	4413      	add	r3, r2
 80139ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80139b0:	2200      	movs	r2, #0
 80139b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	3301      	adds	r3, #1
 80139b8:	60fb      	str	r3, [r7, #12]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139c0:	d3f1      	bcc.n	80139a6 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2200      	movs	r2, #0
 80139cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2201      	movs	r2, #1
 80139d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2200      	movs	r2, #0
 80139d8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2201      	movs	r2, #1
 80139e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2240      	movs	r2, #64	@ 0x40
 80139e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2200      	movs	r2, #0
 80139f2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2201      	movs	r2, #1
 80139fa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	331c      	adds	r3, #28
 8013a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013a16:	2100      	movs	r1, #0
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f008 fb05 	bl	801c028 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a28:	2100      	movs	r1, #0
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f008 fafc 	bl	801c028 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8013a36:	2212      	movs	r2, #18
 8013a38:	2100      	movs	r1, #0
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f008 faf4 	bl	801c028 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8013a46:	223e      	movs	r2, #62	@ 0x3e
 8013a48:	2100      	movs	r1, #0
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f008 faec 	bl	801c028 <memset>

  return USBH_OK;
 8013a50:	2300      	movs	r3, #0
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3710      	adds	r7, #16
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}

08013a5a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8013a5a:	b480      	push	{r7}
 8013a5c:	b085      	sub	sp, #20
 8013a5e:	af00      	add	r7, sp, #0
 8013a60:	6078      	str	r0, [r7, #4]
 8013a62:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8013a64:	2300      	movs	r3, #0
 8013a66:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d016      	beq.n	8013a9c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d10e      	bne.n	8013a96 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8013a7e:	1c59      	adds	r1, r3, #1
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	33de      	adds	r3, #222	@ 0xde
 8013a8a:	6839      	ldr	r1, [r7, #0]
 8013a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8013a90:	2300      	movs	r3, #0
 8013a92:	73fb      	strb	r3, [r7, #15]
 8013a94:	e004      	b.n	8013aa0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8013a96:	2302      	movs	r3, #2
 8013a98:	73fb      	strb	r3, [r7, #15]
 8013a9a:	e001      	b.n	8013aa0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3714      	adds	r7, #20
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aac:	4770      	bx	lr

08013aae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8013aae:	b480      	push	{r7}
 8013ab0:	b085      	sub	sp, #20
 8013ab2:	af00      	add	r7, sp, #0
 8013ab4:	6078      	str	r0, [r7, #4]
 8013ab6:	460b      	mov	r3, r1
 8013ab8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8013aba:	2300      	movs	r3, #0
 8013abc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8013ac4:	78fa      	ldrb	r2, [r7, #3]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d204      	bcs.n	8013ad4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	78fa      	ldrb	r2, [r7, #3]
 8013ace:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8013ad2:	e001      	b.n	8013ad8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013ad4:	2302      	movs	r3, #2
 8013ad6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3714      	adds	r7, #20
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr

08013ae6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013ae6:	b480      	push	{r7}
 8013ae8:	b087      	sub	sp, #28
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
 8013aee:	4608      	mov	r0, r1
 8013af0:	4611      	mov	r1, r2
 8013af2:	461a      	mov	r2, r3
 8013af4:	4603      	mov	r3, r0
 8013af6:	70fb      	strb	r3, [r7, #3]
 8013af8:	460b      	mov	r3, r1
 8013afa:	70bb      	strb	r3, [r7, #2]
 8013afc:	4613      	mov	r3, r2
 8013afe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8013b00:	2300      	movs	r3, #0
 8013b02:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013b04:	2300      	movs	r3, #0
 8013b06:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8013b0e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013b10:	e025      	b.n	8013b5e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8013b12:	7dfb      	ldrb	r3, [r7, #23]
 8013b14:	221a      	movs	r2, #26
 8013b16:	fb02 f303 	mul.w	r3, r2, r3
 8013b1a:	3308      	adds	r3, #8
 8013b1c:	68fa      	ldr	r2, [r7, #12]
 8013b1e:	4413      	add	r3, r2
 8013b20:	3302      	adds	r3, #2
 8013b22:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	795b      	ldrb	r3, [r3, #5]
 8013b28:	78fa      	ldrb	r2, [r7, #3]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d002      	beq.n	8013b34 <USBH_FindInterface+0x4e>
 8013b2e:	78fb      	ldrb	r3, [r7, #3]
 8013b30:	2bff      	cmp	r3, #255	@ 0xff
 8013b32:	d111      	bne.n	8013b58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013b38:	78ba      	ldrb	r2, [r7, #2]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d002      	beq.n	8013b44 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013b3e:	78bb      	ldrb	r3, [r7, #2]
 8013b40:	2bff      	cmp	r3, #255	@ 0xff
 8013b42:	d109      	bne.n	8013b58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013b48:	787a      	ldrb	r2, [r7, #1]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d002      	beq.n	8013b54 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013b4e:	787b      	ldrb	r3, [r7, #1]
 8013b50:	2bff      	cmp	r3, #255	@ 0xff
 8013b52:	d101      	bne.n	8013b58 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8013b54:	7dfb      	ldrb	r3, [r7, #23]
 8013b56:	e006      	b.n	8013b66 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8013b58:	7dfb      	ldrb	r3, [r7, #23]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013b5e:	7dfb      	ldrb	r3, [r7, #23]
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d9d6      	bls.n	8013b12 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8013b64:	23ff      	movs	r3, #255	@ 0xff
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	371c      	adds	r7, #28
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b70:	4770      	bx	lr

08013b72 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8013b72:	b580      	push	{r7, lr}
 8013b74:	b082      	sub	sp, #8
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f007 ff48 	bl	801ba10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8013b80:	2101      	movs	r1, #1
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f008 f861 	bl	801bc4a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8013b88:	2300      	movs	r3, #0
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3708      	adds	r7, #8
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
	...

08013b94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b088      	sub	sp, #32
 8013b98:	af04      	add	r7, sp, #16
 8013b9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013b9c:	2302      	movs	r3, #2
 8013b9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	2b01      	cmp	r3, #1
 8013bae:	d102      	bne.n	8013bb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2203      	movs	r2, #3
 8013bb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	2b0b      	cmp	r3, #11
 8013bbe:	f200 81f5 	bhi.w	8013fac <USBH_Process+0x418>
 8013bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8013bc8 <USBH_Process+0x34>)
 8013bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bc8:	08013bf9 	.word	0x08013bf9
 8013bcc:	08013c37 	.word	0x08013c37
 8013bd0:	08013cad 	.word	0x08013cad
 8013bd4:	08013f3b 	.word	0x08013f3b
 8013bd8:	08013fad 	.word	0x08013fad
 8013bdc:	08013d59 	.word	0x08013d59
 8013be0:	08013ed5 	.word	0x08013ed5
 8013be4:	08013d9b 	.word	0x08013d9b
 8013be8:	08013dc7 	.word	0x08013dc7
 8013bec:	08013def 	.word	0x08013def
 8013bf0:	08013e3d 	.word	0x08013e3d
 8013bf4:	08013f23 	.word	0x08013f23
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f000 81d5 	beq.w	8013fb0 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2201      	movs	r2, #1
 8013c0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8013c0c:	20c8      	movs	r0, #200	@ 0xc8
 8013c0e:	f008 f866 	bl	801bcde <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f007 ff59 	bl	801baca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2200      	movs	r2, #0
 8013c24:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013c28:	2300      	movs	r3, #0
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	2101      	movs	r1, #1
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f000 fc6a 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013c34:	e1bc      	b.n	8013fb0 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8013c3c:	b2db      	uxtb	r3, r3
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d107      	bne.n	8013c52 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2200      	movs	r2, #0
 8013c46:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2202      	movs	r2, #2
 8013c4e:	701a      	strb	r2, [r3, #0]
 8013c50:	e025      	b.n	8013c9e <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8013c58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013c5c:	d914      	bls.n	8013c88 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8013c64:	3301      	adds	r3, #1
 8013c66:	b2da      	uxtb	r2, r3
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8013c74:	2b03      	cmp	r3, #3
 8013c76:	d903      	bls.n	8013c80 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	220d      	movs	r2, #13
 8013c7c:	701a      	strb	r2, [r3, #0]
 8013c7e:	e00e      	b.n	8013c9e <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2200      	movs	r2, #0
 8013c84:	701a      	strb	r2, [r3, #0]
 8013c86:	e00a      	b.n	8013c9e <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8013c8e:	f103 020a 	add.w	r2, r3, #10
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8013c98:	200a      	movs	r0, #10
 8013c9a:	f008 f820 	bl	801bcde <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	2101      	movs	r1, #1
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f000 fc2f 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013caa:	e188      	b.n	8013fbe <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d005      	beq.n	8013cc2 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013cbc:	2104      	movs	r1, #4
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8013cc2:	2064      	movs	r0, #100	@ 0x64
 8013cc4:	f008 f80b 	bl	801bcde <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f007 fed7 	bl	801ba7c <USBH_LL_GetSpeed>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2205      	movs	r2, #5
 8013cdc:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013cde:	2100      	movs	r1, #0
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f001 fba4 	bl	801542e <USBH_AllocPipe>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	461a      	mov	r2, r3
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013cee:	2180      	movs	r1, #128	@ 0x80
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f001 fb9c 	bl	801542e <USBH_AllocPipe>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	7919      	ldrb	r1, [r3, #4]
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013d12:	9202      	str	r2, [sp, #8]
 8013d14:	2200      	movs	r2, #0
 8013d16:	9201      	str	r2, [sp, #4]
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2280      	movs	r2, #128	@ 0x80
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f001 fb56 	bl	80153d0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	7959      	ldrb	r1, [r3, #5]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013d38:	9202      	str	r2, [sp, #8]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	9201      	str	r2, [sp, #4]
 8013d3e:	9300      	str	r3, [sp, #0]
 8013d40:	4603      	mov	r3, r0
 8013d42:	2200      	movs	r2, #0
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f001 fb43 	bl	80153d0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	2101      	movs	r1, #1
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f000 fbd9 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013d56:	e132      	b.n	8013fbe <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f000 f935 	bl	8013fc8 <USBH_HandleEnum>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8013d62:	7bbb      	ldrb	r3, [r7, #14]
 8013d64:	b2db      	uxtb	r3, r3
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	f040 8124 	bne.w	8013fb4 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8013d7a:	2b01      	cmp	r3, #1
 8013d7c:	d103      	bne.n	8013d86 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2208      	movs	r2, #8
 8013d82:	701a      	strb	r2, [r3, #0]
 8013d84:	e002      	b.n	8013d8c <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2207      	movs	r2, #7
 8013d8a:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	2200      	movs	r2, #0
 8013d90:	2105      	movs	r1, #5
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f000 fbb8 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013d98:	e10c      	b.n	8013fb4 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	f000 8109 	beq.w	8013fb8 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013dac:	2101      	movs	r1, #1
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2208      	movs	r2, #8
 8013db6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013db8:	2300      	movs	r3, #0
 8013dba:	2200      	movs	r2, #0
 8013dbc:	2105      	movs	r1, #5
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f000 fba2 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8013dc4:	e0f8      	b.n	8013fb8 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8013dcc:	4619      	mov	r1, r3
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f000 fcc8 	bl	8014764 <USBH_SetCfg>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d102      	bne.n	8013de0 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2209      	movs	r2, #9
 8013dde:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013de0:	2300      	movs	r3, #0
 8013de2:	2200      	movs	r2, #0
 8013de4:	2101      	movs	r1, #1
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 fb8e 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013dec:	e0e7      	b.n	8013fbe <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8013df4:	f003 0320 	and.w	r3, r3, #32
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d015      	beq.n	8013e28 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8013dfc:	2101      	movs	r1, #1
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f000 fcd3 	bl	80147aa <USBH_SetFeature>
 8013e04:	4603      	mov	r3, r0
 8013e06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013e08:	7bbb      	ldrb	r3, [r7, #14]
 8013e0a:	b2db      	uxtb	r3, r3
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d103      	bne.n	8013e18 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	220a      	movs	r2, #10
 8013e14:	701a      	strb	r2, [r3, #0]
 8013e16:	e00a      	b.n	8013e2e <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8013e18:	7bbb      	ldrb	r3, [r7, #14]
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	2b03      	cmp	r3, #3
 8013e1e:	d106      	bne.n	8013e2e <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	220a      	movs	r2, #10
 8013e24:	701a      	strb	r2, [r3, #0]
 8013e26:	e002      	b.n	8013e2e <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	220a      	movs	r2, #10
 8013e2c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013e2e:	2300      	movs	r3, #0
 8013e30:	2200      	movs	r2, #0
 8013e32:	2101      	movs	r1, #1
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f000 fb67 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013e3a:	e0c0      	b.n	8013fbe <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d03f      	beq.n	8013ec6 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013e4e:	2300      	movs	r3, #0
 8013e50:	73fb      	strb	r3, [r7, #15]
 8013e52:	e016      	b.n	8013e82 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8013e54:	7bfa      	ldrb	r2, [r7, #15]
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	32de      	adds	r2, #222	@ 0xde
 8013e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e5e:	791a      	ldrb	r2, [r3, #4]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d108      	bne.n	8013e7c <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8013e6a:	7bfa      	ldrb	r2, [r7, #15]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	32de      	adds	r2, #222	@ 0xde
 8013e70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8013e7a:	e005      	b.n	8013e88 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013e7c:	7bfb      	ldrb	r3, [r7, #15]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	73fb      	strb	r3, [r7, #15]
 8013e82:	7bfb      	ldrb	r3, [r7, #15]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d0e5      	beq.n	8013e54 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d016      	beq.n	8013ec0 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013e98:	689b      	ldr	r3, [r3, #8]
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	4798      	blx	r3
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d109      	bne.n	8013eb8 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2206      	movs	r2, #6
 8013ea8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013eb0:	2103      	movs	r1, #3
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	4798      	blx	r3
 8013eb6:	e006      	b.n	8013ec6 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	220d      	movs	r2, #13
 8013ebc:	701a      	strb	r2, [r3, #0]
 8013ebe:	e002      	b.n	8013ec6 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	220d      	movs	r2, #13
 8013ec4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	2200      	movs	r2, #0
 8013eca:	2105      	movs	r1, #5
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f000 fb1b 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013ed2:	e074      	b.n	8013fbe <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d017      	beq.n	8013f0e <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013ee4:	691b      	ldr	r3, [r3, #16]
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	4798      	blx	r3
 8013eea:	4603      	mov	r3, r0
 8013eec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013eee:	7bbb      	ldrb	r3, [r7, #14]
 8013ef0:	b2db      	uxtb	r3, r3
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d103      	bne.n	8013efe <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	220b      	movs	r2, #11
 8013efa:	701a      	strb	r2, [r3, #0]
 8013efc:	e00a      	b.n	8013f14 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 8013efe:	7bbb      	ldrb	r3, [r7, #14]
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b02      	cmp	r3, #2
 8013f04:	d106      	bne.n	8013f14 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	220d      	movs	r2, #13
 8013f0a:	701a      	strb	r2, [r3, #0]
 8013f0c:	e002      	b.n	8013f14 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	220d      	movs	r2, #13
 8013f12:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013f14:	2300      	movs	r3, #0
 8013f16:	2200      	movs	r2, #0
 8013f18:	2105      	movs	r1, #5
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f000 faf4 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013f20:	e04d      	b.n	8013fbe <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d047      	beq.n	8013fbc <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013f32:	695b      	ldr	r3, [r3, #20]
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	4798      	blx	r3
      }
      break;
 8013f38:	e040      	b.n	8013fbc <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f7ff fd18 	bl	8013978 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d009      	beq.n	8013f66 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2200      	movs	r2, #0
 8013f62:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d005      	beq.n	8013f7c <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013f76:	2105      	movs	r1, #5
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	2b01      	cmp	r3, #1
 8013f86:	d107      	bne.n	8013f98 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f7ff fdee 	bl	8013b72 <USBH_Start>
 8013f96:	e002      	b.n	8013f9e <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f007 fd39 	bl	801ba10 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	2101      	movs	r1, #1
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f000 faaf 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013faa:	e008      	b.n	8013fbe <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 8013fac:	bf00      	nop
 8013fae:	e006      	b.n	8013fbe <USBH_Process+0x42a>
      break;
 8013fb0:	bf00      	nop
 8013fb2:	e004      	b.n	8013fbe <USBH_Process+0x42a>
      break;
 8013fb4:	bf00      	nop
 8013fb6:	e002      	b.n	8013fbe <USBH_Process+0x42a>
    break;
 8013fb8:	bf00      	nop
 8013fba:	e000      	b.n	8013fbe <USBH_Process+0x42a>
      break;
 8013fbc:	bf00      	nop
  }
  return USBH_OK;
 8013fbe:	2300      	movs	r3, #0
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b088      	sub	sp, #32
 8013fcc:	af04      	add	r7, sp, #16
 8013fce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	785b      	ldrb	r3, [r3, #1]
 8013fdc:	2b07      	cmp	r3, #7
 8013fde:	f200 81db 	bhi.w	8014398 <USBH_HandleEnum+0x3d0>
 8013fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8013fe8 <USBH_HandleEnum+0x20>)
 8013fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fe8:	08014009 	.word	0x08014009
 8013fec:	080140c3 	.word	0x080140c3
 8013ff0:	0801412d 	.word	0x0801412d
 8013ff4:	080141b7 	.word	0x080141b7
 8013ff8:	08014221 	.word	0x08014221
 8013ffc:	08014291 	.word	0x08014291
 8014000:	080142fb 	.word	0x080142fb
 8014004:	08014359 	.word	0x08014359
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8014008:	2108      	movs	r1, #8
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f000 fac7 	bl	801459e <USBH_Get_DevDesc>
 8014010:	4603      	mov	r3, r0
 8014012:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014014:	7bbb      	ldrb	r3, [r7, #14]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d12e      	bne.n	8014078 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2201      	movs	r2, #1
 8014028:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	7919      	ldrb	r1, [r3, #4]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801403e:	9202      	str	r2, [sp, #8]
 8014040:	2200      	movs	r2, #0
 8014042:	9201      	str	r2, [sp, #4]
 8014044:	9300      	str	r3, [sp, #0]
 8014046:	4603      	mov	r3, r0
 8014048:	2280      	movs	r2, #128	@ 0x80
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f001 f9c0 	bl	80153d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	7959      	ldrb	r1, [r3, #5]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8014060:	687a      	ldr	r2, [r7, #4]
 8014062:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014064:	9202      	str	r2, [sp, #8]
 8014066:	2200      	movs	r2, #0
 8014068:	9201      	str	r2, [sp, #4]
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	4603      	mov	r3, r0
 801406e:	2200      	movs	r2, #0
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f001 f9ad 	bl	80153d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8014076:	e191      	b.n	801439c <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014078:	7bbb      	ldrb	r3, [r7, #14]
 801407a:	2b03      	cmp	r3, #3
 801407c:	f040 818e 	bne.w	801439c <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8014086:	3301      	adds	r3, #1
 8014088:	b2da      	uxtb	r2, r3
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8014096:	2b03      	cmp	r3, #3
 8014098:	d903      	bls.n	80140a2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	220d      	movs	r2, #13
 801409e:	701a      	strb	r2, [r3, #0]
      break;
 80140a0:	e17c      	b.n	801439c <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	795b      	ldrb	r3, [r3, #5]
 80140a6:	4619      	mov	r1, r3
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f001 f9e1 	bl	8015470 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	791b      	ldrb	r3, [r3, #4]
 80140b2:	4619      	mov	r1, r3
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f001 f9db 	bl	8015470 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2200      	movs	r2, #0
 80140be:	701a      	strb	r2, [r3, #0]
      break;
 80140c0:	e16c      	b.n	801439c <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80140c2:	2112      	movs	r1, #18
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 fa6a 	bl	801459e <USBH_Get_DevDesc>
 80140ca:	4603      	mov	r3, r0
 80140cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80140ce:	7bbb      	ldrb	r3, [r7, #14]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d103      	bne.n	80140dc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2202      	movs	r2, #2
 80140d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80140da:	e161      	b.n	80143a0 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80140dc:	7bbb      	ldrb	r3, [r7, #14]
 80140de:	2b03      	cmp	r3, #3
 80140e0:	f040 815e 	bne.w	80143a0 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80140ea:	3301      	adds	r3, #1
 80140ec:	b2da      	uxtb	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80140fa:	2b03      	cmp	r3, #3
 80140fc:	d903      	bls.n	8014106 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	220d      	movs	r2, #13
 8014102:	701a      	strb	r2, [r3, #0]
      break;
 8014104:	e14c      	b.n	80143a0 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	795b      	ldrb	r3, [r3, #5]
 801410a:	4619      	mov	r1, r3
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f001 f9af 	bl	8015470 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	791b      	ldrb	r3, [r3, #4]
 8014116:	4619      	mov	r1, r3
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f001 f9a9 	bl	8015470 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2200      	movs	r2, #0
 8014122:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2200      	movs	r2, #0
 8014128:	701a      	strb	r2, [r3, #0]
      break;
 801412a:	e139      	b.n	80143a0 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 801412c:	2101      	movs	r1, #1
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 faf4 	bl	801471c <USBH_SetAddress>
 8014134:	4603      	mov	r3, r0
 8014136:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014138:	7bbb      	ldrb	r3, [r7, #14]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d130      	bne.n	80141a0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 801413e:	2002      	movs	r0, #2
 8014140:	f007 fdcd 	bl	801bcde <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2201      	movs	r2, #1
 8014148:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2203      	movs	r2, #3
 8014150:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	7919      	ldrb	r1, [r3, #4]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8014166:	9202      	str	r2, [sp, #8]
 8014168:	2200      	movs	r2, #0
 801416a:	9201      	str	r2, [sp, #4]
 801416c:	9300      	str	r3, [sp, #0]
 801416e:	4603      	mov	r3, r0
 8014170:	2280      	movs	r2, #128	@ 0x80
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f001 f92c 	bl	80153d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	7959      	ldrb	r1, [r3, #5]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801418c:	9202      	str	r2, [sp, #8]
 801418e:	2200      	movs	r2, #0
 8014190:	9201      	str	r2, [sp, #4]
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	4603      	mov	r3, r0
 8014196:	2200      	movs	r2, #0
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f001 f919 	bl	80153d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801419e:	e101      	b.n	80143a4 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80141a0:	7bbb      	ldrb	r3, [r7, #14]
 80141a2:	2b03      	cmp	r3, #3
 80141a4:	f040 80fe 	bne.w	80143a4 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	220d      	movs	r2, #13
 80141ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2200      	movs	r2, #0
 80141b2:	705a      	strb	r2, [r3, #1]
      break;
 80141b4:	e0f6      	b.n	80143a4 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80141b6:	2109      	movs	r1, #9
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f000 fa1c 	bl	80145f6 <USBH_Get_CfgDesc>
 80141be:	4603      	mov	r3, r0
 80141c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80141c2:	7bbb      	ldrb	r3, [r7, #14]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d103      	bne.n	80141d0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2204      	movs	r2, #4
 80141cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80141ce:	e0eb      	b.n	80143a8 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80141d0:	7bbb      	ldrb	r3, [r7, #14]
 80141d2:	2b03      	cmp	r3, #3
 80141d4:	f040 80e8 	bne.w	80143a8 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80141de:	3301      	adds	r3, #1
 80141e0:	b2da      	uxtb	r2, r3
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80141ee:	2b03      	cmp	r3, #3
 80141f0:	d903      	bls.n	80141fa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	220d      	movs	r2, #13
 80141f6:	701a      	strb	r2, [r3, #0]
      break;
 80141f8:	e0d6      	b.n	80143a8 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	795b      	ldrb	r3, [r3, #5]
 80141fe:	4619      	mov	r1, r3
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f001 f935 	bl	8015470 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	791b      	ldrb	r3, [r3, #4]
 801420a:	4619      	mov	r1, r3
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f001 f92f 	bl	8015470 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2200      	movs	r2, #0
 8014216:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2200      	movs	r2, #0
 801421c:	701a      	strb	r2, [r3, #0]
      break;
 801421e:	e0c3      	b.n	80143a8 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8014226:	4619      	mov	r1, r3
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f000 f9e4 	bl	80145f6 <USBH_Get_CfgDesc>
 801422e:	4603      	mov	r3, r0
 8014230:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014232:	7bbb      	ldrb	r3, [r7, #14]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d103      	bne.n	8014240 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2205      	movs	r2, #5
 801423c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801423e:	e0b5      	b.n	80143ac <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014240:	7bbb      	ldrb	r3, [r7, #14]
 8014242:	2b03      	cmp	r3, #3
 8014244:	f040 80b2 	bne.w	80143ac <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801424e:	3301      	adds	r3, #1
 8014250:	b2da      	uxtb	r2, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801425e:	2b03      	cmp	r3, #3
 8014260:	d903      	bls.n	801426a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	220d      	movs	r2, #13
 8014266:	701a      	strb	r2, [r3, #0]
      break;
 8014268:	e0a0      	b.n	80143ac <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	795b      	ldrb	r3, [r3, #5]
 801426e:	4619      	mov	r1, r3
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f001 f8fd 	bl	8015470 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	791b      	ldrb	r3, [r3, #4]
 801427a:	4619      	mov	r1, r3
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f001 f8f7 	bl	8015470 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2200      	movs	r2, #0
 8014286:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2200      	movs	r2, #0
 801428c:	701a      	strb	r2, [r3, #0]
      break;
 801428e:	e08d      	b.n	80143ac <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8014296:	2b00      	cmp	r3, #0
 8014298:	d025      	beq.n	80142e6 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80142a6:	23ff      	movs	r3, #255	@ 0xff
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f000 f9ce 	bl	801464a <USBH_Get_StringDesc>
 80142ae:	4603      	mov	r3, r0
 80142b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80142b2:	7bbb      	ldrb	r3, [r7, #14]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d109      	bne.n	80142cc <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2206      	movs	r2, #6
 80142bc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80142be:	2300      	movs	r3, #0
 80142c0:	2200      	movs	r2, #0
 80142c2:	2105      	movs	r1, #5
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 f91f 	bl	8014508 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80142ca:	e071      	b.n	80143b0 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80142cc:	7bbb      	ldrb	r3, [r7, #14]
 80142ce:	2b03      	cmp	r3, #3
 80142d0:	d16e      	bne.n	80143b0 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2206      	movs	r2, #6
 80142d6:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80142d8:	2300      	movs	r3, #0
 80142da:	2200      	movs	r2, #0
 80142dc:	2105      	movs	r1, #5
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f000 f912 	bl	8014508 <USBH_OS_PutMessage>
      break;
 80142e4:	e064      	b.n	80143b0 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2206      	movs	r2, #6
 80142ea:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80142ec:	2300      	movs	r3, #0
 80142ee:	2200      	movs	r2, #0
 80142f0:	2105      	movs	r1, #5
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 f908 	bl	8014508 <USBH_OS_PutMessage>
      break;
 80142f8:	e05a      	b.n	80143b0 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8014300:	2b00      	cmp	r3, #0
 8014302:	d01f      	beq.n	8014344 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8014310:	23ff      	movs	r3, #255	@ 0xff
 8014312:	6878      	ldr	r0, [r7, #4]
 8014314:	f000 f999 	bl	801464a <USBH_Get_StringDesc>
 8014318:	4603      	mov	r3, r0
 801431a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801431c:	7bbb      	ldrb	r3, [r7, #14]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d103      	bne.n	801432a <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	2207      	movs	r2, #7
 8014326:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8014328:	e044      	b.n	80143b4 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801432a:	7bbb      	ldrb	r3, [r7, #14]
 801432c:	2b03      	cmp	r3, #3
 801432e:	d141      	bne.n	80143b4 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2207      	movs	r2, #7
 8014334:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8014336:	2300      	movs	r3, #0
 8014338:	2200      	movs	r2, #0
 801433a:	2105      	movs	r1, #5
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f000 f8e3 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8014342:	e037      	b.n	80143b4 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2207      	movs	r2, #7
 8014348:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801434a:	2300      	movs	r3, #0
 801434c:	2200      	movs	r2, #0
 801434e:	2105      	movs	r1, #5
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f000 f8d9 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8014356:	e02d      	b.n	80143b4 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 801435e:	2b00      	cmp	r3, #0
 8014360:	d017      	beq.n	8014392 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801436e:	23ff      	movs	r3, #255	@ 0xff
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f000 f96a 	bl	801464a <USBH_Get_StringDesc>
 8014376:	4603      	mov	r3, r0
 8014378:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801437a:	7bbb      	ldrb	r3, [r7, #14]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d102      	bne.n	8014386 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8014380:	2300      	movs	r3, #0
 8014382:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8014384:	e018      	b.n	80143b8 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014386:	7bbb      	ldrb	r3, [r7, #14]
 8014388:	2b03      	cmp	r3, #3
 801438a:	d115      	bne.n	80143b8 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 801438c:	2300      	movs	r3, #0
 801438e:	73fb      	strb	r3, [r7, #15]
      break;
 8014390:	e012      	b.n	80143b8 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8014392:	2300      	movs	r3, #0
 8014394:	73fb      	strb	r3, [r7, #15]
      break;
 8014396:	e00f      	b.n	80143b8 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8014398:	bf00      	nop
 801439a:	e00e      	b.n	80143ba <USBH_HandleEnum+0x3f2>
      break;
 801439c:	bf00      	nop
 801439e:	e00c      	b.n	80143ba <USBH_HandleEnum+0x3f2>
      break;
 80143a0:	bf00      	nop
 80143a2:	e00a      	b.n	80143ba <USBH_HandleEnum+0x3f2>
      break;
 80143a4:	bf00      	nop
 80143a6:	e008      	b.n	80143ba <USBH_HandleEnum+0x3f2>
      break;
 80143a8:	bf00      	nop
 80143aa:	e006      	b.n	80143ba <USBH_HandleEnum+0x3f2>
      break;
 80143ac:	bf00      	nop
 80143ae:	e004      	b.n	80143ba <USBH_HandleEnum+0x3f2>
      break;
 80143b0:	bf00      	nop
 80143b2:	e002      	b.n	80143ba <USBH_HandleEnum+0x3f2>
      break;
 80143b4:	bf00      	nop
 80143b6:	e000      	b.n	80143ba <USBH_HandleEnum+0x3f2>
      break;
 80143b8:	bf00      	nop
  }
  return Status;
 80143ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3710      	adds	r7, #16
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
 80143cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	683a      	ldr	r2, [r7, #0]
 80143d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80143d6:	bf00      	nop
 80143d8:	370c      	adds	r7, #12
 80143da:	46bd      	mov	sp, r7
 80143dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e0:	4770      	bx	lr

080143e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80143e2:	b580      	push	{r7, lr}
 80143e4:	b082      	sub	sp, #8
 80143e6:	af00      	add	r7, sp, #0
 80143e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80143f0:	1c5a      	adds	r2, r3, #1
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f000 f804 	bl	8014406 <USBH_HandleSof>
}
 80143fe:	bf00      	nop
 8014400:	3708      	adds	r7, #8
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}

08014406 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8014406:	b580      	push	{r7, lr}
 8014408:	b082      	sub	sp, #8
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	781b      	ldrb	r3, [r3, #0]
 8014412:	b2db      	uxtb	r3, r3
 8014414:	2b0b      	cmp	r3, #11
 8014416:	d10a      	bne.n	801442e <USBH_HandleSof+0x28>
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801441e:	2b00      	cmp	r3, #0
 8014420:	d005      	beq.n	801442e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8014428:	699b      	ldr	r3, [r3, #24]
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	4798      	blx	r3
  }
}
 801442e:	bf00      	nop
 8014430:	3708      	adds	r7, #8
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}

08014436 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8014436:	b580      	push	{r7, lr}
 8014438:	b082      	sub	sp, #8
 801443a:	af00      	add	r7, sp, #0
 801443c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2201      	movs	r2, #1
 8014442:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8014446:	2300      	movs	r3, #0
 8014448:	2200      	movs	r2, #0
 801444a:	2101      	movs	r1, #1
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f000 f85b 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8014452:	bf00      	nop
}
 8014454:	3708      	adds	r7, #8
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801445a:	b480      	push	{r7}
 801445c:	b083      	sub	sp, #12
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2200      	movs	r2, #0
 8014466:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2201      	movs	r2, #1
 801446e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8014472:	bf00      	nop
}
 8014474:	370c      	adds	r7, #12
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr

0801447e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801447e:	b580      	push	{r7, lr}
 8014480:	b082      	sub	sp, #8
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2201      	movs	r2, #1
 801448a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2200      	movs	r2, #0
 8014492:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801449e:	2300      	movs	r3, #0
 80144a0:	2200      	movs	r2, #0
 80144a2:	2101      	movs	r1, #1
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f000 f82f 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80144aa:	2300      	movs	r3, #0
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2201      	movs	r2, #1
 80144c0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2200      	movs	r2, #0
 80144c8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2200      	movs	r2, #0
 80144d0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f007 fab6 	bl	801ba46 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	791b      	ldrb	r3, [r3, #4]
 80144de:	4619      	mov	r1, r3
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f000 ffc5 	bl	8015470 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	795b      	ldrb	r3, [r3, #5]
 80144ea:	4619      	mov	r1, r3
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f000 ffbf 	bl	8015470 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80144f2:	2300      	movs	r3, #0
 80144f4:	2200      	movs	r2, #0
 80144f6:	2101      	movs	r1, #1
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f000 f805 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80144fe:	2300      	movs	r3, #0
}
 8014500:	4618      	mov	r0, r3
 8014502:	3708      	adds	r7, #8
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}

08014508 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b086      	sub	sp, #24
 801450c:	af00      	add	r7, sp, #0
 801450e:	60f8      	str	r0, [r7, #12]
 8014510:	607a      	str	r2, [r7, #4]
 8014512:	603b      	str	r3, [r7, #0]
 8014514:	460b      	mov	r3, r1
 8014516:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8014518:	7afa      	ldrb	r2, [r7, #11]
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8014526:	4618      	mov	r0, r3
 8014528:	f004 fb5c 	bl	8018be4 <osMessageWaiting>
 801452c:	4603      	mov	r3, r0
 801452e:	f1c3 0310 	rsb	r3, r3, #16
 8014532:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8014534:	697b      	ldr	r3, [r7, #20]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d009      	beq.n	801454e <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8014546:	687a      	ldr	r2, [r7, #4]
 8014548:	4619      	mov	r1, r3
 801454a:	f004 fa97 	bl	8018a7c <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 801454e:	bf00      	nop
 8014550:	3718      	adds	r7, #24
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8014556:	b580      	push	{r7, lr}
 8014558:	b086      	sub	sp, #24
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8014564:	f107 030c 	add.w	r3, r7, #12
 8014568:	f04f 32ff 	mov.w	r2, #4294967295
 801456c:	4618      	mov	r0, r3
 801456e:	f004 fac5 	bl	8018afc <osMessageGet>
    if (event.status == osEventMessage)
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2b10      	cmp	r3, #16
 8014576:	d1f2      	bne.n	801455e <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f7ff fb0b 	bl	8013b94 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801457e:	e7ee      	b.n	801455e <USBH_Process_OS+0x8>

08014580 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8014588:	2300      	movs	r3, #0
 801458a:	2200      	movs	r2, #0
 801458c:	2101      	movs	r1, #1
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f7ff ffba 	bl	8014508 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8014594:	2300      	movs	r3, #0
}
 8014596:	4618      	mov	r0, r3
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801459e:	b580      	push	{r7, lr}
 80145a0:	b086      	sub	sp, #24
 80145a2:	af02      	add	r7, sp, #8
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	460b      	mov	r3, r1
 80145a8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80145aa:	887b      	ldrh	r3, [r7, #2]
 80145ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80145b0:	d901      	bls.n	80145b6 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80145b2:	2303      	movs	r3, #3
 80145b4:	e01b      	b.n	80145ee <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80145bc:	887b      	ldrh	r3, [r7, #2]
 80145be:	9300      	str	r3, [sp, #0]
 80145c0:	4613      	mov	r3, r2
 80145c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80145c6:	2100      	movs	r1, #0
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f000 f872 	bl	80146b2 <USBH_GetDescriptor>
 80145ce:	4603      	mov	r3, r0
 80145d0:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80145d2:	7bfb      	ldrb	r3, [r7, #15]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d109      	bne.n	80145ec <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80145de:	887a      	ldrh	r2, [r7, #2]
 80145e0:	4619      	mov	r1, r3
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 f92a 	bl	801483c <USBH_ParseDevDesc>
 80145e8:	4603      	mov	r3, r0
 80145ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80145ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3710      	adds	r7, #16
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}

080145f6 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80145f6:	b580      	push	{r7, lr}
 80145f8:	b086      	sub	sp, #24
 80145fa:	af02      	add	r7, sp, #8
 80145fc:	6078      	str	r0, [r7, #4]
 80145fe:	460b      	mov	r3, r1
 8014600:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	331c      	adds	r3, #28
 8014606:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8014608:	887b      	ldrh	r3, [r7, #2]
 801460a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801460e:	d901      	bls.n	8014614 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8014610:	2303      	movs	r3, #3
 8014612:	e016      	b.n	8014642 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8014614:	887b      	ldrh	r3, [r7, #2]
 8014616:	9300      	str	r3, [sp, #0]
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801461e:	2100      	movs	r1, #0
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f000 f846 	bl	80146b2 <USBH_GetDescriptor>
 8014626:	4603      	mov	r3, r0
 8014628:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801462a:	7bfb      	ldrb	r3, [r7, #15]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d107      	bne.n	8014640 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8014630:	887b      	ldrh	r3, [r7, #2]
 8014632:	461a      	mov	r2, r3
 8014634:	68b9      	ldr	r1, [r7, #8]
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f000 f9b0 	bl	801499c <USBH_ParseCfgDesc>
 801463c:	4603      	mov	r3, r0
 801463e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014640:	7bfb      	ldrb	r3, [r7, #15]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b088      	sub	sp, #32
 801464e:	af02      	add	r7, sp, #8
 8014650:	60f8      	str	r0, [r7, #12]
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	461a      	mov	r2, r3
 8014656:	460b      	mov	r3, r1
 8014658:	72fb      	strb	r3, [r7, #11]
 801465a:	4613      	mov	r3, r2
 801465c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 801465e:	893b      	ldrh	r3, [r7, #8]
 8014660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014664:	d802      	bhi.n	801466c <USBH_Get_StringDesc+0x22>
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d101      	bne.n	8014670 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801466c:	2303      	movs	r3, #3
 801466e:	e01c      	b.n	80146aa <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8014670:	7afb      	ldrb	r3, [r7, #11]
 8014672:	b29b      	uxth	r3, r3
 8014674:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8014678:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8014680:	893b      	ldrh	r3, [r7, #8]
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	460b      	mov	r3, r1
 8014686:	2100      	movs	r1, #0
 8014688:	68f8      	ldr	r0, [r7, #12]
 801468a:	f000 f812 	bl	80146b2 <USBH_GetDescriptor>
 801468e:	4603      	mov	r3, r0
 8014690:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8014692:	7dfb      	ldrb	r3, [r7, #23]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d107      	bne.n	80146a8 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801469e:	893a      	ldrh	r2, [r7, #8]
 80146a0:	6879      	ldr	r1, [r7, #4]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f000 fb8d 	bl	8014dc2 <USBH_ParseStringDesc>
  }

  return status;
 80146a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3718      	adds	r7, #24
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}

080146b2 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80146b2:	b580      	push	{r7, lr}
 80146b4:	b084      	sub	sp, #16
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	60f8      	str	r0, [r7, #12]
 80146ba:	607b      	str	r3, [r7, #4]
 80146bc:	460b      	mov	r3, r1
 80146be:	72fb      	strb	r3, [r7, #11]
 80146c0:	4613      	mov	r3, r2
 80146c2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	789b      	ldrb	r3, [r3, #2]
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d11c      	bne.n	8014706 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80146cc:	7afb      	ldrb	r3, [r7, #11]
 80146ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80146d2:	b2da      	uxtb	r2, r3
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2206      	movs	r2, #6
 80146dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	893a      	ldrh	r2, [r7, #8]
 80146e2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80146e4:	893b      	ldrh	r3, [r7, #8]
 80146e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80146ee:	d104      	bne.n	80146fa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	f240 4209 	movw	r2, #1033	@ 0x409
 80146f6:	829a      	strh	r2, [r3, #20]
 80146f8:	e002      	b.n	8014700 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2200      	movs	r2, #0
 80146fe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	8b3a      	ldrh	r2, [r7, #24]
 8014704:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8014706:	8b3b      	ldrh	r3, [r7, #24]
 8014708:	461a      	mov	r2, r3
 801470a:	6879      	ldr	r1, [r7, #4]
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f000 fba5 	bl	8014e5c <USBH_CtlReq>
 8014712:	4603      	mov	r3, r0
}
 8014714:	4618      	mov	r0, r3
 8014716:	3710      	adds	r7, #16
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	460b      	mov	r3, r1
 8014726:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	789b      	ldrb	r3, [r3, #2]
 801472c:	2b01      	cmp	r3, #1
 801472e:	d10f      	bne.n	8014750 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2200      	movs	r2, #0
 8014734:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2205      	movs	r2, #5
 801473a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801473c:	78fb      	ldrb	r3, [r7, #3]
 801473e:	b29a      	uxth	r2, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2200      	movs	r2, #0
 8014748:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2200      	movs	r2, #0
 801474e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8014750:	2200      	movs	r2, #0
 8014752:	2100      	movs	r1, #0
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f000 fb81 	bl	8014e5c <USBH_CtlReq>
 801475a:	4603      	mov	r3, r0
}
 801475c:	4618      	mov	r0, r3
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}

08014764 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b082      	sub	sp, #8
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	460b      	mov	r3, r1
 801476e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	789b      	ldrb	r3, [r3, #2]
 8014774:	2b01      	cmp	r3, #1
 8014776:	d10e      	bne.n	8014796 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2209      	movs	r2, #9
 8014782:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	887a      	ldrh	r2, [r7, #2]
 8014788:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2200      	movs	r2, #0
 801478e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2200      	movs	r2, #0
 8014794:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8014796:	2200      	movs	r2, #0
 8014798:	2100      	movs	r1, #0
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 fb5e 	bl	8014e5c <USBH_CtlReq>
 80147a0:	4603      	mov	r3, r0
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}

080147aa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80147aa:	b580      	push	{r7, lr}
 80147ac:	b082      	sub	sp, #8
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	6078      	str	r0, [r7, #4]
 80147b2:	460b      	mov	r3, r1
 80147b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	789b      	ldrb	r3, [r3, #2]
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	d10f      	bne.n	80147de <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2200      	movs	r2, #0
 80147c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2203      	movs	r2, #3
 80147c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80147ca:	78fb      	ldrb	r3, [r7, #3]
 80147cc:	b29a      	uxth	r2, r3
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	2200      	movs	r2, #0
 80147d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2200      	movs	r2, #0
 80147dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80147de:	2200      	movs	r2, #0
 80147e0:	2100      	movs	r1, #0
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 fb3a 	bl	8014e5c <USBH_CtlReq>
 80147e8:	4603      	mov	r3, r0
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3708      	adds	r7, #8
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}

080147f2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b082      	sub	sp, #8
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	6078      	str	r0, [r7, #4]
 80147fa:	460b      	mov	r3, r1
 80147fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	789b      	ldrb	r3, [r3, #2]
 8014802:	2b01      	cmp	r3, #1
 8014804:	d10f      	bne.n	8014826 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2202      	movs	r2, #2
 801480a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2201      	movs	r2, #1
 8014810:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2200      	movs	r2, #0
 8014816:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8014818:	78fb      	ldrb	r3, [r7, #3]
 801481a:	b29a      	uxth	r2, r3
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2200      	movs	r2, #0
 8014824:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8014826:	2200      	movs	r2, #0
 8014828:	2100      	movs	r1, #0
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f000 fb16 	bl	8014e5c <USBH_CtlReq>
 8014830:	4603      	mov	r3, r0
}
 8014832:	4618      	mov	r0, r3
 8014834:	3708      	adds	r7, #8
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
	...

0801483c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801483c:	b480      	push	{r7}
 801483e:	b087      	sub	sp, #28
 8014840:	af00      	add	r7, sp, #0
 8014842:	60f8      	str	r0, [r7, #12]
 8014844:	60b9      	str	r1, [r7, #8]
 8014846:	4613      	mov	r3, r2
 8014848:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8014850:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8014852:	2300      	movs	r3, #0
 8014854:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d101      	bne.n	8014860 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 801485c:	2302      	movs	r3, #2
 801485e:	e094      	b.n	801498a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	781a      	ldrb	r2, [r3, #0]
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	785a      	ldrb	r2, [r3, #1]
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	3302      	adds	r3, #2
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	461a      	mov	r2, r3
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	3303      	adds	r3, #3
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	021b      	lsls	r3, r3, #8
 8014880:	b29b      	uxth	r3, r3
 8014882:	4313      	orrs	r3, r2
 8014884:	b29a      	uxth	r2, r3
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	791a      	ldrb	r2, [r3, #4]
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	795a      	ldrb	r2, [r3, #5]
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	799a      	ldrb	r2, [r3, #6]
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	79da      	ldrb	r2, [r3, #7]
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d004      	beq.n	80148be <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d11b      	bne.n	80148f6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	79db      	ldrb	r3, [r3, #7]
 80148c2:	2b20      	cmp	r3, #32
 80148c4:	dc0f      	bgt.n	80148e6 <USBH_ParseDevDesc+0xaa>
 80148c6:	2b08      	cmp	r3, #8
 80148c8:	db0f      	blt.n	80148ea <USBH_ParseDevDesc+0xae>
 80148ca:	3b08      	subs	r3, #8
 80148cc:	4a32      	ldr	r2, [pc, #200]	@ (8014998 <USBH_ParseDevDesc+0x15c>)
 80148ce:	fa22 f303 	lsr.w	r3, r2, r3
 80148d2:	f003 0301 	and.w	r3, r3, #1
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	bf14      	ite	ne
 80148da:	2301      	movne	r3, #1
 80148dc:	2300      	moveq	r3, #0
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d106      	bne.n	80148f2 <USBH_ParseDevDesc+0xb6>
 80148e4:	e001      	b.n	80148ea <USBH_ParseDevDesc+0xae>
 80148e6:	2b40      	cmp	r3, #64	@ 0x40
 80148e8:	d003      	beq.n	80148f2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	2208      	movs	r2, #8
 80148ee:	71da      	strb	r2, [r3, #7]
        break;
 80148f0:	e000      	b.n	80148f4 <USBH_ParseDevDesc+0xb8>
        break;
 80148f2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80148f4:	e00e      	b.n	8014914 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80148fc:	2b02      	cmp	r3, #2
 80148fe:	d107      	bne.n	8014910 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8014900:	693b      	ldr	r3, [r7, #16]
 8014902:	79db      	ldrb	r3, [r3, #7]
 8014904:	2b08      	cmp	r3, #8
 8014906:	d005      	beq.n	8014914 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	2208      	movs	r2, #8
 801490c:	71da      	strb	r2, [r3, #7]
 801490e:	e001      	b.n	8014914 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8014910:	2303      	movs	r3, #3
 8014912:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8014914:	88fb      	ldrh	r3, [r7, #6]
 8014916:	2b08      	cmp	r3, #8
 8014918:	d936      	bls.n	8014988 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	3308      	adds	r3, #8
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	461a      	mov	r2, r3
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	3309      	adds	r3, #9
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	021b      	lsls	r3, r3, #8
 801492a:	b29b      	uxth	r3, r3
 801492c:	4313      	orrs	r3, r2
 801492e:	b29a      	uxth	r2, r3
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	330a      	adds	r3, #10
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	461a      	mov	r2, r3
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	330b      	adds	r3, #11
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	021b      	lsls	r3, r3, #8
 8014944:	b29b      	uxth	r3, r3
 8014946:	4313      	orrs	r3, r2
 8014948:	b29a      	uxth	r2, r3
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	330c      	adds	r3, #12
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	461a      	mov	r2, r3
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	330d      	adds	r3, #13
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	021b      	lsls	r3, r3, #8
 801495e:	b29b      	uxth	r3, r3
 8014960:	4313      	orrs	r3, r2
 8014962:	b29a      	uxth	r2, r3
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	7b9a      	ldrb	r2, [r3, #14]
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	7bda      	ldrb	r2, [r3, #15]
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	7c1a      	ldrb	r2, [r3, #16]
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	7c5a      	ldrb	r2, [r3, #17]
 8014984:	693b      	ldr	r3, [r7, #16]
 8014986:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8014988:	7dfb      	ldrb	r3, [r7, #23]
}
 801498a:	4618      	mov	r0, r3
 801498c:	371c      	adds	r7, #28
 801498e:	46bd      	mov	sp, r7
 8014990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop
 8014998:	01000101 	.word	0x01000101

0801499c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b08c      	sub	sp, #48	@ 0x30
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	4613      	mov	r3, r2
 80149a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80149b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80149b2:	2300      	movs	r3, #0
 80149b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80149b8:	2300      	movs	r3, #0
 80149ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80149be:	2300      	movs	r3, #0
 80149c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d101      	bne.n	80149ce <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80149ca:	2302      	movs	r3, #2
 80149cc:	e0de      	b.n	8014b8c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80149d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	2b09      	cmp	r3, #9
 80149d8:	d002      	beq.n	80149e0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80149da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149dc:	2209      	movs	r2, #9
 80149de:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	781a      	ldrb	r2, [r3, #0]
 80149e4:	6a3b      	ldr	r3, [r7, #32]
 80149e6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	785a      	ldrb	r2, [r3, #1]
 80149ec:	6a3b      	ldr	r3, [r7, #32]
 80149ee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	3302      	adds	r3, #2
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	461a      	mov	r2, r3
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	3303      	adds	r3, #3
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	021b      	lsls	r3, r3, #8
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	4313      	orrs	r3, r2
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014a0a:	bf28      	it	cs
 8014a0c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8014a10:	b29a      	uxth	r2, r3
 8014a12:	6a3b      	ldr	r3, [r7, #32]
 8014a14:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	791a      	ldrb	r2, [r3, #4]
 8014a1a:	6a3b      	ldr	r3, [r7, #32]
 8014a1c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	795a      	ldrb	r2, [r3, #5]
 8014a22:	6a3b      	ldr	r3, [r7, #32]
 8014a24:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	799a      	ldrb	r2, [r3, #6]
 8014a2a:	6a3b      	ldr	r3, [r7, #32]
 8014a2c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	79da      	ldrb	r2, [r3, #7]
 8014a32:	6a3b      	ldr	r3, [r7, #32]
 8014a34:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	7a1a      	ldrb	r2, [r3, #8]
 8014a3a:	6a3b      	ldr	r3, [r7, #32]
 8014a3c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014a3e:	88fb      	ldrh	r3, [r7, #6]
 8014a40:	2b09      	cmp	r3, #9
 8014a42:	f240 80a1 	bls.w	8014b88 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8014a46:	2309      	movs	r3, #9
 8014a48:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014a4e:	e085      	b.n	8014b5c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014a50:	f107 0316 	add.w	r3, r7, #22
 8014a54:	4619      	mov	r1, r3
 8014a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014a58:	f000 f9e6 	bl	8014e28 <USBH_GetNextDesc>
 8014a5c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8014a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a60:	785b      	ldrb	r3, [r3, #1]
 8014a62:	2b04      	cmp	r3, #4
 8014a64:	d17a      	bne.n	8014b5c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8014a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	2b09      	cmp	r3, #9
 8014a6c:	d002      	beq.n	8014a74 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8014a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a70:	2209      	movs	r2, #9
 8014a72:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8014a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a78:	221a      	movs	r2, #26
 8014a7a:	fb02 f303 	mul.w	r3, r2, r3
 8014a7e:	3308      	adds	r3, #8
 8014a80:	6a3a      	ldr	r2, [r7, #32]
 8014a82:	4413      	add	r3, r2
 8014a84:	3302      	adds	r3, #2
 8014a86:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8014a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014a8a:	69f8      	ldr	r0, [r7, #28]
 8014a8c:	f000 f882 	bl	8014b94 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8014a90:	2300      	movs	r3, #0
 8014a92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8014a96:	2300      	movs	r3, #0
 8014a98:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014a9a:	e043      	b.n	8014b24 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014a9c:	f107 0316 	add.w	r3, r7, #22
 8014aa0:	4619      	mov	r1, r3
 8014aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014aa4:	f000 f9c0 	bl	8014e28 <USBH_GetNextDesc>
 8014aa8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aac:	785b      	ldrb	r3, [r3, #1]
 8014aae:	2b05      	cmp	r3, #5
 8014ab0:	d138      	bne.n	8014b24 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	795b      	ldrb	r3, [r3, #5]
 8014ab6:	2b01      	cmp	r3, #1
 8014ab8:	d113      	bne.n	8014ae2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8014abe:	2b02      	cmp	r3, #2
 8014ac0:	d003      	beq.n	8014aca <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	799b      	ldrb	r3, [r3, #6]
 8014ac6:	2b03      	cmp	r3, #3
 8014ac8:	d10b      	bne.n	8014ae2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	79db      	ldrb	r3, [r3, #7]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d10b      	bne.n	8014aea <USBH_ParseCfgDesc+0x14e>
 8014ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	2b09      	cmp	r3, #9
 8014ad8:	d007      	beq.n	8014aea <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8014ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014adc:	2209      	movs	r2, #9
 8014ade:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014ae0:	e003      	b.n	8014aea <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8014ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ae4:	2207      	movs	r2, #7
 8014ae6:	701a      	strb	r2, [r3, #0]
 8014ae8:	e000      	b.n	8014aec <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014aea:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8014aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014af0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8014af4:	3201      	adds	r2, #1
 8014af6:	00d2      	lsls	r2, r2, #3
 8014af8:	211a      	movs	r1, #26
 8014afa:	fb01 f303 	mul.w	r3, r1, r3
 8014afe:	4413      	add	r3, r2
 8014b00:	3308      	adds	r3, #8
 8014b02:	6a3a      	ldr	r2, [r7, #32]
 8014b04:	4413      	add	r3, r2
 8014b06:	3304      	adds	r3, #4
 8014b08:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8014b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b0c:	69b9      	ldr	r1, [r7, #24]
 8014b0e:	68f8      	ldr	r0, [r7, #12]
 8014b10:	f000 f86f 	bl	8014bf2 <USBH_ParseEPDesc>
 8014b14:	4603      	mov	r3, r0
 8014b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8014b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014b1e:	3301      	adds	r3, #1
 8014b20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014b24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d80a      	bhi.n	8014b42 <USBH_ParseCfgDesc+0x1a6>
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	791b      	ldrb	r3, [r3, #4]
 8014b30:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d204      	bcs.n	8014b42 <USBH_ParseCfgDesc+0x1a6>
 8014b38:	6a3b      	ldr	r3, [r7, #32]
 8014b3a:	885a      	ldrh	r2, [r3, #2]
 8014b3c:	8afb      	ldrh	r3, [r7, #22]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d8ac      	bhi.n	8014a9c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8014b42:	69fb      	ldr	r3, [r7, #28]
 8014b44:	791b      	ldrb	r3, [r3, #4]
 8014b46:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d201      	bcs.n	8014b52 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8014b4e:	2303      	movs	r3, #3
 8014b50:	e01c      	b.n	8014b8c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8014b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b56:	3301      	adds	r3, #1
 8014b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b60:	2b01      	cmp	r3, #1
 8014b62:	d805      	bhi.n	8014b70 <USBH_ParseCfgDesc+0x1d4>
 8014b64:	6a3b      	ldr	r3, [r7, #32]
 8014b66:	885a      	ldrh	r2, [r3, #2]
 8014b68:	8afb      	ldrh	r3, [r7, #22]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	f63f af70 	bhi.w	8014a50 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8014b70:	6a3b      	ldr	r3, [r7, #32]
 8014b72:	791b      	ldrb	r3, [r3, #4]
 8014b74:	2b02      	cmp	r3, #2
 8014b76:	bf28      	it	cs
 8014b78:	2302      	movcs	r3, #2
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d201      	bcs.n	8014b88 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8014b84:	2303      	movs	r3, #3
 8014b86:	e001      	b.n	8014b8c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8014b88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	3730      	adds	r7, #48	@ 0x30
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}

08014b94 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8014b94:	b480      	push	{r7}
 8014b96:	b083      	sub	sp, #12
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	781a      	ldrb	r2, [r3, #0]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	785a      	ldrb	r2, [r3, #1]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	789a      	ldrb	r2, [r3, #2]
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	78da      	ldrb	r2, [r3, #3]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	791a      	ldrb	r2, [r3, #4]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	795a      	ldrb	r2, [r3, #5]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	799a      	ldrb	r2, [r3, #6]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	79da      	ldrb	r2, [r3, #7]
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	7a1a      	ldrb	r2, [r3, #8]
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	721a      	strb	r2, [r3, #8]
}
 8014be6:	bf00      	nop
 8014be8:	370c      	adds	r7, #12
 8014bea:	46bd      	mov	sp, r7
 8014bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf0:	4770      	bx	lr

08014bf2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8014bf2:	b480      	push	{r7}
 8014bf4:	b087      	sub	sp, #28
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	60f8      	str	r0, [r7, #12]
 8014bfa:	60b9      	str	r1, [r7, #8]
 8014bfc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	781a      	ldrb	r2, [r3, #0]
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	785a      	ldrb	r2, [r3, #1]
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	789a      	ldrb	r2, [r3, #2]
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	78da      	ldrb	r2, [r3, #3]
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	3304      	adds	r3, #4
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	461a      	mov	r2, r3
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	3305      	adds	r3, #5
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	021b      	lsls	r3, r3, #8
 8014c32:	b29b      	uxth	r3, r3
 8014c34:	4313      	orrs	r3, r2
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	799a      	ldrb	r2, [r3, #6]
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	889b      	ldrh	r3, [r3, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d009      	beq.n	8014c60 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8014c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014c54:	d804      	bhi.n	8014c60 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8014c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014c5e:	d901      	bls.n	8014c64 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8014c60:	2303      	movs	r3, #3
 8014c62:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d136      	bne.n	8014cdc <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	78db      	ldrb	r3, [r3, #3]
 8014c72:	f003 0303 	and.w	r3, r3, #3
 8014c76:	2b02      	cmp	r3, #2
 8014c78:	d108      	bne.n	8014c8c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	889b      	ldrh	r3, [r3, #4]
 8014c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014c82:	f240 8097 	bls.w	8014db4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014c86:	2303      	movs	r3, #3
 8014c88:	75fb      	strb	r3, [r7, #23]
 8014c8a:	e093      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	78db      	ldrb	r3, [r3, #3]
 8014c90:	f003 0303 	and.w	r3, r3, #3
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d107      	bne.n	8014ca8 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	889b      	ldrh	r3, [r3, #4]
 8014c9c:	2b40      	cmp	r3, #64	@ 0x40
 8014c9e:	f240 8089 	bls.w	8014db4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014ca2:	2303      	movs	r3, #3
 8014ca4:	75fb      	strb	r3, [r7, #23]
 8014ca6:	e085      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	78db      	ldrb	r3, [r3, #3]
 8014cac:	f003 0303 	and.w	r3, r3, #3
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	d005      	beq.n	8014cc0 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	78db      	ldrb	r3, [r3, #3]
 8014cb8:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014cbc:	2b03      	cmp	r3, #3
 8014cbe:	d10a      	bne.n	8014cd6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	799b      	ldrb	r3, [r3, #6]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d003      	beq.n	8014cd0 <USBH_ParseEPDesc+0xde>
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	799b      	ldrb	r3, [r3, #6]
 8014ccc:	2b10      	cmp	r3, #16
 8014cce:	d970      	bls.n	8014db2 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8014cd0:	2303      	movs	r3, #3
 8014cd2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8014cd4:	e06d      	b.n	8014db2 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8014cd6:	2303      	movs	r3, #3
 8014cd8:	75fb      	strb	r3, [r7, #23]
 8014cda:	e06b      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d13c      	bne.n	8014d60 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	78db      	ldrb	r3, [r3, #3]
 8014cea:	f003 0303 	and.w	r3, r3, #3
 8014cee:	2b02      	cmp	r3, #2
 8014cf0:	d005      	beq.n	8014cfe <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	78db      	ldrb	r3, [r3, #3]
 8014cf6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d106      	bne.n	8014d0c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	889b      	ldrh	r3, [r3, #4]
 8014d02:	2b40      	cmp	r3, #64	@ 0x40
 8014d04:	d956      	bls.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014d06:	2303      	movs	r3, #3
 8014d08:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014d0a:	e053      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	78db      	ldrb	r3, [r3, #3]
 8014d10:	f003 0303 	and.w	r3, r3, #3
 8014d14:	2b01      	cmp	r3, #1
 8014d16:	d10e      	bne.n	8014d36 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	799b      	ldrb	r3, [r3, #6]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d007      	beq.n	8014d30 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8014d24:	2b10      	cmp	r3, #16
 8014d26:	d803      	bhi.n	8014d30 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8014d2c:	2b40      	cmp	r3, #64	@ 0x40
 8014d2e:	d941      	bls.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014d30:	2303      	movs	r3, #3
 8014d32:	75fb      	strb	r3, [r7, #23]
 8014d34:	e03e      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8014d36:	68bb      	ldr	r3, [r7, #8]
 8014d38:	78db      	ldrb	r3, [r3, #3]
 8014d3a:	f003 0303 	and.w	r3, r3, #3
 8014d3e:	2b03      	cmp	r3, #3
 8014d40:	d10b      	bne.n	8014d5a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	799b      	ldrb	r3, [r3, #6]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d004      	beq.n	8014d54 <USBH_ParseEPDesc+0x162>
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	889b      	ldrh	r3, [r3, #4]
 8014d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014d52:	d32f      	bcc.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014d54:	2303      	movs	r3, #3
 8014d56:	75fb      	strb	r3, [r7, #23]
 8014d58:	e02c      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8014d5a:	2303      	movs	r3, #3
 8014d5c:	75fb      	strb	r3, [r7, #23]
 8014d5e:	e029      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014d66:	2b02      	cmp	r3, #2
 8014d68:	d120      	bne.n	8014dac <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	78db      	ldrb	r3, [r3, #3]
 8014d6e:	f003 0303 	and.w	r3, r3, #3
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d106      	bne.n	8014d84 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	889b      	ldrh	r3, [r3, #4]
 8014d7a:	2b08      	cmp	r3, #8
 8014d7c:	d01a      	beq.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014d7e:	2303      	movs	r3, #3
 8014d80:	75fb      	strb	r3, [r7, #23]
 8014d82:	e017      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	78db      	ldrb	r3, [r3, #3]
 8014d88:	f003 0303 	and.w	r3, r3, #3
 8014d8c:	2b03      	cmp	r3, #3
 8014d8e:	d10a      	bne.n	8014da6 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	799b      	ldrb	r3, [r3, #6]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d003      	beq.n	8014da0 <USBH_ParseEPDesc+0x1ae>
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	889b      	ldrh	r3, [r3, #4]
 8014d9c:	2b08      	cmp	r3, #8
 8014d9e:	d909      	bls.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014da0:	2303      	movs	r3, #3
 8014da2:	75fb      	strb	r3, [r7, #23]
 8014da4:	e006      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8014da6:	2303      	movs	r3, #3
 8014da8:	75fb      	strb	r3, [r7, #23]
 8014daa:	e003      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8014dac:	2303      	movs	r3, #3
 8014dae:	75fb      	strb	r3, [r7, #23]
 8014db0:	e000      	b.n	8014db4 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8014db2:	bf00      	nop
  }

  return status;
 8014db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	371c      	adds	r7, #28
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc0:	4770      	bx	lr

08014dc2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8014dc2:	b480      	push	{r7}
 8014dc4:	b087      	sub	sp, #28
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	60f8      	str	r0, [r7, #12]
 8014dca:	60b9      	str	r1, [r7, #8]
 8014dcc:	4613      	mov	r3, r2
 8014dce:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	2b03      	cmp	r3, #3
 8014dd8:	d120      	bne.n	8014e1c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	781b      	ldrb	r3, [r3, #0]
 8014dde:	1e9a      	subs	r2, r3, #2
 8014de0:	88fb      	ldrh	r3, [r7, #6]
 8014de2:	4293      	cmp	r3, r2
 8014de4:	bf28      	it	cs
 8014de6:	4613      	movcs	r3, r2
 8014de8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	3302      	adds	r3, #2
 8014dee:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8014df0:	2300      	movs	r3, #0
 8014df2:	82fb      	strh	r3, [r7, #22]
 8014df4:	e00b      	b.n	8014e0e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8014df6:	8afb      	ldrh	r3, [r7, #22]
 8014df8:	68fa      	ldr	r2, [r7, #12]
 8014dfa:	4413      	add	r3, r2
 8014dfc:	781a      	ldrb	r2, [r3, #0]
 8014dfe:	68bb      	ldr	r3, [r7, #8]
 8014e00:	701a      	strb	r2, [r3, #0]
      pdest++;
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	3301      	adds	r3, #1
 8014e06:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8014e08:	8afb      	ldrh	r3, [r7, #22]
 8014e0a:	3302      	adds	r3, #2
 8014e0c:	82fb      	strh	r3, [r7, #22]
 8014e0e:	8afa      	ldrh	r2, [r7, #22]
 8014e10:	8abb      	ldrh	r3, [r7, #20]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d3ef      	bcc.n	8014df6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	701a      	strb	r2, [r3, #0]
  }
}
 8014e1c:	bf00      	nop
 8014e1e:	371c      	adds	r7, #28
 8014e20:	46bd      	mov	sp, r7
 8014e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e26:	4770      	bx	lr

08014e28 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014e28:	b480      	push	{r7}
 8014e2a:	b085      	sub	sp, #20
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	881b      	ldrh	r3, [r3, #0]
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	7812      	ldrb	r2, [r2, #0]
 8014e3a:	4413      	add	r3, r2
 8014e3c:	b29a      	uxth	r2, r3
 8014e3e:	683b      	ldr	r3, [r7, #0]
 8014e40:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	4413      	add	r3, r2
 8014e4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014e4e:	68fb      	ldr	r3, [r7, #12]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3714      	adds	r7, #20
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr

08014e5c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b086      	sub	sp, #24
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	60f8      	str	r0, [r7, #12]
 8014e64:	60b9      	str	r1, [r7, #8]
 8014e66:	4613      	mov	r3, r2
 8014e68:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	789b      	ldrb	r3, [r3, #2]
 8014e72:	2b01      	cmp	r3, #1
 8014e74:	d002      	beq.n	8014e7c <USBH_CtlReq+0x20>
 8014e76:	2b02      	cmp	r3, #2
 8014e78:	d015      	beq.n	8014ea6 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8014e7a:	e033      	b.n	8014ee4 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	68ba      	ldr	r2, [r7, #8]
 8014e80:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	88fa      	ldrh	r2, [r7, #6]
 8014e86:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	2202      	movs	r2, #2
 8014e92:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8014e94:	2301      	movs	r3, #1
 8014e96:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014e98:	2300      	movs	r3, #0
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	2103      	movs	r1, #3
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f7ff fb32 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8014ea4:	e01e      	b.n	8014ee4 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 8014ea6:	68f8      	ldr	r0, [r7, #12]
 8014ea8:	f000 f822 	bl	8014ef0 <USBH_HandleControl>
 8014eac:	4603      	mov	r3, r0
 8014eae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8014eb0:	7dfb      	ldrb	r3, [r7, #23]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d002      	beq.n	8014ebc <USBH_CtlReq+0x60>
 8014eb6:	7dfb      	ldrb	r3, [r7, #23]
 8014eb8:	2b03      	cmp	r3, #3
 8014eba:	d106      	bne.n	8014eca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2201      	movs	r2, #1
 8014ec0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	761a      	strb	r2, [r3, #24]
 8014ec8:	e005      	b.n	8014ed6 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 8014eca:	7dfb      	ldrb	r3, [r7, #23]
 8014ecc:	2b02      	cmp	r3, #2
 8014ece:	d102      	bne.n	8014ed6 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	2200      	movs	r2, #0
 8014eda:	2103      	movs	r1, #3
 8014edc:	68f8      	ldr	r0, [r7, #12]
 8014ede:	f7ff fb13 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8014ee2:	bf00      	nop
  }
  return status;
 8014ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3718      	adds	r7, #24
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
	...

08014ef0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b086      	sub	sp, #24
 8014ef4:	af02      	add	r7, sp, #8
 8014ef6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8014ef8:	2301      	movs	r3, #1
 8014efa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014efc:	2300      	movs	r3, #0
 8014efe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	7e1b      	ldrb	r3, [r3, #24]
 8014f04:	3b01      	subs	r3, #1
 8014f06:	2b0a      	cmp	r3, #10
 8014f08:	f200 81b2 	bhi.w	8015270 <USBH_HandleControl+0x380>
 8014f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8014f14 <USBH_HandleControl+0x24>)
 8014f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f12:	bf00      	nop
 8014f14:	08014f41 	.word	0x08014f41
 8014f18:	08014f5b 	.word	0x08014f5b
 8014f1c:	08014fdd 	.word	0x08014fdd
 8014f20:	08015003 	.word	0x08015003
 8014f24:	08015061 	.word	0x08015061
 8014f28:	0801508b 	.word	0x0801508b
 8014f2c:	0801510d 	.word	0x0801510d
 8014f30:	0801512f 	.word	0x0801512f
 8014f34:	08015191 	.word	0x08015191
 8014f38:	080151b7 	.word	0x080151b7
 8014f3c:	08015219 	.word	0x08015219
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f103 0110 	add.w	r1, r3, #16
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	795b      	ldrb	r3, [r3, #5]
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f000 f99f 	bl	8015290 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2202      	movs	r2, #2
 8014f56:	761a      	strb	r2, [r3, #24]
      break;
 8014f58:	e195      	b.n	8015286 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	795b      	ldrb	r3, [r3, #5]
 8014f5e:	4619      	mov	r1, r3
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f006 fe5f 	bl	801bc24 <USBH_LL_GetURBState>
 8014f66:	4603      	mov	r3, r0
 8014f68:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8014f6a:	7bbb      	ldrb	r3, [r7, #14]
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d124      	bne.n	8014fba <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	7c1b      	ldrb	r3, [r3, #16]
 8014f74:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014f78:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	8adb      	ldrh	r3, [r3, #22]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d00a      	beq.n	8014f98 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8014f82:	7b7b      	ldrb	r3, [r7, #13]
 8014f84:	2b80      	cmp	r3, #128	@ 0x80
 8014f86:	d103      	bne.n	8014f90 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2203      	movs	r2, #3
 8014f8c:	761a      	strb	r2, [r3, #24]
 8014f8e:	e00d      	b.n	8014fac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2205      	movs	r2, #5
 8014f94:	761a      	strb	r2, [r3, #24]
 8014f96:	e009      	b.n	8014fac <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8014f98:	7b7b      	ldrb	r3, [r7, #13]
 8014f9a:	2b80      	cmp	r3, #128	@ 0x80
 8014f9c:	d103      	bne.n	8014fa6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2209      	movs	r2, #9
 8014fa2:	761a      	strb	r2, [r3, #24]
 8014fa4:	e002      	b.n	8014fac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2207      	movs	r2, #7
 8014faa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014fac:	2300      	movs	r3, #0
 8014fae:	2200      	movs	r2, #0
 8014fb0:	2103      	movs	r1, #3
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7ff faa8 	bl	8014508 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8014fb8:	e15c      	b.n	8015274 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8014fba:	7bbb      	ldrb	r3, [r7, #14]
 8014fbc:	2b04      	cmp	r3, #4
 8014fbe:	d003      	beq.n	8014fc8 <USBH_HandleControl+0xd8>
 8014fc0:	7bbb      	ldrb	r3, [r7, #14]
 8014fc2:	2b02      	cmp	r3, #2
 8014fc4:	f040 8156 	bne.w	8015274 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	220b      	movs	r2, #11
 8014fcc:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014fce:	2300      	movs	r3, #0
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	2103      	movs	r1, #3
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f7ff fa97 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8014fda:	e14b      	b.n	8015274 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014fe2:	b29a      	uxth	r2, r3
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6899      	ldr	r1, [r3, #8]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	899a      	ldrh	r2, [r3, #12]
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	791b      	ldrb	r3, [r3, #4]
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f000 f98a 	bl	801530e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2204      	movs	r2, #4
 8014ffe:	761a      	strb	r2, [r3, #24]
      break;
 8015000:	e141      	b.n	8015286 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	791b      	ldrb	r3, [r3, #4]
 8015006:	4619      	mov	r1, r3
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f006 fe0b 	bl	801bc24 <USBH_LL_GetURBState>
 801500e:	4603      	mov	r3, r0
 8015010:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8015012:	7bbb      	ldrb	r3, [r7, #14]
 8015014:	2b01      	cmp	r3, #1
 8015016:	d109      	bne.n	801502c <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2209      	movs	r2, #9
 801501c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801501e:	2300      	movs	r3, #0
 8015020:	2200      	movs	r2, #0
 8015022:	2103      	movs	r1, #3
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7ff fa6f 	bl	8014508 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801502a:	e125      	b.n	8015278 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 801502c:	7bbb      	ldrb	r3, [r7, #14]
 801502e:	2b05      	cmp	r3, #5
 8015030:	d108      	bne.n	8015044 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 8015032:	2303      	movs	r3, #3
 8015034:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8015036:	2300      	movs	r3, #0
 8015038:	2200      	movs	r2, #0
 801503a:	2103      	movs	r1, #3
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f7ff fa63 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8015042:	e119      	b.n	8015278 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 8015044:	7bbb      	ldrb	r3, [r7, #14]
 8015046:	2b04      	cmp	r3, #4
 8015048:	f040 8116 	bne.w	8015278 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	220b      	movs	r2, #11
 8015050:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8015052:	2300      	movs	r3, #0
 8015054:	2200      	movs	r2, #0
 8015056:	2103      	movs	r1, #3
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7ff fa55 	bl	8014508 <USBH_OS_PutMessage>
      break;
 801505e:	e10b      	b.n	8015278 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	6899      	ldr	r1, [r3, #8]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	899a      	ldrh	r2, [r3, #12]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	795b      	ldrb	r3, [r3, #5]
 801506c:	2001      	movs	r0, #1
 801506e:	9000      	str	r0, [sp, #0]
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 f927 	bl	80152c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801507c:	b29a      	uxth	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	2206      	movs	r2, #6
 8015086:	761a      	strb	r2, [r3, #24]
      break;
 8015088:	e0fd      	b.n	8015286 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	795b      	ldrb	r3, [r3, #5]
 801508e:	4619      	mov	r1, r3
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f006 fdc7 	bl	801bc24 <USBH_LL_GetURBState>
 8015096:	4603      	mov	r3, r0
 8015098:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801509a:	7bbb      	ldrb	r3, [r7, #14]
 801509c:	2b01      	cmp	r3, #1
 801509e:	d109      	bne.n	80150b4 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2207      	movs	r2, #7
 80150a4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80150a6:	2300      	movs	r3, #0
 80150a8:	2200      	movs	r2, #0
 80150aa:	2103      	movs	r1, #3
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f7ff fa2b 	bl	8014508 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80150b2:	e0e3      	b.n	801527c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 80150b4:	7bbb      	ldrb	r3, [r7, #14]
 80150b6:	2b05      	cmp	r3, #5
 80150b8:	d10b      	bne.n	80150d2 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	220c      	movs	r2, #12
 80150be:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80150c0:	2303      	movs	r3, #3
 80150c2:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80150c4:	2300      	movs	r3, #0
 80150c6:	2200      	movs	r2, #0
 80150c8:	2103      	movs	r1, #3
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7ff fa1c 	bl	8014508 <USBH_OS_PutMessage>
      break;
 80150d0:	e0d4      	b.n	801527c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 80150d2:	7bbb      	ldrb	r3, [r7, #14]
 80150d4:	2b02      	cmp	r3, #2
 80150d6:	d109      	bne.n	80150ec <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2205      	movs	r2, #5
 80150dc:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80150de:	2300      	movs	r3, #0
 80150e0:	2200      	movs	r2, #0
 80150e2:	2103      	movs	r1, #3
 80150e4:	6878      	ldr	r0, [r7, #4]
 80150e6:	f7ff fa0f 	bl	8014508 <USBH_OS_PutMessage>
      break;
 80150ea:	e0c7      	b.n	801527c <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 80150ec:	7bbb      	ldrb	r3, [r7, #14]
 80150ee:	2b04      	cmp	r3, #4
 80150f0:	f040 80c4 	bne.w	801527c <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	220b      	movs	r2, #11
 80150f8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80150fa:	2302      	movs	r3, #2
 80150fc:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80150fe:	2300      	movs	r3, #0
 8015100:	2200      	movs	r2, #0
 8015102:	2103      	movs	r1, #3
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7ff f9ff 	bl	8014508 <USBH_OS_PutMessage>
      break;
 801510a:	e0b7      	b.n	801527c <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	791b      	ldrb	r3, [r3, #4]
 8015110:	2200      	movs	r2, #0
 8015112:	2100      	movs	r1, #0
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f000 f8fa 	bl	801530e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8015120:	b29a      	uxth	r2, r3
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2208      	movs	r2, #8
 801512a:	761a      	strb	r2, [r3, #24]

      break;
 801512c:	e0ab      	b.n	8015286 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	791b      	ldrb	r3, [r3, #4]
 8015132:	4619      	mov	r1, r3
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f006 fd75 	bl	801bc24 <USBH_LL_GetURBState>
 801513a:	4603      	mov	r3, r0
 801513c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801513e:	7bbb      	ldrb	r3, [r7, #14]
 8015140:	2b01      	cmp	r3, #1
 8015142:	d10b      	bne.n	801515c <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	220d      	movs	r2, #13
 8015148:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801514a:	2300      	movs	r3, #0
 801514c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801514e:	2300      	movs	r3, #0
 8015150:	2200      	movs	r2, #0
 8015152:	2103      	movs	r1, #3
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f7ff f9d7 	bl	8014508 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801515a:	e091      	b.n	8015280 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 801515c:	7bbb      	ldrb	r3, [r7, #14]
 801515e:	2b04      	cmp	r3, #4
 8015160:	d109      	bne.n	8015176 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	220b      	movs	r2, #11
 8015166:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8015168:	2300      	movs	r3, #0
 801516a:	2200      	movs	r2, #0
 801516c:	2103      	movs	r1, #3
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f7ff f9ca 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8015174:	e084      	b.n	8015280 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 8015176:	7bbb      	ldrb	r3, [r7, #14]
 8015178:	2b05      	cmp	r3, #5
 801517a:	f040 8081 	bne.w	8015280 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 801517e:	2303      	movs	r3, #3
 8015180:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8015182:	2300      	movs	r3, #0
 8015184:	2200      	movs	r2, #0
 8015186:	2103      	movs	r1, #3
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7ff f9bd 	bl	8014508 <USBH_OS_PutMessage>
      break;
 801518e:	e077      	b.n	8015280 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	795b      	ldrb	r3, [r3, #5]
 8015194:	2201      	movs	r2, #1
 8015196:	9200      	str	r2, [sp, #0]
 8015198:	2200      	movs	r2, #0
 801519a:	2100      	movs	r1, #0
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f000 f891 	bl	80152c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80151a8:	b29a      	uxth	r2, r3
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	220a      	movs	r2, #10
 80151b2:	761a      	strb	r2, [r3, #24]
      break;
 80151b4:	e067      	b.n	8015286 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	795b      	ldrb	r3, [r3, #5]
 80151ba:	4619      	mov	r1, r3
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f006 fd31 	bl	801bc24 <USBH_LL_GetURBState>
 80151c2:	4603      	mov	r3, r0
 80151c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80151c6:	7bbb      	ldrb	r3, [r7, #14]
 80151c8:	2b01      	cmp	r3, #1
 80151ca:	d10b      	bne.n	80151e4 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 80151cc:	2300      	movs	r3, #0
 80151ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	220d      	movs	r2, #13
 80151d4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80151d6:	2300      	movs	r3, #0
 80151d8:	2200      	movs	r2, #0
 80151da:	2103      	movs	r1, #3
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f7ff f993 	bl	8014508 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80151e2:	e04f      	b.n	8015284 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 80151e4:	7bbb      	ldrb	r3, [r7, #14]
 80151e6:	2b02      	cmp	r3, #2
 80151e8:	d109      	bne.n	80151fe <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2209      	movs	r2, #9
 80151ee:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80151f0:	2300      	movs	r3, #0
 80151f2:	2200      	movs	r2, #0
 80151f4:	2103      	movs	r1, #3
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	f7ff f986 	bl	8014508 <USBH_OS_PutMessage>
      break;
 80151fc:	e042      	b.n	8015284 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 80151fe:	7bbb      	ldrb	r3, [r7, #14]
 8015200:	2b04      	cmp	r3, #4
 8015202:	d13f      	bne.n	8015284 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	220b      	movs	r2, #11
 8015208:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801520a:	2300      	movs	r3, #0
 801520c:	2200      	movs	r2, #0
 801520e:	2103      	movs	r1, #3
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f7ff f979 	bl	8014508 <USBH_OS_PutMessage>
      break;
 8015216:	e035      	b.n	8015284 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	7e5b      	ldrb	r3, [r3, #25]
 801521c:	3301      	adds	r3, #1
 801521e:	b2da      	uxtb	r2, r3
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	765a      	strb	r2, [r3, #25]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	7e5b      	ldrb	r3, [r3, #25]
 8015228:	2b02      	cmp	r3, #2
 801522a:	d806      	bhi.n	801523a <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2201      	movs	r2, #1
 8015230:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	2201      	movs	r2, #1
 8015236:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8015238:	e025      	b.n	8015286 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8015240:	2106      	movs	r1, #6
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2200      	movs	r2, #0
 801524a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	795b      	ldrb	r3, [r3, #5]
 8015250:	4619      	mov	r1, r3
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f000 f90c 	bl	8015470 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	791b      	ldrb	r3, [r3, #4]
 801525c:	4619      	mov	r1, r3
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f000 f906 	bl	8015470 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2200      	movs	r2, #0
 8015268:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801526a:	2302      	movs	r3, #2
 801526c:	73fb      	strb	r3, [r7, #15]
      break;
 801526e:	e00a      	b.n	8015286 <USBH_HandleControl+0x396>

    default:
      break;
 8015270:	bf00      	nop
 8015272:	e008      	b.n	8015286 <USBH_HandleControl+0x396>
      break;
 8015274:	bf00      	nop
 8015276:	e006      	b.n	8015286 <USBH_HandleControl+0x396>
      break;
 8015278:	bf00      	nop
 801527a:	e004      	b.n	8015286 <USBH_HandleControl+0x396>
      break;
 801527c:	bf00      	nop
 801527e:	e002      	b.n	8015286 <USBH_HandleControl+0x396>
      break;
 8015280:	bf00      	nop
 8015282:	e000      	b.n	8015286 <USBH_HandleControl+0x396>
      break;
 8015284:	bf00      	nop
  }

  return status;
 8015286:	7bfb      	ldrb	r3, [r7, #15]
}
 8015288:	4618      	mov	r0, r3
 801528a:	3710      	adds	r7, #16
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b088      	sub	sp, #32
 8015294:	af04      	add	r7, sp, #16
 8015296:	60f8      	str	r0, [r7, #12]
 8015298:	60b9      	str	r1, [r7, #8]
 801529a:	4613      	mov	r3, r2
 801529c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801529e:	79f9      	ldrb	r1, [r7, #7]
 80152a0:	2300      	movs	r3, #0
 80152a2:	9303      	str	r3, [sp, #12]
 80152a4:	2308      	movs	r3, #8
 80152a6:	9302      	str	r3, [sp, #8]
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	9301      	str	r3, [sp, #4]
 80152ac:	2300      	movs	r3, #0
 80152ae:	9300      	str	r3, [sp, #0]
 80152b0:	2300      	movs	r3, #0
 80152b2:	2200      	movs	r2, #0
 80152b4:	68f8      	ldr	r0, [r7, #12]
 80152b6:	f006 fc84 	bl	801bbc2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80152ba:	2300      	movs	r3, #0
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3710      	adds	r7, #16
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}

080152c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b088      	sub	sp, #32
 80152c8:	af04      	add	r7, sp, #16
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	60b9      	str	r1, [r7, #8]
 80152ce:	4611      	mov	r1, r2
 80152d0:	461a      	mov	r2, r3
 80152d2:	460b      	mov	r3, r1
 80152d4:	80fb      	strh	r3, [r7, #6]
 80152d6:	4613      	mov	r3, r2
 80152d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d001      	beq.n	80152e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80152e4:	2300      	movs	r3, #0
 80152e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80152e8:	7979      	ldrb	r1, [r7, #5]
 80152ea:	7e3b      	ldrb	r3, [r7, #24]
 80152ec:	9303      	str	r3, [sp, #12]
 80152ee:	88fb      	ldrh	r3, [r7, #6]
 80152f0:	9302      	str	r3, [sp, #8]
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	9301      	str	r3, [sp, #4]
 80152f6:	2301      	movs	r3, #1
 80152f8:	9300      	str	r3, [sp, #0]
 80152fa:	2300      	movs	r3, #0
 80152fc:	2200      	movs	r2, #0
 80152fe:	68f8      	ldr	r0, [r7, #12]
 8015300:	f006 fc5f 	bl	801bbc2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8015304:	2300      	movs	r3, #0
}
 8015306:	4618      	mov	r0, r3
 8015308:	3710      	adds	r7, #16
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801530e:	b580      	push	{r7, lr}
 8015310:	b088      	sub	sp, #32
 8015312:	af04      	add	r7, sp, #16
 8015314:	60f8      	str	r0, [r7, #12]
 8015316:	60b9      	str	r1, [r7, #8]
 8015318:	4611      	mov	r1, r2
 801531a:	461a      	mov	r2, r3
 801531c:	460b      	mov	r3, r1
 801531e:	80fb      	strh	r3, [r7, #6]
 8015320:	4613      	mov	r3, r2
 8015322:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015324:	7979      	ldrb	r1, [r7, #5]
 8015326:	2300      	movs	r3, #0
 8015328:	9303      	str	r3, [sp, #12]
 801532a:	88fb      	ldrh	r3, [r7, #6]
 801532c:	9302      	str	r3, [sp, #8]
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	9301      	str	r3, [sp, #4]
 8015332:	2301      	movs	r3, #1
 8015334:	9300      	str	r3, [sp, #0]
 8015336:	2300      	movs	r3, #0
 8015338:	2201      	movs	r2, #1
 801533a:	68f8      	ldr	r0, [r7, #12]
 801533c:	f006 fc41 	bl	801bbc2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8015340:	2300      	movs	r3, #0

}
 8015342:	4618      	mov	r0, r3
 8015344:	3710      	adds	r7, #16
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}

0801534a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801534a:	b580      	push	{r7, lr}
 801534c:	b088      	sub	sp, #32
 801534e:	af04      	add	r7, sp, #16
 8015350:	60f8      	str	r0, [r7, #12]
 8015352:	60b9      	str	r1, [r7, #8]
 8015354:	4611      	mov	r1, r2
 8015356:	461a      	mov	r2, r3
 8015358:	460b      	mov	r3, r1
 801535a:	80fb      	strh	r3, [r7, #6]
 801535c:	4613      	mov	r3, r2
 801535e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8015366:	2b00      	cmp	r3, #0
 8015368:	d001      	beq.n	801536e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801536a:	2300      	movs	r3, #0
 801536c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801536e:	7979      	ldrb	r1, [r7, #5]
 8015370:	7e3b      	ldrb	r3, [r7, #24]
 8015372:	9303      	str	r3, [sp, #12]
 8015374:	88fb      	ldrh	r3, [r7, #6]
 8015376:	9302      	str	r3, [sp, #8]
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	9301      	str	r3, [sp, #4]
 801537c:	2301      	movs	r3, #1
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	2302      	movs	r3, #2
 8015382:	2200      	movs	r2, #0
 8015384:	68f8      	ldr	r0, [r7, #12]
 8015386:	f006 fc1c 	bl	801bbc2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801538a:	2300      	movs	r3, #0
}
 801538c:	4618      	mov	r0, r3
 801538e:	3710      	adds	r7, #16
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b088      	sub	sp, #32
 8015398:	af04      	add	r7, sp, #16
 801539a:	60f8      	str	r0, [r7, #12]
 801539c:	60b9      	str	r1, [r7, #8]
 801539e:	4611      	mov	r1, r2
 80153a0:	461a      	mov	r2, r3
 80153a2:	460b      	mov	r3, r1
 80153a4:	80fb      	strh	r3, [r7, #6]
 80153a6:	4613      	mov	r3, r2
 80153a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80153aa:	7979      	ldrb	r1, [r7, #5]
 80153ac:	2300      	movs	r3, #0
 80153ae:	9303      	str	r3, [sp, #12]
 80153b0:	88fb      	ldrh	r3, [r7, #6]
 80153b2:	9302      	str	r3, [sp, #8]
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	9301      	str	r3, [sp, #4]
 80153b8:	2301      	movs	r3, #1
 80153ba:	9300      	str	r3, [sp, #0]
 80153bc:	2302      	movs	r3, #2
 80153be:	2201      	movs	r2, #1
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f006 fbfe 	bl	801bbc2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80153c6:	2300      	movs	r3, #0
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3710      	adds	r7, #16
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}

080153d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b086      	sub	sp, #24
 80153d4:	af04      	add	r7, sp, #16
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	4608      	mov	r0, r1
 80153da:	4611      	mov	r1, r2
 80153dc:	461a      	mov	r2, r3
 80153de:	4603      	mov	r3, r0
 80153e0:	70fb      	strb	r3, [r7, #3]
 80153e2:	460b      	mov	r3, r1
 80153e4:	70bb      	strb	r3, [r7, #2]
 80153e6:	4613      	mov	r3, r2
 80153e8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80153ea:	7878      	ldrb	r0, [r7, #1]
 80153ec:	78ba      	ldrb	r2, [r7, #2]
 80153ee:	78f9      	ldrb	r1, [r7, #3]
 80153f0:	8b3b      	ldrh	r3, [r7, #24]
 80153f2:	9302      	str	r3, [sp, #8]
 80153f4:	7d3b      	ldrb	r3, [r7, #20]
 80153f6:	9301      	str	r3, [sp, #4]
 80153f8:	7c3b      	ldrb	r3, [r7, #16]
 80153fa:	9300      	str	r3, [sp, #0]
 80153fc:	4603      	mov	r3, r0
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f006 fb91 	bl	801bb26 <USBH_LL_OpenPipe>

  return USBH_OK;
 8015404:	2300      	movs	r3, #0
}
 8015406:	4618      	mov	r0, r3
 8015408:	3708      	adds	r7, #8
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}

0801540e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801540e:	b580      	push	{r7, lr}
 8015410:	b082      	sub	sp, #8
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]
 8015416:	460b      	mov	r3, r1
 8015418:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801541a:	78fb      	ldrb	r3, [r7, #3]
 801541c:	4619      	mov	r1, r3
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f006 fbb0 	bl	801bb84 <USBH_LL_ClosePipe>

  return USBH_OK;
 8015424:	2300      	movs	r3, #0
}
 8015426:	4618      	mov	r0, r3
 8015428:	3708      	adds	r7, #8
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}

0801542e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801542e:	b580      	push	{r7, lr}
 8015430:	b084      	sub	sp, #16
 8015432:	af00      	add	r7, sp, #0
 8015434:	6078      	str	r0, [r7, #4]
 8015436:	460b      	mov	r3, r1
 8015438:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f000 f836 	bl	80154ac <USBH_GetFreePipe>
 8015440:	4603      	mov	r3, r0
 8015442:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8015444:	89fb      	ldrh	r3, [r7, #14]
 8015446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801544a:	4293      	cmp	r3, r2
 801544c:	d00a      	beq.n	8015464 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801544e:	78fa      	ldrb	r2, [r7, #3]
 8015450:	89fb      	ldrh	r3, [r7, #14]
 8015452:	f003 030f 	and.w	r3, r3, #15
 8015456:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801545a:	6879      	ldr	r1, [r7, #4]
 801545c:	33e0      	adds	r3, #224	@ 0xe0
 801545e:	009b      	lsls	r3, r3, #2
 8015460:	440b      	add	r3, r1
 8015462:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8015464:	89fb      	ldrh	r3, [r7, #14]
 8015466:	b2db      	uxtb	r3, r3
}
 8015468:	4618      	mov	r0, r3
 801546a:	3710      	adds	r7, #16
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8015470:	b480      	push	{r7}
 8015472:	b083      	sub	sp, #12
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	460b      	mov	r3, r1
 801547a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801547c:	78fb      	ldrb	r3, [r7, #3]
 801547e:	2b0f      	cmp	r3, #15
 8015480:	d80d      	bhi.n	801549e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8015482:	78fb      	ldrb	r3, [r7, #3]
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	33e0      	adds	r3, #224	@ 0xe0
 8015488:	009b      	lsls	r3, r3, #2
 801548a:	4413      	add	r3, r2
 801548c:	685a      	ldr	r2, [r3, #4]
 801548e:	78fb      	ldrb	r3, [r7, #3]
 8015490:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8015494:	6879      	ldr	r1, [r7, #4]
 8015496:	33e0      	adds	r3, #224	@ 0xe0
 8015498:	009b      	lsls	r3, r3, #2
 801549a:	440b      	add	r3, r1
 801549c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801549e:	2300      	movs	r3, #0
}
 80154a0:	4618      	mov	r0, r3
 80154a2:	370c      	adds	r7, #12
 80154a4:	46bd      	mov	sp, r7
 80154a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154aa:	4770      	bx	lr

080154ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80154ac:	b480      	push	{r7}
 80154ae:	b085      	sub	sp, #20
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80154b4:	2300      	movs	r3, #0
 80154b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80154b8:	2300      	movs	r3, #0
 80154ba:	73fb      	strb	r3, [r7, #15]
 80154bc:	e00f      	b.n	80154de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80154be:	7bfb      	ldrb	r3, [r7, #15]
 80154c0:	687a      	ldr	r2, [r7, #4]
 80154c2:	33e0      	adds	r3, #224	@ 0xe0
 80154c4:	009b      	lsls	r3, r3, #2
 80154c6:	4413      	add	r3, r2
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d102      	bne.n	80154d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80154d2:	7bfb      	ldrb	r3, [r7, #15]
 80154d4:	b29b      	uxth	r3, r3
 80154d6:	e007      	b.n	80154e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
 80154da:	3301      	adds	r3, #1
 80154dc:	73fb      	strb	r3, [r7, #15]
 80154de:	7bfb      	ldrb	r3, [r7, #15]
 80154e0:	2b0f      	cmp	r3, #15
 80154e2:	d9ec      	bls.n	80154be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80154e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80154e8:	4618      	mov	r0, r3
 80154ea:	3714      	adds	r7, #20
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr

080154f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b084      	sub	sp, #16
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	4603      	mov	r3, r0
 80154fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80154fe:	79fb      	ldrb	r3, [r7, #7]
 8015500:	4a08      	ldr	r2, [pc, #32]	@ (8015524 <disk_status+0x30>)
 8015502:	009b      	lsls	r3, r3, #2
 8015504:	4413      	add	r3, r2
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	79fa      	ldrb	r2, [r7, #7]
 801550c:	4905      	ldr	r1, [pc, #20]	@ (8015524 <disk_status+0x30>)
 801550e:	440a      	add	r2, r1
 8015510:	7a12      	ldrb	r2, [r2, #8]
 8015512:	4610      	mov	r0, r2
 8015514:	4798      	blx	r3
 8015516:	4603      	mov	r3, r0
 8015518:	73fb      	strb	r3, [r7, #15]
  return stat;
 801551a:	7bfb      	ldrb	r3, [r7, #15]
}
 801551c:	4618      	mov	r0, r3
 801551e:	3710      	adds	r7, #16
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	200024c0 	.word	0x200024c0

08015528 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b084      	sub	sp, #16
 801552c:	af00      	add	r7, sp, #0
 801552e:	4603      	mov	r3, r0
 8015530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015532:	2300      	movs	r3, #0
 8015534:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015536:	79fb      	ldrb	r3, [r7, #7]
 8015538:	4a0d      	ldr	r2, [pc, #52]	@ (8015570 <disk_initialize+0x48>)
 801553a:	5cd3      	ldrb	r3, [r2, r3]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d111      	bne.n	8015564 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015540:	79fb      	ldrb	r3, [r7, #7]
 8015542:	4a0b      	ldr	r2, [pc, #44]	@ (8015570 <disk_initialize+0x48>)
 8015544:	2101      	movs	r1, #1
 8015546:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015548:	79fb      	ldrb	r3, [r7, #7]
 801554a:	4a09      	ldr	r2, [pc, #36]	@ (8015570 <disk_initialize+0x48>)
 801554c:	009b      	lsls	r3, r3, #2
 801554e:	4413      	add	r3, r2
 8015550:	685b      	ldr	r3, [r3, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	79fa      	ldrb	r2, [r7, #7]
 8015556:	4906      	ldr	r1, [pc, #24]	@ (8015570 <disk_initialize+0x48>)
 8015558:	440a      	add	r2, r1
 801555a:	7a12      	ldrb	r2, [r2, #8]
 801555c:	4610      	mov	r0, r2
 801555e:	4798      	blx	r3
 8015560:	4603      	mov	r3, r0
 8015562:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015564:	7bfb      	ldrb	r3, [r7, #15]
}
 8015566:	4618      	mov	r0, r3
 8015568:	3710      	adds	r7, #16
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}
 801556e:	bf00      	nop
 8015570:	200024c0 	.word	0x200024c0

08015574 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015574:	b590      	push	{r4, r7, lr}
 8015576:	b087      	sub	sp, #28
 8015578:	af00      	add	r7, sp, #0
 801557a:	60b9      	str	r1, [r7, #8]
 801557c:	607a      	str	r2, [r7, #4]
 801557e:	603b      	str	r3, [r7, #0]
 8015580:	4603      	mov	r3, r0
 8015582:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015584:	7bfb      	ldrb	r3, [r7, #15]
 8015586:	4a0a      	ldr	r2, [pc, #40]	@ (80155b0 <disk_read+0x3c>)
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	4413      	add	r3, r2
 801558c:	685b      	ldr	r3, [r3, #4]
 801558e:	689c      	ldr	r4, [r3, #8]
 8015590:	7bfb      	ldrb	r3, [r7, #15]
 8015592:	4a07      	ldr	r2, [pc, #28]	@ (80155b0 <disk_read+0x3c>)
 8015594:	4413      	add	r3, r2
 8015596:	7a18      	ldrb	r0, [r3, #8]
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	687a      	ldr	r2, [r7, #4]
 801559c:	68b9      	ldr	r1, [r7, #8]
 801559e:	47a0      	blx	r4
 80155a0:	4603      	mov	r3, r0
 80155a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80155a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	371c      	adds	r7, #28
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd90      	pop	{r4, r7, pc}
 80155ae:	bf00      	nop
 80155b0:	200024c0 	.word	0x200024c0

080155b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80155b4:	b590      	push	{r4, r7, lr}
 80155b6:	b087      	sub	sp, #28
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	60b9      	str	r1, [r7, #8]
 80155bc:	607a      	str	r2, [r7, #4]
 80155be:	603b      	str	r3, [r7, #0]
 80155c0:	4603      	mov	r3, r0
 80155c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80155c4:	7bfb      	ldrb	r3, [r7, #15]
 80155c6:	4a0a      	ldr	r2, [pc, #40]	@ (80155f0 <disk_write+0x3c>)
 80155c8:	009b      	lsls	r3, r3, #2
 80155ca:	4413      	add	r3, r2
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	68dc      	ldr	r4, [r3, #12]
 80155d0:	7bfb      	ldrb	r3, [r7, #15]
 80155d2:	4a07      	ldr	r2, [pc, #28]	@ (80155f0 <disk_write+0x3c>)
 80155d4:	4413      	add	r3, r2
 80155d6:	7a18      	ldrb	r0, [r3, #8]
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	687a      	ldr	r2, [r7, #4]
 80155dc:	68b9      	ldr	r1, [r7, #8]
 80155de:	47a0      	blx	r4
 80155e0:	4603      	mov	r3, r0
 80155e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80155e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	371c      	adds	r7, #28
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd90      	pop	{r4, r7, pc}
 80155ee:	bf00      	nop
 80155f0:	200024c0 	.word	0x200024c0

080155f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	4603      	mov	r3, r0
 80155fc:	603a      	str	r2, [r7, #0]
 80155fe:	71fb      	strb	r3, [r7, #7]
 8015600:	460b      	mov	r3, r1
 8015602:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015604:	79fb      	ldrb	r3, [r7, #7]
 8015606:	4a09      	ldr	r2, [pc, #36]	@ (801562c <disk_ioctl+0x38>)
 8015608:	009b      	lsls	r3, r3, #2
 801560a:	4413      	add	r3, r2
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	691b      	ldr	r3, [r3, #16]
 8015610:	79fa      	ldrb	r2, [r7, #7]
 8015612:	4906      	ldr	r1, [pc, #24]	@ (801562c <disk_ioctl+0x38>)
 8015614:	440a      	add	r2, r1
 8015616:	7a10      	ldrb	r0, [r2, #8]
 8015618:	79b9      	ldrb	r1, [r7, #6]
 801561a:	683a      	ldr	r2, [r7, #0]
 801561c:	4798      	blx	r3
 801561e:	4603      	mov	r3, r0
 8015620:	73fb      	strb	r3, [r7, #15]
  return res;
 8015622:	7bfb      	ldrb	r3, [r7, #15]
}
 8015624:	4618      	mov	r0, r3
 8015626:	3710      	adds	r7, #16
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	200024c0 	.word	0x200024c0

08015630 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015630:	b480      	push	{r7}
 8015632:	b085      	sub	sp, #20
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	3301      	adds	r3, #1
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015644:	021b      	lsls	r3, r3, #8
 8015646:	b21a      	sxth	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	b21b      	sxth	r3, r3
 801564e:	4313      	orrs	r3, r2
 8015650:	b21b      	sxth	r3, r3
 8015652:	81fb      	strh	r3, [r7, #14]
	return rv;
 8015654:	89fb      	ldrh	r3, [r7, #14]
}
 8015656:	4618      	mov	r0, r3
 8015658:	3714      	adds	r7, #20
 801565a:	46bd      	mov	sp, r7
 801565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015660:	4770      	bx	lr

08015662 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015662:	b480      	push	{r7}
 8015664:	b085      	sub	sp, #20
 8015666:	af00      	add	r7, sp, #0
 8015668:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	3303      	adds	r3, #3
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	021b      	lsls	r3, r3, #8
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	3202      	adds	r2, #2
 801567a:	7812      	ldrb	r2, [r2, #0]
 801567c:	4313      	orrs	r3, r2
 801567e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	021b      	lsls	r3, r3, #8
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	3201      	adds	r2, #1
 8015688:	7812      	ldrb	r2, [r2, #0]
 801568a:	4313      	orrs	r3, r2
 801568c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	021b      	lsls	r3, r3, #8
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	7812      	ldrb	r2, [r2, #0]
 8015696:	4313      	orrs	r3, r2
 8015698:	60fb      	str	r3, [r7, #12]
	return rv;
 801569a:	68fb      	ldr	r3, [r7, #12]
}
 801569c:	4618      	mov	r0, r3
 801569e:	3714      	adds	r7, #20
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80156a8:	b480      	push	{r7}
 80156aa:	b083      	sub	sp, #12
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	460b      	mov	r3, r1
 80156b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	1c5a      	adds	r2, r3, #1
 80156b8:	607a      	str	r2, [r7, #4]
 80156ba:	887a      	ldrh	r2, [r7, #2]
 80156bc:	b2d2      	uxtb	r2, r2
 80156be:	701a      	strb	r2, [r3, #0]
 80156c0:	887b      	ldrh	r3, [r7, #2]
 80156c2:	0a1b      	lsrs	r3, r3, #8
 80156c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	1c5a      	adds	r2, r3, #1
 80156ca:	607a      	str	r2, [r7, #4]
 80156cc:	887a      	ldrh	r2, [r7, #2]
 80156ce:	b2d2      	uxtb	r2, r2
 80156d0:	701a      	strb	r2, [r3, #0]
}
 80156d2:	bf00      	nop
 80156d4:	370c      	adds	r7, #12
 80156d6:	46bd      	mov	sp, r7
 80156d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156dc:	4770      	bx	lr

080156de <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80156de:	b480      	push	{r7}
 80156e0:	b083      	sub	sp, #12
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	6078      	str	r0, [r7, #4]
 80156e6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	1c5a      	adds	r2, r3, #1
 80156ec:	607a      	str	r2, [r7, #4]
 80156ee:	683a      	ldr	r2, [r7, #0]
 80156f0:	b2d2      	uxtb	r2, r2
 80156f2:	701a      	strb	r2, [r3, #0]
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	0a1b      	lsrs	r3, r3, #8
 80156f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	1c5a      	adds	r2, r3, #1
 80156fe:	607a      	str	r2, [r7, #4]
 8015700:	683a      	ldr	r2, [r7, #0]
 8015702:	b2d2      	uxtb	r2, r2
 8015704:	701a      	strb	r2, [r3, #0]
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	0a1b      	lsrs	r3, r3, #8
 801570a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	1c5a      	adds	r2, r3, #1
 8015710:	607a      	str	r2, [r7, #4]
 8015712:	683a      	ldr	r2, [r7, #0]
 8015714:	b2d2      	uxtb	r2, r2
 8015716:	701a      	strb	r2, [r3, #0]
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	0a1b      	lsrs	r3, r3, #8
 801571c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	1c5a      	adds	r2, r3, #1
 8015722:	607a      	str	r2, [r7, #4]
 8015724:	683a      	ldr	r2, [r7, #0]
 8015726:	b2d2      	uxtb	r2, r2
 8015728:	701a      	strb	r2, [r3, #0]
}
 801572a:	bf00      	nop
 801572c:	370c      	adds	r7, #12
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr

08015736 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015736:	b480      	push	{r7}
 8015738:	b087      	sub	sp, #28
 801573a:	af00      	add	r7, sp, #0
 801573c:	60f8      	str	r0, [r7, #12]
 801573e:	60b9      	str	r1, [r7, #8]
 8015740:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d00d      	beq.n	801576c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015750:	693a      	ldr	r2, [r7, #16]
 8015752:	1c53      	adds	r3, r2, #1
 8015754:	613b      	str	r3, [r7, #16]
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	1c59      	adds	r1, r3, #1
 801575a:	6179      	str	r1, [r7, #20]
 801575c:	7812      	ldrb	r2, [r2, #0]
 801575e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	3b01      	subs	r3, #1
 8015764:	607b      	str	r3, [r7, #4]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d1f1      	bne.n	8015750 <mem_cpy+0x1a>
	}
}
 801576c:	bf00      	nop
 801576e:	371c      	adds	r7, #28
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr

08015778 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8015778:	b480      	push	{r7}
 801577a:	b087      	sub	sp, #28
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	1c5a      	adds	r2, r3, #1
 801578c:	617a      	str	r2, [r7, #20]
 801578e:	68ba      	ldr	r2, [r7, #8]
 8015790:	b2d2      	uxtb	r2, r2
 8015792:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	3b01      	subs	r3, #1
 8015798:	607b      	str	r3, [r7, #4]
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d1f3      	bne.n	8015788 <mem_set+0x10>
}
 80157a0:	bf00      	nop
 80157a2:	bf00      	nop
 80157a4:	371c      	adds	r7, #28
 80157a6:	46bd      	mov	sp, r7
 80157a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ac:	4770      	bx	lr

080157ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80157ae:	b480      	push	{r7}
 80157b0:	b089      	sub	sp, #36	@ 0x24
 80157b2:	af00      	add	r7, sp, #0
 80157b4:	60f8      	str	r0, [r7, #12]
 80157b6:	60b9      	str	r1, [r7, #8]
 80157b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	61fb      	str	r3, [r7, #28]
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80157c2:	2300      	movs	r3, #0
 80157c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80157c6:	69fb      	ldr	r3, [r7, #28]
 80157c8:	1c5a      	adds	r2, r3, #1
 80157ca:	61fa      	str	r2, [r7, #28]
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	4619      	mov	r1, r3
 80157d0:	69bb      	ldr	r3, [r7, #24]
 80157d2:	1c5a      	adds	r2, r3, #1
 80157d4:	61ba      	str	r2, [r7, #24]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	1acb      	subs	r3, r1, r3
 80157da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	3b01      	subs	r3, #1
 80157e0:	607b      	str	r3, [r7, #4]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d002      	beq.n	80157ee <mem_cmp+0x40>
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d0eb      	beq.n	80157c6 <mem_cmp+0x18>

	return r;
 80157ee:	697b      	ldr	r3, [r7, #20]
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3724      	adds	r7, #36	@ 0x24
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr

080157fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80157fc:	b480      	push	{r7}
 80157fe:	b083      	sub	sp, #12
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015806:	e002      	b.n	801580e <chk_chr+0x12>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	3301      	adds	r3, #1
 801580c:	607b      	str	r3, [r7, #4]
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d005      	beq.n	8015822 <chk_chr+0x26>
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	781b      	ldrb	r3, [r3, #0]
 801581a:	461a      	mov	r2, r3
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	4293      	cmp	r3, r2
 8015820:	d1f2      	bne.n	8015808 <chk_chr+0xc>
	return *str;
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	781b      	ldrb	r3, [r3, #0]
}
 8015826:	4618      	mov	r0, r3
 8015828:	370c      	adds	r7, #12
 801582a:	46bd      	mov	sp, r7
 801582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015830:	4770      	bx	lr

08015832 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8015832:	b580      	push	{r7, lr}
 8015834:	b082      	sub	sp, #8
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d009      	beq.n	8015854 <lock_fs+0x22>
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	4618      	mov	r0, r3
 8015846:	f002 ff4c 	bl	80186e2 <ff_req_grant>
 801584a:	4603      	mov	r3, r0
 801584c:	2b00      	cmp	r3, #0
 801584e:	d001      	beq.n	8015854 <lock_fs+0x22>
 8015850:	2301      	movs	r3, #1
 8015852:	e000      	b.n	8015856 <lock_fs+0x24>
 8015854:	2300      	movs	r3, #0
}
 8015856:	4618      	mov	r0, r3
 8015858:	3708      	adds	r7, #8
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}

0801585e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801585e:	b580      	push	{r7, lr}
 8015860:	b082      	sub	sp, #8
 8015862:	af00      	add	r7, sp, #0
 8015864:	6078      	str	r0, [r7, #4]
 8015866:	460b      	mov	r3, r1
 8015868:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d00d      	beq.n	801588c <unlock_fs+0x2e>
 8015870:	78fb      	ldrb	r3, [r7, #3]
 8015872:	2b0c      	cmp	r3, #12
 8015874:	d00a      	beq.n	801588c <unlock_fs+0x2e>
 8015876:	78fb      	ldrb	r3, [r7, #3]
 8015878:	2b0b      	cmp	r3, #11
 801587a:	d007      	beq.n	801588c <unlock_fs+0x2e>
 801587c:	78fb      	ldrb	r3, [r7, #3]
 801587e:	2b0f      	cmp	r3, #15
 8015880:	d004      	beq.n	801588c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	68db      	ldr	r3, [r3, #12]
 8015886:	4618      	mov	r0, r3
 8015888:	f002 ff40 	bl	801870c <ff_rel_grant>
	}
}
 801588c:	bf00      	nop
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015894:	b480      	push	{r7}
 8015896:	b085      	sub	sp, #20
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801589e:	2300      	movs	r3, #0
 80158a0:	60bb      	str	r3, [r7, #8]
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	60fb      	str	r3, [r7, #12]
 80158a6:	e029      	b.n	80158fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80158a8:	4a27      	ldr	r2, [pc, #156]	@ (8015948 <chk_lock+0xb4>)
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	011b      	lsls	r3, r3, #4
 80158ae:	4413      	add	r3, r2
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d01d      	beq.n	80158f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80158b6:	4a24      	ldr	r2, [pc, #144]	@ (8015948 <chk_lock+0xb4>)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	011b      	lsls	r3, r3, #4
 80158bc:	4413      	add	r3, r2
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d116      	bne.n	80158f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80158c8:	4a1f      	ldr	r2, [pc, #124]	@ (8015948 <chk_lock+0xb4>)
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	011b      	lsls	r3, r3, #4
 80158ce:	4413      	add	r3, r2
 80158d0:	3304      	adds	r3, #4
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80158d8:	429a      	cmp	r2, r3
 80158da:	d10c      	bne.n	80158f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80158dc:	4a1a      	ldr	r2, [pc, #104]	@ (8015948 <chk_lock+0xb4>)
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	011b      	lsls	r3, r3, #4
 80158e2:	4413      	add	r3, r2
 80158e4:	3308      	adds	r3, #8
 80158e6:	681a      	ldr	r2, [r3, #0]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d102      	bne.n	80158f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80158f0:	e007      	b.n	8015902 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80158f2:	2301      	movs	r3, #1
 80158f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	3301      	adds	r3, #1
 80158fa:	60fb      	str	r3, [r7, #12]
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d9d2      	bls.n	80158a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2b02      	cmp	r3, #2
 8015906:	d109      	bne.n	801591c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d102      	bne.n	8015914 <chk_lock+0x80>
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	2b02      	cmp	r3, #2
 8015912:	d101      	bne.n	8015918 <chk_lock+0x84>
 8015914:	2300      	movs	r3, #0
 8015916:	e010      	b.n	801593a <chk_lock+0xa6>
 8015918:	2312      	movs	r3, #18
 801591a:	e00e      	b.n	801593a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d108      	bne.n	8015934 <chk_lock+0xa0>
 8015922:	4a09      	ldr	r2, [pc, #36]	@ (8015948 <chk_lock+0xb4>)
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	011b      	lsls	r3, r3, #4
 8015928:	4413      	add	r3, r2
 801592a:	330c      	adds	r3, #12
 801592c:	881b      	ldrh	r3, [r3, #0]
 801592e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015932:	d101      	bne.n	8015938 <chk_lock+0xa4>
 8015934:	2310      	movs	r3, #16
 8015936:	e000      	b.n	801593a <chk_lock+0xa6>
 8015938:	2300      	movs	r3, #0
}
 801593a:	4618      	mov	r0, r3
 801593c:	3714      	adds	r7, #20
 801593e:	46bd      	mov	sp, r7
 8015940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015944:	4770      	bx	lr
 8015946:	bf00      	nop
 8015948:	200024a0 	.word	0x200024a0

0801594c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801594c:	b480      	push	{r7}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015952:	2300      	movs	r3, #0
 8015954:	607b      	str	r3, [r7, #4]
 8015956:	e002      	b.n	801595e <enq_lock+0x12>
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	3301      	adds	r3, #1
 801595c:	607b      	str	r3, [r7, #4]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	2b01      	cmp	r3, #1
 8015962:	d806      	bhi.n	8015972 <enq_lock+0x26>
 8015964:	4a09      	ldr	r2, [pc, #36]	@ (801598c <enq_lock+0x40>)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	011b      	lsls	r3, r3, #4
 801596a:	4413      	add	r3, r2
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d1f2      	bne.n	8015958 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2b02      	cmp	r3, #2
 8015976:	bf14      	ite	ne
 8015978:	2301      	movne	r3, #1
 801597a:	2300      	moveq	r3, #0
 801597c:	b2db      	uxtb	r3, r3
}
 801597e:	4618      	mov	r0, r3
 8015980:	370c      	adds	r7, #12
 8015982:	46bd      	mov	sp, r7
 8015984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015988:	4770      	bx	lr
 801598a:	bf00      	nop
 801598c:	200024a0 	.word	0x200024a0

08015990 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015990:	b480      	push	{r7}
 8015992:	b085      	sub	sp, #20
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801599a:	2300      	movs	r3, #0
 801599c:	60fb      	str	r3, [r7, #12]
 801599e:	e01f      	b.n	80159e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80159a0:	4a41      	ldr	r2, [pc, #260]	@ (8015aa8 <inc_lock+0x118>)
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	011b      	lsls	r3, r3, #4
 80159a6:	4413      	add	r3, r2
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d113      	bne.n	80159da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80159b2:	4a3d      	ldr	r2, [pc, #244]	@ (8015aa8 <inc_lock+0x118>)
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	011b      	lsls	r3, r3, #4
 80159b8:	4413      	add	r3, r2
 80159ba:	3304      	adds	r3, #4
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d109      	bne.n	80159da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80159c6:	4a38      	ldr	r2, [pc, #224]	@ (8015aa8 <inc_lock+0x118>)
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	011b      	lsls	r3, r3, #4
 80159cc:	4413      	add	r3, r2
 80159ce:	3308      	adds	r3, #8
 80159d0:	681a      	ldr	r2, [r3, #0]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d006      	beq.n	80159e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	3301      	adds	r3, #1
 80159de:	60fb      	str	r3, [r7, #12]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2b01      	cmp	r3, #1
 80159e4:	d9dc      	bls.n	80159a0 <inc_lock+0x10>
 80159e6:	e000      	b.n	80159ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80159e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	2b02      	cmp	r3, #2
 80159ee:	d132      	bne.n	8015a56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80159f0:	2300      	movs	r3, #0
 80159f2:	60fb      	str	r3, [r7, #12]
 80159f4:	e002      	b.n	80159fc <inc_lock+0x6c>
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	3301      	adds	r3, #1
 80159fa:	60fb      	str	r3, [r7, #12]
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d806      	bhi.n	8015a10 <inc_lock+0x80>
 8015a02:	4a29      	ldr	r2, [pc, #164]	@ (8015aa8 <inc_lock+0x118>)
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	011b      	lsls	r3, r3, #4
 8015a08:	4413      	add	r3, r2
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d1f2      	bne.n	80159f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2b02      	cmp	r3, #2
 8015a14:	d101      	bne.n	8015a1a <inc_lock+0x8a>
 8015a16:	2300      	movs	r3, #0
 8015a18:	e040      	b.n	8015a9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	4922      	ldr	r1, [pc, #136]	@ (8015aa8 <inc_lock+0x118>)
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	011b      	lsls	r3, r3, #4
 8015a24:	440b      	add	r3, r1
 8015a26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	689a      	ldr	r2, [r3, #8]
 8015a2c:	491e      	ldr	r1, [pc, #120]	@ (8015aa8 <inc_lock+0x118>)
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	011b      	lsls	r3, r3, #4
 8015a32:	440b      	add	r3, r1
 8015a34:	3304      	adds	r3, #4
 8015a36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	695a      	ldr	r2, [r3, #20]
 8015a3c:	491a      	ldr	r1, [pc, #104]	@ (8015aa8 <inc_lock+0x118>)
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	011b      	lsls	r3, r3, #4
 8015a42:	440b      	add	r3, r1
 8015a44:	3308      	adds	r3, #8
 8015a46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015a48:	4a17      	ldr	r2, [pc, #92]	@ (8015aa8 <inc_lock+0x118>)
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	011b      	lsls	r3, r3, #4
 8015a4e:	4413      	add	r3, r2
 8015a50:	330c      	adds	r3, #12
 8015a52:	2200      	movs	r2, #0
 8015a54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d009      	beq.n	8015a70 <inc_lock+0xe0>
 8015a5c:	4a12      	ldr	r2, [pc, #72]	@ (8015aa8 <inc_lock+0x118>)
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	011b      	lsls	r3, r3, #4
 8015a62:	4413      	add	r3, r2
 8015a64:	330c      	adds	r3, #12
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d001      	beq.n	8015a70 <inc_lock+0xe0>
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	e015      	b.n	8015a9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d108      	bne.n	8015a88 <inc_lock+0xf8>
 8015a76:	4a0c      	ldr	r2, [pc, #48]	@ (8015aa8 <inc_lock+0x118>)
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	011b      	lsls	r3, r3, #4
 8015a7c:	4413      	add	r3, r2
 8015a7e:	330c      	adds	r3, #12
 8015a80:	881b      	ldrh	r3, [r3, #0]
 8015a82:	3301      	adds	r3, #1
 8015a84:	b29a      	uxth	r2, r3
 8015a86:	e001      	b.n	8015a8c <inc_lock+0xfc>
 8015a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015a8c:	4906      	ldr	r1, [pc, #24]	@ (8015aa8 <inc_lock+0x118>)
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	011b      	lsls	r3, r3, #4
 8015a92:	440b      	add	r3, r1
 8015a94:	330c      	adds	r3, #12
 8015a96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	3301      	adds	r3, #1
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3714      	adds	r7, #20
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa6:	4770      	bx	lr
 8015aa8:	200024a0 	.word	0x200024a0

08015aac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015aac:	b480      	push	{r7}
 8015aae:	b085      	sub	sp, #20
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	3b01      	subs	r3, #1
 8015ab8:	607b      	str	r3, [r7, #4]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d825      	bhi.n	8015b0c <dec_lock+0x60>
		n = Files[i].ctr;
 8015ac0:	4a17      	ldr	r2, [pc, #92]	@ (8015b20 <dec_lock+0x74>)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	011b      	lsls	r3, r3, #4
 8015ac6:	4413      	add	r3, r2
 8015ac8:	330c      	adds	r3, #12
 8015aca:	881b      	ldrh	r3, [r3, #0]
 8015acc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015ace:	89fb      	ldrh	r3, [r7, #14]
 8015ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015ad4:	d101      	bne.n	8015ada <dec_lock+0x2e>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015ada:	89fb      	ldrh	r3, [r7, #14]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d002      	beq.n	8015ae6 <dec_lock+0x3a>
 8015ae0:	89fb      	ldrh	r3, [r7, #14]
 8015ae2:	3b01      	subs	r3, #1
 8015ae4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8015b20 <dec_lock+0x74>)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	011b      	lsls	r3, r3, #4
 8015aec:	4413      	add	r3, r2
 8015aee:	330c      	adds	r3, #12
 8015af0:	89fa      	ldrh	r2, [r7, #14]
 8015af2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015af4:	89fb      	ldrh	r3, [r7, #14]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d105      	bne.n	8015b06 <dec_lock+0x5a>
 8015afa:	4a09      	ldr	r2, [pc, #36]	@ (8015b20 <dec_lock+0x74>)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	011b      	lsls	r3, r3, #4
 8015b00:	4413      	add	r3, r2
 8015b02:	2200      	movs	r2, #0
 8015b04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015b06:	2300      	movs	r3, #0
 8015b08:	737b      	strb	r3, [r7, #13]
 8015b0a:	e001      	b.n	8015b10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015b0c:	2302      	movs	r3, #2
 8015b0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015b10:	7b7b      	ldrb	r3, [r7, #13]
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3714      	adds	r7, #20
 8015b16:	46bd      	mov	sp, r7
 8015b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1c:	4770      	bx	lr
 8015b1e:	bf00      	nop
 8015b20:	200024a0 	.word	0x200024a0

08015b24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015b24:	b480      	push	{r7}
 8015b26:	b085      	sub	sp, #20
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	60fb      	str	r3, [r7, #12]
 8015b30:	e010      	b.n	8015b54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015b32:	4a0d      	ldr	r2, [pc, #52]	@ (8015b68 <clear_lock+0x44>)
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	011b      	lsls	r3, r3, #4
 8015b38:	4413      	add	r3, r2
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	687a      	ldr	r2, [r7, #4]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d105      	bne.n	8015b4e <clear_lock+0x2a>
 8015b42:	4a09      	ldr	r2, [pc, #36]	@ (8015b68 <clear_lock+0x44>)
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	011b      	lsls	r3, r3, #4
 8015b48:	4413      	add	r3, r2
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	3301      	adds	r3, #1
 8015b52:	60fb      	str	r3, [r7, #12]
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d9eb      	bls.n	8015b32 <clear_lock+0xe>
	}
}
 8015b5a:	bf00      	nop
 8015b5c:	bf00      	nop
 8015b5e:	3714      	adds	r7, #20
 8015b60:	46bd      	mov	sp, r7
 8015b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b66:	4770      	bx	lr
 8015b68:	200024a0 	.word	0x200024a0

08015b6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b086      	sub	sp, #24
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015b74:	2300      	movs	r3, #0
 8015b76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	78db      	ldrb	r3, [r3, #3]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d034      	beq.n	8015bea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	7858      	ldrb	r0, [r3, #1]
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8015b90:	2301      	movs	r3, #1
 8015b92:	697a      	ldr	r2, [r7, #20]
 8015b94:	f7ff fd0e 	bl	80155b4 <disk_write>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d002      	beq.n	8015ba4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	73fb      	strb	r3, [r7, #15]
 8015ba2:	e022      	b.n	8015bea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bae:	697a      	ldr	r2, [r7, #20]
 8015bb0:	1ad2      	subs	r2, r2, r3
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	69db      	ldr	r3, [r3, #28]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d217      	bcs.n	8015bea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	789b      	ldrb	r3, [r3, #2]
 8015bbe:	613b      	str	r3, [r7, #16]
 8015bc0:	e010      	b.n	8015be4 <sync_window+0x78>
					wsect += fs->fsize;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	69db      	ldr	r3, [r3, #28]
 8015bc6:	697a      	ldr	r2, [r7, #20]
 8015bc8:	4413      	add	r3, r2
 8015bca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	7858      	ldrb	r0, [r3, #1]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	697a      	ldr	r2, [r7, #20]
 8015bda:	f7ff fceb 	bl	80155b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	3b01      	subs	r3, #1
 8015be2:	613b      	str	r3, [r7, #16]
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	2b01      	cmp	r3, #1
 8015be8:	d8eb      	bhi.n	8015bc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3718      	adds	r7, #24
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b084      	sub	sp, #16
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015c06:	683a      	ldr	r2, [r7, #0]
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d01b      	beq.n	8015c44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7ff ffad 	bl	8015b6c <sync_window>
 8015c12:	4603      	mov	r3, r0
 8015c14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015c16:	7bfb      	ldrb	r3, [r7, #15]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d113      	bne.n	8015c44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	7858      	ldrb	r0, [r3, #1]
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8015c26:	2301      	movs	r3, #1
 8015c28:	683a      	ldr	r2, [r7, #0]
 8015c2a:	f7ff fca3 	bl	8015574 <disk_read>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d004      	beq.n	8015c3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015c34:	f04f 33ff 	mov.w	r3, #4294967295
 8015c38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	683a      	ldr	r2, [r7, #0]
 8015c42:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8015c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
	...

08015c50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f7ff ff87 	bl	8015b6c <sync_window>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015c62:	7bfb      	ldrb	r3, [r7, #15]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d158      	bne.n	8015d1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	2b03      	cmp	r3, #3
 8015c6e:	d148      	bne.n	8015d02 <sync_fs+0xb2>
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	791b      	ldrb	r3, [r3, #4]
 8015c74:	2b01      	cmp	r3, #1
 8015c76:	d144      	bne.n	8015d02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	3334      	adds	r3, #52	@ 0x34
 8015c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c80:	2100      	movs	r1, #0
 8015c82:	4618      	mov	r0, r3
 8015c84:	f7ff fd78 	bl	8015778 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	3334      	adds	r3, #52	@ 0x34
 8015c8c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015c90:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7ff fd07 	bl	80156a8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	3334      	adds	r3, #52	@ 0x34
 8015c9e:	4921      	ldr	r1, [pc, #132]	@ (8015d24 <sync_fs+0xd4>)
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f7ff fd1c 	bl	80156de <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	3334      	adds	r3, #52	@ 0x34
 8015caa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8015cae:	491e      	ldr	r1, [pc, #120]	@ (8015d28 <sync_fs+0xd8>)
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7ff fd14 	bl	80156de <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	3334      	adds	r3, #52	@ 0x34
 8015cba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	695b      	ldr	r3, [r3, #20]
 8015cc2:	4619      	mov	r1, r3
 8015cc4:	4610      	mov	r0, r2
 8015cc6:	f7ff fd0a 	bl	80156de <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	3334      	adds	r3, #52	@ 0x34
 8015cce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	691b      	ldr	r3, [r3, #16]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	4610      	mov	r0, r2
 8015cda:	f7ff fd00 	bl	80156de <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6a1b      	ldr	r3, [r3, #32]
 8015ce2:	1c5a      	adds	r2, r3, #1
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	7858      	ldrb	r0, [r3, #1]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	f7ff fc5c 	bl	80155b4 <disk_write>
			fs->fsi_flag = 0;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	785b      	ldrb	r3, [r3, #1]
 8015d06:	2200      	movs	r2, #0
 8015d08:	2100      	movs	r1, #0
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff fc72 	bl	80155f4 <disk_ioctl>
 8015d10:	4603      	mov	r3, r0
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d001      	beq.n	8015d1a <sync_fs+0xca>
 8015d16:	2301      	movs	r3, #1
 8015d18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3710      	adds	r7, #16
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	41615252 	.word	0x41615252
 8015d28:	61417272 	.word	0x61417272

08015d2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015d2c:	b480      	push	{r7}
 8015d2e:	b083      	sub	sp, #12
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	3b02      	subs	r3, #2
 8015d3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	699b      	ldr	r3, [r3, #24]
 8015d40:	3b02      	subs	r3, #2
 8015d42:	683a      	ldr	r2, [r7, #0]
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d301      	bcc.n	8015d4c <clust2sect+0x20>
 8015d48:	2300      	movs	r3, #0
 8015d4a:	e008      	b.n	8015d5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	895b      	ldrh	r3, [r3, #10]
 8015d50:	461a      	mov	r2, r3
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	fb03 f202 	mul.w	r2, r3, r2
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d5c:	4413      	add	r3, r2
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	370c      	adds	r7, #12
 8015d62:	46bd      	mov	sp, r7
 8015d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d68:	4770      	bx	lr

08015d6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015d6a:	b580      	push	{r7, lr}
 8015d6c:	b086      	sub	sp, #24
 8015d6e:	af00      	add	r7, sp, #0
 8015d70:	6078      	str	r0, [r7, #4]
 8015d72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	2b01      	cmp	r3, #1
 8015d7e:	d904      	bls.n	8015d8a <get_fat+0x20>
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	699b      	ldr	r3, [r3, #24]
 8015d84:	683a      	ldr	r2, [r7, #0]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d302      	bcc.n	8015d90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	617b      	str	r3, [r7, #20]
 8015d8e:	e08e      	b.n	8015eae <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015d90:	f04f 33ff 	mov.w	r3, #4294967295
 8015d94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	2b03      	cmp	r3, #3
 8015d9c:	d061      	beq.n	8015e62 <get_fat+0xf8>
 8015d9e:	2b03      	cmp	r3, #3
 8015da0:	dc7b      	bgt.n	8015e9a <get_fat+0x130>
 8015da2:	2b01      	cmp	r3, #1
 8015da4:	d002      	beq.n	8015dac <get_fat+0x42>
 8015da6:	2b02      	cmp	r3, #2
 8015da8:	d041      	beq.n	8015e2e <get_fat+0xc4>
 8015daa:	e076      	b.n	8015e9a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	60fb      	str	r3, [r7, #12]
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	085b      	lsrs	r3, r3, #1
 8015db4:	68fa      	ldr	r2, [r7, #12]
 8015db6:	4413      	add	r3, r2
 8015db8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015dba:	693b      	ldr	r3, [r7, #16]
 8015dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	0a5b      	lsrs	r3, r3, #9
 8015dc2:	4413      	add	r3, r2
 8015dc4:	4619      	mov	r1, r3
 8015dc6:	6938      	ldr	r0, [r7, #16]
 8015dc8:	f7ff ff14 	bl	8015bf4 <move_window>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d166      	bne.n	8015ea0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	1c5a      	adds	r2, r3, #1
 8015dd6:	60fa      	str	r2, [r7, #12]
 8015dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ddc:	693a      	ldr	r2, [r7, #16]
 8015dde:	4413      	add	r3, r2
 8015de0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015de4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	0a5b      	lsrs	r3, r3, #9
 8015dee:	4413      	add	r3, r2
 8015df0:	4619      	mov	r1, r3
 8015df2:	6938      	ldr	r0, [r7, #16]
 8015df4:	f7ff fefe 	bl	8015bf4 <move_window>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d152      	bne.n	8015ea4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e04:	693a      	ldr	r2, [r7, #16]
 8015e06:	4413      	add	r3, r2
 8015e08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015e0c:	021b      	lsls	r3, r3, #8
 8015e0e:	68ba      	ldr	r2, [r7, #8]
 8015e10:	4313      	orrs	r3, r2
 8015e12:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	f003 0301 	and.w	r3, r3, #1
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d002      	beq.n	8015e24 <get_fat+0xba>
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	091b      	lsrs	r3, r3, #4
 8015e22:	e002      	b.n	8015e2a <get_fat+0xc0>
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015e2a:	617b      	str	r3, [r7, #20]
			break;
 8015e2c:	e03f      	b.n	8015eae <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	0a1b      	lsrs	r3, r3, #8
 8015e36:	4413      	add	r3, r2
 8015e38:	4619      	mov	r1, r3
 8015e3a:	6938      	ldr	r0, [r7, #16]
 8015e3c:	f7ff feda 	bl	8015bf4 <move_window>
 8015e40:	4603      	mov	r3, r0
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d130      	bne.n	8015ea8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	005b      	lsls	r3, r3, #1
 8015e50:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8015e54:	4413      	add	r3, r2
 8015e56:	4618      	mov	r0, r3
 8015e58:	f7ff fbea 	bl	8015630 <ld_word>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	617b      	str	r3, [r7, #20]
			break;
 8015e60:	e025      	b.n	8015eae <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	09db      	lsrs	r3, r3, #7
 8015e6a:	4413      	add	r3, r2
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	6938      	ldr	r0, [r7, #16]
 8015e70:	f7ff fec0 	bl	8015bf4 <move_window>
 8015e74:	4603      	mov	r3, r0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d118      	bne.n	8015eac <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015e7a:	693b      	ldr	r3, [r7, #16]
 8015e7c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	009b      	lsls	r3, r3, #2
 8015e84:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8015e88:	4413      	add	r3, r2
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7ff fbe9 	bl	8015662 <ld_dword>
 8015e90:	4603      	mov	r3, r0
 8015e92:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8015e96:	617b      	str	r3, [r7, #20]
			break;
 8015e98:	e009      	b.n	8015eae <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	617b      	str	r3, [r7, #20]
 8015e9e:	e006      	b.n	8015eae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015ea0:	bf00      	nop
 8015ea2:	e004      	b.n	8015eae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015ea4:	bf00      	nop
 8015ea6:	e002      	b.n	8015eae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015ea8:	bf00      	nop
 8015eaa:	e000      	b.n	8015eae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015eac:	bf00      	nop
		}
	}

	return val;
 8015eae:	697b      	ldr	r3, [r7, #20]
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3718      	adds	r7, #24
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015eb8:	b590      	push	{r4, r7, lr}
 8015eba:	b089      	sub	sp, #36	@ 0x24
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015ec4:	2302      	movs	r3, #2
 8015ec6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015ec8:	68bb      	ldr	r3, [r7, #8]
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	f240 80d9 	bls.w	8016082 <put_fat+0x1ca>
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	699b      	ldr	r3, [r3, #24]
 8015ed4:	68ba      	ldr	r2, [r7, #8]
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	f080 80d3 	bcs.w	8016082 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	2b03      	cmp	r3, #3
 8015ee2:	f000 8096 	beq.w	8016012 <put_fat+0x15a>
 8015ee6:	2b03      	cmp	r3, #3
 8015ee8:	f300 80cb 	bgt.w	8016082 <put_fat+0x1ca>
 8015eec:	2b01      	cmp	r3, #1
 8015eee:	d002      	beq.n	8015ef6 <put_fat+0x3e>
 8015ef0:	2b02      	cmp	r3, #2
 8015ef2:	d06e      	beq.n	8015fd2 <put_fat+0x11a>
 8015ef4:	e0c5      	b.n	8016082 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	61bb      	str	r3, [r7, #24]
 8015efa:	69bb      	ldr	r3, [r7, #24]
 8015efc:	085b      	lsrs	r3, r3, #1
 8015efe:	69ba      	ldr	r2, [r7, #24]
 8015f00:	4413      	add	r3, r2
 8015f02:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015f08:	69bb      	ldr	r3, [r7, #24]
 8015f0a:	0a5b      	lsrs	r3, r3, #9
 8015f0c:	4413      	add	r3, r2
 8015f0e:	4619      	mov	r1, r3
 8015f10:	68f8      	ldr	r0, [r7, #12]
 8015f12:	f7ff fe6f 	bl	8015bf4 <move_window>
 8015f16:	4603      	mov	r3, r0
 8015f18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f1a:	7ffb      	ldrb	r3, [r7, #31]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	f040 80a9 	bne.w	8016074 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015f28:	69bb      	ldr	r3, [r7, #24]
 8015f2a:	1c59      	adds	r1, r3, #1
 8015f2c:	61b9      	str	r1, [r7, #24]
 8015f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f32:	4413      	add	r3, r2
 8015f34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015f36:	68bb      	ldr	r3, [r7, #8]
 8015f38:	f003 0301 	and.w	r3, r3, #1
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d00d      	beq.n	8015f5c <put_fat+0xa4>
 8015f40:	697b      	ldr	r3, [r7, #20]
 8015f42:	781b      	ldrb	r3, [r3, #0]
 8015f44:	b25b      	sxtb	r3, r3
 8015f46:	f003 030f 	and.w	r3, r3, #15
 8015f4a:	b25a      	sxtb	r2, r3
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	b25b      	sxtb	r3, r3
 8015f50:	011b      	lsls	r3, r3, #4
 8015f52:	b25b      	sxtb	r3, r3
 8015f54:	4313      	orrs	r3, r2
 8015f56:	b25b      	sxtb	r3, r3
 8015f58:	b2db      	uxtb	r3, r3
 8015f5a:	e001      	b.n	8015f60 <put_fat+0xa8>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	697a      	ldr	r2, [r7, #20]
 8015f62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	2201      	movs	r2, #1
 8015f68:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015f6e:	69bb      	ldr	r3, [r7, #24]
 8015f70:	0a5b      	lsrs	r3, r3, #9
 8015f72:	4413      	add	r3, r2
 8015f74:	4619      	mov	r1, r3
 8015f76:	68f8      	ldr	r0, [r7, #12]
 8015f78:	f7ff fe3c 	bl	8015bf4 <move_window>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f80:	7ffb      	ldrb	r3, [r7, #31]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d178      	bne.n	8016078 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f92:	4413      	add	r3, r2
 8015f94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	f003 0301 	and.w	r3, r3, #1
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d003      	beq.n	8015fa8 <put_fat+0xf0>
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	091b      	lsrs	r3, r3, #4
 8015fa4:	b2db      	uxtb	r3, r3
 8015fa6:	e00e      	b.n	8015fc6 <put_fat+0x10e>
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	b25b      	sxtb	r3, r3
 8015fae:	f023 030f 	bic.w	r3, r3, #15
 8015fb2:	b25a      	sxtb	r2, r3
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	0a1b      	lsrs	r3, r3, #8
 8015fb8:	b25b      	sxtb	r3, r3
 8015fba:	f003 030f 	and.w	r3, r3, #15
 8015fbe:	b25b      	sxtb	r3, r3
 8015fc0:	4313      	orrs	r3, r2
 8015fc2:	b25b      	sxtb	r3, r3
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	697a      	ldr	r2, [r7, #20]
 8015fc8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	2201      	movs	r2, #1
 8015fce:	70da      	strb	r2, [r3, #3]
			break;
 8015fd0:	e057      	b.n	8016082 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	0a1b      	lsrs	r3, r3, #8
 8015fda:	4413      	add	r3, r2
 8015fdc:	4619      	mov	r1, r3
 8015fde:	68f8      	ldr	r0, [r7, #12]
 8015fe0:	f7ff fe08 	bl	8015bf4 <move_window>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015fe8:	7ffb      	ldrb	r3, [r7, #31]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d146      	bne.n	801607c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	005b      	lsls	r3, r3, #1
 8015ff8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8015ffc:	4413      	add	r3, r2
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	b292      	uxth	r2, r2
 8016002:	4611      	mov	r1, r2
 8016004:	4618      	mov	r0, r3
 8016006:	f7ff fb4f 	bl	80156a8 <st_word>
			fs->wflag = 1;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2201      	movs	r2, #1
 801600e:	70da      	strb	r2, [r3, #3]
			break;
 8016010:	e037      	b.n	8016082 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016016:	68bb      	ldr	r3, [r7, #8]
 8016018:	09db      	lsrs	r3, r3, #7
 801601a:	4413      	add	r3, r2
 801601c:	4619      	mov	r1, r3
 801601e:	68f8      	ldr	r0, [r7, #12]
 8016020:	f7ff fde8 	bl	8015bf4 <move_window>
 8016024:	4603      	mov	r3, r0
 8016026:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016028:	7ffb      	ldrb	r3, [r7, #31]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d128      	bne.n	8016080 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	009b      	lsls	r3, r3, #2
 801603e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8016042:	4413      	add	r3, r2
 8016044:	4618      	mov	r0, r3
 8016046:	f7ff fb0c 	bl	8015662 <ld_dword>
 801604a:	4603      	mov	r3, r0
 801604c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8016050:	4323      	orrs	r3, r4
 8016052:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8016062:	4413      	add	r3, r2
 8016064:	6879      	ldr	r1, [r7, #4]
 8016066:	4618      	mov	r0, r3
 8016068:	f7ff fb39 	bl	80156de <st_dword>
			fs->wflag = 1;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	2201      	movs	r2, #1
 8016070:	70da      	strb	r2, [r3, #3]
			break;
 8016072:	e006      	b.n	8016082 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8016074:	bf00      	nop
 8016076:	e004      	b.n	8016082 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8016078:	bf00      	nop
 801607a:	e002      	b.n	8016082 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801607c:	bf00      	nop
 801607e:	e000      	b.n	8016082 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8016080:	bf00      	nop
		}
	}
	return res;
 8016082:	7ffb      	ldrb	r3, [r7, #31]
}
 8016084:	4618      	mov	r0, r3
 8016086:	3724      	adds	r7, #36	@ 0x24
 8016088:	46bd      	mov	sp, r7
 801608a:	bd90      	pop	{r4, r7, pc}

0801608c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b088      	sub	sp, #32
 8016090:	af00      	add	r7, sp, #0
 8016092:	60f8      	str	r0, [r7, #12]
 8016094:	60b9      	str	r1, [r7, #8]
 8016096:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016098:	2300      	movs	r3, #0
 801609a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	2b01      	cmp	r3, #1
 80160a6:	d904      	bls.n	80160b2 <remove_chain+0x26>
 80160a8:	69bb      	ldr	r3, [r7, #24]
 80160aa:	699b      	ldr	r3, [r3, #24]
 80160ac:	68ba      	ldr	r2, [r7, #8]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d301      	bcc.n	80160b6 <remove_chain+0x2a>
 80160b2:	2302      	movs	r3, #2
 80160b4:	e04b      	b.n	801614e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d00c      	beq.n	80160d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80160bc:	f04f 32ff 	mov.w	r2, #4294967295
 80160c0:	6879      	ldr	r1, [r7, #4]
 80160c2:	69b8      	ldr	r0, [r7, #24]
 80160c4:	f7ff fef8 	bl	8015eb8 <put_fat>
 80160c8:	4603      	mov	r3, r0
 80160ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80160cc:	7ffb      	ldrb	r3, [r7, #31]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d001      	beq.n	80160d6 <remove_chain+0x4a>
 80160d2:	7ffb      	ldrb	r3, [r7, #31]
 80160d4:	e03b      	b.n	801614e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80160d6:	68b9      	ldr	r1, [r7, #8]
 80160d8:	68f8      	ldr	r0, [r7, #12]
 80160da:	f7ff fe46 	bl	8015d6a <get_fat>
 80160de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d031      	beq.n	801614a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80160e6:	697b      	ldr	r3, [r7, #20]
 80160e8:	2b01      	cmp	r3, #1
 80160ea:	d101      	bne.n	80160f0 <remove_chain+0x64>
 80160ec:	2302      	movs	r3, #2
 80160ee:	e02e      	b.n	801614e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160f6:	d101      	bne.n	80160fc <remove_chain+0x70>
 80160f8:	2301      	movs	r3, #1
 80160fa:	e028      	b.n	801614e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80160fc:	2200      	movs	r2, #0
 80160fe:	68b9      	ldr	r1, [r7, #8]
 8016100:	69b8      	ldr	r0, [r7, #24]
 8016102:	f7ff fed9 	bl	8015eb8 <put_fat>
 8016106:	4603      	mov	r3, r0
 8016108:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801610a:	7ffb      	ldrb	r3, [r7, #31]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d001      	beq.n	8016114 <remove_chain+0x88>
 8016110:	7ffb      	ldrb	r3, [r7, #31]
 8016112:	e01c      	b.n	801614e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016114:	69bb      	ldr	r3, [r7, #24]
 8016116:	695a      	ldr	r2, [r3, #20]
 8016118:	69bb      	ldr	r3, [r7, #24]
 801611a:	699b      	ldr	r3, [r3, #24]
 801611c:	3b02      	subs	r3, #2
 801611e:	429a      	cmp	r2, r3
 8016120:	d20b      	bcs.n	801613a <remove_chain+0xae>
			fs->free_clst++;
 8016122:	69bb      	ldr	r3, [r7, #24]
 8016124:	695b      	ldr	r3, [r3, #20]
 8016126:	1c5a      	adds	r2, r3, #1
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801612c:	69bb      	ldr	r3, [r7, #24]
 801612e:	791b      	ldrb	r3, [r3, #4]
 8016130:	f043 0301 	orr.w	r3, r3, #1
 8016134:	b2da      	uxtb	r2, r3
 8016136:	69bb      	ldr	r3, [r7, #24]
 8016138:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801613e:	69bb      	ldr	r3, [r7, #24]
 8016140:	699b      	ldr	r3, [r3, #24]
 8016142:	68ba      	ldr	r2, [r7, #8]
 8016144:	429a      	cmp	r2, r3
 8016146:	d3c6      	bcc.n	80160d6 <remove_chain+0x4a>
 8016148:	e000      	b.n	801614c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801614a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801614c:	2300      	movs	r3, #0
}
 801614e:	4618      	mov	r0, r3
 8016150:	3720      	adds	r7, #32
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016156:	b580      	push	{r7, lr}
 8016158:	b088      	sub	sp, #32
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
 801615e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d10d      	bne.n	8016188 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	691b      	ldr	r3, [r3, #16]
 8016170:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016172:	69bb      	ldr	r3, [r7, #24]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d004      	beq.n	8016182 <create_chain+0x2c>
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	699b      	ldr	r3, [r3, #24]
 801617c:	69ba      	ldr	r2, [r7, #24]
 801617e:	429a      	cmp	r2, r3
 8016180:	d31b      	bcc.n	80161ba <create_chain+0x64>
 8016182:	2301      	movs	r3, #1
 8016184:	61bb      	str	r3, [r7, #24]
 8016186:	e018      	b.n	80161ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016188:	6839      	ldr	r1, [r7, #0]
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f7ff fded 	bl	8015d6a <get_fat>
 8016190:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2b01      	cmp	r3, #1
 8016196:	d801      	bhi.n	801619c <create_chain+0x46>
 8016198:	2301      	movs	r3, #1
 801619a:	e070      	b.n	801627e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161a2:	d101      	bne.n	80161a8 <create_chain+0x52>
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	e06a      	b.n	801627e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80161a8:	693b      	ldr	r3, [r7, #16]
 80161aa:	699b      	ldr	r3, [r3, #24]
 80161ac:	68fa      	ldr	r2, [r7, #12]
 80161ae:	429a      	cmp	r2, r3
 80161b0:	d201      	bcs.n	80161b6 <create_chain+0x60>
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	e063      	b.n	801627e <create_chain+0x128>
		scl = clst;
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80161ba:	69bb      	ldr	r3, [r7, #24]
 80161bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80161be:	69fb      	ldr	r3, [r7, #28]
 80161c0:	3301      	adds	r3, #1
 80161c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	699b      	ldr	r3, [r3, #24]
 80161c8:	69fa      	ldr	r2, [r7, #28]
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d307      	bcc.n	80161de <create_chain+0x88>
				ncl = 2;
 80161ce:	2302      	movs	r3, #2
 80161d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80161d2:	69fa      	ldr	r2, [r7, #28]
 80161d4:	69bb      	ldr	r3, [r7, #24]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d901      	bls.n	80161de <create_chain+0x88>
 80161da:	2300      	movs	r3, #0
 80161dc:	e04f      	b.n	801627e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80161de:	69f9      	ldr	r1, [r7, #28]
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f7ff fdc2 	bl	8015d6a <get_fat>
 80161e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d00e      	beq.n	801620c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	2b01      	cmp	r3, #1
 80161f2:	d003      	beq.n	80161fc <create_chain+0xa6>
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161fa:	d101      	bne.n	8016200 <create_chain+0xaa>
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	e03e      	b.n	801627e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8016200:	69fa      	ldr	r2, [r7, #28]
 8016202:	69bb      	ldr	r3, [r7, #24]
 8016204:	429a      	cmp	r2, r3
 8016206:	d1da      	bne.n	80161be <create_chain+0x68>
 8016208:	2300      	movs	r3, #0
 801620a:	e038      	b.n	801627e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801620c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801620e:	f04f 32ff 	mov.w	r2, #4294967295
 8016212:	69f9      	ldr	r1, [r7, #28]
 8016214:	6938      	ldr	r0, [r7, #16]
 8016216:	f7ff fe4f 	bl	8015eb8 <put_fat>
 801621a:	4603      	mov	r3, r0
 801621c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801621e:	7dfb      	ldrb	r3, [r7, #23]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d109      	bne.n	8016238 <create_chain+0xe2>
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d006      	beq.n	8016238 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801622a:	69fa      	ldr	r2, [r7, #28]
 801622c:	6839      	ldr	r1, [r7, #0]
 801622e:	6938      	ldr	r0, [r7, #16]
 8016230:	f7ff fe42 	bl	8015eb8 <put_fat>
 8016234:	4603      	mov	r3, r0
 8016236:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016238:	7dfb      	ldrb	r3, [r7, #23]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d116      	bne.n	801626c <create_chain+0x116>
		fs->last_clst = ncl;
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	69fa      	ldr	r2, [r7, #28]
 8016242:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	695a      	ldr	r2, [r3, #20]
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	699b      	ldr	r3, [r3, #24]
 801624c:	3b02      	subs	r3, #2
 801624e:	429a      	cmp	r2, r3
 8016250:	d804      	bhi.n	801625c <create_chain+0x106>
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	695b      	ldr	r3, [r3, #20]
 8016256:	1e5a      	subs	r2, r3, #1
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	791b      	ldrb	r3, [r3, #4]
 8016260:	f043 0301 	orr.w	r3, r3, #1
 8016264:	b2da      	uxtb	r2, r3
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	711a      	strb	r2, [r3, #4]
 801626a:	e007      	b.n	801627c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801626c:	7dfb      	ldrb	r3, [r7, #23]
 801626e:	2b01      	cmp	r3, #1
 8016270:	d102      	bne.n	8016278 <create_chain+0x122>
 8016272:	f04f 33ff 	mov.w	r3, #4294967295
 8016276:	e000      	b.n	801627a <create_chain+0x124>
 8016278:	2301      	movs	r3, #1
 801627a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801627c:	69fb      	ldr	r3, [r7, #28]
}
 801627e:	4618      	mov	r0, r3
 8016280:	3720      	adds	r7, #32
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}

08016286 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016286:	b480      	push	{r7}
 8016288:	b087      	sub	sp, #28
 801628a:	af00      	add	r7, sp, #0
 801628c:	6078      	str	r0, [r7, #4]
 801628e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801629a:	3304      	adds	r3, #4
 801629c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	0a5b      	lsrs	r3, r3, #9
 80162a2:	68fa      	ldr	r2, [r7, #12]
 80162a4:	8952      	ldrh	r2, [r2, #10]
 80162a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80162aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	1d1a      	adds	r2, r3, #4
 80162b0:	613a      	str	r2, [r7, #16]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d101      	bne.n	80162c0 <clmt_clust+0x3a>
 80162bc:	2300      	movs	r3, #0
 80162be:	e010      	b.n	80162e2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80162c0:	697a      	ldr	r2, [r7, #20]
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d307      	bcc.n	80162d8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80162c8:	697a      	ldr	r2, [r7, #20]
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	1ad3      	subs	r3, r2, r3
 80162ce:	617b      	str	r3, [r7, #20]
 80162d0:	693b      	ldr	r3, [r7, #16]
 80162d2:	3304      	adds	r3, #4
 80162d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80162d6:	e7e9      	b.n	80162ac <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80162d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80162da:	693b      	ldr	r3, [r7, #16]
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	4413      	add	r3, r2
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	371c      	adds	r7, #28
 80162e6:	46bd      	mov	sp, r7
 80162e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ec:	4770      	bx	lr

080162ee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80162ee:	b580      	push	{r7, lr}
 80162f0:	b086      	sub	sp, #24
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	6078      	str	r0, [r7, #4]
 80162f6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016304:	d204      	bcs.n	8016310 <dir_sdi+0x22>
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	f003 031f 	and.w	r3, r3, #31
 801630c:	2b00      	cmp	r3, #0
 801630e:	d001      	beq.n	8016314 <dir_sdi+0x26>
		return FR_INT_ERR;
 8016310:	2302      	movs	r3, #2
 8016312:	e063      	b.n	80163dc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	683a      	ldr	r2, [r7, #0]
 8016318:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	689b      	ldr	r3, [r3, #8]
 801631e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d106      	bne.n	8016334 <dir_sdi+0x46>
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	2b02      	cmp	r3, #2
 801632c:	d902      	bls.n	8016334 <dir_sdi+0x46>
		clst = fs->dirbase;
 801632e:	693b      	ldr	r3, [r7, #16]
 8016330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016332:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d10c      	bne.n	8016354 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	095b      	lsrs	r3, r3, #5
 801633e:	693a      	ldr	r2, [r7, #16]
 8016340:	8912      	ldrh	r2, [r2, #8]
 8016342:	4293      	cmp	r3, r2
 8016344:	d301      	bcc.n	801634a <dir_sdi+0x5c>
 8016346:	2302      	movs	r3, #2
 8016348:	e048      	b.n	80163dc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	61da      	str	r2, [r3, #28]
 8016352:	e029      	b.n	80163a8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016354:	693b      	ldr	r3, [r7, #16]
 8016356:	895b      	ldrh	r3, [r3, #10]
 8016358:	025b      	lsls	r3, r3, #9
 801635a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801635c:	e019      	b.n	8016392 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	6979      	ldr	r1, [r7, #20]
 8016362:	4618      	mov	r0, r3
 8016364:	f7ff fd01 	bl	8015d6a <get_fat>
 8016368:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016370:	d101      	bne.n	8016376 <dir_sdi+0x88>
 8016372:	2301      	movs	r3, #1
 8016374:	e032      	b.n	80163dc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	2b01      	cmp	r3, #1
 801637a:	d904      	bls.n	8016386 <dir_sdi+0x98>
 801637c:	693b      	ldr	r3, [r7, #16]
 801637e:	699b      	ldr	r3, [r3, #24]
 8016380:	697a      	ldr	r2, [r7, #20]
 8016382:	429a      	cmp	r2, r3
 8016384:	d301      	bcc.n	801638a <dir_sdi+0x9c>
 8016386:	2302      	movs	r3, #2
 8016388:	e028      	b.n	80163dc <dir_sdi+0xee>
			ofs -= csz;
 801638a:	683a      	ldr	r2, [r7, #0]
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	1ad3      	subs	r3, r2, r3
 8016390:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016392:	683a      	ldr	r2, [r7, #0]
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	429a      	cmp	r2, r3
 8016398:	d2e1      	bcs.n	801635e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801639a:	6979      	ldr	r1, [r7, #20]
 801639c:	6938      	ldr	r0, [r7, #16]
 801639e:	f7ff fcc5 	bl	8015d2c <clust2sect>
 80163a2:	4602      	mov	r2, r0
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	697a      	ldr	r2, [r7, #20]
 80163ac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	69db      	ldr	r3, [r3, #28]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d101      	bne.n	80163ba <dir_sdi+0xcc>
 80163b6:	2302      	movs	r3, #2
 80163b8:	e010      	b.n	80163dc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	69da      	ldr	r2, [r3, #28]
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	0a5b      	lsrs	r3, r3, #9
 80163c2:	441a      	add	r2, r3
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80163c8:	693b      	ldr	r3, [r7, #16]
 80163ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80163d4:	441a      	add	r2, r3
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80163da:	2300      	movs	r3, #0
}
 80163dc:	4618      	mov	r0, r3
 80163de:	3718      	adds	r7, #24
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}

080163e4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b086      	sub	sp, #24
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	695b      	ldr	r3, [r3, #20]
 80163f8:	3320      	adds	r3, #32
 80163fa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	69db      	ldr	r3, [r3, #28]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d003      	beq.n	801640c <dir_next+0x28>
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801640a:	d301      	bcc.n	8016410 <dir_next+0x2c>
 801640c:	2304      	movs	r3, #4
 801640e:	e0aa      	b.n	8016566 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016416:	2b00      	cmp	r3, #0
 8016418:	f040 8098 	bne.w	801654c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	69db      	ldr	r3, [r3, #28]
 8016420:	1c5a      	adds	r2, r3, #1
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	699b      	ldr	r3, [r3, #24]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d10b      	bne.n	8016446 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	095b      	lsrs	r3, r3, #5
 8016432:	68fa      	ldr	r2, [r7, #12]
 8016434:	8912      	ldrh	r2, [r2, #8]
 8016436:	4293      	cmp	r3, r2
 8016438:	f0c0 8088 	bcc.w	801654c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2200      	movs	r2, #0
 8016440:	61da      	str	r2, [r3, #28]
 8016442:	2304      	movs	r3, #4
 8016444:	e08f      	b.n	8016566 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	0a5b      	lsrs	r3, r3, #9
 801644a:	68fa      	ldr	r2, [r7, #12]
 801644c:	8952      	ldrh	r2, [r2, #10]
 801644e:	3a01      	subs	r2, #1
 8016450:	4013      	ands	r3, r2
 8016452:	2b00      	cmp	r3, #0
 8016454:	d17a      	bne.n	801654c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016456:	687a      	ldr	r2, [r7, #4]
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	699b      	ldr	r3, [r3, #24]
 801645c:	4619      	mov	r1, r3
 801645e:	4610      	mov	r0, r2
 8016460:	f7ff fc83 	bl	8015d6a <get_fat>
 8016464:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016466:	697b      	ldr	r3, [r7, #20]
 8016468:	2b01      	cmp	r3, #1
 801646a:	d801      	bhi.n	8016470 <dir_next+0x8c>
 801646c:	2302      	movs	r3, #2
 801646e:	e07a      	b.n	8016566 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016476:	d101      	bne.n	801647c <dir_next+0x98>
 8016478:	2301      	movs	r3, #1
 801647a:	e074      	b.n	8016566 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	699b      	ldr	r3, [r3, #24]
 8016480:	697a      	ldr	r2, [r7, #20]
 8016482:	429a      	cmp	r2, r3
 8016484:	d358      	bcc.n	8016538 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016486:	683b      	ldr	r3, [r7, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d104      	bne.n	8016496 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2200      	movs	r2, #0
 8016490:	61da      	str	r2, [r3, #28]
 8016492:	2304      	movs	r3, #4
 8016494:	e067      	b.n	8016566 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016496:	687a      	ldr	r2, [r7, #4]
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	699b      	ldr	r3, [r3, #24]
 801649c:	4619      	mov	r1, r3
 801649e:	4610      	mov	r0, r2
 80164a0:	f7ff fe59 	bl	8016156 <create_chain>
 80164a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d101      	bne.n	80164b0 <dir_next+0xcc>
 80164ac:	2307      	movs	r3, #7
 80164ae:	e05a      	b.n	8016566 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	2b01      	cmp	r3, #1
 80164b4:	d101      	bne.n	80164ba <dir_next+0xd6>
 80164b6:	2302      	movs	r3, #2
 80164b8:	e055      	b.n	8016566 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164c0:	d101      	bne.n	80164c6 <dir_next+0xe2>
 80164c2:	2301      	movs	r3, #1
 80164c4:	e04f      	b.n	8016566 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80164c6:	68f8      	ldr	r0, [r7, #12]
 80164c8:	f7ff fb50 	bl	8015b6c <sync_window>
 80164cc:	4603      	mov	r3, r0
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d001      	beq.n	80164d6 <dir_next+0xf2>
 80164d2:	2301      	movs	r3, #1
 80164d4:	e047      	b.n	8016566 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	3334      	adds	r3, #52	@ 0x34
 80164da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80164de:	2100      	movs	r1, #0
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7ff f949 	bl	8015778 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80164e6:	2300      	movs	r3, #0
 80164e8:	613b      	str	r3, [r7, #16]
 80164ea:	6979      	ldr	r1, [r7, #20]
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	f7ff fc1d 	bl	8015d2c <clust2sect>
 80164f2:	4602      	mov	r2, r0
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80164f8:	e012      	b.n	8016520 <dir_next+0x13c>
						fs->wflag = 1;
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	2201      	movs	r2, #1
 80164fe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016500:	68f8      	ldr	r0, [r7, #12]
 8016502:	f7ff fb33 	bl	8015b6c <sync_window>
 8016506:	4603      	mov	r3, r0
 8016508:	2b00      	cmp	r3, #0
 801650a:	d001      	beq.n	8016510 <dir_next+0x12c>
 801650c:	2301      	movs	r3, #1
 801650e:	e02a      	b.n	8016566 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016510:	693b      	ldr	r3, [r7, #16]
 8016512:	3301      	adds	r3, #1
 8016514:	613b      	str	r3, [r7, #16]
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801651a:	1c5a      	adds	r2, r3, #1
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	631a      	str	r2, [r3, #48]	@ 0x30
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	895b      	ldrh	r3, [r3, #10]
 8016524:	461a      	mov	r2, r3
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	4293      	cmp	r3, r2
 801652a:	d3e6      	bcc.n	80164fa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	1ad2      	subs	r2, r2, r3
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	697a      	ldr	r2, [r7, #20]
 801653c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801653e:	6979      	ldr	r1, [r7, #20]
 8016540:	68f8      	ldr	r0, [r7, #12]
 8016542:	f7ff fbf3 	bl	8015d2c <clust2sect>
 8016546:	4602      	mov	r2, r0
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	68ba      	ldr	r2, [r7, #8]
 8016550:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801655e:	441a      	add	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016564:	2300      	movs	r3, #0
}
 8016566:	4618      	mov	r0, r3
 8016568:	3718      	adds	r7, #24
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}

0801656e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801656e:	b580      	push	{r7, lr}
 8016570:	b086      	sub	sp, #24
 8016572:	af00      	add	r7, sp, #0
 8016574:	6078      	str	r0, [r7, #4]
 8016576:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801657e:	2100      	movs	r1, #0
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f7ff feb4 	bl	80162ee <dir_sdi>
 8016586:	4603      	mov	r3, r0
 8016588:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801658a:	7dfb      	ldrb	r3, [r7, #23]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d12b      	bne.n	80165e8 <dir_alloc+0x7a>
		n = 0;
 8016590:	2300      	movs	r3, #0
 8016592:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	69db      	ldr	r3, [r3, #28]
 8016598:	4619      	mov	r1, r3
 801659a:	68f8      	ldr	r0, [r7, #12]
 801659c:	f7ff fb2a 	bl	8015bf4 <move_window>
 80165a0:	4603      	mov	r3, r0
 80165a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80165a4:	7dfb      	ldrb	r3, [r7, #23]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d11d      	bne.n	80165e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	6a1b      	ldr	r3, [r3, #32]
 80165ae:	781b      	ldrb	r3, [r3, #0]
 80165b0:	2be5      	cmp	r3, #229	@ 0xe5
 80165b2:	d004      	beq.n	80165be <dir_alloc+0x50>
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	6a1b      	ldr	r3, [r3, #32]
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d107      	bne.n	80165ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80165be:	693b      	ldr	r3, [r7, #16]
 80165c0:	3301      	adds	r3, #1
 80165c2:	613b      	str	r3, [r7, #16]
 80165c4:	693a      	ldr	r2, [r7, #16]
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	429a      	cmp	r2, r3
 80165ca:	d102      	bne.n	80165d2 <dir_alloc+0x64>
 80165cc:	e00c      	b.n	80165e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80165ce:	2300      	movs	r3, #0
 80165d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80165d2:	2101      	movs	r1, #1
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	f7ff ff05 	bl	80163e4 <dir_next>
 80165da:	4603      	mov	r3, r0
 80165dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80165de:	7dfb      	ldrb	r3, [r7, #23]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d0d7      	beq.n	8016594 <dir_alloc+0x26>
 80165e4:	e000      	b.n	80165e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80165e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80165e8:	7dfb      	ldrb	r3, [r7, #23]
 80165ea:	2b04      	cmp	r3, #4
 80165ec:	d101      	bne.n	80165f2 <dir_alloc+0x84>
 80165ee:	2307      	movs	r3, #7
 80165f0:	75fb      	strb	r3, [r7, #23]
	return res;
 80165f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80165f4:	4618      	mov	r0, r3
 80165f6:	3718      	adds	r7, #24
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}

080165fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b084      	sub	sp, #16
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
 8016604:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	331a      	adds	r3, #26
 801660a:	4618      	mov	r0, r3
 801660c:	f7ff f810 	bl	8015630 <ld_word>
 8016610:	4603      	mov	r3, r0
 8016612:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	781b      	ldrb	r3, [r3, #0]
 8016618:	2b03      	cmp	r3, #3
 801661a:	d109      	bne.n	8016630 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801661c:	683b      	ldr	r3, [r7, #0]
 801661e:	3314      	adds	r3, #20
 8016620:	4618      	mov	r0, r3
 8016622:	f7ff f805 	bl	8015630 <ld_word>
 8016626:	4603      	mov	r3, r0
 8016628:	041b      	lsls	r3, r3, #16
 801662a:	68fa      	ldr	r2, [r7, #12]
 801662c:	4313      	orrs	r3, r2
 801662e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016630:	68fb      	ldr	r3, [r7, #12]
}
 8016632:	4618      	mov	r0, r3
 8016634:	3710      	adds	r7, #16
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}

0801663a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801663a:	b580      	push	{r7, lr}
 801663c:	b084      	sub	sp, #16
 801663e:	af00      	add	r7, sp, #0
 8016640:	60f8      	str	r0, [r7, #12]
 8016642:	60b9      	str	r1, [r7, #8]
 8016644:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	331a      	adds	r3, #26
 801664a:	687a      	ldr	r2, [r7, #4]
 801664c:	b292      	uxth	r2, r2
 801664e:	4611      	mov	r1, r2
 8016650:	4618      	mov	r0, r3
 8016652:	f7ff f829 	bl	80156a8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	2b03      	cmp	r3, #3
 801665c:	d109      	bne.n	8016672 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	f103 0214 	add.w	r2, r3, #20
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	0c1b      	lsrs	r3, r3, #16
 8016668:	b29b      	uxth	r3, r3
 801666a:	4619      	mov	r1, r3
 801666c:	4610      	mov	r0, r2
 801666e:	f7ff f81b 	bl	80156a8 <st_word>
	}
}
 8016672:	bf00      	nop
 8016674:	3710      	adds	r7, #16
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}

0801667a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801667a:	b580      	push	{r7, lr}
 801667c:	b086      	sub	sp, #24
 801667e:	af00      	add	r7, sp, #0
 8016680:	6078      	str	r0, [r7, #4]
 8016682:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8016684:	2304      	movs	r3, #4
 8016686:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801668e:	e03c      	b.n	801670a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	69db      	ldr	r3, [r3, #28]
 8016694:	4619      	mov	r1, r3
 8016696:	6938      	ldr	r0, [r7, #16]
 8016698:	f7ff faac 	bl	8015bf4 <move_window>
 801669c:	4603      	mov	r3, r0
 801669e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80166a0:	7dfb      	ldrb	r3, [r7, #23]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d136      	bne.n	8016714 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	6a1b      	ldr	r3, [r3, #32]
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80166ae:	7bfb      	ldrb	r3, [r7, #15]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d102      	bne.n	80166ba <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80166b4:	2304      	movs	r3, #4
 80166b6:	75fb      	strb	r3, [r7, #23]
 80166b8:	e031      	b.n	801671e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	6a1b      	ldr	r3, [r3, #32]
 80166be:	330b      	adds	r3, #11
 80166c0:	781b      	ldrb	r3, [r3, #0]
 80166c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80166c6:	73bb      	strb	r3, [r7, #14]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	7bba      	ldrb	r2, [r7, #14]
 80166cc:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80166ce:	7bfb      	ldrb	r3, [r7, #15]
 80166d0:	2be5      	cmp	r3, #229	@ 0xe5
 80166d2:	d011      	beq.n	80166f8 <dir_read+0x7e>
 80166d4:	7bfb      	ldrb	r3, [r7, #15]
 80166d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80166d8:	d00e      	beq.n	80166f8 <dir_read+0x7e>
 80166da:	7bbb      	ldrb	r3, [r7, #14]
 80166dc:	2b0f      	cmp	r3, #15
 80166de:	d00b      	beq.n	80166f8 <dir_read+0x7e>
 80166e0:	7bbb      	ldrb	r3, [r7, #14]
 80166e2:	f023 0320 	bic.w	r3, r3, #32
 80166e6:	2b08      	cmp	r3, #8
 80166e8:	bf0c      	ite	eq
 80166ea:	2301      	moveq	r3, #1
 80166ec:	2300      	movne	r3, #0
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	461a      	mov	r2, r3
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	4293      	cmp	r3, r2
 80166f6:	d00f      	beq.n	8016718 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80166f8:	2100      	movs	r1, #0
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f7ff fe72 	bl	80163e4 <dir_next>
 8016700:	4603      	mov	r3, r0
 8016702:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016704:	7dfb      	ldrb	r3, [r7, #23]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d108      	bne.n	801671c <dir_read+0xa2>
	while (dp->sect) {
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	69db      	ldr	r3, [r3, #28]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d1be      	bne.n	8016690 <dir_read+0x16>
 8016712:	e004      	b.n	801671e <dir_read+0xa4>
		if (res != FR_OK) break;
 8016714:	bf00      	nop
 8016716:	e002      	b.n	801671e <dir_read+0xa4>
				break;
 8016718:	bf00      	nop
 801671a:	e000      	b.n	801671e <dir_read+0xa4>
		if (res != FR_OK) break;
 801671c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801671e:	7dfb      	ldrb	r3, [r7, #23]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d002      	beq.n	801672a <dir_read+0xb0>
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2200      	movs	r2, #0
 8016728:	61da      	str	r2, [r3, #28]
	return res;
 801672a:	7dfb      	ldrb	r3, [r7, #23]
}
 801672c:	4618      	mov	r0, r3
 801672e:	3718      	adds	r7, #24
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}

08016734 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b086      	sub	sp, #24
 8016738:	af00      	add	r7, sp, #0
 801673a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016742:	2100      	movs	r1, #0
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f7ff fdd2 	bl	80162ee <dir_sdi>
 801674a:	4603      	mov	r3, r0
 801674c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801674e:	7dfb      	ldrb	r3, [r7, #23]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d001      	beq.n	8016758 <dir_find+0x24>
 8016754:	7dfb      	ldrb	r3, [r7, #23]
 8016756:	e03e      	b.n	80167d6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	69db      	ldr	r3, [r3, #28]
 801675c:	4619      	mov	r1, r3
 801675e:	6938      	ldr	r0, [r7, #16]
 8016760:	f7ff fa48 	bl	8015bf4 <move_window>
 8016764:	4603      	mov	r3, r0
 8016766:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016768:	7dfb      	ldrb	r3, [r7, #23]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d12f      	bne.n	80167ce <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	6a1b      	ldr	r3, [r3, #32]
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016776:	7bfb      	ldrb	r3, [r7, #15]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d102      	bne.n	8016782 <dir_find+0x4e>
 801677c:	2304      	movs	r3, #4
 801677e:	75fb      	strb	r3, [r7, #23]
 8016780:	e028      	b.n	80167d4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	6a1b      	ldr	r3, [r3, #32]
 8016786:	330b      	adds	r3, #11
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801678e:	b2da      	uxtb	r2, r3
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	6a1b      	ldr	r3, [r3, #32]
 8016798:	330b      	adds	r3, #11
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	f003 0308 	and.w	r3, r3, #8
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d10a      	bne.n	80167ba <dir_find+0x86>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6a18      	ldr	r0, [r3, #32]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	3324      	adds	r3, #36	@ 0x24
 80167ac:	220b      	movs	r2, #11
 80167ae:	4619      	mov	r1, r3
 80167b0:	f7fe fffd 	bl	80157ae <mem_cmp>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d00b      	beq.n	80167d2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80167ba:	2100      	movs	r1, #0
 80167bc:	6878      	ldr	r0, [r7, #4]
 80167be:	f7ff fe11 	bl	80163e4 <dir_next>
 80167c2:	4603      	mov	r3, r0
 80167c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80167c6:	7dfb      	ldrb	r3, [r7, #23]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d0c5      	beq.n	8016758 <dir_find+0x24>
 80167cc:	e002      	b.n	80167d4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80167ce:	bf00      	nop
 80167d0:	e000      	b.n	80167d4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80167d2:	bf00      	nop

	return res;
 80167d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3718      	adds	r7, #24
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}

080167de <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80167de:	b580      	push	{r7, lr}
 80167e0:	b084      	sub	sp, #16
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80167ec:	2101      	movs	r1, #1
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f7ff febd 	bl	801656e <dir_alloc>
 80167f4:	4603      	mov	r3, r0
 80167f6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80167f8:	7bfb      	ldrb	r3, [r7, #15]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d11c      	bne.n	8016838 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	69db      	ldr	r3, [r3, #28]
 8016802:	4619      	mov	r1, r3
 8016804:	68b8      	ldr	r0, [r7, #8]
 8016806:	f7ff f9f5 	bl	8015bf4 <move_window>
 801680a:	4603      	mov	r3, r0
 801680c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801680e:	7bfb      	ldrb	r3, [r7, #15]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d111      	bne.n	8016838 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	6a1b      	ldr	r3, [r3, #32]
 8016818:	2220      	movs	r2, #32
 801681a:	2100      	movs	r1, #0
 801681c:	4618      	mov	r0, r3
 801681e:	f7fe ffab 	bl	8015778 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6a18      	ldr	r0, [r3, #32]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	3324      	adds	r3, #36	@ 0x24
 801682a:	220b      	movs	r2, #11
 801682c:	4619      	mov	r1, r3
 801682e:	f7fe ff82 	bl	8015736 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	2201      	movs	r2, #1
 8016836:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016838:	7bfb      	ldrb	r3, [r7, #15]
}
 801683a:	4618      	mov	r0, r3
 801683c:	3710      	adds	r7, #16
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}

08016842 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8016842:	b580      	push	{r7, lr}
 8016844:	b084      	sub	sp, #16
 8016846:	af00      	add	r7, sp, #0
 8016848:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	69db      	ldr	r3, [r3, #28]
 8016854:	4619      	mov	r1, r3
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f7ff f9cc 	bl	8015bf4 <move_window>
 801685c:	4603      	mov	r3, r0
 801685e:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8016860:	7afb      	ldrb	r3, [r7, #11]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d106      	bne.n	8016874 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6a1b      	ldr	r3, [r3, #32]
 801686a:	22e5      	movs	r2, #229	@ 0xe5
 801686c:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	2201      	movs	r2, #1
 8016872:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8016874:	7afb      	ldrb	r3, [r7, #11]
}
 8016876:	4618      	mov	r0, r3
 8016878:	3710      	adds	r7, #16
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
	...

08016880 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b088      	sub	sp, #32
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
 8016888:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	60fb      	str	r3, [r7, #12]
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	3324      	adds	r3, #36	@ 0x24
 8016894:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8016896:	220b      	movs	r2, #11
 8016898:	2120      	movs	r1, #32
 801689a:	68b8      	ldr	r0, [r7, #8]
 801689c:	f7fe ff6c 	bl	8015778 <mem_set>
	si = i = 0; ni = 8;
 80168a0:	2300      	movs	r3, #0
 80168a2:	613b      	str	r3, [r7, #16]
 80168a4:	693b      	ldr	r3, [r7, #16]
 80168a6:	61fb      	str	r3, [r7, #28]
 80168a8:	2308      	movs	r3, #8
 80168aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80168ac:	69fb      	ldr	r3, [r7, #28]
 80168ae:	1c5a      	adds	r2, r3, #1
 80168b0:	61fa      	str	r2, [r7, #28]
 80168b2:	68fa      	ldr	r2, [r7, #12]
 80168b4:	4413      	add	r3, r2
 80168b6:	781b      	ldrb	r3, [r3, #0]
 80168b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80168ba:	7efb      	ldrb	r3, [r7, #27]
 80168bc:	2b20      	cmp	r3, #32
 80168be:	d94e      	bls.n	801695e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80168c0:	7efb      	ldrb	r3, [r7, #27]
 80168c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80168c4:	d006      	beq.n	80168d4 <create_name+0x54>
 80168c6:	7efb      	ldrb	r3, [r7, #27]
 80168c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80168ca:	d110      	bne.n	80168ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80168cc:	e002      	b.n	80168d4 <create_name+0x54>
 80168ce:	69fb      	ldr	r3, [r7, #28]
 80168d0:	3301      	adds	r3, #1
 80168d2:	61fb      	str	r3, [r7, #28]
 80168d4:	68fa      	ldr	r2, [r7, #12]
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	4413      	add	r3, r2
 80168da:	781b      	ldrb	r3, [r3, #0]
 80168dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80168de:	d0f6      	beq.n	80168ce <create_name+0x4e>
 80168e0:	68fa      	ldr	r2, [r7, #12]
 80168e2:	69fb      	ldr	r3, [r7, #28]
 80168e4:	4413      	add	r3, r2
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80168ea:	d0f0      	beq.n	80168ce <create_name+0x4e>
			break;
 80168ec:	e038      	b.n	8016960 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80168ee:	7efb      	ldrb	r3, [r7, #27]
 80168f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80168f2:	d003      	beq.n	80168fc <create_name+0x7c>
 80168f4:	693a      	ldr	r2, [r7, #16]
 80168f6:	697b      	ldr	r3, [r7, #20]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d30c      	bcc.n	8016916 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	2b0b      	cmp	r3, #11
 8016900:	d002      	beq.n	8016908 <create_name+0x88>
 8016902:	7efb      	ldrb	r3, [r7, #27]
 8016904:	2b2e      	cmp	r3, #46	@ 0x2e
 8016906:	d001      	beq.n	801690c <create_name+0x8c>
 8016908:	2306      	movs	r3, #6
 801690a:	e044      	b.n	8016996 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801690c:	2308      	movs	r3, #8
 801690e:	613b      	str	r3, [r7, #16]
 8016910:	230b      	movs	r3, #11
 8016912:	617b      	str	r3, [r7, #20]
			continue;
 8016914:	e022      	b.n	801695c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016916:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801691a:	2b00      	cmp	r3, #0
 801691c:	da04      	bge.n	8016928 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801691e:	7efb      	ldrb	r3, [r7, #27]
 8016920:	3b80      	subs	r3, #128	@ 0x80
 8016922:	4a1f      	ldr	r2, [pc, #124]	@ (80169a0 <create_name+0x120>)
 8016924:	5cd3      	ldrb	r3, [r2, r3]
 8016926:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016928:	7efb      	ldrb	r3, [r7, #27]
 801692a:	4619      	mov	r1, r3
 801692c:	481d      	ldr	r0, [pc, #116]	@ (80169a4 <create_name+0x124>)
 801692e:	f7fe ff65 	bl	80157fc <chk_chr>
 8016932:	4603      	mov	r3, r0
 8016934:	2b00      	cmp	r3, #0
 8016936:	d001      	beq.n	801693c <create_name+0xbc>
 8016938:	2306      	movs	r3, #6
 801693a:	e02c      	b.n	8016996 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801693c:	7efb      	ldrb	r3, [r7, #27]
 801693e:	2b60      	cmp	r3, #96	@ 0x60
 8016940:	d905      	bls.n	801694e <create_name+0xce>
 8016942:	7efb      	ldrb	r3, [r7, #27]
 8016944:	2b7a      	cmp	r3, #122	@ 0x7a
 8016946:	d802      	bhi.n	801694e <create_name+0xce>
 8016948:	7efb      	ldrb	r3, [r7, #27]
 801694a:	3b20      	subs	r3, #32
 801694c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801694e:	693b      	ldr	r3, [r7, #16]
 8016950:	1c5a      	adds	r2, r3, #1
 8016952:	613a      	str	r2, [r7, #16]
 8016954:	68ba      	ldr	r2, [r7, #8]
 8016956:	4413      	add	r3, r2
 8016958:	7efa      	ldrb	r2, [r7, #27]
 801695a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801695c:	e7a6      	b.n	80168ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801695e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016960:	68fa      	ldr	r2, [r7, #12]
 8016962:	69fb      	ldr	r3, [r7, #28]
 8016964:	441a      	add	r2, r3
 8016966:	683b      	ldr	r3, [r7, #0]
 8016968:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801696a:	693b      	ldr	r3, [r7, #16]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d101      	bne.n	8016974 <create_name+0xf4>
 8016970:	2306      	movs	r3, #6
 8016972:	e010      	b.n	8016996 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	2be5      	cmp	r3, #229	@ 0xe5
 801697a:	d102      	bne.n	8016982 <create_name+0x102>
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	2205      	movs	r2, #5
 8016980:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016982:	7efb      	ldrb	r3, [r7, #27]
 8016984:	2b20      	cmp	r3, #32
 8016986:	d801      	bhi.n	801698c <create_name+0x10c>
 8016988:	2204      	movs	r2, #4
 801698a:	e000      	b.n	801698e <create_name+0x10e>
 801698c:	2200      	movs	r2, #0
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	330b      	adds	r3, #11
 8016992:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016994:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8016996:	4618      	mov	r0, r3
 8016998:	3720      	adds	r7, #32
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	0801f4e4 	.word	0x0801f4e4
 80169a4:	0801f464 	.word	0x0801f464

080169a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b086      	sub	sp, #24
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
 80169b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80169b6:	693b      	ldr	r3, [r7, #16]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80169bc:	e002      	b.n	80169c4 <follow_path+0x1c>
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	3301      	adds	r3, #1
 80169c2:	603b      	str	r3, [r7, #0]
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80169ca:	d0f8      	beq.n	80169be <follow_path+0x16>
 80169cc:	683b      	ldr	r3, [r7, #0]
 80169ce:	781b      	ldrb	r3, [r3, #0]
 80169d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80169d2:	d0f4      	beq.n	80169be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80169d4:	693b      	ldr	r3, [r7, #16]
 80169d6:	2200      	movs	r2, #0
 80169d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	781b      	ldrb	r3, [r3, #0]
 80169de:	2b1f      	cmp	r3, #31
 80169e0:	d80a      	bhi.n	80169f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	2280      	movs	r2, #128	@ 0x80
 80169e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80169ea:	2100      	movs	r1, #0
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f7ff fc7e 	bl	80162ee <dir_sdi>
 80169f2:	4603      	mov	r3, r0
 80169f4:	75fb      	strb	r3, [r7, #23]
 80169f6:	e043      	b.n	8016a80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80169f8:	463b      	mov	r3, r7
 80169fa:	4619      	mov	r1, r3
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f7ff ff3f 	bl	8016880 <create_name>
 8016a02:	4603      	mov	r3, r0
 8016a04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016a06:	7dfb      	ldrb	r3, [r7, #23]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d134      	bne.n	8016a76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f7ff fe91 	bl	8016734 <dir_find>
 8016a12:	4603      	mov	r3, r0
 8016a14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8016a1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016a1e:	7dfb      	ldrb	r3, [r7, #23]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d00a      	beq.n	8016a3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016a24:	7dfb      	ldrb	r3, [r7, #23]
 8016a26:	2b04      	cmp	r3, #4
 8016a28:	d127      	bne.n	8016a7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016a2a:	7afb      	ldrb	r3, [r7, #11]
 8016a2c:	f003 0304 	and.w	r3, r3, #4
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d122      	bne.n	8016a7a <follow_path+0xd2>
 8016a34:	2305      	movs	r3, #5
 8016a36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016a38:	e01f      	b.n	8016a7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016a3a:	7afb      	ldrb	r3, [r7, #11]
 8016a3c:	f003 0304 	and.w	r3, r3, #4
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d11c      	bne.n	8016a7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	799b      	ldrb	r3, [r3, #6]
 8016a48:	f003 0310 	and.w	r3, r3, #16
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d102      	bne.n	8016a56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016a50:	2305      	movs	r3, #5
 8016a52:	75fb      	strb	r3, [r7, #23]
 8016a54:	e014      	b.n	8016a80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	695b      	ldr	r3, [r3, #20]
 8016a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016a64:	4413      	add	r3, r2
 8016a66:	4619      	mov	r1, r3
 8016a68:	68f8      	ldr	r0, [r7, #12]
 8016a6a:	f7ff fdc7 	bl	80165fc <ld_clust>
 8016a6e:	4602      	mov	r2, r0
 8016a70:	693b      	ldr	r3, [r7, #16]
 8016a72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016a74:	e7c0      	b.n	80169f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8016a76:	bf00      	nop
 8016a78:	e002      	b.n	8016a80 <follow_path+0xd8>
				break;
 8016a7a:	bf00      	nop
 8016a7c:	e000      	b.n	8016a80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016a7e:	bf00      	nop
			}
		}
	}

	return res;
 8016a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	3718      	adds	r7, #24
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}

08016a8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016a8a:	b480      	push	{r7}
 8016a8c:	b087      	sub	sp, #28
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016a92:	f04f 33ff 	mov.w	r3, #4294967295
 8016a96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d031      	beq.n	8016b04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	617b      	str	r3, [r7, #20]
 8016aa6:	e002      	b.n	8016aae <get_ldnumber+0x24>
 8016aa8:	697b      	ldr	r3, [r7, #20]
 8016aaa:	3301      	adds	r3, #1
 8016aac:	617b      	str	r3, [r7, #20]
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	2b20      	cmp	r3, #32
 8016ab4:	d903      	bls.n	8016abe <get_ldnumber+0x34>
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	2b3a      	cmp	r3, #58	@ 0x3a
 8016abc:	d1f4      	bne.n	8016aa8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016abe:	697b      	ldr	r3, [r7, #20]
 8016ac0:	781b      	ldrb	r3, [r3, #0]
 8016ac2:	2b3a      	cmp	r3, #58	@ 0x3a
 8016ac4:	d11c      	bne.n	8016b00 <get_ldnumber+0x76>
			tp = *path;
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	1c5a      	adds	r2, r3, #1
 8016ad0:	60fa      	str	r2, [r7, #12]
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	3b30      	subs	r3, #48	@ 0x30
 8016ad6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	2b09      	cmp	r3, #9
 8016adc:	d80e      	bhi.n	8016afc <get_ldnumber+0x72>
 8016ade:	68fa      	ldr	r2, [r7, #12]
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d10a      	bne.n	8016afc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016ae6:	68bb      	ldr	r3, [r7, #8]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d107      	bne.n	8016afc <get_ldnumber+0x72>
					vol = (int)i;
 8016aec:	68bb      	ldr	r3, [r7, #8]
 8016aee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	3301      	adds	r3, #1
 8016af4:	617b      	str	r3, [r7, #20]
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	697a      	ldr	r2, [r7, #20]
 8016afa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	e002      	b.n	8016b06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016b00:	2300      	movs	r3, #0
 8016b02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016b04:	693b      	ldr	r3, [r7, #16]
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	371c      	adds	r7, #28
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b10:	4770      	bx	lr
	...

08016b14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b082      	sub	sp, #8
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	2200      	movs	r2, #0
 8016b22:	70da      	strb	r2, [r3, #3]
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f04f 32ff 	mov.w	r2, #4294967295
 8016b2a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016b2c:	6839      	ldr	r1, [r7, #0]
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f7ff f860 	bl	8015bf4 <move_window>
 8016b34:	4603      	mov	r3, r0
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d001      	beq.n	8016b3e <check_fs+0x2a>
 8016b3a:	2304      	movs	r3, #4
 8016b3c:	e038      	b.n	8016bb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	3334      	adds	r3, #52	@ 0x34
 8016b42:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7fe fd72 	bl	8015630 <ld_word>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	461a      	mov	r2, r3
 8016b50:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8016b54:	429a      	cmp	r2, r3
 8016b56:	d001      	beq.n	8016b5c <check_fs+0x48>
 8016b58:	2303      	movs	r3, #3
 8016b5a:	e029      	b.n	8016bb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016b62:	2be9      	cmp	r3, #233	@ 0xe9
 8016b64:	d009      	beq.n	8016b7a <check_fs+0x66>
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016b6c:	2beb      	cmp	r3, #235	@ 0xeb
 8016b6e:	d11e      	bne.n	8016bae <check_fs+0x9a>
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8016b76:	2b90      	cmp	r3, #144	@ 0x90
 8016b78:	d119      	bne.n	8016bae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	3334      	adds	r3, #52	@ 0x34
 8016b7e:	3336      	adds	r3, #54	@ 0x36
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7fe fd6e 	bl	8015662 <ld_dword>
 8016b86:	4603      	mov	r3, r0
 8016b88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8016b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8016bb8 <check_fs+0xa4>)
 8016b8e:	4293      	cmp	r3, r2
 8016b90:	d101      	bne.n	8016b96 <check_fs+0x82>
 8016b92:	2300      	movs	r3, #0
 8016b94:	e00c      	b.n	8016bb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	3334      	adds	r3, #52	@ 0x34
 8016b9a:	3352      	adds	r3, #82	@ 0x52
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f7fe fd60 	bl	8015662 <ld_dword>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	4a05      	ldr	r2, [pc, #20]	@ (8016bbc <check_fs+0xa8>)
 8016ba6:	4293      	cmp	r3, r2
 8016ba8:	d101      	bne.n	8016bae <check_fs+0x9a>
 8016baa:	2300      	movs	r3, #0
 8016bac:	e000      	b.n	8016bb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016bae:	2302      	movs	r3, #2
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3708      	adds	r7, #8
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}
 8016bb8:	00544146 	.word	0x00544146
 8016bbc:	33544146 	.word	0x33544146

08016bc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b096      	sub	sp, #88	@ 0x58
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	4613      	mov	r3, r2
 8016bcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016bce:	68bb      	ldr	r3, [r7, #8]
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016bd4:	68f8      	ldr	r0, [r7, #12]
 8016bd6:	f7ff ff58 	bl	8016a8a <get_ldnumber>
 8016bda:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	da01      	bge.n	8016be6 <find_volume+0x26>
 8016be2:	230b      	movs	r3, #11
 8016be4:	e235      	b.n	8017052 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016be6:	4aa5      	ldr	r2, [pc, #660]	@ (8016e7c <find_volume+0x2bc>)
 8016be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016bee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d101      	bne.n	8016bfa <find_volume+0x3a>
 8016bf6:	230c      	movs	r3, #12
 8016bf8:	e22b      	b.n	8017052 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8016bfa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016bfc:	f7fe fe19 	bl	8015832 <lock_fs>
 8016c00:	4603      	mov	r3, r0
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d101      	bne.n	8016c0a <find_volume+0x4a>
 8016c06:	230f      	movs	r3, #15
 8016c08:	e223      	b.n	8017052 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8016c0a:	68bb      	ldr	r3, [r7, #8]
 8016c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016c0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016c10:	79fb      	ldrb	r3, [r7, #7]
 8016c12:	f023 0301 	bic.w	r3, r3, #1
 8016c16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d01a      	beq.n	8016c56 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8016c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c22:	785b      	ldrb	r3, [r3, #1]
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7fe fc65 	bl	80154f4 <disk_status>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016c30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016c34:	f003 0301 	and.w	r3, r3, #1
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d10c      	bne.n	8016c56 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016c3c:	79fb      	ldrb	r3, [r7, #7]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d007      	beq.n	8016c52 <find_volume+0x92>
 8016c42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016c46:	f003 0304 	and.w	r3, r3, #4
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d001      	beq.n	8016c52 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8016c4e:	230a      	movs	r3, #10
 8016c50:	e1ff      	b.n	8017052 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8016c52:	2300      	movs	r3, #0
 8016c54:	e1fd      	b.n	8017052 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c58:	2200      	movs	r2, #0
 8016c5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c5e:	b2da      	uxtb	r2, r3
 8016c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c66:	785b      	ldrb	r3, [r3, #1]
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7fe fc5d 	bl	8015528 <disk_initialize>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016c74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016c78:	f003 0301 	and.w	r3, r3, #1
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d001      	beq.n	8016c84 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016c80:	2303      	movs	r3, #3
 8016c82:	e1e6      	b.n	8017052 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016c84:	79fb      	ldrb	r3, [r7, #7]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d007      	beq.n	8016c9a <find_volume+0xda>
 8016c8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016c8e:	f003 0304 	and.w	r3, r3, #4
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d001      	beq.n	8016c9a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8016c96:	230a      	movs	r3, #10
 8016c98:	e1db      	b.n	8017052 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016c9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016ca0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016ca2:	f7ff ff37 	bl	8016b14 <check_fs>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016cac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016cb0:	2b02      	cmp	r3, #2
 8016cb2:	d149      	bne.n	8016d48 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8016cb8:	e01e      	b.n	8016cf8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cbc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8016cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016cc2:	011b      	lsls	r3, r3, #4
 8016cc4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8016cc8:	4413      	add	r3, r2
 8016cca:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cce:	3304      	adds	r3, #4
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d006      	beq.n	8016ce4 <find_volume+0x124>
 8016cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cd8:	3308      	adds	r3, #8
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7fe fcc1 	bl	8015662 <ld_dword>
 8016ce0:	4602      	mov	r2, r0
 8016ce2:	e000      	b.n	8016ce6 <find_volume+0x126>
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ce8:	009b      	lsls	r3, r3, #2
 8016cea:	3358      	adds	r3, #88	@ 0x58
 8016cec:	443b      	add	r3, r7
 8016cee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8016cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016cfa:	2b03      	cmp	r3, #3
 8016cfc:	d9dd      	bls.n	8016cba <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016cfe:	2300      	movs	r3, #0
 8016d00:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8016d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d002      	beq.n	8016d0e <find_volume+0x14e>
 8016d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d0a:	3b01      	subs	r3, #1
 8016d0c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	3358      	adds	r3, #88	@ 0x58
 8016d14:	443b      	add	r3, r7
 8016d16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016d1a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016d1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d005      	beq.n	8016d2e <find_volume+0x16e>
 8016d22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8016d24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016d26:	f7ff fef5 	bl	8016b14 <check_fs>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	e000      	b.n	8016d30 <find_volume+0x170>
 8016d2e:	2303      	movs	r3, #3
 8016d30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016d34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016d38:	2b01      	cmp	r3, #1
 8016d3a:	d905      	bls.n	8016d48 <find_volume+0x188>
 8016d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d3e:	3301      	adds	r3, #1
 8016d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8016d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d44:	2b03      	cmp	r3, #3
 8016d46:	d9e2      	bls.n	8016d0e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016d48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016d4c:	2b04      	cmp	r3, #4
 8016d4e:	d101      	bne.n	8016d54 <find_volume+0x194>
 8016d50:	2301      	movs	r3, #1
 8016d52:	e17e      	b.n	8017052 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016d54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016d58:	2b01      	cmp	r3, #1
 8016d5a:	d901      	bls.n	8016d60 <find_volume+0x1a0>
 8016d5c:	230d      	movs	r3, #13
 8016d5e:	e178      	b.n	8017052 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d62:	3334      	adds	r3, #52	@ 0x34
 8016d64:	330b      	adds	r3, #11
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7fe fc62 	bl	8015630 <ld_word>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d72:	d001      	beq.n	8016d78 <find_volume+0x1b8>
 8016d74:	230d      	movs	r3, #13
 8016d76:	e16c      	b.n	8017052 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d7a:	3334      	adds	r3, #52	@ 0x34
 8016d7c:	3316      	adds	r3, #22
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7fe fc56 	bl	8015630 <ld_word>
 8016d84:	4603      	mov	r3, r0
 8016d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d106      	bne.n	8016d9c <find_volume+0x1dc>
 8016d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d90:	3334      	adds	r3, #52	@ 0x34
 8016d92:	3324      	adds	r3, #36	@ 0x24
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7fe fc64 	bl	8015662 <ld_dword>
 8016d9a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8016d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016da0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016da4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8016da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016daa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dae:	789b      	ldrb	r3, [r3, #2]
 8016db0:	2b01      	cmp	r3, #1
 8016db2:	d005      	beq.n	8016dc0 <find_volume+0x200>
 8016db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016db6:	789b      	ldrb	r3, [r3, #2]
 8016db8:	2b02      	cmp	r3, #2
 8016dba:	d001      	beq.n	8016dc0 <find_volume+0x200>
 8016dbc:	230d      	movs	r3, #13
 8016dbe:	e148      	b.n	8017052 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dc2:	789b      	ldrb	r3, [r3, #2]
 8016dc4:	461a      	mov	r2, r3
 8016dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016dc8:	fb02 f303 	mul.w	r3, r2, r3
 8016dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016dd4:	461a      	mov	r2, r3
 8016dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ddc:	895b      	ldrh	r3, [r3, #10]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d008      	beq.n	8016df4 <find_volume+0x234>
 8016de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016de4:	895b      	ldrh	r3, [r3, #10]
 8016de6:	461a      	mov	r2, r3
 8016de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dea:	895b      	ldrh	r3, [r3, #10]
 8016dec:	3b01      	subs	r3, #1
 8016dee:	4013      	ands	r3, r2
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d001      	beq.n	8016df8 <find_volume+0x238>
 8016df4:	230d      	movs	r3, #13
 8016df6:	e12c      	b.n	8017052 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dfa:	3334      	adds	r3, #52	@ 0x34
 8016dfc:	3311      	adds	r3, #17
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7fe fc16 	bl	8015630 <ld_word>
 8016e04:	4603      	mov	r3, r0
 8016e06:	461a      	mov	r2, r3
 8016e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e0e:	891b      	ldrh	r3, [r3, #8]
 8016e10:	f003 030f 	and.w	r3, r3, #15
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d001      	beq.n	8016e1e <find_volume+0x25e>
 8016e1a:	230d      	movs	r3, #13
 8016e1c:	e119      	b.n	8017052 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e20:	3334      	adds	r3, #52	@ 0x34
 8016e22:	3313      	adds	r3, #19
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7fe fc03 	bl	8015630 <ld_word>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d106      	bne.n	8016e42 <find_volume+0x282>
 8016e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e36:	3334      	adds	r3, #52	@ 0x34
 8016e38:	3320      	adds	r3, #32
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f7fe fc11 	bl	8015662 <ld_dword>
 8016e40:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e44:	3334      	adds	r3, #52	@ 0x34
 8016e46:	330e      	adds	r3, #14
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7fe fbf1 	bl	8015630 <ld_word>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016e52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d101      	bne.n	8016e5c <find_volume+0x29c>
 8016e58:	230d      	movs	r3, #13
 8016e5a:	e0fa      	b.n	8017052 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016e5c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016e60:	4413      	add	r3, r2
 8016e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016e64:	8912      	ldrh	r2, [r2, #8]
 8016e66:	0912      	lsrs	r2, r2, #4
 8016e68:	b292      	uxth	r2, r2
 8016e6a:	4413      	add	r3, r2
 8016e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d204      	bcs.n	8016e80 <find_volume+0x2c0>
 8016e76:	230d      	movs	r3, #13
 8016e78:	e0eb      	b.n	8017052 <find_volume+0x492>
 8016e7a:	bf00      	nop
 8016e7c:	20002498 	.word	0x20002498
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016e80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e84:	1ad3      	subs	r3, r2, r3
 8016e86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016e88:	8952      	ldrh	r2, [r2, #10]
 8016e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8016e8e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d101      	bne.n	8016e9a <find_volume+0x2da>
 8016e96:	230d      	movs	r3, #13
 8016e98:	e0db      	b.n	8017052 <find_volume+0x492>
		fmt = FS_FAT32;
 8016e9a:	2303      	movs	r3, #3
 8016e9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ea2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8016ea6:	4293      	cmp	r3, r2
 8016ea8:	d802      	bhi.n	8016eb0 <find_volume+0x2f0>
 8016eaa:	2302      	movs	r3, #2
 8016eac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eb2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8016eb6:	4293      	cmp	r3, r2
 8016eb8:	d802      	bhi.n	8016ec0 <find_volume+0x300>
 8016eba:	2301      	movs	r3, #1
 8016ebc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ec2:	1c9a      	adds	r2, r3, #2
 8016ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ec6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8016ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016eca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016ecc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016ece:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016ed2:	441a      	add	r2, r3
 8016ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ed6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8016ed8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016edc:	441a      	add	r2, r3
 8016ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8016ee2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016ee6:	2b03      	cmp	r3, #3
 8016ee8:	d11e      	bne.n	8016f28 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016eec:	3334      	adds	r3, #52	@ 0x34
 8016eee:	332a      	adds	r3, #42	@ 0x2a
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7fe fb9d 	bl	8015630 <ld_word>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d001      	beq.n	8016f00 <find_volume+0x340>
 8016efc:	230d      	movs	r3, #13
 8016efe:	e0a8      	b.n	8017052 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f02:	891b      	ldrh	r3, [r3, #8]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d001      	beq.n	8016f0c <find_volume+0x34c>
 8016f08:	230d      	movs	r3, #13
 8016f0a:	e0a2      	b.n	8017052 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f0e:	3334      	adds	r3, #52	@ 0x34
 8016f10:	332c      	adds	r3, #44	@ 0x2c
 8016f12:	4618      	mov	r0, r3
 8016f14:	f7fe fba5 	bl	8015662 <ld_dword>
 8016f18:	4602      	mov	r2, r0
 8016f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f1c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f20:	699b      	ldr	r3, [r3, #24]
 8016f22:	009b      	lsls	r3, r3, #2
 8016f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8016f26:	e01f      	b.n	8016f68 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f2a:	891b      	ldrh	r3, [r3, #8]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d101      	bne.n	8016f34 <find_volume+0x374>
 8016f30:	230d      	movs	r3, #13
 8016f32:	e08e      	b.n	8017052 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f3a:	441a      	add	r2, r3
 8016f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f3e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016f40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016f44:	2b02      	cmp	r3, #2
 8016f46:	d103      	bne.n	8016f50 <find_volume+0x390>
 8016f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f4a:	699b      	ldr	r3, [r3, #24]
 8016f4c:	005b      	lsls	r3, r3, #1
 8016f4e:	e00a      	b.n	8016f66 <find_volume+0x3a6>
 8016f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f52:	699a      	ldr	r2, [r3, #24]
 8016f54:	4613      	mov	r3, r2
 8016f56:	005b      	lsls	r3, r3, #1
 8016f58:	4413      	add	r3, r2
 8016f5a:	085a      	lsrs	r2, r3, #1
 8016f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f5e:	699b      	ldr	r3, [r3, #24]
 8016f60:	f003 0301 	and.w	r3, r3, #1
 8016f64:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016f66:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f6a:	69da      	ldr	r2, [r3, #28]
 8016f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f6e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8016f72:	0a5b      	lsrs	r3, r3, #9
 8016f74:	429a      	cmp	r2, r3
 8016f76:	d201      	bcs.n	8016f7c <find_volume+0x3bc>
 8016f78:	230d      	movs	r3, #13
 8016f7a:	e06a      	b.n	8017052 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8016f82:	615a      	str	r2, [r3, #20]
 8016f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f86:	695a      	ldr	r2, [r3, #20]
 8016f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f8a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8016f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f8e:	2280      	movs	r2, #128	@ 0x80
 8016f90:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016f92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016f96:	2b03      	cmp	r3, #3
 8016f98:	d149      	bne.n	801702e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f9c:	3334      	adds	r3, #52	@ 0x34
 8016f9e:	3330      	adds	r3, #48	@ 0x30
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f7fe fb45 	bl	8015630 <ld_word>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	2b01      	cmp	r3, #1
 8016faa:	d140      	bne.n	801702e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016fae:	3301      	adds	r3, #1
 8016fb0:	4619      	mov	r1, r3
 8016fb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016fb4:	f7fe fe1e 	bl	8015bf4 <move_window>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d137      	bne.n	801702e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8016fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fc6:	3334      	adds	r3, #52	@ 0x34
 8016fc8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7fe fb2f 	bl	8015630 <ld_word>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	461a      	mov	r2, r3
 8016fd6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	d127      	bne.n	801702e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fe0:	3334      	adds	r3, #52	@ 0x34
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7fe fb3d 	bl	8015662 <ld_dword>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	4a1c      	ldr	r2, [pc, #112]	@ (801705c <find_volume+0x49c>)
 8016fec:	4293      	cmp	r3, r2
 8016fee:	d11e      	bne.n	801702e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ff2:	3334      	adds	r3, #52	@ 0x34
 8016ff4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7fe fb32 	bl	8015662 <ld_dword>
 8016ffe:	4603      	mov	r3, r0
 8017000:	4a17      	ldr	r2, [pc, #92]	@ (8017060 <find_volume+0x4a0>)
 8017002:	4293      	cmp	r3, r2
 8017004:	d113      	bne.n	801702e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017008:	3334      	adds	r3, #52	@ 0x34
 801700a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801700e:	4618      	mov	r0, r3
 8017010:	f7fe fb27 	bl	8015662 <ld_dword>
 8017014:	4602      	mov	r2, r0
 8017016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017018:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801701c:	3334      	adds	r3, #52	@ 0x34
 801701e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8017022:	4618      	mov	r0, r3
 8017024:	f7fe fb1d 	bl	8015662 <ld_dword>
 8017028:	4602      	mov	r2, r0
 801702a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801702c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801702e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017030:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8017034:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017036:	4b0b      	ldr	r3, [pc, #44]	@ (8017064 <find_volume+0x4a4>)
 8017038:	881b      	ldrh	r3, [r3, #0]
 801703a:	3301      	adds	r3, #1
 801703c:	b29a      	uxth	r2, r3
 801703e:	4b09      	ldr	r3, [pc, #36]	@ (8017064 <find_volume+0x4a4>)
 8017040:	801a      	strh	r2, [r3, #0]
 8017042:	4b08      	ldr	r3, [pc, #32]	@ (8017064 <find_volume+0x4a4>)
 8017044:	881a      	ldrh	r2, [r3, #0]
 8017046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017048:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801704a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801704c:	f7fe fd6a 	bl	8015b24 <clear_lock>
#endif
	return FR_OK;
 8017050:	2300      	movs	r3, #0
}
 8017052:	4618      	mov	r0, r3
 8017054:	3758      	adds	r7, #88	@ 0x58
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}
 801705a:	bf00      	nop
 801705c:	41615252 	.word	0x41615252
 8017060:	61417272 	.word	0x61417272
 8017064:	2000249c 	.word	0x2000249c

08017068 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b084      	sub	sp, #16
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017072:	2309      	movs	r3, #9
 8017074:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d02e      	beq.n	80170da <validate+0x72>
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d02a      	beq.n	80170da <validate+0x72>
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d025      	beq.n	80170da <validate+0x72>
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	889a      	ldrh	r2, [r3, #4]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	88db      	ldrh	r3, [r3, #6]
 8017098:	429a      	cmp	r2, r3
 801709a:	d11e      	bne.n	80170da <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7fe fbc6 	bl	8015832 <lock_fs>
 80170a6:	4603      	mov	r3, r0
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d014      	beq.n	80170d6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	785b      	ldrb	r3, [r3, #1]
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7fe fa1e 	bl	80154f4 <disk_status>
 80170b8:	4603      	mov	r3, r0
 80170ba:	f003 0301 	and.w	r3, r3, #1
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d102      	bne.n	80170c8 <validate+0x60>
				res = FR_OK;
 80170c2:	2300      	movs	r3, #0
 80170c4:	73fb      	strb	r3, [r7, #15]
 80170c6:	e008      	b.n	80170da <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	2100      	movs	r1, #0
 80170ce:	4618      	mov	r0, r3
 80170d0:	f7fe fbc5 	bl	801585e <unlock_fs>
 80170d4:	e001      	b.n	80170da <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80170d6:	230f      	movs	r3, #15
 80170d8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80170da:	7bfb      	ldrb	r3, [r7, #15]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d102      	bne.n	80170e6 <validate+0x7e>
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	e000      	b.n	80170e8 <validate+0x80>
 80170e6:	2300      	movs	r3, #0
 80170e8:	683a      	ldr	r2, [r7, #0]
 80170ea:	6013      	str	r3, [r2, #0]
	return res;
 80170ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	3710      	adds	r7, #16
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}
	...

080170f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b088      	sub	sp, #32
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	60f8      	str	r0, [r7, #12]
 8017100:	60b9      	str	r1, [r7, #8]
 8017102:	4613      	mov	r3, r2
 8017104:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801710a:	f107 0310 	add.w	r3, r7, #16
 801710e:	4618      	mov	r0, r3
 8017110:	f7ff fcbb 	bl	8016a8a <get_ldnumber>
 8017114:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017116:	69fb      	ldr	r3, [r7, #28]
 8017118:	2b00      	cmp	r3, #0
 801711a:	da01      	bge.n	8017120 <f_mount+0x28>
 801711c:	230b      	movs	r3, #11
 801711e:	e048      	b.n	80171b2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017120:	4a26      	ldr	r2, [pc, #152]	@ (80171bc <f_mount+0xc4>)
 8017122:	69fb      	ldr	r3, [r7, #28]
 8017124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017128:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801712a:	69bb      	ldr	r3, [r7, #24]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d00f      	beq.n	8017150 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017130:	69b8      	ldr	r0, [r7, #24]
 8017132:	f7fe fcf7 	bl	8015b24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	4618      	mov	r0, r3
 801713c:	f001 fac5 	bl	80186ca <ff_del_syncobj>
 8017140:	4603      	mov	r3, r0
 8017142:	2b00      	cmp	r3, #0
 8017144:	d101      	bne.n	801714a <f_mount+0x52>
 8017146:	2302      	movs	r3, #2
 8017148:	e033      	b.n	80171b2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801714a:	69bb      	ldr	r3, [r7, #24]
 801714c:	2200      	movs	r2, #0
 801714e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d00f      	beq.n	8017176 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	2200      	movs	r2, #0
 801715a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801715c:	69fb      	ldr	r3, [r7, #28]
 801715e:	b2da      	uxtb	r2, r3
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	330c      	adds	r3, #12
 8017164:	4619      	mov	r1, r3
 8017166:	4610      	mov	r0, r2
 8017168:	f001 fa8f 	bl	801868a <ff_cre_syncobj>
 801716c:	4603      	mov	r3, r0
 801716e:	2b00      	cmp	r3, #0
 8017170:	d101      	bne.n	8017176 <f_mount+0x7e>
 8017172:	2302      	movs	r3, #2
 8017174:	e01d      	b.n	80171b2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017176:	68fa      	ldr	r2, [r7, #12]
 8017178:	4910      	ldr	r1, [pc, #64]	@ (80171bc <f_mount+0xc4>)
 801717a:	69fb      	ldr	r3, [r7, #28]
 801717c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d002      	beq.n	801718c <f_mount+0x94>
 8017186:	79fb      	ldrb	r3, [r7, #7]
 8017188:	2b01      	cmp	r3, #1
 801718a:	d001      	beq.n	8017190 <f_mount+0x98>
 801718c:	2300      	movs	r3, #0
 801718e:	e010      	b.n	80171b2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017190:	f107 010c 	add.w	r1, r7, #12
 8017194:	f107 0308 	add.w	r3, r7, #8
 8017198:	2200      	movs	r2, #0
 801719a:	4618      	mov	r0, r3
 801719c:	f7ff fd10 	bl	8016bc0 <find_volume>
 80171a0:	4603      	mov	r3, r0
 80171a2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	7dfa      	ldrb	r2, [r7, #23]
 80171a8:	4611      	mov	r1, r2
 80171aa:	4618      	mov	r0, r3
 80171ac:	f7fe fb57 	bl	801585e <unlock_fs>
 80171b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3720      	adds	r7, #32
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	20002498 	.word	0x20002498

080171c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b098      	sub	sp, #96	@ 0x60
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	60f8      	str	r0, [r7, #12]
 80171c8:	60b9      	str	r1, [r7, #8]
 80171ca:	4613      	mov	r3, r2
 80171cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d101      	bne.n	80171d8 <f_open+0x18>
 80171d4:	2309      	movs	r3, #9
 80171d6:	e1b0      	b.n	801753a <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80171d8:	79fb      	ldrb	r3, [r7, #7]
 80171da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80171de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80171e0:	79fa      	ldrb	r2, [r7, #7]
 80171e2:	f107 0110 	add.w	r1, r7, #16
 80171e6:	f107 0308 	add.w	r3, r7, #8
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7ff fce8 	bl	8016bc0 <find_volume>
 80171f0:	4603      	mov	r3, r0
 80171f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80171f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f040 818d 	bne.w	801751a <f_open+0x35a>
		dj.obj.fs = fs;
 8017200:	693b      	ldr	r3, [r7, #16]
 8017202:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017204:	68ba      	ldr	r2, [r7, #8]
 8017206:	f107 0314 	add.w	r3, r7, #20
 801720a:	4611      	mov	r1, r2
 801720c:	4618      	mov	r0, r3
 801720e:	f7ff fbcb 	bl	80169a8 <follow_path>
 8017212:	4603      	mov	r3, r0
 8017214:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017218:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801721c:	2b00      	cmp	r3, #0
 801721e:	d118      	bne.n	8017252 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017220:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8017224:	b25b      	sxtb	r3, r3
 8017226:	2b00      	cmp	r3, #0
 8017228:	da03      	bge.n	8017232 <f_open+0x72>
				res = FR_INVALID_NAME;
 801722a:	2306      	movs	r3, #6
 801722c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8017230:	e00f      	b.n	8017252 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017232:	79fb      	ldrb	r3, [r7, #7]
 8017234:	2b01      	cmp	r3, #1
 8017236:	bf8c      	ite	hi
 8017238:	2301      	movhi	r3, #1
 801723a:	2300      	movls	r3, #0
 801723c:	b2db      	uxtb	r3, r3
 801723e:	461a      	mov	r2, r3
 8017240:	f107 0314 	add.w	r3, r7, #20
 8017244:	4611      	mov	r1, r2
 8017246:	4618      	mov	r0, r3
 8017248:	f7fe fb24 	bl	8015894 <chk_lock>
 801724c:	4603      	mov	r3, r0
 801724e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017252:	79fb      	ldrb	r3, [r7, #7]
 8017254:	f003 031c 	and.w	r3, r3, #28
 8017258:	2b00      	cmp	r3, #0
 801725a:	d07f      	beq.n	801735c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801725c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017260:	2b00      	cmp	r3, #0
 8017262:	d017      	beq.n	8017294 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017264:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017268:	2b04      	cmp	r3, #4
 801726a:	d10e      	bne.n	801728a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801726c:	f7fe fb6e 	bl	801594c <enq_lock>
 8017270:	4603      	mov	r3, r0
 8017272:	2b00      	cmp	r3, #0
 8017274:	d006      	beq.n	8017284 <f_open+0xc4>
 8017276:	f107 0314 	add.w	r3, r7, #20
 801727a:	4618      	mov	r0, r3
 801727c:	f7ff faaf 	bl	80167de <dir_register>
 8017280:	4603      	mov	r3, r0
 8017282:	e000      	b.n	8017286 <f_open+0xc6>
 8017284:	2312      	movs	r3, #18
 8017286:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801728a:	79fb      	ldrb	r3, [r7, #7]
 801728c:	f043 0308 	orr.w	r3, r3, #8
 8017290:	71fb      	strb	r3, [r7, #7]
 8017292:	e010      	b.n	80172b6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017294:	7ebb      	ldrb	r3, [r7, #26]
 8017296:	f003 0311 	and.w	r3, r3, #17
 801729a:	2b00      	cmp	r3, #0
 801729c:	d003      	beq.n	80172a6 <f_open+0xe6>
					res = FR_DENIED;
 801729e:	2307      	movs	r3, #7
 80172a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80172a4:	e007      	b.n	80172b6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80172a6:	79fb      	ldrb	r3, [r7, #7]
 80172a8:	f003 0304 	and.w	r3, r3, #4
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d002      	beq.n	80172b6 <f_open+0xf6>
 80172b0:	2308      	movs	r3, #8
 80172b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80172b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d168      	bne.n	8017390 <f_open+0x1d0>
 80172be:	79fb      	ldrb	r3, [r7, #7]
 80172c0:	f003 0308 	and.w	r3, r3, #8
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d063      	beq.n	8017390 <f_open+0x1d0>
				dw = GET_FATTIME();
 80172c8:	f7fb fca0 	bl	8012c0c <get_fattime>
 80172cc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80172ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172d0:	330e      	adds	r3, #14
 80172d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80172d4:	4618      	mov	r0, r3
 80172d6:	f7fe fa02 	bl	80156de <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80172da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172dc:	3316      	adds	r3, #22
 80172de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7fe f9fc 	bl	80156de <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80172e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172e8:	330b      	adds	r3, #11
 80172ea:	2220      	movs	r2, #32
 80172ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80172f2:	4611      	mov	r1, r2
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7ff f981 	bl	80165fc <ld_clust>
 80172fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80172fc:	693b      	ldr	r3, [r7, #16]
 80172fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017300:	2200      	movs	r2, #0
 8017302:	4618      	mov	r0, r3
 8017304:	f7ff f999 	bl	801663a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801730a:	331c      	adds	r3, #28
 801730c:	2100      	movs	r1, #0
 801730e:	4618      	mov	r0, r3
 8017310:	f7fe f9e5 	bl	80156de <st_dword>
					fs->wflag = 1;
 8017314:	693b      	ldr	r3, [r7, #16]
 8017316:	2201      	movs	r2, #1
 8017318:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801731a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801731c:	2b00      	cmp	r3, #0
 801731e:	d037      	beq.n	8017390 <f_open+0x1d0>
						dw = fs->winsect;
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017324:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8017326:	f107 0314 	add.w	r3, r7, #20
 801732a:	2200      	movs	r2, #0
 801732c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801732e:	4618      	mov	r0, r3
 8017330:	f7fe feac 	bl	801608c <remove_chain>
 8017334:	4603      	mov	r3, r0
 8017336:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801733a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801733e:	2b00      	cmp	r3, #0
 8017340:	d126      	bne.n	8017390 <f_open+0x1d0>
							res = move_window(fs, dw);
 8017342:	693b      	ldr	r3, [r7, #16]
 8017344:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8017346:	4618      	mov	r0, r3
 8017348:	f7fe fc54 	bl	8015bf4 <move_window>
 801734c:	4603      	mov	r3, r0
 801734e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017356:	3a01      	subs	r2, #1
 8017358:	611a      	str	r2, [r3, #16]
 801735a:	e019      	b.n	8017390 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801735c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017360:	2b00      	cmp	r3, #0
 8017362:	d115      	bne.n	8017390 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017364:	7ebb      	ldrb	r3, [r7, #26]
 8017366:	f003 0310 	and.w	r3, r3, #16
 801736a:	2b00      	cmp	r3, #0
 801736c:	d003      	beq.n	8017376 <f_open+0x1b6>
					res = FR_NO_FILE;
 801736e:	2304      	movs	r3, #4
 8017370:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8017374:	e00c      	b.n	8017390 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8017376:	79fb      	ldrb	r3, [r7, #7]
 8017378:	f003 0302 	and.w	r3, r3, #2
 801737c:	2b00      	cmp	r3, #0
 801737e:	d007      	beq.n	8017390 <f_open+0x1d0>
 8017380:	7ebb      	ldrb	r3, [r7, #26]
 8017382:	f003 0301 	and.w	r3, r3, #1
 8017386:	2b00      	cmp	r3, #0
 8017388:	d002      	beq.n	8017390 <f_open+0x1d0>
						res = FR_DENIED;
 801738a:	2307      	movs	r3, #7
 801738c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8017390:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017394:	2b00      	cmp	r3, #0
 8017396:	d126      	bne.n	80173e6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017398:	79fb      	ldrb	r3, [r7, #7]
 801739a:	f003 0308 	and.w	r3, r3, #8
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d003      	beq.n	80173aa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80173a2:	79fb      	ldrb	r3, [r7, #7]
 80173a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80173b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80173b8:	79fb      	ldrb	r3, [r7, #7]
 80173ba:	2b01      	cmp	r3, #1
 80173bc:	bf8c      	ite	hi
 80173be:	2301      	movhi	r3, #1
 80173c0:	2300      	movls	r3, #0
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	461a      	mov	r2, r3
 80173c6:	f107 0314 	add.w	r3, r7, #20
 80173ca:	4611      	mov	r1, r2
 80173cc:	4618      	mov	r0, r3
 80173ce:	f7fe fadf 	bl	8015990 <inc_lock>
 80173d2:	4602      	mov	r2, r0
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	691b      	ldr	r3, [r3, #16]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d102      	bne.n	80173e6 <f_open+0x226>
 80173e0:	2302      	movs	r3, #2
 80173e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80173e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	f040 8095 	bne.w	801751a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80173f0:	693b      	ldr	r3, [r7, #16]
 80173f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80173f4:	4611      	mov	r1, r2
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7ff f900 	bl	80165fc <ld_clust>
 80173fc:	4602      	mov	r2, r0
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017404:	331c      	adds	r3, #28
 8017406:	4618      	mov	r0, r3
 8017408:	f7fe f92b 	bl	8015662 <ld_dword>
 801740c:	4602      	mov	r2, r0
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	2200      	movs	r2, #0
 8017416:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017418:	693a      	ldr	r2, [r7, #16]
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801741e:	693b      	ldr	r3, [r7, #16]
 8017420:	88da      	ldrh	r2, [r3, #6]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	79fa      	ldrb	r2, [r7, #7]
 801742a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	2200      	movs	r2, #0
 8017430:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	2200      	movs	r2, #0
 8017436:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	2200      	movs	r2, #0
 801743c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	3330      	adds	r3, #48	@ 0x30
 8017442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017446:	2100      	movs	r1, #0
 8017448:	4618      	mov	r0, r3
 801744a:	f7fe f995 	bl	8015778 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801744e:	79fb      	ldrb	r3, [r7, #7]
 8017450:	f003 0320 	and.w	r3, r3, #32
 8017454:	2b00      	cmp	r3, #0
 8017456:	d060      	beq.n	801751a <f_open+0x35a>
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	68db      	ldr	r3, [r3, #12]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d05c      	beq.n	801751a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	68da      	ldr	r2, [r3, #12]
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017468:	693b      	ldr	r3, [r7, #16]
 801746a:	895b      	ldrh	r3, [r3, #10]
 801746c:	025b      	lsls	r3, r3, #9
 801746e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	689b      	ldr	r3, [r3, #8]
 8017474:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	68db      	ldr	r3, [r3, #12]
 801747a:	657b      	str	r3, [r7, #84]	@ 0x54
 801747c:	e016      	b.n	80174ac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8017482:	4618      	mov	r0, r3
 8017484:	f7fe fc71 	bl	8015d6a <get_fat>
 8017488:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801748a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801748c:	2b01      	cmp	r3, #1
 801748e:	d802      	bhi.n	8017496 <f_open+0x2d6>
 8017490:	2302      	movs	r3, #2
 8017492:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801749c:	d102      	bne.n	80174a4 <f_open+0x2e4>
 801749e:	2301      	movs	r3, #1
 80174a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80174a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80174a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174a8:	1ad3      	subs	r3, r2, r3
 80174aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80174ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d103      	bne.n	80174bc <f_open+0x2fc>
 80174b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80174b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174b8:	429a      	cmp	r2, r3
 80174ba:	d8e0      	bhi.n	801747e <f_open+0x2be>
				}
				fp->clust = clst;
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80174c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80174c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d127      	bne.n	801751a <f_open+0x35a>
 80174ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d022      	beq.n	801751a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80174d8:	4618      	mov	r0, r3
 80174da:	f7fe fc27 	bl	8015d2c <clust2sect>
 80174de:	6478      	str	r0, [r7, #68]	@ 0x44
 80174e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d103      	bne.n	80174ee <f_open+0x32e>
						res = FR_INT_ERR;
 80174e6:	2302      	movs	r3, #2
 80174e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80174ec:	e015      	b.n	801751a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80174ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174f0:	0a5a      	lsrs	r2, r3, #9
 80174f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174f4:	441a      	add	r2, r3
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80174fa:	693b      	ldr	r3, [r7, #16]
 80174fc:	7858      	ldrb	r0, [r3, #1]
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	6a1a      	ldr	r2, [r3, #32]
 8017508:	2301      	movs	r3, #1
 801750a:	f7fe f833 	bl	8015574 <disk_read>
 801750e:	4603      	mov	r3, r0
 8017510:	2b00      	cmp	r3, #0
 8017512:	d002      	beq.n	801751a <f_open+0x35a>
 8017514:	2301      	movs	r3, #1
 8017516:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801751a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801751e:	2b00      	cmp	r3, #0
 8017520:	d002      	beq.n	8017528 <f_open+0x368>
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	2200      	movs	r2, #0
 8017526:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017528:	693b      	ldr	r3, [r7, #16]
 801752a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801752e:	4611      	mov	r1, r2
 8017530:	4618      	mov	r0, r3
 8017532:	f7fe f994 	bl	801585e <unlock_fs>
 8017536:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801753a:	4618      	mov	r0, r3
 801753c:	3760      	adds	r7, #96	@ 0x60
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}

08017542 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017542:	b580      	push	{r7, lr}
 8017544:	b08c      	sub	sp, #48	@ 0x30
 8017546:	af00      	add	r7, sp, #0
 8017548:	60f8      	str	r0, [r7, #12]
 801754a:	60b9      	str	r1, [r7, #8]
 801754c:	607a      	str	r2, [r7, #4]
 801754e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	2200      	movs	r2, #0
 8017558:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	f107 0210 	add.w	r2, r7, #16
 8017560:	4611      	mov	r1, r2
 8017562:	4618      	mov	r0, r3
 8017564:	f7ff fd80 	bl	8017068 <validate>
 8017568:	4603      	mov	r3, r0
 801756a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801756e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017572:	2b00      	cmp	r3, #0
 8017574:	d107      	bne.n	8017586 <f_write+0x44>
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	7d5b      	ldrb	r3, [r3, #21]
 801757a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801757e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017582:	2b00      	cmp	r3, #0
 8017584:	d009      	beq.n	801759a <f_write+0x58>
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801758c:	4611      	mov	r1, r2
 801758e:	4618      	mov	r0, r3
 8017590:	f7fe f965 	bl	801585e <unlock_fs>
 8017594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017598:	e173      	b.n	8017882 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	7d1b      	ldrb	r3, [r3, #20]
 801759e:	f003 0302 	and.w	r3, r3, #2
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d106      	bne.n	80175b4 <f_write+0x72>
 80175a6:	693b      	ldr	r3, [r7, #16]
 80175a8:	2107      	movs	r1, #7
 80175aa:	4618      	mov	r0, r3
 80175ac:	f7fe f957 	bl	801585e <unlock_fs>
 80175b0:	2307      	movs	r3, #7
 80175b2:	e166      	b.n	8017882 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	699a      	ldr	r2, [r3, #24]
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	441a      	add	r2, r3
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	699b      	ldr	r3, [r3, #24]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	f080 814b 	bcs.w	801785c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	699b      	ldr	r3, [r3, #24]
 80175ca:	43db      	mvns	r3, r3
 80175cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80175ce:	e145      	b.n	801785c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	699b      	ldr	r3, [r3, #24]
 80175d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175d8:	2b00      	cmp	r3, #0
 80175da:	f040 8101 	bne.w	80177e0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	699b      	ldr	r3, [r3, #24]
 80175e2:	0a5b      	lsrs	r3, r3, #9
 80175e4:	693a      	ldr	r2, [r7, #16]
 80175e6:	8952      	ldrh	r2, [r2, #10]
 80175e8:	3a01      	subs	r2, #1
 80175ea:	4013      	ands	r3, r2
 80175ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80175ee:	69bb      	ldr	r3, [r7, #24]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d14d      	bne.n	8017690 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	699b      	ldr	r3, [r3, #24]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d10c      	bne.n	8017616 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	689b      	ldr	r3, [r3, #8]
 8017600:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017604:	2b00      	cmp	r3, #0
 8017606:	d11a      	bne.n	801763e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	2100      	movs	r1, #0
 801760c:	4618      	mov	r0, r3
 801760e:	f7fe fda2 	bl	8016156 <create_chain>
 8017612:	62b8      	str	r0, [r7, #40]	@ 0x28
 8017614:	e013      	b.n	801763e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801761a:	2b00      	cmp	r3, #0
 801761c:	d007      	beq.n	801762e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	699b      	ldr	r3, [r3, #24]
 8017622:	4619      	mov	r1, r3
 8017624:	68f8      	ldr	r0, [r7, #12]
 8017626:	f7fe fe2e 	bl	8016286 <clmt_clust>
 801762a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801762c:	e007      	b.n	801763e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801762e:	68fa      	ldr	r2, [r7, #12]
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	69db      	ldr	r3, [r3, #28]
 8017634:	4619      	mov	r1, r3
 8017636:	4610      	mov	r0, r2
 8017638:	f7fe fd8d 	bl	8016156 <create_chain>
 801763c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801763e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017640:	2b00      	cmp	r3, #0
 8017642:	f000 8110 	beq.w	8017866 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017648:	2b01      	cmp	r3, #1
 801764a:	d109      	bne.n	8017660 <f_write+0x11e>
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	2202      	movs	r2, #2
 8017650:	755a      	strb	r2, [r3, #21]
 8017652:	693b      	ldr	r3, [r7, #16]
 8017654:	2102      	movs	r1, #2
 8017656:	4618      	mov	r0, r3
 8017658:	f7fe f901 	bl	801585e <unlock_fs>
 801765c:	2302      	movs	r3, #2
 801765e:	e110      	b.n	8017882 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017666:	d109      	bne.n	801767c <f_write+0x13a>
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	2201      	movs	r2, #1
 801766c:	755a      	strb	r2, [r3, #21]
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	2101      	movs	r1, #1
 8017672:	4618      	mov	r0, r3
 8017674:	f7fe f8f3 	bl	801585e <unlock_fs>
 8017678:	2301      	movs	r3, #1
 801767a:	e102      	b.n	8017882 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017680:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	689b      	ldr	r3, [r3, #8]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d102      	bne.n	8017690 <f_write+0x14e>
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801768e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	7d1b      	ldrb	r3, [r3, #20]
 8017694:	b25b      	sxtb	r3, r3
 8017696:	2b00      	cmp	r3, #0
 8017698:	da1d      	bge.n	80176d6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	7858      	ldrb	r0, [r3, #1]
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	6a1a      	ldr	r2, [r3, #32]
 80176a8:	2301      	movs	r3, #1
 80176aa:	f7fd ff83 	bl	80155b4 <disk_write>
 80176ae:	4603      	mov	r3, r0
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d009      	beq.n	80176c8 <f_write+0x186>
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	2201      	movs	r2, #1
 80176b8:	755a      	strb	r2, [r3, #21]
 80176ba:	693b      	ldr	r3, [r7, #16]
 80176bc:	2101      	movs	r1, #1
 80176be:	4618      	mov	r0, r3
 80176c0:	f7fe f8cd 	bl	801585e <unlock_fs>
 80176c4:	2301      	movs	r3, #1
 80176c6:	e0dc      	b.n	8017882 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	7d1b      	ldrb	r3, [r3, #20]
 80176cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80176d0:	b2da      	uxtb	r2, r3
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80176d6:	693a      	ldr	r2, [r7, #16]
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	69db      	ldr	r3, [r3, #28]
 80176dc:	4619      	mov	r1, r3
 80176de:	4610      	mov	r0, r2
 80176e0:	f7fe fb24 	bl	8015d2c <clust2sect>
 80176e4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80176e6:	697b      	ldr	r3, [r7, #20]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d109      	bne.n	8017700 <f_write+0x1be>
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2202      	movs	r2, #2
 80176f0:	755a      	strb	r2, [r3, #21]
 80176f2:	693b      	ldr	r3, [r7, #16]
 80176f4:	2102      	movs	r1, #2
 80176f6:	4618      	mov	r0, r3
 80176f8:	f7fe f8b1 	bl	801585e <unlock_fs>
 80176fc:	2302      	movs	r3, #2
 80176fe:	e0c0      	b.n	8017882 <f_write+0x340>
			sect += csect;
 8017700:	697a      	ldr	r2, [r7, #20]
 8017702:	69bb      	ldr	r3, [r7, #24]
 8017704:	4413      	add	r3, r2
 8017706:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	0a5b      	lsrs	r3, r3, #9
 801770c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801770e:	6a3b      	ldr	r3, [r7, #32]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d041      	beq.n	8017798 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017714:	69ba      	ldr	r2, [r7, #24]
 8017716:	6a3b      	ldr	r3, [r7, #32]
 8017718:	4413      	add	r3, r2
 801771a:	693a      	ldr	r2, [r7, #16]
 801771c:	8952      	ldrh	r2, [r2, #10]
 801771e:	4293      	cmp	r3, r2
 8017720:	d905      	bls.n	801772e <f_write+0x1ec>
					cc = fs->csize - csect;
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	895b      	ldrh	r3, [r3, #10]
 8017726:	461a      	mov	r2, r3
 8017728:	69bb      	ldr	r3, [r7, #24]
 801772a:	1ad3      	subs	r3, r2, r3
 801772c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801772e:	693b      	ldr	r3, [r7, #16]
 8017730:	7858      	ldrb	r0, [r3, #1]
 8017732:	6a3b      	ldr	r3, [r7, #32]
 8017734:	697a      	ldr	r2, [r7, #20]
 8017736:	69f9      	ldr	r1, [r7, #28]
 8017738:	f7fd ff3c 	bl	80155b4 <disk_write>
 801773c:	4603      	mov	r3, r0
 801773e:	2b00      	cmp	r3, #0
 8017740:	d009      	beq.n	8017756 <f_write+0x214>
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	2201      	movs	r2, #1
 8017746:	755a      	strb	r2, [r3, #21]
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	2101      	movs	r1, #1
 801774c:	4618      	mov	r0, r3
 801774e:	f7fe f886 	bl	801585e <unlock_fs>
 8017752:	2301      	movs	r3, #1
 8017754:	e095      	b.n	8017882 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	6a1a      	ldr	r2, [r3, #32]
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	1ad3      	subs	r3, r2, r3
 801775e:	6a3a      	ldr	r2, [r7, #32]
 8017760:	429a      	cmp	r2, r3
 8017762:	d915      	bls.n	8017790 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	6a1a      	ldr	r2, [r3, #32]
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	1ad3      	subs	r3, r2, r3
 8017772:	025b      	lsls	r3, r3, #9
 8017774:	69fa      	ldr	r2, [r7, #28]
 8017776:	4413      	add	r3, r2
 8017778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801777c:	4619      	mov	r1, r3
 801777e:	f7fd ffda 	bl	8015736 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	7d1b      	ldrb	r3, [r3, #20]
 8017786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801778a:	b2da      	uxtb	r2, r3
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017790:	6a3b      	ldr	r3, [r7, #32]
 8017792:	025b      	lsls	r3, r3, #9
 8017794:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8017796:	e044      	b.n	8017822 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	6a1b      	ldr	r3, [r3, #32]
 801779c:	697a      	ldr	r2, [r7, #20]
 801779e:	429a      	cmp	r2, r3
 80177a0:	d01b      	beq.n	80177da <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	699a      	ldr	r2, [r3, #24]
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80177aa:	429a      	cmp	r2, r3
 80177ac:	d215      	bcs.n	80177da <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80177ae:	693b      	ldr	r3, [r7, #16]
 80177b0:	7858      	ldrb	r0, [r3, #1]
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80177b8:	2301      	movs	r3, #1
 80177ba:	697a      	ldr	r2, [r7, #20]
 80177bc:	f7fd feda 	bl	8015574 <disk_read>
 80177c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d009      	beq.n	80177da <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	2201      	movs	r2, #1
 80177ca:	755a      	strb	r2, [r3, #21]
 80177cc:	693b      	ldr	r3, [r7, #16]
 80177ce:	2101      	movs	r1, #1
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7fe f844 	bl	801585e <unlock_fs>
 80177d6:	2301      	movs	r3, #1
 80177d8:	e053      	b.n	8017882 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	697a      	ldr	r2, [r7, #20]
 80177de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	699b      	ldr	r3, [r3, #24]
 80177e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80177ec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80177ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d901      	bls.n	80177fa <f_write+0x2b8>
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	699b      	ldr	r3, [r3, #24]
 8017804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017808:	4413      	add	r3, r2
 801780a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801780c:	69f9      	ldr	r1, [r7, #28]
 801780e:	4618      	mov	r0, r3
 8017810:	f7fd ff91 	bl	8015736 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	7d1b      	ldrb	r3, [r3, #20]
 8017818:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801781c:	b2da      	uxtb	r2, r3
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017822:	69fa      	ldr	r2, [r7, #28]
 8017824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017826:	4413      	add	r3, r2
 8017828:	61fb      	str	r3, [r7, #28]
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	699a      	ldr	r2, [r3, #24]
 801782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017830:	441a      	add	r2, r3
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	619a      	str	r2, [r3, #24]
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	68da      	ldr	r2, [r3, #12]
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	699b      	ldr	r3, [r3, #24]
 801783e:	429a      	cmp	r2, r3
 8017840:	bf38      	it	cc
 8017842:	461a      	movcc	r2, r3
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	60da      	str	r2, [r3, #12]
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	681a      	ldr	r2, [r3, #0]
 801784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801784e:	441a      	add	r2, r3
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	601a      	str	r2, [r3, #0]
 8017854:	687a      	ldr	r2, [r7, #4]
 8017856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017858:	1ad3      	subs	r3, r2, r3
 801785a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	2b00      	cmp	r3, #0
 8017860:	f47f aeb6 	bne.w	80175d0 <f_write+0x8e>
 8017864:	e000      	b.n	8017868 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017866:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	7d1b      	ldrb	r3, [r3, #20]
 801786c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017870:	b2da      	uxtb	r2, r3
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017876:	693b      	ldr	r3, [r7, #16]
 8017878:	2100      	movs	r1, #0
 801787a:	4618      	mov	r0, r3
 801787c:	f7fd ffef 	bl	801585e <unlock_fs>
 8017880:	2300      	movs	r3, #0
}
 8017882:	4618      	mov	r0, r3
 8017884:	3730      	adds	r7, #48	@ 0x30
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}

0801788a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801788a:	b580      	push	{r7, lr}
 801788c:	b086      	sub	sp, #24
 801788e:	af00      	add	r7, sp, #0
 8017890:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f107 0208 	add.w	r2, r7, #8
 8017898:	4611      	mov	r1, r2
 801789a:	4618      	mov	r0, r3
 801789c:	f7ff fbe4 	bl	8017068 <validate>
 80178a0:	4603      	mov	r3, r0
 80178a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80178a4:	7dfb      	ldrb	r3, [r7, #23]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d16d      	bne.n	8017986 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	7d1b      	ldrb	r3, [r3, #20]
 80178ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d067      	beq.n	8017986 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	7d1b      	ldrb	r3, [r3, #20]
 80178ba:	b25b      	sxtb	r3, r3
 80178bc:	2b00      	cmp	r3, #0
 80178be:	da1a      	bge.n	80178f6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	7858      	ldrb	r0, [r3, #1]
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	6a1a      	ldr	r2, [r3, #32]
 80178ce:	2301      	movs	r3, #1
 80178d0:	f7fd fe70 	bl	80155b4 <disk_write>
 80178d4:	4603      	mov	r3, r0
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d006      	beq.n	80178e8 <f_sync+0x5e>
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	2101      	movs	r1, #1
 80178de:	4618      	mov	r0, r3
 80178e0:	f7fd ffbd 	bl	801585e <unlock_fs>
 80178e4:	2301      	movs	r3, #1
 80178e6:	e055      	b.n	8017994 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	7d1b      	ldrb	r3, [r3, #20]
 80178ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80178f0:	b2da      	uxtb	r2, r3
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80178f6:	f7fb f989 	bl	8012c0c <get_fattime>
 80178fa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80178fc:	68ba      	ldr	r2, [r7, #8]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017902:	4619      	mov	r1, r3
 8017904:	4610      	mov	r0, r2
 8017906:	f7fe f975 	bl	8015bf4 <move_window>
 801790a:	4603      	mov	r3, r0
 801790c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801790e:	7dfb      	ldrb	r3, [r7, #23]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d138      	bne.n	8017986 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017918:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	330b      	adds	r3, #11
 801791e:	781a      	ldrb	r2, [r3, #0]
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	330b      	adds	r3, #11
 8017924:	f042 0220 	orr.w	r2, r2, #32
 8017928:	b2d2      	uxtb	r2, r2
 801792a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6818      	ldr	r0, [r3, #0]
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	689b      	ldr	r3, [r3, #8]
 8017934:	461a      	mov	r2, r3
 8017936:	68f9      	ldr	r1, [r7, #12]
 8017938:	f7fe fe7f 	bl	801663a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	f103 021c 	add.w	r2, r3, #28
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	4619      	mov	r1, r3
 8017948:	4610      	mov	r0, r2
 801794a:	f7fd fec8 	bl	80156de <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	3316      	adds	r3, #22
 8017952:	6939      	ldr	r1, [r7, #16]
 8017954:	4618      	mov	r0, r3
 8017956:	f7fd fec2 	bl	80156de <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	3312      	adds	r3, #18
 801795e:	2100      	movs	r1, #0
 8017960:	4618      	mov	r0, r3
 8017962:	f7fd fea1 	bl	80156a8 <st_word>
					fs->wflag = 1;
 8017966:	68bb      	ldr	r3, [r7, #8]
 8017968:	2201      	movs	r2, #1
 801796a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	4618      	mov	r0, r3
 8017970:	f7fe f96e 	bl	8015c50 <sync_fs>
 8017974:	4603      	mov	r3, r0
 8017976:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	7d1b      	ldrb	r3, [r3, #20]
 801797c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017980:	b2da      	uxtb	r2, r3
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	7dfa      	ldrb	r2, [r7, #23]
 801798a:	4611      	mov	r1, r2
 801798c:	4618      	mov	r0, r3
 801798e:	f7fd ff66 	bl	801585e <unlock_fs>
 8017992:	7dfb      	ldrb	r3, [r7, #23]
}
 8017994:	4618      	mov	r0, r3
 8017996:	3718      	adds	r7, #24
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b084      	sub	sp, #16
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80179a4:	6878      	ldr	r0, [r7, #4]
 80179a6:	f7ff ff70 	bl	801788a <f_sync>
 80179aa:	4603      	mov	r3, r0
 80179ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80179ae:	7bfb      	ldrb	r3, [r7, #15]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d11d      	bne.n	80179f0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f107 0208 	add.w	r2, r7, #8
 80179ba:	4611      	mov	r1, r2
 80179bc:	4618      	mov	r0, r3
 80179be:	f7ff fb53 	bl	8017068 <validate>
 80179c2:	4603      	mov	r3, r0
 80179c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80179c6:	7bfb      	ldrb	r3, [r7, #15]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d111      	bne.n	80179f0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	691b      	ldr	r3, [r3, #16]
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7fe f86b 	bl	8015aac <dec_lock>
 80179d6:	4603      	mov	r3, r0
 80179d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80179da:	7bfb      	ldrb	r3, [r7, #15]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d102      	bne.n	80179e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2200      	movs	r2, #0
 80179e4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80179e6:	68bb      	ldr	r3, [r7, #8]
 80179e8:	2100      	movs	r1, #0
 80179ea:	4618      	mov	r0, r3
 80179ec:	f7fd ff37 	bl	801585e <unlock_fs>
#endif
		}
	}
	return res;
 80179f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3710      	adds	r7, #16
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}

080179fa <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80179fa:	b580      	push	{r7, lr}
 80179fc:	b09e      	sub	sp, #120	@ 0x78
 80179fe:	af00      	add	r7, sp, #0
 8017a00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8017a02:	2300      	movs	r3, #0
 8017a04:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8017a06:	f107 010c 	add.w	r1, r7, #12
 8017a0a:	1d3b      	adds	r3, r7, #4
 8017a0c:	2202      	movs	r2, #2
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f7ff f8d6 	bl	8016bc0 <find_volume>
 8017a14:	4603      	mov	r3, r0
 8017a16:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8017a1e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	f040 808e 	bne.w	8017b44 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8017a28:	687a      	ldr	r2, [r7, #4]
 8017a2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8017a2e:	4611      	mov	r1, r2
 8017a30:	4618      	mov	r0, r3
 8017a32:	f7fe ffb9 	bl	80169a8 <follow_path>
 8017a36:	4603      	mov	r3, r0
 8017a38:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8017a3c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d108      	bne.n	8017a56 <f_unlink+0x5c>
 8017a44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8017a48:	2102      	movs	r1, #2
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7fd ff22 	bl	8015894 <chk_lock>
 8017a50:	4603      	mov	r3, r0
 8017a52:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8017a56:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d172      	bne.n	8017b44 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8017a5e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8017a62:	b25b      	sxtb	r3, r3
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	da03      	bge.n	8017a70 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8017a68:	2306      	movs	r3, #6
 8017a6a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8017a6e:	e008      	b.n	8017a82 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8017a70:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8017a74:	f003 0301 	and.w	r3, r3, #1
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d002      	beq.n	8017a82 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8017a7c:	2307      	movs	r3, #7
 8017a7e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8017a82:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d134      	bne.n	8017af4 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017a8e:	4611      	mov	r1, r2
 8017a90:	4618      	mov	r0, r3
 8017a92:	f7fe fdb3 	bl	80165fc <ld_clust>
 8017a96:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8017a98:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8017a9c:	f003 0310 	and.w	r3, r3, #16
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d027      	beq.n	8017af4 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8017aa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017aaa:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8017aac:	f107 0310 	add.w	r3, r7, #16
 8017ab0:	2100      	movs	r1, #0
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7fe fc1b 	bl	80162ee <dir_sdi>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8017abe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d116      	bne.n	8017af4 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8017ac6:	f107 0310 	add.w	r3, r7, #16
 8017aca:	2100      	movs	r1, #0
 8017acc:	4618      	mov	r0, r3
 8017ace:	f7fe fdd4 	bl	801667a <dir_read>
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8017ad8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d102      	bne.n	8017ae6 <f_unlink+0xec>
 8017ae0:	2307      	movs	r3, #7
 8017ae2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8017ae6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017aea:	2b04      	cmp	r3, #4
 8017aec:	d102      	bne.n	8017af4 <f_unlink+0xfa>
 8017aee:	2300      	movs	r3, #0
 8017af0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8017af4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d123      	bne.n	8017b44 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8017afc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8017b00:	4618      	mov	r0, r3
 8017b02:	f7fe fe9e 	bl	8016842 <dir_remove>
 8017b06:	4603      	mov	r3, r0
 8017b08:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8017b0c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d10c      	bne.n	8017b2e <f_unlink+0x134>
 8017b14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d009      	beq.n	8017b2e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8017b1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8017b1e:	2200      	movs	r2, #0
 8017b20:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8017b22:	4618      	mov	r0, r3
 8017b24:	f7fe fab2 	bl	801608c <remove_chain>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8017b2e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d106      	bne.n	8017b44 <f_unlink+0x14a>
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f7fe f889 	bl	8015c50 <sync_fs>
 8017b3e:	4603      	mov	r3, r0
 8017b40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8017b4a:	4611      	mov	r1, r2
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7fd fe86 	bl	801585e <unlock_fs>
 8017b52:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	3778      	adds	r7, #120	@ 0x78
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}

08017b5e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8017b5e:	b580      	push	{r7, lr}
 8017b60:	b096      	sub	sp, #88	@ 0x58
 8017b62:	af00      	add	r7, sp, #0
 8017b64:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8017b66:	f107 0108 	add.w	r1, r7, #8
 8017b6a:	1d3b      	adds	r3, r7, #4
 8017b6c:	2202      	movs	r2, #2
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f7ff f826 	bl	8016bc0 <find_volume>
 8017b74:	4603      	mov	r3, r0
 8017b76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8017b7a:	68bb      	ldr	r3, [r7, #8]
 8017b7c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8017b7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	f040 80ec 	bne.w	8017d60 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8017b88:	687a      	ldr	r2, [r7, #4]
 8017b8a:	f107 030c 	add.w	r3, r7, #12
 8017b8e:	4611      	mov	r1, r2
 8017b90:	4618      	mov	r0, r3
 8017b92:	f7fe ff09 	bl	80169a8 <follow_path>
 8017b96:	4603      	mov	r3, r0
 8017b98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d102      	bne.n	8017baa <f_mkdir+0x4c>
 8017ba4:	2308      	movs	r3, #8
 8017ba6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8017baa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017bae:	2b04      	cmp	r3, #4
 8017bb0:	f040 80d6 	bne.w	8017d60 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8017bb4:	f107 030c 	add.w	r3, r7, #12
 8017bb8:	2100      	movs	r1, #0
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7fe facb 	bl	8016156 <create_chain>
 8017bc0:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017bc2:	68bb      	ldr	r3, [r7, #8]
 8017bc4:	895b      	ldrh	r3, [r3, #10]
 8017bc6:	025b      	lsls	r3, r3, #9
 8017bc8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8017bca:	2300      	movs	r3, #0
 8017bcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d102      	bne.n	8017bdc <f_mkdir+0x7e>
 8017bd6:	2307      	movs	r3, #7
 8017bd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8017bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017bde:	2b01      	cmp	r3, #1
 8017be0:	d102      	bne.n	8017be8 <f_mkdir+0x8a>
 8017be2:	2302      	movs	r3, #2
 8017be4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bee:	d102      	bne.n	8017bf6 <f_mkdir+0x98>
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8017bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d106      	bne.n	8017c0c <f_mkdir+0xae>
 8017bfe:	68bb      	ldr	r3, [r7, #8]
 8017c00:	4618      	mov	r0, r3
 8017c02:	f7fd ffb3 	bl	8015b6c <sync_window>
 8017c06:	4603      	mov	r3, r0
 8017c08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8017c0c:	f7fa fffe 	bl	8012c0c <get_fattime>
 8017c10:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8017c12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d16a      	bne.n	8017cf0 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8017c1a:	68bb      	ldr	r3, [r7, #8]
 8017c1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7fe f884 	bl	8015d2c <clust2sect>
 8017c24:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	3334      	adds	r3, #52	@ 0x34
 8017c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8017c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c30:	2100      	movs	r1, #0
 8017c32:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017c34:	f7fd fda0 	bl	8015778 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8017c38:	220b      	movs	r2, #11
 8017c3a:	2120      	movs	r1, #32
 8017c3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017c3e:	f7fd fd9b 	bl	8015778 <mem_set>
					dir[DIR_Name] = '.';
 8017c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c44:	222e      	movs	r2, #46	@ 0x2e
 8017c46:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8017c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c4a:	330b      	adds	r3, #11
 8017c4c:	2210      	movs	r2, #16
 8017c4e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8017c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c52:	3316      	adds	r3, #22
 8017c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017c56:	4618      	mov	r0, r3
 8017c58:	f7fd fd41 	bl	80156de <st_dword>
					st_clust(fs, dir, dcl);
 8017c5c:	68bb      	ldr	r3, [r7, #8]
 8017c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017c60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017c62:	4618      	mov	r0, r3
 8017c64:	f7fe fce9 	bl	801663a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8017c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c6a:	3320      	adds	r3, #32
 8017c6c:	2220      	movs	r2, #32
 8017c6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7fd fd60 	bl	8015736 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c78:	3321      	adds	r3, #33	@ 0x21
 8017c7a:	222e      	movs	r2, #46	@ 0x2e
 8017c7c:	701a      	strb	r2, [r3, #0]
 8017c7e:	697b      	ldr	r3, [r7, #20]
 8017c80:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	781b      	ldrb	r3, [r3, #0]
 8017c86:	2b03      	cmp	r3, #3
 8017c88:	d106      	bne.n	8017c98 <f_mkdir+0x13a>
 8017c8a:	68bb      	ldr	r3, [r7, #8]
 8017c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017c90:	429a      	cmp	r2, r3
 8017c92:	d101      	bne.n	8017c98 <f_mkdir+0x13a>
 8017c94:	2300      	movs	r3, #0
 8017c96:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8017c98:	68b8      	ldr	r0, [r7, #8]
 8017c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c9c:	3320      	adds	r3, #32
 8017c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017ca0:	4619      	mov	r1, r3
 8017ca2:	f7fe fcca 	bl	801663a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	895b      	ldrh	r3, [r3, #10]
 8017caa:	653b      	str	r3, [r7, #80]	@ 0x50
 8017cac:	e01b      	b.n	8017ce6 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8017cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cb0:	1c5a      	adds	r2, r3, #1
 8017cb2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8017cb4:	68ba      	ldr	r2, [r7, #8]
 8017cb6:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	2201      	movs	r2, #1
 8017cbc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f7fd ff53 	bl	8015b6c <sync_window>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8017ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d10c      	bne.n	8017cee <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8017cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017cd8:	2100      	movs	r1, #0
 8017cda:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017cdc:	f7fd fd4c 	bl	8015778 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ce2:	3b01      	subs	r3, #1
 8017ce4:	653b      	str	r3, [r7, #80]	@ 0x50
 8017ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d1e0      	bne.n	8017cae <f_mkdir+0x150>
 8017cec:	e000      	b.n	8017cf0 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8017cee:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8017cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d107      	bne.n	8017d08 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8017cf8:	f107 030c 	add.w	r3, r7, #12
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f7fe fd6e 	bl	80167de <dir_register>
 8017d02:	4603      	mov	r3, r0
 8017d04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8017d08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d120      	bne.n	8017d52 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8017d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8017d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d16:	3316      	adds	r3, #22
 8017d18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	f7fd fcdf 	bl	80156de <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017d24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7fe fc87 	bl	801663a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8017d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d2e:	330b      	adds	r3, #11
 8017d30:	2210      	movs	r2, #16
 8017d32:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8017d34:	68bb      	ldr	r3, [r7, #8]
 8017d36:	2201      	movs	r2, #1
 8017d38:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8017d3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d10e      	bne.n	8017d60 <f_mkdir+0x202>
					res = sync_fs(fs);
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7fd ff83 	bl	8015c50 <sync_fs>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8017d50:	e006      	b.n	8017d60 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8017d52:	f107 030c 	add.w	r3, r7, #12
 8017d56:	2200      	movs	r2, #0
 8017d58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7fe f996 	bl	801608c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8017d66:	4611      	mov	r1, r2
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f7fd fd78 	bl	801585e <unlock_fs>
 8017d6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	3758      	adds	r7, #88	@ 0x58
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
	...

08017d7c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8017d7c:	b590      	push	{r4, r7, lr}
 8017d7e:	b09d      	sub	sp, #116	@ 0x74
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	607a      	str	r2, [r7, #4]
 8017d86:	603b      	str	r3, [r7, #0]
 8017d88:	460b      	mov	r3, r1
 8017d8a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8017d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017d94:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8017d96:	f107 030c 	add.w	r3, r7, #12
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7fe fe75 	bl	8016a8a <get_ldnumber>
 8017da0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	da02      	bge.n	8017dae <f_mkfs+0x32>
 8017da8:	230b      	movs	r3, #11
 8017daa:	f000 bc0d 	b.w	80185c8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8017dae:	4a94      	ldr	r2, [pc, #592]	@ (8018000 <f_mkfs+0x284>)
 8017db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d005      	beq.n	8017dc6 <f_mkfs+0x4a>
 8017dba:	4a91      	ldr	r2, [pc, #580]	@ (8018000 <f_mkfs+0x284>)
 8017dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8017dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017dc8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8017dcc:	2300      	movs	r3, #0
 8017dce:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8017dd2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7fd fba6 	bl	8015528 <disk_initialize>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8017de2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8017de6:	f003 0301 	and.w	r3, r3, #1
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d001      	beq.n	8017df2 <f_mkfs+0x76>
 8017dee:	2303      	movs	r3, #3
 8017df0:	e3ea      	b.n	80185c8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8017df2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8017df6:	f003 0304 	and.w	r3, r3, #4
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d001      	beq.n	8017e02 <f_mkfs+0x86>
 8017dfe:	230a      	movs	r3, #10
 8017e00:	e3e2      	b.n	80185c8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8017e02:	f107 0214 	add.w	r2, r7, #20
 8017e06:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017e0a:	2103      	movs	r1, #3
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f7fd fbf1 	bl	80155f4 <disk_ioctl>
 8017e12:	4603      	mov	r3, r0
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d10c      	bne.n	8017e32 <f_mkfs+0xb6>
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d009      	beq.n	8017e32 <f_mkfs+0xb6>
 8017e1e:	697b      	ldr	r3, [r7, #20]
 8017e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017e24:	d805      	bhi.n	8017e32 <f_mkfs+0xb6>
 8017e26:	697b      	ldr	r3, [r7, #20]
 8017e28:	1e5a      	subs	r2, r3, #1
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	4013      	ands	r3, r2
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d001      	beq.n	8017e36 <f_mkfs+0xba>
 8017e32:	2301      	movs	r3, #1
 8017e34:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8017e36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017e3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d003      	beq.n	8017e4a <f_mkfs+0xce>
 8017e42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017e44:	687a      	ldr	r2, [r7, #4]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d309      	bcc.n	8017e5e <f_mkfs+0xe2>
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017e50:	d805      	bhi.n	8017e5e <f_mkfs+0xe2>
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	1e5a      	subs	r2, r3, #1
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	4013      	ands	r3, r2
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d001      	beq.n	8017e62 <f_mkfs+0xe6>
 8017e5e:	2313      	movs	r3, #19
 8017e60:	e3b2      	b.n	80185c8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8017e62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017e64:	687a      	ldr	r2, [r7, #4]
 8017e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e6a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8017e70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8017e7c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e80:	fb02 f303 	mul.w	r3, r2, r3
 8017e84:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8017e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d101      	bne.n	8017e90 <f_mkfs+0x114>
 8017e8c:	230e      	movs	r3, #14
 8017e8e:	e39b      	b.n	80185c8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8017e90:	f107 0210 	add.w	r2, r7, #16
 8017e94:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017e98:	2101      	movs	r1, #1
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7fd fbaa 	bl	80155f4 <disk_ioctl>
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d001      	beq.n	8017eaa <f_mkfs+0x12e>
 8017ea6:	2301      	movs	r3, #1
 8017ea8:	e38e      	b.n	80185c8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8017eaa:	7afb      	ldrb	r3, [r7, #11]
 8017eac:	f003 0308 	and.w	r3, r3, #8
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d001      	beq.n	8017eb8 <f_mkfs+0x13c>
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	e000      	b.n	8017eba <f_mkfs+0x13e>
 8017eb8:	233f      	movs	r3, #63	@ 0x3f
 8017eba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8017ebc:	693b      	ldr	r3, [r7, #16]
 8017ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d901      	bls.n	8017ec8 <f_mkfs+0x14c>
 8017ec4:	230e      	movs	r3, #14
 8017ec6:	e37f      	b.n	80185c8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8017ec8:	693a      	ldr	r2, [r7, #16]
 8017eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ecc:	1ad3      	subs	r3, r2, r3
 8017ece:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8017ed0:	693b      	ldr	r3, [r7, #16]
 8017ed2:	2b7f      	cmp	r3, #127	@ 0x7f
 8017ed4:	d801      	bhi.n	8017eda <f_mkfs+0x15e>
 8017ed6:	230e      	movs	r3, #14
 8017ed8:	e376      	b.n	80185c8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	2b80      	cmp	r3, #128	@ 0x80
 8017ede:	d901      	bls.n	8017ee4 <f_mkfs+0x168>
 8017ee0:	2313      	movs	r3, #19
 8017ee2:	e371      	b.n	80185c8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8017ee4:	7afb      	ldrb	r3, [r7, #11]
 8017ee6:	f003 0302 	and.w	r3, r3, #2
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d00d      	beq.n	8017f0a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8017eee:	7afb      	ldrb	r3, [r7, #11]
 8017ef0:	f003 0307 	and.w	r3, r3, #7
 8017ef4:	2b02      	cmp	r3, #2
 8017ef6:	d004      	beq.n	8017f02 <f_mkfs+0x186>
 8017ef8:	7afb      	ldrb	r3, [r7, #11]
 8017efa:	f003 0301 	and.w	r3, r3, #1
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d103      	bne.n	8017f0a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8017f02:	2303      	movs	r3, #3
 8017f04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8017f08:	e009      	b.n	8017f1e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8017f0a:	7afb      	ldrb	r3, [r7, #11]
 8017f0c:	f003 0301 	and.w	r3, r3, #1
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d101      	bne.n	8017f18 <f_mkfs+0x19c>
 8017f14:	2313      	movs	r3, #19
 8017f16:	e357      	b.n	80185c8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8017f18:	2302      	movs	r3, #2
 8017f1a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8017f22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017f26:	2b03      	cmp	r3, #3
 8017f28:	d13c      	bne.n	8017fa4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8017f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d11b      	bne.n	8017f68 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8017f30:	693b      	ldr	r3, [r7, #16]
 8017f32:	0c5b      	lsrs	r3, r3, #17
 8017f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8017f36:	2300      	movs	r3, #0
 8017f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8017f3e:	e005      	b.n	8017f4c <f_mkfs+0x1d0>
 8017f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f42:	3301      	adds	r3, #1
 8017f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f48:	005b      	lsls	r3, r3, #1
 8017f4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8017f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8018004 <f_mkfs+0x288>)
 8017f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d007      	beq.n	8017f68 <f_mkfs+0x1ec>
 8017f58:	4a2a      	ldr	r2, [pc, #168]	@ (8018004 <f_mkfs+0x288>)
 8017f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017f60:	461a      	mov	r2, r3
 8017f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017f64:	4293      	cmp	r3, r2
 8017f66:	d2eb      	bcs.n	8017f40 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8017f68:	693a      	ldr	r2, [r7, #16]
 8017f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f70:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8017f72:	6a3b      	ldr	r3, [r7, #32]
 8017f74:	3302      	adds	r3, #2
 8017f76:	009a      	lsls	r2, r3, #2
 8017f78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017f7a:	4413      	add	r3, r2
 8017f7c:	1e5a      	subs	r2, r3, #1
 8017f7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f84:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8017f86:	2320      	movs	r3, #32
 8017f88:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8017f8e:	6a3b      	ldr	r3, [r7, #32]
 8017f90:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8017f94:	4293      	cmp	r3, r2
 8017f96:	d903      	bls.n	8017fa0 <f_mkfs+0x224>
 8017f98:	6a3b      	ldr	r3, [r7, #32]
 8017f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8018008 <f_mkfs+0x28c>)
 8017f9c:	4293      	cmp	r3, r2
 8017f9e:	d952      	bls.n	8018046 <f_mkfs+0x2ca>
 8017fa0:	230e      	movs	r3, #14
 8017fa2:	e311      	b.n	80185c8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8017fa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d11b      	bne.n	8017fe2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8017faa:	693b      	ldr	r3, [r7, #16]
 8017fac:	0b1b      	lsrs	r3, r3, #12
 8017fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017fb4:	2301      	movs	r3, #1
 8017fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8017fb8:	e005      	b.n	8017fc6 <f_mkfs+0x24a>
 8017fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fc2:	005b      	lsls	r3, r3, #1
 8017fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8017fc6:	4a11      	ldr	r2, [pc, #68]	@ (801800c <f_mkfs+0x290>)
 8017fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d007      	beq.n	8017fe2 <f_mkfs+0x266>
 8017fd2:	4a0e      	ldr	r2, [pc, #56]	@ (801800c <f_mkfs+0x290>)
 8017fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017fda:	461a      	mov	r2, r3
 8017fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017fde:	4293      	cmp	r3, r2
 8017fe0:	d2eb      	bcs.n	8017fba <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8017fe2:	693a      	ldr	r2, [r7, #16]
 8017fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8017fea:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8017fec:	6a3b      	ldr	r3, [r7, #32]
 8017fee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8017ff2:	4293      	cmp	r3, r2
 8017ff4:	d90c      	bls.n	8018010 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8017ff6:	6a3b      	ldr	r3, [r7, #32]
 8017ff8:	3302      	adds	r3, #2
 8017ffa:	005b      	lsls	r3, r3, #1
 8017ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017ffe:	e012      	b.n	8018026 <f_mkfs+0x2aa>
 8018000:	20002498 	.word	0x20002498
 8018004:	0801f564 	.word	0x0801f564
 8018008:	0ffffff5 	.word	0x0ffffff5
 801800c:	0801f574 	.word	0x0801f574
				} else {
					fmt = FS_FAT12;
 8018010:	2301      	movs	r3, #1
 8018012:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8018016:	6a3a      	ldr	r2, [r7, #32]
 8018018:	4613      	mov	r3, r2
 801801a:	005b      	lsls	r3, r3, #1
 801801c:	4413      	add	r3, r2
 801801e:	3301      	adds	r3, #1
 8018020:	085b      	lsrs	r3, r3, #1
 8018022:	3303      	adds	r3, #3
 8018024:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8018026:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801802a:	4413      	add	r3, r2
 801802c:	1e5a      	subs	r2, r3, #1
 801802e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018030:	fbb2 f3f3 	udiv	r3, r2, r3
 8018034:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8018036:	2301      	movs	r3, #1
 8018038:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801803a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801803c:	015a      	lsls	r2, r3, #5
 801803e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018040:	fbb2 f3f3 	udiv	r3, r2, r3
 8018044:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8018046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801804a:	4413      	add	r3, r2
 801804c:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801804e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018050:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018052:	fb03 f202 	mul.w	r2, r3, r2
 8018056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018058:	4413      	add	r3, r2
 801805a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801805c:	4413      	add	r3, r2
 801805e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8018060:	697a      	ldr	r2, [r7, #20]
 8018062:	69fb      	ldr	r3, [r7, #28]
 8018064:	4413      	add	r3, r2
 8018066:	1e5a      	subs	r2, r3, #1
 8018068:	697b      	ldr	r3, [r7, #20]
 801806a:	425b      	negs	r3, r3
 801806c:	401a      	ands	r2, r3
 801806e:	69fb      	ldr	r3, [r7, #28]
 8018070:	1ad3      	subs	r3, r2, r3
 8018072:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8018074:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018078:	2b03      	cmp	r3, #3
 801807a:	d108      	bne.n	801808e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 801807c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801807e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018080:	4413      	add	r3, r2
 8018082:	657b      	str	r3, [r7, #84]	@ 0x54
 8018084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018088:	4413      	add	r3, r2
 801808a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801808c:	e006      	b.n	801809c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801808e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018092:	fbb2 f3f3 	udiv	r3, r2, r3
 8018096:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8018098:	4413      	add	r3, r2
 801809a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801809c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801809e:	011a      	lsls	r2, r3, #4
 80180a0:	69fb      	ldr	r3, [r7, #28]
 80180a2:	441a      	add	r2, r3
 80180a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180a6:	1ad2      	subs	r2, r2, r3
 80180a8:	693b      	ldr	r3, [r7, #16]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d901      	bls.n	80180b2 <f_mkfs+0x336>
 80180ae:	230e      	movs	r3, #14
 80180b0:	e28a      	b.n	80185c8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80180b2:	693a      	ldr	r2, [r7, #16]
 80180b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80180b6:	1ad2      	subs	r2, r2, r3
 80180b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80180ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80180bc:	fb01 f303 	mul.w	r3, r1, r3
 80180c0:	1ad2      	subs	r2, r2, r3
 80180c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80180c4:	1ad2      	subs	r2, r2, r3
 80180c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80180c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80180cc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80180ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80180d2:	2b03      	cmp	r3, #3
 80180d4:	d10f      	bne.n	80180f6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80180d6:	6a3b      	ldr	r3, [r7, #32]
 80180d8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80180dc:	4293      	cmp	r3, r2
 80180de:	d80a      	bhi.n	80180f6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d105      	bne.n	80180f2 <f_mkfs+0x376>
 80180e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80180e8:	085b      	lsrs	r3, r3, #1
 80180ea:	607b      	str	r3, [r7, #4]
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d144      	bne.n	801817c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80180f2:	230e      	movs	r3, #14
 80180f4:	e268      	b.n	80185c8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80180f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80180fa:	2b02      	cmp	r3, #2
 80180fc:	d133      	bne.n	8018166 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80180fe:	6a3b      	ldr	r3, [r7, #32]
 8018100:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8018104:	4293      	cmp	r3, r2
 8018106:	d91e      	bls.n	8018146 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d107      	bne.n	801811e <f_mkfs+0x3a2>
 801810e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018110:	005b      	lsls	r3, r3, #1
 8018112:	2b40      	cmp	r3, #64	@ 0x40
 8018114:	d803      	bhi.n	801811e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8018116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018118:	005b      	lsls	r3, r3, #1
 801811a:	607b      	str	r3, [r7, #4]
 801811c:	e033      	b.n	8018186 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801811e:	7afb      	ldrb	r3, [r7, #11]
 8018120:	f003 0302 	and.w	r3, r3, #2
 8018124:	2b00      	cmp	r3, #0
 8018126:	d003      	beq.n	8018130 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8018128:	2303      	movs	r3, #3
 801812a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801812e:	e02a      	b.n	8018186 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d105      	bne.n	8018142 <f_mkfs+0x3c6>
 8018136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018138:	005b      	lsls	r3, r3, #1
 801813a:	607b      	str	r3, [r7, #4]
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	2b80      	cmp	r3, #128	@ 0x80
 8018140:	d91e      	bls.n	8018180 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8018142:	230e      	movs	r3, #14
 8018144:	e240      	b.n	80185c8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8018146:	6a3b      	ldr	r3, [r7, #32]
 8018148:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801814c:	4293      	cmp	r3, r2
 801814e:	d80a      	bhi.n	8018166 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d105      	bne.n	8018162 <f_mkfs+0x3e6>
 8018156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018158:	005b      	lsls	r3, r3, #1
 801815a:	607b      	str	r3, [r7, #4]
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2b80      	cmp	r3, #128	@ 0x80
 8018160:	d910      	bls.n	8018184 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8018162:	230e      	movs	r3, #14
 8018164:	e230      	b.n	80185c8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8018166:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801816a:	2b01      	cmp	r3, #1
 801816c:	d10c      	bne.n	8018188 <f_mkfs+0x40c>
 801816e:	6a3b      	ldr	r3, [r7, #32]
 8018170:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8018174:	4293      	cmp	r3, r2
 8018176:	d907      	bls.n	8018188 <f_mkfs+0x40c>
 8018178:	230e      	movs	r3, #14
 801817a:	e225      	b.n	80185c8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801817c:	bf00      	nop
 801817e:	e6ce      	b.n	8017f1e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8018180:	bf00      	nop
 8018182:	e6cc      	b.n	8017f1e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8018184:	bf00      	nop
			pau = au;
 8018186:	e6ca      	b.n	8017f1e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8018188:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801818a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801818c:	461a      	mov	r2, r3
 801818e:	2100      	movs	r1, #0
 8018190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018192:	f7fd faf1 	bl	8015778 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8018196:	220b      	movs	r2, #11
 8018198:	49b2      	ldr	r1, [pc, #712]	@ (8018464 <f_mkfs+0x6e8>)
 801819a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801819c:	f7fd facb 	bl	8015736 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80181a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181a2:	330b      	adds	r3, #11
 80181a4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80181a6:	4611      	mov	r1, r2
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7fd fa7d 	bl	80156a8 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80181ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181b0:	330d      	adds	r3, #13
 80181b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80181b4:	b2d2      	uxtb	r2, r2
 80181b6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80181b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181ba:	330e      	adds	r3, #14
 80181bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80181be:	b292      	uxth	r2, r2
 80181c0:	4611      	mov	r1, r2
 80181c2:	4618      	mov	r0, r3
 80181c4:	f7fd fa70 	bl	80156a8 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80181c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181ca:	3310      	adds	r3, #16
 80181cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80181ce:	b2d2      	uxtb	r2, r2
 80181d0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80181d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181d4:	f103 0211 	add.w	r2, r3, #17
 80181d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80181dc:	2b03      	cmp	r3, #3
 80181de:	d002      	beq.n	80181e6 <f_mkfs+0x46a>
 80181e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80181e2:	b29b      	uxth	r3, r3
 80181e4:	e000      	b.n	80181e8 <f_mkfs+0x46c>
 80181e6:	2300      	movs	r3, #0
 80181e8:	4619      	mov	r1, r3
 80181ea:	4610      	mov	r0, r2
 80181ec:	f7fd fa5c 	bl	80156a8 <st_word>
		if (sz_vol < 0x10000) {
 80181f0:	693b      	ldr	r3, [r7, #16]
 80181f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80181f6:	d208      	bcs.n	801820a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80181f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181fa:	3313      	adds	r3, #19
 80181fc:	693a      	ldr	r2, [r7, #16]
 80181fe:	b292      	uxth	r2, r2
 8018200:	4611      	mov	r1, r2
 8018202:	4618      	mov	r0, r3
 8018204:	f7fd fa50 	bl	80156a8 <st_word>
 8018208:	e006      	b.n	8018218 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801820a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801820c:	3320      	adds	r3, #32
 801820e:	693a      	ldr	r2, [r7, #16]
 8018210:	4611      	mov	r1, r2
 8018212:	4618      	mov	r0, r3
 8018214:	f7fd fa63 	bl	80156de <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8018218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801821a:	3315      	adds	r3, #21
 801821c:	22f8      	movs	r2, #248	@ 0xf8
 801821e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8018220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018222:	3318      	adds	r3, #24
 8018224:	213f      	movs	r1, #63	@ 0x3f
 8018226:	4618      	mov	r0, r3
 8018228:	f7fd fa3e 	bl	80156a8 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 801822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801822e:	331a      	adds	r3, #26
 8018230:	21ff      	movs	r1, #255	@ 0xff
 8018232:	4618      	mov	r0, r3
 8018234:	f7fd fa38 	bl	80156a8 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8018238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801823a:	331c      	adds	r3, #28
 801823c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801823e:	4618      	mov	r0, r3
 8018240:	f7fd fa4d 	bl	80156de <st_dword>
		if (fmt == FS_FAT32) {
 8018244:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018248:	2b03      	cmp	r3, #3
 801824a:	d131      	bne.n	80182b0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 801824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801824e:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8018252:	f7fa fcdb 	bl	8012c0c <get_fattime>
 8018256:	4603      	mov	r3, r0
 8018258:	4619      	mov	r1, r3
 801825a:	4620      	mov	r0, r4
 801825c:	f7fd fa3f 	bl	80156de <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8018260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018262:	3324      	adds	r3, #36	@ 0x24
 8018264:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018266:	4618      	mov	r0, r3
 8018268:	f7fd fa39 	bl	80156de <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801826e:	332c      	adds	r3, #44	@ 0x2c
 8018270:	2102      	movs	r1, #2
 8018272:	4618      	mov	r0, r3
 8018274:	f7fd fa33 	bl	80156de <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8018278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801827a:	3330      	adds	r3, #48	@ 0x30
 801827c:	2101      	movs	r1, #1
 801827e:	4618      	mov	r0, r3
 8018280:	f7fd fa12 	bl	80156a8 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8018284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018286:	3332      	adds	r3, #50	@ 0x32
 8018288:	2106      	movs	r1, #6
 801828a:	4618      	mov	r0, r3
 801828c:	f7fd fa0c 	bl	80156a8 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8018290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018292:	3340      	adds	r3, #64	@ 0x40
 8018294:	2280      	movs	r2, #128	@ 0x80
 8018296:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8018298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801829a:	3342      	adds	r3, #66	@ 0x42
 801829c:	2229      	movs	r2, #41	@ 0x29
 801829e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80182a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182a2:	3347      	adds	r3, #71	@ 0x47
 80182a4:	2213      	movs	r2, #19
 80182a6:	4970      	ldr	r1, [pc, #448]	@ (8018468 <f_mkfs+0x6ec>)
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7fd fa44 	bl	8015736 <mem_cpy>
 80182ae:	e020      	b.n	80182f2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80182b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182b2:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 80182b6:	f7fa fca9 	bl	8012c0c <get_fattime>
 80182ba:	4603      	mov	r3, r0
 80182bc:	4619      	mov	r1, r3
 80182be:	4620      	mov	r0, r4
 80182c0:	f7fd fa0d 	bl	80156de <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80182c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182c6:	3316      	adds	r3, #22
 80182c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80182ca:	b292      	uxth	r2, r2
 80182cc:	4611      	mov	r1, r2
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7fd f9ea 	bl	80156a8 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80182d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182d6:	3324      	adds	r3, #36	@ 0x24
 80182d8:	2280      	movs	r2, #128	@ 0x80
 80182da:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80182dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182de:	3326      	adds	r3, #38	@ 0x26
 80182e0:	2229      	movs	r2, #41	@ 0x29
 80182e2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80182e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182e6:	332b      	adds	r3, #43	@ 0x2b
 80182e8:	2213      	movs	r2, #19
 80182ea:	4960      	ldr	r1, [pc, #384]	@ (801846c <f_mkfs+0x6f0>)
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7fd fa22 	bl	8015736 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80182f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80182f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7fd f9d3 	bl	80156a8 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8018302:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8018306:	2301      	movs	r3, #1
 8018308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801830a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801830c:	f7fd f952 	bl	80155b4 <disk_write>
 8018310:	4603      	mov	r3, r0
 8018312:	2b00      	cmp	r3, #0
 8018314:	d001      	beq.n	801831a <f_mkfs+0x59e>
 8018316:	2301      	movs	r3, #1
 8018318:	e156      	b.n	80185c8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801831a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801831e:	2b03      	cmp	r3, #3
 8018320:	d140      	bne.n	80183a4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8018322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018324:	1d9a      	adds	r2, r3, #6
 8018326:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801832a:	2301      	movs	r3, #1
 801832c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801832e:	f7fd f941 	bl	80155b4 <disk_write>
			mem_set(buf, 0, ss);
 8018332:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018334:	461a      	mov	r2, r3
 8018336:	2100      	movs	r1, #0
 8018338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801833a:	f7fd fa1d 	bl	8015778 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801833e:	494c      	ldr	r1, [pc, #304]	@ (8018470 <f_mkfs+0x6f4>)
 8018340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018342:	f7fd f9cc 	bl	80156de <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8018346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018348:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801834c:	4949      	ldr	r1, [pc, #292]	@ (8018474 <f_mkfs+0x6f8>)
 801834e:	4618      	mov	r0, r3
 8018350:	f7fd f9c5 	bl	80156de <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8018354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018356:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801835a:	6a3b      	ldr	r3, [r7, #32]
 801835c:	3b01      	subs	r3, #1
 801835e:	4619      	mov	r1, r3
 8018360:	4610      	mov	r0, r2
 8018362:	f7fd f9bc 	bl	80156de <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8018366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018368:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801836c:	2102      	movs	r1, #2
 801836e:	4618      	mov	r0, r3
 8018370:	f7fd f9b5 	bl	80156de <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8018374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018376:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801837a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801837e:	4618      	mov	r0, r3
 8018380:	f7fd f992 	bl	80156a8 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8018384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018386:	1dda      	adds	r2, r3, #7
 8018388:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801838c:	2301      	movs	r3, #1
 801838e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018390:	f7fd f910 	bl	80155b4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8018394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018396:	1c5a      	adds	r2, r3, #1
 8018398:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801839c:	2301      	movs	r3, #1
 801839e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80183a0:	f7fd f908 	bl	80155b4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80183a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80183a6:	2100      	movs	r1, #0
 80183a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80183aa:	f7fd f9e5 	bl	8015778 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80183ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80183b0:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80183b2:	2300      	movs	r3, #0
 80183b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80183b6:	e04b      	b.n	8018450 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80183b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80183bc:	2b03      	cmp	r3, #3
 80183be:	d113      	bne.n	80183e8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80183c0:	f06f 0107 	mvn.w	r1, #7
 80183c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80183c6:	f7fd f98a 	bl	80156de <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80183ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183cc:	3304      	adds	r3, #4
 80183ce:	f04f 31ff 	mov.w	r1, #4294967295
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7fd f983 	bl	80156de <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80183d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183da:	3308      	adds	r3, #8
 80183dc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7fd f97c 	bl	80156de <st_dword>
 80183e6:	e00b      	b.n	8018400 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80183e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80183ec:	2b01      	cmp	r3, #1
 80183ee:	d101      	bne.n	80183f4 <f_mkfs+0x678>
 80183f0:	4b21      	ldr	r3, [pc, #132]	@ (8018478 <f_mkfs+0x6fc>)
 80183f2:	e001      	b.n	80183f8 <f_mkfs+0x67c>
 80183f4:	f06f 0307 	mvn.w	r3, #7
 80183f8:	4619      	mov	r1, r3
 80183fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80183fc:	f7fd f96f 	bl	80156de <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8018400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018402:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8018404:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018408:	4293      	cmp	r3, r2
 801840a:	bf28      	it	cs
 801840c:	4613      	movcs	r3, r2
 801840e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8018410:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8018414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018416:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018418:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801841a:	f7fd f8cb 	bl	80155b4 <disk_write>
 801841e:	4603      	mov	r3, r0
 8018420:	2b00      	cmp	r3, #0
 8018422:	d001      	beq.n	8018428 <f_mkfs+0x6ac>
 8018424:	2301      	movs	r3, #1
 8018426:	e0cf      	b.n	80185c8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8018428:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801842a:	461a      	mov	r2, r3
 801842c:	2100      	movs	r1, #0
 801842e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018430:	f7fd f9a2 	bl	8015778 <mem_set>
				sect += n; nsect -= n;
 8018434:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018438:	4413      	add	r3, r2
 801843a:	667b      	str	r3, [r7, #100]	@ 0x64
 801843c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801843e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018440:	1ad3      	subs	r3, r2, r3
 8018442:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8018444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018446:	2b00      	cmp	r3, #0
 8018448:	d1dc      	bne.n	8018404 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801844a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801844c:	3301      	adds	r3, #1
 801844e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018454:	429a      	cmp	r2, r3
 8018456:	d3af      	bcc.n	80183b8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8018458:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801845c:	2b03      	cmp	r3, #3
 801845e:	d10d      	bne.n	801847c <f_mkfs+0x700>
 8018460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018462:	e00c      	b.n	801847e <f_mkfs+0x702>
 8018464:	0801f474 	.word	0x0801f474
 8018468:	0801f480 	.word	0x0801f480
 801846c:	0801f494 	.word	0x0801f494
 8018470:	41615252 	.word	0x41615252
 8018474:	61417272 	.word	0x61417272
 8018478:	00fffff8 	.word	0x00fffff8
 801847c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801847e:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8018480:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018484:	4293      	cmp	r3, r2
 8018486:	bf28      	it	cs
 8018488:	4613      	movcs	r3, r2
 801848a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801848c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8018490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018492:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8018494:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018496:	f7fd f88d 	bl	80155b4 <disk_write>
 801849a:	4603      	mov	r3, r0
 801849c:	2b00      	cmp	r3, #0
 801849e:	d001      	beq.n	80184a4 <f_mkfs+0x728>
 80184a0:	2301      	movs	r3, #1
 80184a2:	e091      	b.n	80185c8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80184a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80184a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80184a8:	4413      	add	r3, r2
 80184aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80184ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80184ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80184b0:	1ad3      	subs	r3, r2, r3
 80184b2:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 80184b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d1e2      	bne.n	8018480 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80184ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80184be:	2b03      	cmp	r3, #3
 80184c0:	d103      	bne.n	80184ca <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80184c2:	230c      	movs	r3, #12
 80184c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80184c8:	e010      	b.n	80184ec <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80184ca:	693b      	ldr	r3, [r7, #16]
 80184cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80184d0:	d303      	bcc.n	80184da <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80184d2:	2306      	movs	r3, #6
 80184d4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80184d8:	e008      	b.n	80184ec <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80184da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80184de:	2b02      	cmp	r3, #2
 80184e0:	d101      	bne.n	80184e6 <f_mkfs+0x76a>
 80184e2:	2304      	movs	r3, #4
 80184e4:	e000      	b.n	80184e8 <f_mkfs+0x76c>
 80184e6:	2301      	movs	r3, #1
 80184e8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80184ec:	7afb      	ldrb	r3, [r7, #11]
 80184ee:	f003 0308 	and.w	r3, r3, #8
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d15b      	bne.n	80185ae <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80184f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80184f8:	461a      	mov	r2, r3
 80184fa:	2100      	movs	r1, #0
 80184fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80184fe:	f7fd f93b 	bl	8015778 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8018502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018504:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8018508:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801850c:	4618      	mov	r0, r3
 801850e:	f7fd f8cb 	bl	80156a8 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8018512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018514:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8018518:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801851a:	69bb      	ldr	r3, [r7, #24]
 801851c:	2200      	movs	r2, #0
 801851e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8018520:	69bb      	ldr	r3, [r7, #24]
 8018522:	3301      	adds	r3, #1
 8018524:	2201      	movs	r2, #1
 8018526:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8018528:	69bb      	ldr	r3, [r7, #24]
 801852a:	3302      	adds	r3, #2
 801852c:	2201      	movs	r2, #1
 801852e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8018530:	69bb      	ldr	r3, [r7, #24]
 8018532:	3303      	adds	r3, #3
 8018534:	2200      	movs	r2, #0
 8018536:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8018538:	69bb      	ldr	r3, [r7, #24]
 801853a:	3304      	adds	r3, #4
 801853c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8018540:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8018542:	693a      	ldr	r2, [r7, #16]
 8018544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018546:	441a      	add	r2, r3
 8018548:	4b21      	ldr	r3, [pc, #132]	@ (80185d0 <f_mkfs+0x854>)
 801854a:	fba3 1302 	umull	r1, r3, r3, r2
 801854e:	1ad2      	subs	r2, r2, r3
 8018550:	0852      	lsrs	r2, r2, #1
 8018552:	4413      	add	r3, r2
 8018554:	0b5b      	lsrs	r3, r3, #13
 8018556:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8018558:	69bb      	ldr	r3, [r7, #24]
 801855a:	3305      	adds	r3, #5
 801855c:	22fe      	movs	r2, #254	@ 0xfe
 801855e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8018560:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018562:	089b      	lsrs	r3, r3, #2
 8018564:	b2da      	uxtb	r2, r3
 8018566:	69bb      	ldr	r3, [r7, #24]
 8018568:	3306      	adds	r3, #6
 801856a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 801856e:	b2d2      	uxtb	r2, r2
 8018570:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8018572:	69bb      	ldr	r3, [r7, #24]
 8018574:	3307      	adds	r3, #7
 8018576:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018578:	b2d2      	uxtb	r2, r2
 801857a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 801857c:	69bb      	ldr	r3, [r7, #24]
 801857e:	3308      	adds	r3, #8
 8018580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018582:	4618      	mov	r0, r3
 8018584:	f7fd f8ab 	bl	80156de <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8018588:	69bb      	ldr	r3, [r7, #24]
 801858a:	330c      	adds	r3, #12
 801858c:	693a      	ldr	r2, [r7, #16]
 801858e:	4611      	mov	r1, r2
 8018590:	4618      	mov	r0, r3
 8018592:	f7fd f8a4 	bl	80156de <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8018596:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801859a:	2301      	movs	r3, #1
 801859c:	2200      	movs	r2, #0
 801859e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80185a0:	f7fd f808 	bl	80155b4 <disk_write>
 80185a4:	4603      	mov	r3, r0
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d001      	beq.n	80185ae <f_mkfs+0x832>
 80185aa:	2301      	movs	r3, #1
 80185ac:	e00c      	b.n	80185c8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80185ae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80185b2:	2200      	movs	r2, #0
 80185b4:	2100      	movs	r1, #0
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7fd f81c 	bl	80155f4 <disk_ioctl>
 80185bc:	4603      	mov	r3, r0
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d001      	beq.n	80185c6 <f_mkfs+0x84a>
 80185c2:	2301      	movs	r3, #1
 80185c4:	e000      	b.n	80185c8 <f_mkfs+0x84c>

	return FR_OK;
 80185c6:	2300      	movs	r3, #0
}
 80185c8:	4618      	mov	r0, r3
 80185ca:	3774      	adds	r7, #116	@ 0x74
 80185cc:	46bd      	mov	sp, r7
 80185ce:	bd90      	pop	{r4, r7, pc}
 80185d0:	0515565b 	.word	0x0515565b

080185d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80185d4:	b480      	push	{r7}
 80185d6:	b087      	sub	sp, #28
 80185d8:	af00      	add	r7, sp, #0
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	4613      	mov	r3, r2
 80185e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80185e2:	2301      	movs	r3, #1
 80185e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80185e6:	2300      	movs	r3, #0
 80185e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80185ea:	4b1f      	ldr	r3, [pc, #124]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 80185ec:	7a5b      	ldrb	r3, [r3, #9]
 80185ee:	b2db      	uxtb	r3, r3
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d131      	bne.n	8018658 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80185f4:	4b1c      	ldr	r3, [pc, #112]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 80185f6:	7a5b      	ldrb	r3, [r3, #9]
 80185f8:	b2db      	uxtb	r3, r3
 80185fa:	461a      	mov	r2, r3
 80185fc:	4b1a      	ldr	r3, [pc, #104]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 80185fe:	2100      	movs	r1, #0
 8018600:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018602:	4b19      	ldr	r3, [pc, #100]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 8018604:	7a5b      	ldrb	r3, [r3, #9]
 8018606:	b2db      	uxtb	r3, r3
 8018608:	4a17      	ldr	r2, [pc, #92]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 801860a:	009b      	lsls	r3, r3, #2
 801860c:	4413      	add	r3, r2
 801860e:	68fa      	ldr	r2, [r7, #12]
 8018610:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018612:	4b15      	ldr	r3, [pc, #84]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 8018614:	7a5b      	ldrb	r3, [r3, #9]
 8018616:	b2db      	uxtb	r3, r3
 8018618:	461a      	mov	r2, r3
 801861a:	4b13      	ldr	r3, [pc, #76]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 801861c:	4413      	add	r3, r2
 801861e:	79fa      	ldrb	r2, [r7, #7]
 8018620:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018622:	4b11      	ldr	r3, [pc, #68]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 8018624:	7a5b      	ldrb	r3, [r3, #9]
 8018626:	b2db      	uxtb	r3, r3
 8018628:	1c5a      	adds	r2, r3, #1
 801862a:	b2d1      	uxtb	r1, r2
 801862c:	4a0e      	ldr	r2, [pc, #56]	@ (8018668 <FATFS_LinkDriverEx+0x94>)
 801862e:	7251      	strb	r1, [r2, #9]
 8018630:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018632:	7dbb      	ldrb	r3, [r7, #22]
 8018634:	3330      	adds	r3, #48	@ 0x30
 8018636:	b2da      	uxtb	r2, r3
 8018638:	68bb      	ldr	r3, [r7, #8]
 801863a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801863c:	68bb      	ldr	r3, [r7, #8]
 801863e:	3301      	adds	r3, #1
 8018640:	223a      	movs	r2, #58	@ 0x3a
 8018642:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018644:	68bb      	ldr	r3, [r7, #8]
 8018646:	3302      	adds	r3, #2
 8018648:	222f      	movs	r2, #47	@ 0x2f
 801864a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	3303      	adds	r3, #3
 8018650:	2200      	movs	r2, #0
 8018652:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018654:	2300      	movs	r3, #0
 8018656:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018658:	7dfb      	ldrb	r3, [r7, #23]
}
 801865a:	4618      	mov	r0, r3
 801865c:	371c      	adds	r7, #28
 801865e:	46bd      	mov	sp, r7
 8018660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018664:	4770      	bx	lr
 8018666:	bf00      	nop
 8018668:	200024c0 	.word	0x200024c0

0801866c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b082      	sub	sp, #8
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
 8018674:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018676:	2200      	movs	r2, #0
 8018678:	6839      	ldr	r1, [r7, #0]
 801867a:	6878      	ldr	r0, [r7, #4]
 801867c:	f7ff ffaa 	bl	80185d4 <FATFS_LinkDriverEx>
 8018680:	4603      	mov	r3, r0
}
 8018682:	4618      	mov	r0, r3
 8018684:	3708      	adds	r7, #8
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}

0801868a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801868a:	b580      	push	{r7, lr}
 801868c:	b086      	sub	sp, #24
 801868e:	af00      	add	r7, sp, #0
 8018690:	4603      	mov	r3, r0
 8018692:	6039      	str	r1, [r7, #0]
 8018694:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8018696:	2300      	movs	r3, #0
 8018698:	60fb      	str	r3, [r7, #12]
 801869a:	2300      	movs	r3, #0
 801869c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801869e:	f107 030c 	add.w	r3, r7, #12
 80186a2:	2101      	movs	r1, #1
 80186a4:	4618      	mov	r0, r3
 80186a6:	f000 f8e9 	bl	801887c <osSemaphoreCreate>
 80186aa:	4602      	mov	r2, r0
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	bf14      	ite	ne
 80186b8:	2301      	movne	r3, #1
 80186ba:	2300      	moveq	r3, #0
 80186bc:	b2db      	uxtb	r3, r3
 80186be:	617b      	str	r3, [r7, #20]

    return ret;
 80186c0:	697b      	ldr	r3, [r7, #20]
}
 80186c2:	4618      	mov	r0, r3
 80186c4:	3718      	adds	r7, #24
 80186c6:	46bd      	mov	sp, r7
 80186c8:	bd80      	pop	{r7, pc}

080186ca <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80186ca:	b580      	push	{r7, lr}
 80186cc:	b082      	sub	sp, #8
 80186ce:	af00      	add	r7, sp, #0
 80186d0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	f000 f996 	bl	8018a04 <osSemaphoreDelete>
#endif
    return 1;
 80186d8:	2301      	movs	r3, #1
}
 80186da:	4618      	mov	r0, r3
 80186dc:	3708      	adds	r7, #8
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}

080186e2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80186e2:	b580      	push	{r7, lr}
 80186e4:	b084      	sub	sp, #16
 80186e6:	af00      	add	r7, sp, #0
 80186e8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80186ea:	2300      	movs	r3, #0
 80186ec:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80186ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f000 f902 	bl	80188fc <osSemaphoreWait>
 80186f8:	4603      	mov	r3, r0
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d101      	bne.n	8018702 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80186fe:	2301      	movs	r3, #1
 8018700:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8018702:	68fb      	ldr	r3, [r7, #12]
}
 8018704:	4618      	mov	r0, r3
 8018706:	3710      	adds	r7, #16
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}

0801870c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b082      	sub	sp, #8
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8018714:	6878      	ldr	r0, [r7, #4]
 8018716:	f000 f93f 	bl	8018998 <osSemaphoreRelease>
#endif
}
 801871a:	bf00      	nop
 801871c:	3708      	adds	r7, #8
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}

08018722 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018722:	b480      	push	{r7}
 8018724:	b085      	sub	sp, #20
 8018726:	af00      	add	r7, sp, #0
 8018728:	4603      	mov	r3, r0
 801872a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801872c:	2300      	movs	r3, #0
 801872e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8018730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018734:	2b84      	cmp	r3, #132	@ 0x84
 8018736:	d005      	beq.n	8018744 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8018738:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	4413      	add	r3, r2
 8018740:	3303      	adds	r3, #3
 8018742:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8018744:	68fb      	ldr	r3, [r7, #12]
}
 8018746:	4618      	mov	r0, r3
 8018748:	3714      	adds	r7, #20
 801874a:	46bd      	mov	sp, r7
 801874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018750:	4770      	bx	lr

08018752 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8018752:	b480      	push	{r7}
 8018754:	b083      	sub	sp, #12
 8018756:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018758:	f3ef 8305 	mrs	r3, IPSR
 801875c:	607b      	str	r3, [r7, #4]
  return(result);
 801875e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8018760:	2b00      	cmp	r3, #0
 8018762:	bf14      	ite	ne
 8018764:	2301      	movne	r3, #1
 8018766:	2300      	moveq	r3, #0
 8018768:	b2db      	uxtb	r3, r3
}
 801876a:	4618      	mov	r0, r3
 801876c:	370c      	adds	r7, #12
 801876e:	46bd      	mov	sp, r7
 8018770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018774:	4770      	bx	lr

08018776 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8018776:	b580      	push	{r7, lr}
 8018778:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801877a:	f001 fd33 	bl	801a1e4 <vTaskStartScheduler>
  
  return osOK;
 801877e:	2300      	movs	r3, #0
}
 8018780:	4618      	mov	r0, r3
 8018782:	bd80      	pop	{r7, pc}

08018784 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8018788:	f002 f994 	bl	801aab4 <xTaskGetSchedulerState>
 801878c:	4603      	mov	r3, r0
 801878e:	2b01      	cmp	r3, #1
 8018790:	d101      	bne.n	8018796 <osKernelRunning+0x12>
    return 0;
 8018792:	2300      	movs	r3, #0
 8018794:	e000      	b.n	8018798 <osKernelRunning+0x14>
  else
    return 1;
 8018796:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8018798:	4618      	mov	r0, r3
 801879a:	bd80      	pop	{r7, pc}

0801879c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80187a0:	f7ff ffd7 	bl	8018752 <inHandlerMode>
 80187a4:	4603      	mov	r3, r0
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d003      	beq.n	80187b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80187aa:	f001 fe3f 	bl	801a42c <xTaskGetTickCountFromISR>
 80187ae:	4603      	mov	r3, r0
 80187b0:	e002      	b.n	80187b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80187b2:	f001 fe2b 	bl	801a40c <xTaskGetTickCount>
 80187b6:	4603      	mov	r3, r0
  }
}
 80187b8:	4618      	mov	r0, r3
 80187ba:	bd80      	pop	{r7, pc}

080187bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80187bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187be:	b089      	sub	sp, #36	@ 0x24
 80187c0:	af04      	add	r7, sp, #16
 80187c2:	6078      	str	r0, [r7, #4]
 80187c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	695b      	ldr	r3, [r3, #20]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d020      	beq.n	8018810 <osThreadCreate+0x54>
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	699b      	ldr	r3, [r3, #24]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d01c      	beq.n	8018810 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	685c      	ldr	r4, [r3, #4]
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	691e      	ldr	r6, [r3, #16]
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80187e8:	4618      	mov	r0, r3
 80187ea:	f7ff ff9a 	bl	8018722 <makeFreeRtosPriority>
 80187ee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	695b      	ldr	r3, [r3, #20]
 80187f4:	687a      	ldr	r2, [r7, #4]
 80187f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80187f8:	9202      	str	r2, [sp, #8]
 80187fa:	9301      	str	r3, [sp, #4]
 80187fc:	9100      	str	r1, [sp, #0]
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	4632      	mov	r2, r6
 8018802:	4629      	mov	r1, r5
 8018804:	4620      	mov	r0, r4
 8018806:	f001 fb0b 	bl	8019e20 <xTaskCreateStatic>
 801880a:	4603      	mov	r3, r0
 801880c:	60fb      	str	r3, [r7, #12]
 801880e:	e01c      	b.n	801884a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	685c      	ldr	r4, [r3, #4]
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801881c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018824:	4618      	mov	r0, r3
 8018826:	f7ff ff7c 	bl	8018722 <makeFreeRtosPriority>
 801882a:	4602      	mov	r2, r0
 801882c:	f107 030c 	add.w	r3, r7, #12
 8018830:	9301      	str	r3, [sp, #4]
 8018832:	9200      	str	r2, [sp, #0]
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	4632      	mov	r2, r6
 8018838:	4629      	mov	r1, r5
 801883a:	4620      	mov	r0, r4
 801883c:	f001 fb56 	bl	8019eec <xTaskCreate>
 8018840:	4603      	mov	r3, r0
 8018842:	2b01      	cmp	r3, #1
 8018844:	d001      	beq.n	801884a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8018846:	2300      	movs	r3, #0
 8018848:	e000      	b.n	801884c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801884a:	68fb      	ldr	r3, [r7, #12]
}
 801884c:	4618      	mov	r0, r3
 801884e:	3714      	adds	r7, #20
 8018850:	46bd      	mov	sp, r7
 8018852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018854 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b084      	sub	sp, #16
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d001      	beq.n	801886a <osDelay+0x16>
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	e000      	b.n	801886c <osDelay+0x18>
 801886a:	2301      	movs	r3, #1
 801886c:	4618      	mov	r0, r3
 801886e:	f001 fc81 	bl	801a174 <vTaskDelay>
  
  return osOK;
 8018872:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8018874:	4618      	mov	r0, r3
 8018876:	3710      	adds	r7, #16
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}

0801887c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801887c:	b580      	push	{r7, lr}
 801887e:	b086      	sub	sp, #24
 8018880:	af02      	add	r7, sp, #8
 8018882:	6078      	str	r0, [r7, #4]
 8018884:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	685b      	ldr	r3, [r3, #4]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d016      	beq.n	80188bc <osSemaphoreCreate+0x40>
    if (count == 1) {
 801888e:	683b      	ldr	r3, [r7, #0]
 8018890:	2b01      	cmp	r3, #1
 8018892:	d10a      	bne.n	80188aa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	685b      	ldr	r3, [r3, #4]
 8018898:	2203      	movs	r2, #3
 801889a:	9200      	str	r2, [sp, #0]
 801889c:	2200      	movs	r2, #0
 801889e:	2100      	movs	r1, #0
 80188a0:	2001      	movs	r0, #1
 80188a2:	f000 fad5 	bl	8018e50 <xQueueGenericCreateStatic>
 80188a6:	4603      	mov	r3, r0
 80188a8:	e023      	b.n	80188f2 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80188aa:	6838      	ldr	r0, [r7, #0]
 80188ac:	6839      	ldr	r1, [r7, #0]
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	461a      	mov	r2, r3
 80188b4:	f000 fbb5 	bl	8019022 <xQueueCreateCountingSemaphoreStatic>
 80188b8:	4603      	mov	r3, r0
 80188ba:	e01a      	b.n	80188f2 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	2b01      	cmp	r3, #1
 80188c0:	d110      	bne.n	80188e4 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80188c2:	2203      	movs	r2, #3
 80188c4:	2100      	movs	r1, #0
 80188c6:	2001      	movs	r0, #1
 80188c8:	f000 fb49 	bl	8018f5e <xQueueGenericCreate>
 80188cc:	60f8      	str	r0, [r7, #12]
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d005      	beq.n	80188e0 <osSemaphoreCreate+0x64>
 80188d4:	2300      	movs	r3, #0
 80188d6:	2200      	movs	r2, #0
 80188d8:	2100      	movs	r1, #0
 80188da:	68f8      	ldr	r0, [r7, #12]
 80188dc:	f000 fc18 	bl	8019110 <xQueueGenericSend>
      return sema;
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	e006      	b.n	80188f2 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80188e4:	683b      	ldr	r3, [r7, #0]
 80188e6:	683a      	ldr	r2, [r7, #0]
 80188e8:	4611      	mov	r1, r2
 80188ea:	4618      	mov	r0, r3
 80188ec:	f000 fbd6 	bl	801909c <xQueueCreateCountingSemaphore>
 80188f0:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80188f2:	4618      	mov	r0, r3
 80188f4:	3710      	adds	r7, #16
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bd80      	pop	{r7, pc}
	...

080188fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b084      	sub	sp, #16
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
 8018904:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8018906:	2300      	movs	r3, #0
 8018908:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d101      	bne.n	8018914 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8018910:	2380      	movs	r3, #128	@ 0x80
 8018912:	e03a      	b.n	801898a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8018914:	2300      	movs	r3, #0
 8018916:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801891e:	d103      	bne.n	8018928 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8018920:	f04f 33ff 	mov.w	r3, #4294967295
 8018924:	60fb      	str	r3, [r7, #12]
 8018926:	e009      	b.n	801893c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d006      	beq.n	801893c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801892e:	683b      	ldr	r3, [r7, #0]
 8018930:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d101      	bne.n	801893c <osSemaphoreWait+0x40>
      ticks = 1;
 8018938:	2301      	movs	r3, #1
 801893a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801893c:	f7ff ff09 	bl	8018752 <inHandlerMode>
 8018940:	4603      	mov	r3, r0
 8018942:	2b00      	cmp	r3, #0
 8018944:	d017      	beq.n	8018976 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8018946:	f107 0308 	add.w	r3, r7, #8
 801894a:	461a      	mov	r2, r3
 801894c:	2100      	movs	r1, #0
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f001 f824 	bl	801999c <xQueueReceiveFromISR>
 8018954:	4603      	mov	r3, r0
 8018956:	2b01      	cmp	r3, #1
 8018958:	d001      	beq.n	801895e <osSemaphoreWait+0x62>
      return osErrorOS;
 801895a:	23ff      	movs	r3, #255	@ 0xff
 801895c:	e015      	b.n	801898a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d011      	beq.n	8018988 <osSemaphoreWait+0x8c>
 8018964:	4b0b      	ldr	r3, [pc, #44]	@ (8018994 <osSemaphoreWait+0x98>)
 8018966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801896a:	601a      	str	r2, [r3, #0]
 801896c:	f3bf 8f4f 	dsb	sy
 8018970:	f3bf 8f6f 	isb	sy
 8018974:	e008      	b.n	8018988 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8018976:	68f9      	ldr	r1, [r7, #12]
 8018978:	6878      	ldr	r0, [r7, #4]
 801897a:	f000 fef7 	bl	801976c <xQueueSemaphoreTake>
 801897e:	4603      	mov	r3, r0
 8018980:	2b01      	cmp	r3, #1
 8018982:	d001      	beq.n	8018988 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8018984:	23ff      	movs	r3, #255	@ 0xff
 8018986:	e000      	b.n	801898a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8018988:	2300      	movs	r3, #0
}
 801898a:	4618      	mov	r0, r3
 801898c:	3710      	adds	r7, #16
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop
 8018994:	e000ed04 	.word	0xe000ed04

08018998 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b084      	sub	sp, #16
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80189a0:	2300      	movs	r3, #0
 80189a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80189a4:	2300      	movs	r3, #0
 80189a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80189a8:	f7ff fed3 	bl	8018752 <inHandlerMode>
 80189ac:	4603      	mov	r3, r0
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d016      	beq.n	80189e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80189b2:	f107 0308 	add.w	r3, r7, #8
 80189b6:	4619      	mov	r1, r3
 80189b8:	6878      	ldr	r0, [r7, #4]
 80189ba:	f000 fd56 	bl	801946a <xQueueGiveFromISR>
 80189be:	4603      	mov	r3, r0
 80189c0:	2b01      	cmp	r3, #1
 80189c2:	d001      	beq.n	80189c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80189c4:	23ff      	movs	r3, #255	@ 0xff
 80189c6:	e017      	b.n	80189f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d013      	beq.n	80189f6 <osSemaphoreRelease+0x5e>
 80189ce:	4b0c      	ldr	r3, [pc, #48]	@ (8018a00 <osSemaphoreRelease+0x68>)
 80189d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80189d4:	601a      	str	r2, [r3, #0]
 80189d6:	f3bf 8f4f 	dsb	sy
 80189da:	f3bf 8f6f 	isb	sy
 80189de:	e00a      	b.n	80189f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80189e0:	2300      	movs	r3, #0
 80189e2:	2200      	movs	r2, #0
 80189e4:	2100      	movs	r1, #0
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f000 fb92 	bl	8019110 <xQueueGenericSend>
 80189ec:	4603      	mov	r3, r0
 80189ee:	2b01      	cmp	r3, #1
 80189f0:	d001      	beq.n	80189f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80189f2:	23ff      	movs	r3, #255	@ 0xff
 80189f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80189f6:	68fb      	ldr	r3, [r7, #12]
}
 80189f8:	4618      	mov	r0, r3
 80189fa:	3710      	adds	r7, #16
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}
 8018a00:	e000ed04 	.word	0xe000ed04

08018a04 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b082      	sub	sp, #8
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8018a0c:	f7ff fea1 	bl	8018752 <inHandlerMode>
 8018a10:	4603      	mov	r3, r0
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d001      	beq.n	8018a1a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8018a16:	2382      	movs	r3, #130	@ 0x82
 8018a18:	e003      	b.n	8018a22 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8018a1a:	6878      	ldr	r0, [r7, #4]
 8018a1c:	f001 f888 	bl	8019b30 <vQueueDelete>

  return osOK; 
 8018a20:	2300      	movs	r3, #0
}
 8018a22:	4618      	mov	r0, r3
 8018a24:	3708      	adds	r7, #8
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}

08018a2a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8018a2a:	b590      	push	{r4, r7, lr}
 8018a2c:	b085      	sub	sp, #20
 8018a2e:	af02      	add	r7, sp, #8
 8018a30:	6078      	str	r0, [r7, #4]
 8018a32:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	689b      	ldr	r3, [r3, #8]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d011      	beq.n	8018a60 <osMessageCreate+0x36>
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	68db      	ldr	r3, [r3, #12]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d00d      	beq.n	8018a60 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	6818      	ldr	r0, [r3, #0]
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	6859      	ldr	r1, [r3, #4]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	689a      	ldr	r2, [r3, #8]
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	68db      	ldr	r3, [r3, #12]
 8018a54:	2400      	movs	r4, #0
 8018a56:	9400      	str	r4, [sp, #0]
 8018a58:	f000 f9fa 	bl	8018e50 <xQueueGenericCreateStatic>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	e008      	b.n	8018a72 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6818      	ldr	r0, [r3, #0]
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	685b      	ldr	r3, [r3, #4]
 8018a68:	2200      	movs	r2, #0
 8018a6a:	4619      	mov	r1, r3
 8018a6c:	f000 fa77 	bl	8018f5e <xQueueGenericCreate>
 8018a70:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8018a72:	4618      	mov	r0, r3
 8018a74:	370c      	adds	r7, #12
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd90      	pop	{r4, r7, pc}
	...

08018a7c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b086      	sub	sp, #24
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	60f8      	str	r0, [r7, #12]
 8018a84:	60b9      	str	r1, [r7, #8]
 8018a86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8018a88:	2300      	movs	r3, #0
 8018a8a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d101      	bne.n	8018a9a <osMessagePut+0x1e>
    ticks = 1;
 8018a96:	2301      	movs	r3, #1
 8018a98:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8018a9a:	f7ff fe5a 	bl	8018752 <inHandlerMode>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d018      	beq.n	8018ad6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8018aa4:	f107 0210 	add.w	r2, r7, #16
 8018aa8:	f107 0108 	add.w	r1, r7, #8
 8018aac:	2300      	movs	r3, #0
 8018aae:	68f8      	ldr	r0, [r7, #12]
 8018ab0:	f000 fc38 	bl	8019324 <xQueueGenericSendFromISR>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	2b01      	cmp	r3, #1
 8018ab8:	d001      	beq.n	8018abe <osMessagePut+0x42>
      return osErrorOS;
 8018aba:	23ff      	movs	r3, #255	@ 0xff
 8018abc:	e018      	b.n	8018af0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018abe:	693b      	ldr	r3, [r7, #16]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d014      	beq.n	8018aee <osMessagePut+0x72>
 8018ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8018af8 <osMessagePut+0x7c>)
 8018ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018aca:	601a      	str	r2, [r3, #0]
 8018acc:	f3bf 8f4f 	dsb	sy
 8018ad0:	f3bf 8f6f 	isb	sy
 8018ad4:	e00b      	b.n	8018aee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8018ad6:	f107 0108 	add.w	r1, r7, #8
 8018ada:	2300      	movs	r3, #0
 8018adc:	697a      	ldr	r2, [r7, #20]
 8018ade:	68f8      	ldr	r0, [r7, #12]
 8018ae0:	f000 fb16 	bl	8019110 <xQueueGenericSend>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	2b01      	cmp	r3, #1
 8018ae8:	d001      	beq.n	8018aee <osMessagePut+0x72>
      return osErrorOS;
 8018aea:	23ff      	movs	r3, #255	@ 0xff
 8018aec:	e000      	b.n	8018af0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8018aee:	2300      	movs	r3, #0
}
 8018af0:	4618      	mov	r0, r3
 8018af2:	3718      	adds	r7, #24
 8018af4:	46bd      	mov	sp, r7
 8018af6:	bd80      	pop	{r7, pc}
 8018af8:	e000ed04 	.word	0xe000ed04

08018afc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8018afc:	b590      	push	{r4, r7, lr}
 8018afe:	b08b      	sub	sp, #44	@ 0x2c
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	60f8      	str	r0, [r7, #12]
 8018b04:	60b9      	str	r1, [r7, #8]
 8018b06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8018b08:	68bb      	ldr	r3, [r7, #8]
 8018b0a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8018b10:	68bb      	ldr	r3, [r7, #8]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d10a      	bne.n	8018b2c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8018b16:	2380      	movs	r3, #128	@ 0x80
 8018b18:	617b      	str	r3, [r7, #20]
    return event;
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	461c      	mov	r4, r3
 8018b1e:	f107 0314 	add.w	r3, r7, #20
 8018b22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018b2a:	e054      	b.n	8018bd6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8018b30:	2300      	movs	r3, #0
 8018b32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b3a:	d103      	bne.n	8018b44 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8018b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b42:	e009      	b.n	8018b58 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d006      	beq.n	8018b58 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8018b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d101      	bne.n	8018b58 <osMessageGet+0x5c>
      ticks = 1;
 8018b54:	2301      	movs	r3, #1
 8018b56:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8018b58:	f7ff fdfb 	bl	8018752 <inHandlerMode>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d01c      	beq.n	8018b9c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8018b62:	f107 0220 	add.w	r2, r7, #32
 8018b66:	f107 0314 	add.w	r3, r7, #20
 8018b6a:	3304      	adds	r3, #4
 8018b6c:	4619      	mov	r1, r3
 8018b6e:	68b8      	ldr	r0, [r7, #8]
 8018b70:	f000 ff14 	bl	801999c <xQueueReceiveFromISR>
 8018b74:	4603      	mov	r3, r0
 8018b76:	2b01      	cmp	r3, #1
 8018b78:	d102      	bne.n	8018b80 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8018b7a:	2310      	movs	r3, #16
 8018b7c:	617b      	str	r3, [r7, #20]
 8018b7e:	e001      	b.n	8018b84 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8018b80:	2300      	movs	r3, #0
 8018b82:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018b84:	6a3b      	ldr	r3, [r7, #32]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d01d      	beq.n	8018bc6 <osMessageGet+0xca>
 8018b8a:	4b15      	ldr	r3, [pc, #84]	@ (8018be0 <osMessageGet+0xe4>)
 8018b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b90:	601a      	str	r2, [r3, #0]
 8018b92:	f3bf 8f4f 	dsb	sy
 8018b96:	f3bf 8f6f 	isb	sy
 8018b9a:	e014      	b.n	8018bc6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8018b9c:	f107 0314 	add.w	r3, r7, #20
 8018ba0:	3304      	adds	r3, #4
 8018ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ba4:	4619      	mov	r1, r3
 8018ba6:	68b8      	ldr	r0, [r7, #8]
 8018ba8:	f000 fcf8 	bl	801959c <xQueueReceive>
 8018bac:	4603      	mov	r3, r0
 8018bae:	2b01      	cmp	r3, #1
 8018bb0:	d102      	bne.n	8018bb8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8018bb2:	2310      	movs	r3, #16
 8018bb4:	617b      	str	r3, [r7, #20]
 8018bb6:	e006      	b.n	8018bc6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8018bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d101      	bne.n	8018bc2 <osMessageGet+0xc6>
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	e000      	b.n	8018bc4 <osMessageGet+0xc8>
 8018bc2:	2340      	movs	r3, #64	@ 0x40
 8018bc4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	461c      	mov	r4, r3
 8018bca:	f107 0314 	add.w	r3, r7, #20
 8018bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018bd6:	68f8      	ldr	r0, [r7, #12]
 8018bd8:	372c      	adds	r7, #44	@ 0x2c
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd90      	pop	{r4, r7, pc}
 8018bde:	bf00      	nop
 8018be0:	e000ed04 	.word	0xe000ed04

08018be4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b082      	sub	sp, #8
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8018bec:	f7ff fdb1 	bl	8018752 <inHandlerMode>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d004      	beq.n	8018c00 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8018bf6:	6878      	ldr	r0, [r7, #4]
 8018bf8:	f000 ff79 	bl	8019aee <uxQueueMessagesWaitingFromISR>
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	e003      	b.n	8018c08 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8018c00:	6878      	ldr	r0, [r7, #4]
 8018c02:	f000 ff53 	bl	8019aac <uxQueueMessagesWaiting>
 8018c06:	4603      	mov	r3, r0
  }
}
 8018c08:	4618      	mov	r0, r3
 8018c0a:	3708      	adds	r7, #8
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	bd80      	pop	{r7, pc}

08018c10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018c10:	b480      	push	{r7}
 8018c12:	b083      	sub	sp, #12
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	f103 0208 	add.w	r2, r3, #8
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f04f 32ff 	mov.w	r2, #4294967295
 8018c28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f103 0208 	add.w	r2, r3, #8
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	f103 0208 	add.w	r2, r3, #8
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	2200      	movs	r2, #0
 8018c42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018c44:	bf00      	nop
 8018c46:	370c      	adds	r7, #12
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4e:	4770      	bx	lr

08018c50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018c50:	b480      	push	{r7}
 8018c52:	b083      	sub	sp, #12
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018c5e:	bf00      	nop
 8018c60:	370c      	adds	r7, #12
 8018c62:	46bd      	mov	sp, r7
 8018c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c68:	4770      	bx	lr

08018c6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018c6a:	b480      	push	{r7}
 8018c6c:	b085      	sub	sp, #20
 8018c6e:	af00      	add	r7, sp, #0
 8018c70:	6078      	str	r0, [r7, #4]
 8018c72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	685b      	ldr	r3, [r3, #4]
 8018c78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	68fa      	ldr	r2, [r7, #12]
 8018c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	689a      	ldr	r2, [r3, #8]
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	689b      	ldr	r3, [r3, #8]
 8018c8c:	683a      	ldr	r2, [r7, #0]
 8018c8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	683a      	ldr	r2, [r7, #0]
 8018c94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	687a      	ldr	r2, [r7, #4]
 8018c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	1c5a      	adds	r2, r3, #1
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	601a      	str	r2, [r3, #0]
}
 8018ca6:	bf00      	nop
 8018ca8:	3714      	adds	r7, #20
 8018caa:	46bd      	mov	sp, r7
 8018cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb0:	4770      	bx	lr

08018cb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018cb2:	b480      	push	{r7}
 8018cb4:	b085      	sub	sp, #20
 8018cb6:	af00      	add	r7, sp, #0
 8018cb8:	6078      	str	r0, [r7, #4]
 8018cba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018cc8:	d103      	bne.n	8018cd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	691b      	ldr	r3, [r3, #16]
 8018cce:	60fb      	str	r3, [r7, #12]
 8018cd0:	e00c      	b.n	8018cec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	3308      	adds	r3, #8
 8018cd6:	60fb      	str	r3, [r7, #12]
 8018cd8:	e002      	b.n	8018ce0 <vListInsert+0x2e>
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	60fb      	str	r3, [r7, #12]
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	685b      	ldr	r3, [r3, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	68ba      	ldr	r2, [r7, #8]
 8018ce8:	429a      	cmp	r2, r3
 8018cea:	d2f6      	bcs.n	8018cda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	685a      	ldr	r2, [r3, #4]
 8018cf0:	683b      	ldr	r3, [r7, #0]
 8018cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	685b      	ldr	r3, [r3, #4]
 8018cf8:	683a      	ldr	r2, [r7, #0]
 8018cfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018cfc:	683b      	ldr	r3, [r7, #0]
 8018cfe:	68fa      	ldr	r2, [r7, #12]
 8018d00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	683a      	ldr	r2, [r7, #0]
 8018d06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	687a      	ldr	r2, [r7, #4]
 8018d0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	1c5a      	adds	r2, r3, #1
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	601a      	str	r2, [r3, #0]
}
 8018d18:	bf00      	nop
 8018d1a:	3714      	adds	r7, #20
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d22:	4770      	bx	lr

08018d24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018d24:	b480      	push	{r7}
 8018d26:	b085      	sub	sp, #20
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	691b      	ldr	r3, [r3, #16]
 8018d30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	685b      	ldr	r3, [r3, #4]
 8018d36:	687a      	ldr	r2, [r7, #4]
 8018d38:	6892      	ldr	r2, [r2, #8]
 8018d3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	689b      	ldr	r3, [r3, #8]
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	6852      	ldr	r2, [r2, #4]
 8018d44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	685b      	ldr	r3, [r3, #4]
 8018d4a:	687a      	ldr	r2, [r7, #4]
 8018d4c:	429a      	cmp	r2, r3
 8018d4e:	d103      	bne.n	8018d58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	689a      	ldr	r2, [r3, #8]
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	1e5a      	subs	r2, r3, #1
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	681b      	ldr	r3, [r3, #0]
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3714      	adds	r7, #20
 8018d70:	46bd      	mov	sp, r7
 8018d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d76:	4770      	bx	lr

08018d78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b084      	sub	sp, #16
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d10d      	bne.n	8018da8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d90:	b672      	cpsid	i
 8018d92:	f383 8811 	msr	BASEPRI, r3
 8018d96:	f3bf 8f6f 	isb	sy
 8018d9a:	f3bf 8f4f 	dsb	sy
 8018d9e:	b662      	cpsie	i
 8018da0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018da2:	bf00      	nop
 8018da4:	bf00      	nop
 8018da6:	e7fd      	b.n	8018da4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8018da8:	f002 f9d8 	bl	801b15c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	681a      	ldr	r2, [r3, #0]
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018db4:	68f9      	ldr	r1, [r7, #12]
 8018db6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018db8:	fb01 f303 	mul.w	r3, r1, r3
 8018dbc:	441a      	add	r2, r3
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	681a      	ldr	r2, [r3, #0]
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	681a      	ldr	r2, [r3, #0]
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018dd8:	3b01      	subs	r3, #1
 8018dda:	68f9      	ldr	r1, [r7, #12]
 8018ddc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018dde:	fb01 f303 	mul.w	r3, r1, r3
 8018de2:	441a      	add	r2, r3
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	22ff      	movs	r2, #255	@ 0xff
 8018dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	22ff      	movs	r2, #255	@ 0xff
 8018df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d114      	bne.n	8018e28 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	691b      	ldr	r3, [r3, #16]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d01a      	beq.n	8018e3c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	3310      	adds	r3, #16
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f001 fc88 	bl	801a720 <xTaskRemoveFromEventList>
 8018e10:	4603      	mov	r3, r0
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d012      	beq.n	8018e3c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018e16:	4b0d      	ldr	r3, [pc, #52]	@ (8018e4c <xQueueGenericReset+0xd4>)
 8018e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e1c:	601a      	str	r2, [r3, #0]
 8018e1e:	f3bf 8f4f 	dsb	sy
 8018e22:	f3bf 8f6f 	isb	sy
 8018e26:	e009      	b.n	8018e3c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	3310      	adds	r3, #16
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7ff feef 	bl	8018c10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	3324      	adds	r3, #36	@ 0x24
 8018e36:	4618      	mov	r0, r3
 8018e38:	f7ff feea 	bl	8018c10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018e3c:	f002 f9c4 	bl	801b1c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018e40:	2301      	movs	r3, #1
}
 8018e42:	4618      	mov	r0, r3
 8018e44:	3710      	adds	r7, #16
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
 8018e4a:	bf00      	nop
 8018e4c:	e000ed04 	.word	0xe000ed04

08018e50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b08e      	sub	sp, #56	@ 0x38
 8018e54:	af02      	add	r7, sp, #8
 8018e56:	60f8      	str	r0, [r7, #12]
 8018e58:	60b9      	str	r1, [r7, #8]
 8018e5a:	607a      	str	r2, [r7, #4]
 8018e5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d10d      	bne.n	8018e80 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8018e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e68:	b672      	cpsid	i
 8018e6a:	f383 8811 	msr	BASEPRI, r3
 8018e6e:	f3bf 8f6f 	isb	sy
 8018e72:	f3bf 8f4f 	dsb	sy
 8018e76:	b662      	cpsie	i
 8018e78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018e7a:	bf00      	nop
 8018e7c:	bf00      	nop
 8018e7e:	e7fd      	b.n	8018e7c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d10d      	bne.n	8018ea2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8018e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e8a:	b672      	cpsid	i
 8018e8c:	f383 8811 	msr	BASEPRI, r3
 8018e90:	f3bf 8f6f 	isb	sy
 8018e94:	f3bf 8f4f 	dsb	sy
 8018e98:	b662      	cpsie	i
 8018e9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018e9c:	bf00      	nop
 8018e9e:	bf00      	nop
 8018ea0:	e7fd      	b.n	8018e9e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d002      	beq.n	8018eae <xQueueGenericCreateStatic+0x5e>
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d001      	beq.n	8018eb2 <xQueueGenericCreateStatic+0x62>
 8018eae:	2301      	movs	r3, #1
 8018eb0:	e000      	b.n	8018eb4 <xQueueGenericCreateStatic+0x64>
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d10d      	bne.n	8018ed4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8018eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ebc:	b672      	cpsid	i
 8018ebe:	f383 8811 	msr	BASEPRI, r3
 8018ec2:	f3bf 8f6f 	isb	sy
 8018ec6:	f3bf 8f4f 	dsb	sy
 8018eca:	b662      	cpsie	i
 8018ecc:	623b      	str	r3, [r7, #32]
}
 8018ece:	bf00      	nop
 8018ed0:	bf00      	nop
 8018ed2:	e7fd      	b.n	8018ed0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d102      	bne.n	8018ee0 <xQueueGenericCreateStatic+0x90>
 8018eda:	68bb      	ldr	r3, [r7, #8]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d101      	bne.n	8018ee4 <xQueueGenericCreateStatic+0x94>
 8018ee0:	2301      	movs	r3, #1
 8018ee2:	e000      	b.n	8018ee6 <xQueueGenericCreateStatic+0x96>
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d10d      	bne.n	8018f06 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8018eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018eee:	b672      	cpsid	i
 8018ef0:	f383 8811 	msr	BASEPRI, r3
 8018ef4:	f3bf 8f6f 	isb	sy
 8018ef8:	f3bf 8f4f 	dsb	sy
 8018efc:	b662      	cpsie	i
 8018efe:	61fb      	str	r3, [r7, #28]
}
 8018f00:	bf00      	nop
 8018f02:	bf00      	nop
 8018f04:	e7fd      	b.n	8018f02 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018f06:	2348      	movs	r3, #72	@ 0x48
 8018f08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018f0a:	697b      	ldr	r3, [r7, #20]
 8018f0c:	2b48      	cmp	r3, #72	@ 0x48
 8018f0e:	d00d      	beq.n	8018f2c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8018f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f14:	b672      	cpsid	i
 8018f16:	f383 8811 	msr	BASEPRI, r3
 8018f1a:	f3bf 8f6f 	isb	sy
 8018f1e:	f3bf 8f4f 	dsb	sy
 8018f22:	b662      	cpsie	i
 8018f24:	61bb      	str	r3, [r7, #24]
}
 8018f26:	bf00      	nop
 8018f28:	bf00      	nop
 8018f2a:	e7fd      	b.n	8018f28 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018f2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8018f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d00d      	beq.n	8018f54 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f3a:	2201      	movs	r2, #1
 8018f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018f40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8018f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f46:	9300      	str	r3, [sp, #0]
 8018f48:	4613      	mov	r3, r2
 8018f4a:	687a      	ldr	r2, [r7, #4]
 8018f4c:	68b9      	ldr	r1, [r7, #8]
 8018f4e:	68f8      	ldr	r0, [r7, #12]
 8018f50:	f000 f848 	bl	8018fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8018f56:	4618      	mov	r0, r3
 8018f58:	3730      	adds	r7, #48	@ 0x30
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	bd80      	pop	{r7, pc}

08018f5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018f5e:	b580      	push	{r7, lr}
 8018f60:	b08a      	sub	sp, #40	@ 0x28
 8018f62:	af02      	add	r7, sp, #8
 8018f64:	60f8      	str	r0, [r7, #12]
 8018f66:	60b9      	str	r1, [r7, #8]
 8018f68:	4613      	mov	r3, r2
 8018f6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d10d      	bne.n	8018f8e <xQueueGenericCreate+0x30>
	__asm volatile
 8018f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f76:	b672      	cpsid	i
 8018f78:	f383 8811 	msr	BASEPRI, r3
 8018f7c:	f3bf 8f6f 	isb	sy
 8018f80:	f3bf 8f4f 	dsb	sy
 8018f84:	b662      	cpsie	i
 8018f86:	613b      	str	r3, [r7, #16]
}
 8018f88:	bf00      	nop
 8018f8a:	bf00      	nop
 8018f8c:	e7fd      	b.n	8018f8a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8018f8e:	68bb      	ldr	r3, [r7, #8]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d102      	bne.n	8018f9a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018f94:	2300      	movs	r3, #0
 8018f96:	61fb      	str	r3, [r7, #28]
 8018f98:	e004      	b.n	8018fa4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	68ba      	ldr	r2, [r7, #8]
 8018f9e:	fb02 f303 	mul.w	r3, r2, r3
 8018fa2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018fa4:	69fb      	ldr	r3, [r7, #28]
 8018fa6:	3348      	adds	r3, #72	@ 0x48
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f002 fa05 	bl	801b3b8 <pvPortMalloc>
 8018fae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018fb0:	69bb      	ldr	r3, [r7, #24]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d011      	beq.n	8018fda <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018fb6:	69bb      	ldr	r3, [r7, #24]
 8018fb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018fba:	697b      	ldr	r3, [r7, #20]
 8018fbc:	3348      	adds	r3, #72	@ 0x48
 8018fbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018fc0:	69bb      	ldr	r3, [r7, #24]
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018fc8:	79fa      	ldrb	r2, [r7, #7]
 8018fca:	69bb      	ldr	r3, [r7, #24]
 8018fcc:	9300      	str	r3, [sp, #0]
 8018fce:	4613      	mov	r3, r2
 8018fd0:	697a      	ldr	r2, [r7, #20]
 8018fd2:	68b9      	ldr	r1, [r7, #8]
 8018fd4:	68f8      	ldr	r0, [r7, #12]
 8018fd6:	f000 f805 	bl	8018fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018fda:	69bb      	ldr	r3, [r7, #24]
	}
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3720      	adds	r7, #32
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}

08018fe4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b084      	sub	sp, #16
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	60f8      	str	r0, [r7, #12]
 8018fec:	60b9      	str	r1, [r7, #8]
 8018fee:	607a      	str	r2, [r7, #4]
 8018ff0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018ff2:	68bb      	ldr	r3, [r7, #8]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d103      	bne.n	8019000 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018ff8:	69bb      	ldr	r3, [r7, #24]
 8018ffa:	69ba      	ldr	r2, [r7, #24]
 8018ffc:	601a      	str	r2, [r3, #0]
 8018ffe:	e002      	b.n	8019006 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019000:	69bb      	ldr	r3, [r7, #24]
 8019002:	687a      	ldr	r2, [r7, #4]
 8019004:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019006:	69bb      	ldr	r3, [r7, #24]
 8019008:	68fa      	ldr	r2, [r7, #12]
 801900a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801900c:	69bb      	ldr	r3, [r7, #24]
 801900e:	68ba      	ldr	r2, [r7, #8]
 8019010:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019012:	2101      	movs	r1, #1
 8019014:	69b8      	ldr	r0, [r7, #24]
 8019016:	f7ff feaf 	bl	8018d78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801901a:	bf00      	nop
 801901c:	3710      	adds	r7, #16
 801901e:	46bd      	mov	sp, r7
 8019020:	bd80      	pop	{r7, pc}

08019022 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8019022:	b580      	push	{r7, lr}
 8019024:	b08a      	sub	sp, #40	@ 0x28
 8019026:	af02      	add	r7, sp, #8
 8019028:	60f8      	str	r0, [r7, #12]
 801902a:	60b9      	str	r1, [r7, #8]
 801902c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d10d      	bne.n	8019050 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8019034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019038:	b672      	cpsid	i
 801903a:	f383 8811 	msr	BASEPRI, r3
 801903e:	f3bf 8f6f 	isb	sy
 8019042:	f3bf 8f4f 	dsb	sy
 8019046:	b662      	cpsie	i
 8019048:	61bb      	str	r3, [r7, #24]
}
 801904a:	bf00      	nop
 801904c:	bf00      	nop
 801904e:	e7fd      	b.n	801904c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019050:	68ba      	ldr	r2, [r7, #8]
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	429a      	cmp	r2, r3
 8019056:	d90d      	bls.n	8019074 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8019058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801905c:	b672      	cpsid	i
 801905e:	f383 8811 	msr	BASEPRI, r3
 8019062:	f3bf 8f6f 	isb	sy
 8019066:	f3bf 8f4f 	dsb	sy
 801906a:	b662      	cpsie	i
 801906c:	617b      	str	r3, [r7, #20]
}
 801906e:	bf00      	nop
 8019070:	bf00      	nop
 8019072:	e7fd      	b.n	8019070 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019074:	2302      	movs	r3, #2
 8019076:	9300      	str	r3, [sp, #0]
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	2200      	movs	r2, #0
 801907c:	2100      	movs	r1, #0
 801907e:	68f8      	ldr	r0, [r7, #12]
 8019080:	f7ff fee6 	bl	8018e50 <xQueueGenericCreateStatic>
 8019084:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8019086:	69fb      	ldr	r3, [r7, #28]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d002      	beq.n	8019092 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801908c:	69fb      	ldr	r3, [r7, #28]
 801908e:	68ba      	ldr	r2, [r7, #8]
 8019090:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019092:	69fb      	ldr	r3, [r7, #28]
	}
 8019094:	4618      	mov	r0, r3
 8019096:	3720      	adds	r7, #32
 8019098:	46bd      	mov	sp, r7
 801909a:	bd80      	pop	{r7, pc}

0801909c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801909c:	b580      	push	{r7, lr}
 801909e:	b086      	sub	sp, #24
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d10d      	bne.n	80190c8 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80190ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190b0:	b672      	cpsid	i
 80190b2:	f383 8811 	msr	BASEPRI, r3
 80190b6:	f3bf 8f6f 	isb	sy
 80190ba:	f3bf 8f4f 	dsb	sy
 80190be:	b662      	cpsie	i
 80190c0:	613b      	str	r3, [r7, #16]
}
 80190c2:	bf00      	nop
 80190c4:	bf00      	nop
 80190c6:	e7fd      	b.n	80190c4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80190c8:	683a      	ldr	r2, [r7, #0]
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	429a      	cmp	r2, r3
 80190ce:	d90d      	bls.n	80190ec <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80190d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190d4:	b672      	cpsid	i
 80190d6:	f383 8811 	msr	BASEPRI, r3
 80190da:	f3bf 8f6f 	isb	sy
 80190de:	f3bf 8f4f 	dsb	sy
 80190e2:	b662      	cpsie	i
 80190e4:	60fb      	str	r3, [r7, #12]
}
 80190e6:	bf00      	nop
 80190e8:	bf00      	nop
 80190ea:	e7fd      	b.n	80190e8 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80190ec:	2202      	movs	r2, #2
 80190ee:	2100      	movs	r1, #0
 80190f0:	6878      	ldr	r0, [r7, #4]
 80190f2:	f7ff ff34 	bl	8018f5e <xQueueGenericCreate>
 80190f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d002      	beq.n	8019104 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80190fe:	697b      	ldr	r3, [r7, #20]
 8019100:	683a      	ldr	r2, [r7, #0]
 8019102:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019104:	697b      	ldr	r3, [r7, #20]
	}
 8019106:	4618      	mov	r0, r3
 8019108:	3718      	adds	r7, #24
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
	...

08019110 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b08e      	sub	sp, #56	@ 0x38
 8019114:	af00      	add	r7, sp, #0
 8019116:	60f8      	str	r0, [r7, #12]
 8019118:	60b9      	str	r1, [r7, #8]
 801911a:	607a      	str	r2, [r7, #4]
 801911c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801911e:	2300      	movs	r3, #0
 8019120:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8019126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019128:	2b00      	cmp	r3, #0
 801912a:	d10d      	bne.n	8019148 <xQueueGenericSend+0x38>
	__asm volatile
 801912c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019130:	b672      	cpsid	i
 8019132:	f383 8811 	msr	BASEPRI, r3
 8019136:	f3bf 8f6f 	isb	sy
 801913a:	f3bf 8f4f 	dsb	sy
 801913e:	b662      	cpsie	i
 8019140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019142:	bf00      	nop
 8019144:	bf00      	nop
 8019146:	e7fd      	b.n	8019144 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019148:	68bb      	ldr	r3, [r7, #8]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d103      	bne.n	8019156 <xQueueGenericSend+0x46>
 801914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019152:	2b00      	cmp	r3, #0
 8019154:	d101      	bne.n	801915a <xQueueGenericSend+0x4a>
 8019156:	2301      	movs	r3, #1
 8019158:	e000      	b.n	801915c <xQueueGenericSend+0x4c>
 801915a:	2300      	movs	r3, #0
 801915c:	2b00      	cmp	r3, #0
 801915e:	d10d      	bne.n	801917c <xQueueGenericSend+0x6c>
	__asm volatile
 8019160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019164:	b672      	cpsid	i
 8019166:	f383 8811 	msr	BASEPRI, r3
 801916a:	f3bf 8f6f 	isb	sy
 801916e:	f3bf 8f4f 	dsb	sy
 8019172:	b662      	cpsie	i
 8019174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019176:	bf00      	nop
 8019178:	bf00      	nop
 801917a:	e7fd      	b.n	8019178 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801917c:	683b      	ldr	r3, [r7, #0]
 801917e:	2b02      	cmp	r3, #2
 8019180:	d103      	bne.n	801918a <xQueueGenericSend+0x7a>
 8019182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019186:	2b01      	cmp	r3, #1
 8019188:	d101      	bne.n	801918e <xQueueGenericSend+0x7e>
 801918a:	2301      	movs	r3, #1
 801918c:	e000      	b.n	8019190 <xQueueGenericSend+0x80>
 801918e:	2300      	movs	r3, #0
 8019190:	2b00      	cmp	r3, #0
 8019192:	d10d      	bne.n	80191b0 <xQueueGenericSend+0xa0>
	__asm volatile
 8019194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019198:	b672      	cpsid	i
 801919a:	f383 8811 	msr	BASEPRI, r3
 801919e:	f3bf 8f6f 	isb	sy
 80191a2:	f3bf 8f4f 	dsb	sy
 80191a6:	b662      	cpsie	i
 80191a8:	623b      	str	r3, [r7, #32]
}
 80191aa:	bf00      	nop
 80191ac:	bf00      	nop
 80191ae:	e7fd      	b.n	80191ac <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80191b0:	f001 fc80 	bl	801aab4 <xTaskGetSchedulerState>
 80191b4:	4603      	mov	r3, r0
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d102      	bne.n	80191c0 <xQueueGenericSend+0xb0>
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d101      	bne.n	80191c4 <xQueueGenericSend+0xb4>
 80191c0:	2301      	movs	r3, #1
 80191c2:	e000      	b.n	80191c6 <xQueueGenericSend+0xb6>
 80191c4:	2300      	movs	r3, #0
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d10d      	bne.n	80191e6 <xQueueGenericSend+0xd6>
	__asm volatile
 80191ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191ce:	b672      	cpsid	i
 80191d0:	f383 8811 	msr	BASEPRI, r3
 80191d4:	f3bf 8f6f 	isb	sy
 80191d8:	f3bf 8f4f 	dsb	sy
 80191dc:	b662      	cpsie	i
 80191de:	61fb      	str	r3, [r7, #28]
}
 80191e0:	bf00      	nop
 80191e2:	bf00      	nop
 80191e4:	e7fd      	b.n	80191e2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80191e6:	f001 ffb9 	bl	801b15c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80191ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80191ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80191f2:	429a      	cmp	r2, r3
 80191f4:	d302      	bcc.n	80191fc <xQueueGenericSend+0xec>
 80191f6:	683b      	ldr	r3, [r7, #0]
 80191f8:	2b02      	cmp	r3, #2
 80191fa:	d129      	bne.n	8019250 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80191fc:	683a      	ldr	r2, [r7, #0]
 80191fe:	68b9      	ldr	r1, [r7, #8]
 8019200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019202:	f000 fcd3 	bl	8019bac <prvCopyDataToQueue>
 8019206:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801920a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801920c:	2b00      	cmp	r3, #0
 801920e:	d010      	beq.n	8019232 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019212:	3324      	adds	r3, #36	@ 0x24
 8019214:	4618      	mov	r0, r3
 8019216:	f001 fa83 	bl	801a720 <xTaskRemoveFromEventList>
 801921a:	4603      	mov	r3, r0
 801921c:	2b00      	cmp	r3, #0
 801921e:	d013      	beq.n	8019248 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019220:	4b3f      	ldr	r3, [pc, #252]	@ (8019320 <xQueueGenericSend+0x210>)
 8019222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019226:	601a      	str	r2, [r3, #0]
 8019228:	f3bf 8f4f 	dsb	sy
 801922c:	f3bf 8f6f 	isb	sy
 8019230:	e00a      	b.n	8019248 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019234:	2b00      	cmp	r3, #0
 8019236:	d007      	beq.n	8019248 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019238:	4b39      	ldr	r3, [pc, #228]	@ (8019320 <xQueueGenericSend+0x210>)
 801923a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801923e:	601a      	str	r2, [r3, #0]
 8019240:	f3bf 8f4f 	dsb	sy
 8019244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019248:	f001 ffbe 	bl	801b1c8 <vPortExitCritical>
				return pdPASS;
 801924c:	2301      	movs	r3, #1
 801924e:	e063      	b.n	8019318 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d103      	bne.n	801925e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019256:	f001 ffb7 	bl	801b1c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801925a:	2300      	movs	r3, #0
 801925c:	e05c      	b.n	8019318 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801925e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019260:	2b00      	cmp	r3, #0
 8019262:	d106      	bne.n	8019272 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019264:	f107 0314 	add.w	r3, r7, #20
 8019268:	4618      	mov	r0, r3
 801926a:	f001 fabf 	bl	801a7ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801926e:	2301      	movs	r3, #1
 8019270:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019272:	f001 ffa9 	bl	801b1c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019276:	f001 f81b 	bl	801a2b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801927a:	f001 ff6f 	bl	801b15c <vPortEnterCritical>
 801927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019284:	b25b      	sxtb	r3, r3
 8019286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801928a:	d103      	bne.n	8019294 <xQueueGenericSend+0x184>
 801928c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801928e:	2200      	movs	r2, #0
 8019290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801929a:	b25b      	sxtb	r3, r3
 801929c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192a0:	d103      	bne.n	80192aa <xQueueGenericSend+0x19a>
 80192a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192a4:	2200      	movs	r2, #0
 80192a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80192aa:	f001 ff8d 	bl	801b1c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80192ae:	1d3a      	adds	r2, r7, #4
 80192b0:	f107 0314 	add.w	r3, r7, #20
 80192b4:	4611      	mov	r1, r2
 80192b6:	4618      	mov	r0, r3
 80192b8:	f001 faae 	bl	801a818 <xTaskCheckForTimeOut>
 80192bc:	4603      	mov	r3, r0
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d124      	bne.n	801930c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80192c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80192c4:	f000 fd6a 	bl	8019d9c <prvIsQueueFull>
 80192c8:	4603      	mov	r3, r0
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d018      	beq.n	8019300 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80192ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192d0:	3310      	adds	r3, #16
 80192d2:	687a      	ldr	r2, [r7, #4]
 80192d4:	4611      	mov	r1, r2
 80192d6:	4618      	mov	r0, r3
 80192d8:	f001 f9fa 	bl	801a6d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80192dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80192de:	f000 fcf5 	bl	8019ccc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80192e2:	f000 fff3 	bl	801a2cc <xTaskResumeAll>
 80192e6:	4603      	mov	r3, r0
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	f47f af7c 	bne.w	80191e6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80192ee:	4b0c      	ldr	r3, [pc, #48]	@ (8019320 <xQueueGenericSend+0x210>)
 80192f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80192f4:	601a      	str	r2, [r3, #0]
 80192f6:	f3bf 8f4f 	dsb	sy
 80192fa:	f3bf 8f6f 	isb	sy
 80192fe:	e772      	b.n	80191e6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019302:	f000 fce3 	bl	8019ccc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019306:	f000 ffe1 	bl	801a2cc <xTaskResumeAll>
 801930a:	e76c      	b.n	80191e6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801930c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801930e:	f000 fcdd 	bl	8019ccc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019312:	f000 ffdb 	bl	801a2cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019316:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019318:	4618      	mov	r0, r3
 801931a:	3738      	adds	r7, #56	@ 0x38
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}
 8019320:	e000ed04 	.word	0xe000ed04

08019324 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b08e      	sub	sp, #56	@ 0x38
 8019328:	af00      	add	r7, sp, #0
 801932a:	60f8      	str	r0, [r7, #12]
 801932c:	60b9      	str	r1, [r7, #8]
 801932e:	607a      	str	r2, [r7, #4]
 8019330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8019336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019338:	2b00      	cmp	r3, #0
 801933a:	d10d      	bne.n	8019358 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 801933c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019340:	b672      	cpsid	i
 8019342:	f383 8811 	msr	BASEPRI, r3
 8019346:	f3bf 8f6f 	isb	sy
 801934a:	f3bf 8f4f 	dsb	sy
 801934e:	b662      	cpsie	i
 8019350:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019352:	bf00      	nop
 8019354:	bf00      	nop
 8019356:	e7fd      	b.n	8019354 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019358:	68bb      	ldr	r3, [r7, #8]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d103      	bne.n	8019366 <xQueueGenericSendFromISR+0x42>
 801935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019362:	2b00      	cmp	r3, #0
 8019364:	d101      	bne.n	801936a <xQueueGenericSendFromISR+0x46>
 8019366:	2301      	movs	r3, #1
 8019368:	e000      	b.n	801936c <xQueueGenericSendFromISR+0x48>
 801936a:	2300      	movs	r3, #0
 801936c:	2b00      	cmp	r3, #0
 801936e:	d10d      	bne.n	801938c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8019370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019374:	b672      	cpsid	i
 8019376:	f383 8811 	msr	BASEPRI, r3
 801937a:	f3bf 8f6f 	isb	sy
 801937e:	f3bf 8f4f 	dsb	sy
 8019382:	b662      	cpsie	i
 8019384:	623b      	str	r3, [r7, #32]
}
 8019386:	bf00      	nop
 8019388:	bf00      	nop
 801938a:	e7fd      	b.n	8019388 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801938c:	683b      	ldr	r3, [r7, #0]
 801938e:	2b02      	cmp	r3, #2
 8019390:	d103      	bne.n	801939a <xQueueGenericSendFromISR+0x76>
 8019392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019396:	2b01      	cmp	r3, #1
 8019398:	d101      	bne.n	801939e <xQueueGenericSendFromISR+0x7a>
 801939a:	2301      	movs	r3, #1
 801939c:	e000      	b.n	80193a0 <xQueueGenericSendFromISR+0x7c>
 801939e:	2300      	movs	r3, #0
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d10d      	bne.n	80193c0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80193a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193a8:	b672      	cpsid	i
 80193aa:	f383 8811 	msr	BASEPRI, r3
 80193ae:	f3bf 8f6f 	isb	sy
 80193b2:	f3bf 8f4f 	dsb	sy
 80193b6:	b662      	cpsie	i
 80193b8:	61fb      	str	r3, [r7, #28]
}
 80193ba:	bf00      	nop
 80193bc:	bf00      	nop
 80193be:	e7fd      	b.n	80193bc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80193c0:	f001 ffb4 	bl	801b32c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80193c4:	f3ef 8211 	mrs	r2, BASEPRI
 80193c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193cc:	b672      	cpsid	i
 80193ce:	f383 8811 	msr	BASEPRI, r3
 80193d2:	f3bf 8f6f 	isb	sy
 80193d6:	f3bf 8f4f 	dsb	sy
 80193da:	b662      	cpsie	i
 80193dc:	61ba      	str	r2, [r7, #24]
 80193de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80193e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80193e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80193e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80193e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80193ec:	429a      	cmp	r2, r3
 80193ee:	d302      	bcc.n	80193f6 <xQueueGenericSendFromISR+0xd2>
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	2b02      	cmp	r3, #2
 80193f4:	d12c      	bne.n	8019450 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80193f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80193fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019400:	683a      	ldr	r2, [r7, #0]
 8019402:	68b9      	ldr	r1, [r7, #8]
 8019404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019406:	f000 fbd1 	bl	8019bac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801940a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019412:	d112      	bne.n	801943a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019418:	2b00      	cmp	r3, #0
 801941a:	d016      	beq.n	801944a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801941c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801941e:	3324      	adds	r3, #36	@ 0x24
 8019420:	4618      	mov	r0, r3
 8019422:	f001 f97d 	bl	801a720 <xTaskRemoveFromEventList>
 8019426:	4603      	mov	r3, r0
 8019428:	2b00      	cmp	r3, #0
 801942a:	d00e      	beq.n	801944a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d00b      	beq.n	801944a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2201      	movs	r2, #1
 8019436:	601a      	str	r2, [r3, #0]
 8019438:	e007      	b.n	801944a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801943a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801943e:	3301      	adds	r3, #1
 8019440:	b2db      	uxtb	r3, r3
 8019442:	b25a      	sxtb	r2, r3
 8019444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801944a:	2301      	movs	r3, #1
 801944c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801944e:	e001      	b.n	8019454 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019450:	2300      	movs	r3, #0
 8019452:	637b      	str	r3, [r7, #52]	@ 0x34
 8019454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019456:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019458:	693b      	ldr	r3, [r7, #16]
 801945a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801945e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8019462:	4618      	mov	r0, r3
 8019464:	3738      	adds	r7, #56	@ 0x38
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}

0801946a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801946a:	b580      	push	{r7, lr}
 801946c:	b08e      	sub	sp, #56	@ 0x38
 801946e:	af00      	add	r7, sp, #0
 8019470:	6078      	str	r0, [r7, #4]
 8019472:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8019478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801947a:	2b00      	cmp	r3, #0
 801947c:	d10d      	bne.n	801949a <xQueueGiveFromISR+0x30>
	__asm volatile
 801947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019482:	b672      	cpsid	i
 8019484:	f383 8811 	msr	BASEPRI, r3
 8019488:	f3bf 8f6f 	isb	sy
 801948c:	f3bf 8f4f 	dsb	sy
 8019490:	b662      	cpsie	i
 8019492:	623b      	str	r3, [r7, #32]
}
 8019494:	bf00      	nop
 8019496:	bf00      	nop
 8019498:	e7fd      	b.n	8019496 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801949c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d00d      	beq.n	80194be <xQueueGiveFromISR+0x54>
	__asm volatile
 80194a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194a6:	b672      	cpsid	i
 80194a8:	f383 8811 	msr	BASEPRI, r3
 80194ac:	f3bf 8f6f 	isb	sy
 80194b0:	f3bf 8f4f 	dsb	sy
 80194b4:	b662      	cpsie	i
 80194b6:	61fb      	str	r3, [r7, #28]
}
 80194b8:	bf00      	nop
 80194ba:	bf00      	nop
 80194bc:	e7fd      	b.n	80194ba <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80194be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d103      	bne.n	80194ce <xQueueGiveFromISR+0x64>
 80194c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194c8:	689b      	ldr	r3, [r3, #8]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d101      	bne.n	80194d2 <xQueueGiveFromISR+0x68>
 80194ce:	2301      	movs	r3, #1
 80194d0:	e000      	b.n	80194d4 <xQueueGiveFromISR+0x6a>
 80194d2:	2300      	movs	r3, #0
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d10d      	bne.n	80194f4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80194d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194dc:	b672      	cpsid	i
 80194de:	f383 8811 	msr	BASEPRI, r3
 80194e2:	f3bf 8f6f 	isb	sy
 80194e6:	f3bf 8f4f 	dsb	sy
 80194ea:	b662      	cpsie	i
 80194ec:	61bb      	str	r3, [r7, #24]
}
 80194ee:	bf00      	nop
 80194f0:	bf00      	nop
 80194f2:	e7fd      	b.n	80194f0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80194f4:	f001 ff1a 	bl	801b32c <vPortValidateInterruptPriority>
	__asm volatile
 80194f8:	f3ef 8211 	mrs	r2, BASEPRI
 80194fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019500:	b672      	cpsid	i
 8019502:	f383 8811 	msr	BASEPRI, r3
 8019506:	f3bf 8f6f 	isb	sy
 801950a:	f3bf 8f4f 	dsb	sy
 801950e:	b662      	cpsie	i
 8019510:	617a      	str	r2, [r7, #20]
 8019512:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8019514:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019516:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801951c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801951e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019524:	429a      	cmp	r2, r3
 8019526:	d22b      	bcs.n	8019580 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801952a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801952e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019534:	1c5a      	adds	r2, r3, #1
 8019536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019538:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801953a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801953e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019542:	d112      	bne.n	801956a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019548:	2b00      	cmp	r3, #0
 801954a:	d016      	beq.n	801957a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801954c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801954e:	3324      	adds	r3, #36	@ 0x24
 8019550:	4618      	mov	r0, r3
 8019552:	f001 f8e5 	bl	801a720 <xTaskRemoveFromEventList>
 8019556:	4603      	mov	r3, r0
 8019558:	2b00      	cmp	r3, #0
 801955a:	d00e      	beq.n	801957a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801955c:	683b      	ldr	r3, [r7, #0]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d00b      	beq.n	801957a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	2201      	movs	r2, #1
 8019566:	601a      	str	r2, [r3, #0]
 8019568:	e007      	b.n	801957a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801956a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801956e:	3301      	adds	r3, #1
 8019570:	b2db      	uxtb	r3, r3
 8019572:	b25a      	sxtb	r2, r3
 8019574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801957a:	2301      	movs	r3, #1
 801957c:	637b      	str	r3, [r7, #52]	@ 0x34
 801957e:	e001      	b.n	8019584 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019580:	2300      	movs	r3, #0
 8019582:	637b      	str	r3, [r7, #52]	@ 0x34
 8019584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019586:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	f383 8811 	msr	BASEPRI, r3
}
 801958e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8019592:	4618      	mov	r0, r3
 8019594:	3738      	adds	r7, #56	@ 0x38
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}
	...

0801959c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b08c      	sub	sp, #48	@ 0x30
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	60f8      	str	r0, [r7, #12]
 80195a4:	60b9      	str	r1, [r7, #8]
 80195a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80195a8:	2300      	movs	r3, #0
 80195aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80195b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d10d      	bne.n	80195d2 <xQueueReceive+0x36>
	__asm volatile
 80195b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195ba:	b672      	cpsid	i
 80195bc:	f383 8811 	msr	BASEPRI, r3
 80195c0:	f3bf 8f6f 	isb	sy
 80195c4:	f3bf 8f4f 	dsb	sy
 80195c8:	b662      	cpsie	i
 80195ca:	623b      	str	r3, [r7, #32]
}
 80195cc:	bf00      	nop
 80195ce:	bf00      	nop
 80195d0:	e7fd      	b.n	80195ce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d103      	bne.n	80195e0 <xQueueReceive+0x44>
 80195d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d101      	bne.n	80195e4 <xQueueReceive+0x48>
 80195e0:	2301      	movs	r3, #1
 80195e2:	e000      	b.n	80195e6 <xQueueReceive+0x4a>
 80195e4:	2300      	movs	r3, #0
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d10d      	bne.n	8019606 <xQueueReceive+0x6a>
	__asm volatile
 80195ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195ee:	b672      	cpsid	i
 80195f0:	f383 8811 	msr	BASEPRI, r3
 80195f4:	f3bf 8f6f 	isb	sy
 80195f8:	f3bf 8f4f 	dsb	sy
 80195fc:	b662      	cpsie	i
 80195fe:	61fb      	str	r3, [r7, #28]
}
 8019600:	bf00      	nop
 8019602:	bf00      	nop
 8019604:	e7fd      	b.n	8019602 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019606:	f001 fa55 	bl	801aab4 <xTaskGetSchedulerState>
 801960a:	4603      	mov	r3, r0
 801960c:	2b00      	cmp	r3, #0
 801960e:	d102      	bne.n	8019616 <xQueueReceive+0x7a>
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d101      	bne.n	801961a <xQueueReceive+0x7e>
 8019616:	2301      	movs	r3, #1
 8019618:	e000      	b.n	801961c <xQueueReceive+0x80>
 801961a:	2300      	movs	r3, #0
 801961c:	2b00      	cmp	r3, #0
 801961e:	d10d      	bne.n	801963c <xQueueReceive+0xa0>
	__asm volatile
 8019620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019624:	b672      	cpsid	i
 8019626:	f383 8811 	msr	BASEPRI, r3
 801962a:	f3bf 8f6f 	isb	sy
 801962e:	f3bf 8f4f 	dsb	sy
 8019632:	b662      	cpsie	i
 8019634:	61bb      	str	r3, [r7, #24]
}
 8019636:	bf00      	nop
 8019638:	bf00      	nop
 801963a:	e7fd      	b.n	8019638 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801963c:	f001 fd8e 	bl	801b15c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019644:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019648:	2b00      	cmp	r3, #0
 801964a:	d01f      	beq.n	801968c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801964c:	68b9      	ldr	r1, [r7, #8]
 801964e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019650:	f000 fb16 	bl	8019c80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019656:	1e5a      	subs	r2, r3, #1
 8019658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801965a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801965e:	691b      	ldr	r3, [r3, #16]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d00f      	beq.n	8019684 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019666:	3310      	adds	r3, #16
 8019668:	4618      	mov	r0, r3
 801966a:	f001 f859 	bl	801a720 <xTaskRemoveFromEventList>
 801966e:	4603      	mov	r3, r0
 8019670:	2b00      	cmp	r3, #0
 8019672:	d007      	beq.n	8019684 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019674:	4b3c      	ldr	r3, [pc, #240]	@ (8019768 <xQueueReceive+0x1cc>)
 8019676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801967a:	601a      	str	r2, [r3, #0]
 801967c:	f3bf 8f4f 	dsb	sy
 8019680:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019684:	f001 fda0 	bl	801b1c8 <vPortExitCritical>
				return pdPASS;
 8019688:	2301      	movs	r3, #1
 801968a:	e069      	b.n	8019760 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d103      	bne.n	801969a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019692:	f001 fd99 	bl	801b1c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019696:	2300      	movs	r3, #0
 8019698:	e062      	b.n	8019760 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801969c:	2b00      	cmp	r3, #0
 801969e:	d106      	bne.n	80196ae <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80196a0:	f107 0310 	add.w	r3, r7, #16
 80196a4:	4618      	mov	r0, r3
 80196a6:	f001 f8a1 	bl	801a7ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80196aa:	2301      	movs	r3, #1
 80196ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80196ae:	f001 fd8b 	bl	801b1c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80196b2:	f000 fdfd 	bl	801a2b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80196b6:	f001 fd51 	bl	801b15c <vPortEnterCritical>
 80196ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80196c0:	b25b      	sxtb	r3, r3
 80196c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196c6:	d103      	bne.n	80196d0 <xQueueReceive+0x134>
 80196c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196ca:	2200      	movs	r2, #0
 80196cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80196d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80196d6:	b25b      	sxtb	r3, r3
 80196d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196dc:	d103      	bne.n	80196e6 <xQueueReceive+0x14a>
 80196de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196e0:	2200      	movs	r2, #0
 80196e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80196e6:	f001 fd6f 	bl	801b1c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80196ea:	1d3a      	adds	r2, r7, #4
 80196ec:	f107 0310 	add.w	r3, r7, #16
 80196f0:	4611      	mov	r1, r2
 80196f2:	4618      	mov	r0, r3
 80196f4:	f001 f890 	bl	801a818 <xTaskCheckForTimeOut>
 80196f8:	4603      	mov	r3, r0
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d123      	bne.n	8019746 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80196fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019700:	f000 fb36 	bl	8019d70 <prvIsQueueEmpty>
 8019704:	4603      	mov	r3, r0
 8019706:	2b00      	cmp	r3, #0
 8019708:	d017      	beq.n	801973a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801970c:	3324      	adds	r3, #36	@ 0x24
 801970e:	687a      	ldr	r2, [r7, #4]
 8019710:	4611      	mov	r1, r2
 8019712:	4618      	mov	r0, r3
 8019714:	f000 ffdc 	bl	801a6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801971a:	f000 fad7 	bl	8019ccc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801971e:	f000 fdd5 	bl	801a2cc <xTaskResumeAll>
 8019722:	4603      	mov	r3, r0
 8019724:	2b00      	cmp	r3, #0
 8019726:	d189      	bne.n	801963c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8019728:	4b0f      	ldr	r3, [pc, #60]	@ (8019768 <xQueueReceive+0x1cc>)
 801972a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801972e:	601a      	str	r2, [r3, #0]
 8019730:	f3bf 8f4f 	dsb	sy
 8019734:	f3bf 8f6f 	isb	sy
 8019738:	e780      	b.n	801963c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801973a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801973c:	f000 fac6 	bl	8019ccc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019740:	f000 fdc4 	bl	801a2cc <xTaskResumeAll>
 8019744:	e77a      	b.n	801963c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019748:	f000 fac0 	bl	8019ccc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801974c:	f000 fdbe 	bl	801a2cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019752:	f000 fb0d 	bl	8019d70 <prvIsQueueEmpty>
 8019756:	4603      	mov	r3, r0
 8019758:	2b00      	cmp	r3, #0
 801975a:	f43f af6f 	beq.w	801963c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801975e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019760:	4618      	mov	r0, r3
 8019762:	3730      	adds	r7, #48	@ 0x30
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}
 8019768:	e000ed04 	.word	0xe000ed04

0801976c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b08e      	sub	sp, #56	@ 0x38
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
 8019774:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019776:	2300      	movs	r3, #0
 8019778:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801977e:	2300      	movs	r3, #0
 8019780:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019784:	2b00      	cmp	r3, #0
 8019786:	d10d      	bne.n	80197a4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8019788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801978c:	b672      	cpsid	i
 801978e:	f383 8811 	msr	BASEPRI, r3
 8019792:	f3bf 8f6f 	isb	sy
 8019796:	f3bf 8f4f 	dsb	sy
 801979a:	b662      	cpsie	i
 801979c:	623b      	str	r3, [r7, #32]
}
 801979e:	bf00      	nop
 80197a0:	bf00      	nop
 80197a2:	e7fd      	b.n	80197a0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80197a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d00d      	beq.n	80197c8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80197ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197b0:	b672      	cpsid	i
 80197b2:	f383 8811 	msr	BASEPRI, r3
 80197b6:	f3bf 8f6f 	isb	sy
 80197ba:	f3bf 8f4f 	dsb	sy
 80197be:	b662      	cpsie	i
 80197c0:	61fb      	str	r3, [r7, #28]
}
 80197c2:	bf00      	nop
 80197c4:	bf00      	nop
 80197c6:	e7fd      	b.n	80197c4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80197c8:	f001 f974 	bl	801aab4 <xTaskGetSchedulerState>
 80197cc:	4603      	mov	r3, r0
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d102      	bne.n	80197d8 <xQueueSemaphoreTake+0x6c>
 80197d2:	683b      	ldr	r3, [r7, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d101      	bne.n	80197dc <xQueueSemaphoreTake+0x70>
 80197d8:	2301      	movs	r3, #1
 80197da:	e000      	b.n	80197de <xQueueSemaphoreTake+0x72>
 80197dc:	2300      	movs	r3, #0
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d10d      	bne.n	80197fe <xQueueSemaphoreTake+0x92>
	__asm volatile
 80197e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197e6:	b672      	cpsid	i
 80197e8:	f383 8811 	msr	BASEPRI, r3
 80197ec:	f3bf 8f6f 	isb	sy
 80197f0:	f3bf 8f4f 	dsb	sy
 80197f4:	b662      	cpsie	i
 80197f6:	61bb      	str	r3, [r7, #24]
}
 80197f8:	bf00      	nop
 80197fa:	bf00      	nop
 80197fc:	e7fd      	b.n	80197fa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80197fe:	f001 fcad 	bl	801b15c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019806:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801980a:	2b00      	cmp	r3, #0
 801980c:	d024      	beq.n	8019858 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801980e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019810:	1e5a      	subs	r2, r3, #1
 8019812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019814:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d104      	bne.n	8019828 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801981e:	f001 fb13 	bl	801ae48 <pvTaskIncrementMutexHeldCount>
 8019822:	4602      	mov	r2, r0
 8019824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019826:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801982a:	691b      	ldr	r3, [r3, #16]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d00f      	beq.n	8019850 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019832:	3310      	adds	r3, #16
 8019834:	4618      	mov	r0, r3
 8019836:	f000 ff73 	bl	801a720 <xTaskRemoveFromEventList>
 801983a:	4603      	mov	r3, r0
 801983c:	2b00      	cmp	r3, #0
 801983e:	d007      	beq.n	8019850 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019840:	4b55      	ldr	r3, [pc, #340]	@ (8019998 <xQueueSemaphoreTake+0x22c>)
 8019842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019846:	601a      	str	r2, [r3, #0]
 8019848:	f3bf 8f4f 	dsb	sy
 801984c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019850:	f001 fcba 	bl	801b1c8 <vPortExitCritical>
				return pdPASS;
 8019854:	2301      	movs	r3, #1
 8019856:	e09a      	b.n	801998e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d114      	bne.n	8019888 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019860:	2b00      	cmp	r3, #0
 8019862:	d00d      	beq.n	8019880 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8019864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019868:	b672      	cpsid	i
 801986a:	f383 8811 	msr	BASEPRI, r3
 801986e:	f3bf 8f6f 	isb	sy
 8019872:	f3bf 8f4f 	dsb	sy
 8019876:	b662      	cpsie	i
 8019878:	617b      	str	r3, [r7, #20]
}
 801987a:	bf00      	nop
 801987c:	bf00      	nop
 801987e:	e7fd      	b.n	801987c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019880:	f001 fca2 	bl	801b1c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019884:	2300      	movs	r3, #0
 8019886:	e082      	b.n	801998e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801988a:	2b00      	cmp	r3, #0
 801988c:	d106      	bne.n	801989c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801988e:	f107 030c 	add.w	r3, r7, #12
 8019892:	4618      	mov	r0, r3
 8019894:	f000 ffaa 	bl	801a7ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019898:	2301      	movs	r3, #1
 801989a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801989c:	f001 fc94 	bl	801b1c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80198a0:	f000 fd06 	bl	801a2b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80198a4:	f001 fc5a 	bl	801b15c <vPortEnterCritical>
 80198a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80198ae:	b25b      	sxtb	r3, r3
 80198b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198b4:	d103      	bne.n	80198be <xQueueSemaphoreTake+0x152>
 80198b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198b8:	2200      	movs	r2, #0
 80198ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80198be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80198c4:	b25b      	sxtb	r3, r3
 80198c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198ca:	d103      	bne.n	80198d4 <xQueueSemaphoreTake+0x168>
 80198cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198ce:	2200      	movs	r2, #0
 80198d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80198d4:	f001 fc78 	bl	801b1c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80198d8:	463a      	mov	r2, r7
 80198da:	f107 030c 	add.w	r3, r7, #12
 80198de:	4611      	mov	r1, r2
 80198e0:	4618      	mov	r0, r3
 80198e2:	f000 ff99 	bl	801a818 <xTaskCheckForTimeOut>
 80198e6:	4603      	mov	r3, r0
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d132      	bne.n	8019952 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80198ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80198ee:	f000 fa3f 	bl	8019d70 <prvIsQueueEmpty>
 80198f2:	4603      	mov	r3, r0
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d026      	beq.n	8019946 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80198f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d109      	bne.n	8019914 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8019900:	f001 fc2c 	bl	801b15c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019906:	689b      	ldr	r3, [r3, #8]
 8019908:	4618      	mov	r0, r3
 801990a:	f001 f8f1 	bl	801aaf0 <xTaskPriorityInherit>
 801990e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8019910:	f001 fc5a 	bl	801b1c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019916:	3324      	adds	r3, #36	@ 0x24
 8019918:	683a      	ldr	r2, [r7, #0]
 801991a:	4611      	mov	r1, r2
 801991c:	4618      	mov	r0, r3
 801991e:	f000 fed7 	bl	801a6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019922:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019924:	f000 f9d2 	bl	8019ccc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019928:	f000 fcd0 	bl	801a2cc <xTaskResumeAll>
 801992c:	4603      	mov	r3, r0
 801992e:	2b00      	cmp	r3, #0
 8019930:	f47f af65 	bne.w	80197fe <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8019934:	4b18      	ldr	r3, [pc, #96]	@ (8019998 <xQueueSemaphoreTake+0x22c>)
 8019936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801993a:	601a      	str	r2, [r3, #0]
 801993c:	f3bf 8f4f 	dsb	sy
 8019940:	f3bf 8f6f 	isb	sy
 8019944:	e75b      	b.n	80197fe <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019946:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019948:	f000 f9c0 	bl	8019ccc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801994c:	f000 fcbe 	bl	801a2cc <xTaskResumeAll>
 8019950:	e755      	b.n	80197fe <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8019952:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019954:	f000 f9ba 	bl	8019ccc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019958:	f000 fcb8 	bl	801a2cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801995c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801995e:	f000 fa07 	bl	8019d70 <prvIsQueueEmpty>
 8019962:	4603      	mov	r3, r0
 8019964:	2b00      	cmp	r3, #0
 8019966:	f43f af4a 	beq.w	80197fe <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801996c:	2b00      	cmp	r3, #0
 801996e:	d00d      	beq.n	801998c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8019970:	f001 fbf4 	bl	801b15c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019974:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019976:	f000 f901 	bl	8019b7c <prvGetDisinheritPriorityAfterTimeout>
 801997a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801997c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801997e:	689b      	ldr	r3, [r3, #8]
 8019980:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019982:	4618      	mov	r0, r3
 8019984:	f001 f9c0 	bl	801ad08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8019988:	f001 fc1e 	bl	801b1c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801998c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801998e:	4618      	mov	r0, r3
 8019990:	3738      	adds	r7, #56	@ 0x38
 8019992:	46bd      	mov	sp, r7
 8019994:	bd80      	pop	{r7, pc}
 8019996:	bf00      	nop
 8019998:	e000ed04 	.word	0xe000ed04

0801999c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b08e      	sub	sp, #56	@ 0x38
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	60f8      	str	r0, [r7, #12]
 80199a4:	60b9      	str	r1, [r7, #8]
 80199a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80199ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d10d      	bne.n	80199ce <xQueueReceiveFromISR+0x32>
	__asm volatile
 80199b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199b6:	b672      	cpsid	i
 80199b8:	f383 8811 	msr	BASEPRI, r3
 80199bc:	f3bf 8f6f 	isb	sy
 80199c0:	f3bf 8f4f 	dsb	sy
 80199c4:	b662      	cpsie	i
 80199c6:	623b      	str	r3, [r7, #32]
}
 80199c8:	bf00      	nop
 80199ca:	bf00      	nop
 80199cc:	e7fd      	b.n	80199ca <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80199ce:	68bb      	ldr	r3, [r7, #8]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d103      	bne.n	80199dc <xQueueReceiveFromISR+0x40>
 80199d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d101      	bne.n	80199e0 <xQueueReceiveFromISR+0x44>
 80199dc:	2301      	movs	r3, #1
 80199de:	e000      	b.n	80199e2 <xQueueReceiveFromISR+0x46>
 80199e0:	2300      	movs	r3, #0
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d10d      	bne.n	8019a02 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80199e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199ea:	b672      	cpsid	i
 80199ec:	f383 8811 	msr	BASEPRI, r3
 80199f0:	f3bf 8f6f 	isb	sy
 80199f4:	f3bf 8f4f 	dsb	sy
 80199f8:	b662      	cpsie	i
 80199fa:	61fb      	str	r3, [r7, #28]
}
 80199fc:	bf00      	nop
 80199fe:	bf00      	nop
 8019a00:	e7fd      	b.n	80199fe <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019a02:	f001 fc93 	bl	801b32c <vPortValidateInterruptPriority>
	__asm volatile
 8019a06:	f3ef 8211 	mrs	r2, BASEPRI
 8019a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a0e:	b672      	cpsid	i
 8019a10:	f383 8811 	msr	BASEPRI, r3
 8019a14:	f3bf 8f6f 	isb	sy
 8019a18:	f3bf 8f4f 	dsb	sy
 8019a1c:	b662      	cpsie	i
 8019a1e:	61ba      	str	r2, [r7, #24]
 8019a20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019a22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d02f      	beq.n	8019a92 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8019a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019a3c:	68b9      	ldr	r1, [r7, #8]
 8019a3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019a40:	f000 f91e 	bl	8019c80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a46:	1e5a      	subs	r2, r3, #1
 8019a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8019a4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a54:	d112      	bne.n	8019a7c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a58:	691b      	ldr	r3, [r3, #16]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d016      	beq.n	8019a8c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a60:	3310      	adds	r3, #16
 8019a62:	4618      	mov	r0, r3
 8019a64:	f000 fe5c 	bl	801a720 <xTaskRemoveFromEventList>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d00e      	beq.n	8019a8c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d00b      	beq.n	8019a8c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	2201      	movs	r2, #1
 8019a78:	601a      	str	r2, [r3, #0]
 8019a7a:	e007      	b.n	8019a8c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a80:	3301      	adds	r3, #1
 8019a82:	b2db      	uxtb	r3, r3
 8019a84:	b25a      	sxtb	r2, r3
 8019a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8019a8c:	2301      	movs	r3, #1
 8019a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a90:	e001      	b.n	8019a96 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8019a92:	2300      	movs	r3, #0
 8019a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8019a9a:	693b      	ldr	r3, [r7, #16]
 8019a9c:	f383 8811 	msr	BASEPRI, r3
}
 8019aa0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	3738      	adds	r7, #56	@ 0x38
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}

08019aac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b084      	sub	sp, #16
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d10d      	bne.n	8019ad6 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8019aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019abe:	b672      	cpsid	i
 8019ac0:	f383 8811 	msr	BASEPRI, r3
 8019ac4:	f3bf 8f6f 	isb	sy
 8019ac8:	f3bf 8f4f 	dsb	sy
 8019acc:	b662      	cpsie	i
 8019ace:	60bb      	str	r3, [r7, #8]
}
 8019ad0:	bf00      	nop
 8019ad2:	bf00      	nop
 8019ad4:	e7fd      	b.n	8019ad2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8019ad6:	f001 fb41 	bl	801b15c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019ade:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8019ae0:	f001 fb72 	bl	801b1c8 <vPortExitCritical>

	return uxReturn;
 8019ae4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	3710      	adds	r7, #16
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd80      	pop	{r7, pc}

08019aee <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8019aee:	b480      	push	{r7}
 8019af0:	b087      	sub	sp, #28
 8019af2:	af00      	add	r7, sp, #0
 8019af4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8019afa:	697b      	ldr	r3, [r7, #20]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d10d      	bne.n	8019b1c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8019b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b04:	b672      	cpsid	i
 8019b06:	f383 8811 	msr	BASEPRI, r3
 8019b0a:	f3bf 8f6f 	isb	sy
 8019b0e:	f3bf 8f4f 	dsb	sy
 8019b12:	b662      	cpsie	i
 8019b14:	60fb      	str	r3, [r7, #12]
}
 8019b16:	bf00      	nop
 8019b18:	bf00      	nop
 8019b1a:	e7fd      	b.n	8019b18 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8019b1c:	697b      	ldr	r3, [r7, #20]
 8019b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019b20:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8019b22:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019b24:	4618      	mov	r0, r3
 8019b26:	371c      	adds	r7, #28
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2e:	4770      	bx	lr

08019b30 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b084      	sub	sp, #16
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d10d      	bne.n	8019b5e <vQueueDelete+0x2e>
	__asm volatile
 8019b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b46:	b672      	cpsid	i
 8019b48:	f383 8811 	msr	BASEPRI, r3
 8019b4c:	f3bf 8f6f 	isb	sy
 8019b50:	f3bf 8f4f 	dsb	sy
 8019b54:	b662      	cpsie	i
 8019b56:	60bb      	str	r3, [r7, #8]
}
 8019b58:	bf00      	nop
 8019b5a:	bf00      	nop
 8019b5c:	e7fd      	b.n	8019b5a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8019b5e:	68f8      	ldr	r0, [r7, #12]
 8019b60:	f000 f934 	bl	8019dcc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d102      	bne.n	8019b74 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8019b6e:	68f8      	ldr	r0, [r7, #12]
 8019b70:	f001 fcf4 	bl	801b55c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8019b74:	bf00      	nop
 8019b76:	3710      	adds	r7, #16
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}

08019b7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8019b7c:	b480      	push	{r7}
 8019b7e:	b085      	sub	sp, #20
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d006      	beq.n	8019b9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	f1c3 0307 	rsb	r3, r3, #7
 8019b96:	60fb      	str	r3, [r7, #12]
 8019b98:	e001      	b.n	8019b9e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8019b9e:	68fb      	ldr	r3, [r7, #12]
	}
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	3714      	adds	r7, #20
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019baa:	4770      	bx	lr

08019bac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b086      	sub	sp, #24
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	60f8      	str	r0, [r7, #12]
 8019bb4:	60b9      	str	r1, [r7, #8]
 8019bb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019bb8:	2300      	movs	r3, #0
 8019bba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019bc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d10d      	bne.n	8019be6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d14d      	bne.n	8019c6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	689b      	ldr	r3, [r3, #8]
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	f001 f80a 	bl	801abf0 <xTaskPriorityDisinherit>
 8019bdc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	2200      	movs	r2, #0
 8019be2:	609a      	str	r2, [r3, #8]
 8019be4:	e043      	b.n	8019c6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d119      	bne.n	8019c20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	6858      	ldr	r0, [r3, #4]
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019bf4:	461a      	mov	r2, r3
 8019bf6:	68b9      	ldr	r1, [r7, #8]
 8019bf8:	f002 fa84 	bl	801c104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	685a      	ldr	r2, [r3, #4]
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c04:	441a      	add	r2, r3
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	685a      	ldr	r2, [r3, #4]
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	689b      	ldr	r3, [r3, #8]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d32b      	bcc.n	8019c6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	681a      	ldr	r2, [r3, #0]
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	605a      	str	r2, [r3, #4]
 8019c1e:	e026      	b.n	8019c6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	68d8      	ldr	r0, [r3, #12]
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c28:	461a      	mov	r2, r3
 8019c2a:	68b9      	ldr	r1, [r7, #8]
 8019c2c:	f002 fa6a 	bl	801c104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	68da      	ldr	r2, [r3, #12]
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c38:	425b      	negs	r3, r3
 8019c3a:	441a      	add	r2, r3
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	68da      	ldr	r2, [r3, #12]
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	429a      	cmp	r2, r3
 8019c4a:	d207      	bcs.n	8019c5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019c4c:	68fb      	ldr	r3, [r7, #12]
 8019c4e:	689a      	ldr	r2, [r3, #8]
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c54:	425b      	negs	r3, r3
 8019c56:	441a      	add	r2, r3
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	2b02      	cmp	r3, #2
 8019c60:	d105      	bne.n	8019c6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019c62:	693b      	ldr	r3, [r7, #16]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d002      	beq.n	8019c6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	3b01      	subs	r3, #1
 8019c6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019c6e:	693b      	ldr	r3, [r7, #16]
 8019c70:	1c5a      	adds	r2, r3, #1
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8019c76:	697b      	ldr	r3, [r7, #20]
}
 8019c78:	4618      	mov	r0, r3
 8019c7a:	3718      	adds	r7, #24
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd80      	pop	{r7, pc}

08019c80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019c80:	b580      	push	{r7, lr}
 8019c82:	b082      	sub	sp, #8
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	6078      	str	r0, [r7, #4]
 8019c88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d018      	beq.n	8019cc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	68da      	ldr	r2, [r3, #12]
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c9a:	441a      	add	r2, r3
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	68da      	ldr	r2, [r3, #12]
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	689b      	ldr	r3, [r3, #8]
 8019ca8:	429a      	cmp	r2, r3
 8019caa:	d303      	bcc.n	8019cb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681a      	ldr	r2, [r3, #0]
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	68d9      	ldr	r1, [r3, #12]
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019cbc:	461a      	mov	r2, r3
 8019cbe:	6838      	ldr	r0, [r7, #0]
 8019cc0:	f002 fa20 	bl	801c104 <memcpy>
	}
}
 8019cc4:	bf00      	nop
 8019cc6:	3708      	adds	r7, #8
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	bd80      	pop	{r7, pc}

08019ccc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019ccc:	b580      	push	{r7, lr}
 8019cce:	b084      	sub	sp, #16
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019cd4:	f001 fa42 	bl	801b15c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8019cde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019ce0:	e011      	b.n	8019d06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d012      	beq.n	8019d10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	3324      	adds	r3, #36	@ 0x24
 8019cee:	4618      	mov	r0, r3
 8019cf0:	f000 fd16 	bl	801a720 <xTaskRemoveFromEventList>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d001      	beq.n	8019cfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019cfa:	f000 fdf5 	bl	801a8e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019cfe:	7bfb      	ldrb	r3, [r7, #15]
 8019d00:	3b01      	subs	r3, #1
 8019d02:	b2db      	uxtb	r3, r3
 8019d04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	dce9      	bgt.n	8019ce2 <prvUnlockQueue+0x16>
 8019d0e:	e000      	b.n	8019d12 <prvUnlockQueue+0x46>
					break;
 8019d10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	22ff      	movs	r2, #255	@ 0xff
 8019d16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8019d1a:	f001 fa55 	bl	801b1c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019d1e:	f001 fa1d 	bl	801b15c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8019d28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019d2a:	e011      	b.n	8019d50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	691b      	ldr	r3, [r3, #16]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d012      	beq.n	8019d5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	3310      	adds	r3, #16
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f000 fcf1 	bl	801a720 <xTaskRemoveFromEventList>
 8019d3e:	4603      	mov	r3, r0
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d001      	beq.n	8019d48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019d44:	f000 fdd0 	bl	801a8e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019d48:	7bbb      	ldrb	r3, [r7, #14]
 8019d4a:	3b01      	subs	r3, #1
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	dce9      	bgt.n	8019d2c <prvUnlockQueue+0x60>
 8019d58:	e000      	b.n	8019d5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019d5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	22ff      	movs	r2, #255	@ 0xff
 8019d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8019d64:	f001 fa30 	bl	801b1c8 <vPortExitCritical>
}
 8019d68:	bf00      	nop
 8019d6a:	3710      	adds	r7, #16
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}

08019d70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b084      	sub	sp, #16
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019d78:	f001 f9f0 	bl	801b15c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d102      	bne.n	8019d8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019d84:	2301      	movs	r3, #1
 8019d86:	60fb      	str	r3, [r7, #12]
 8019d88:	e001      	b.n	8019d8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019d8a:	2300      	movs	r3, #0
 8019d8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019d8e:	f001 fa1b 	bl	801b1c8 <vPortExitCritical>

	return xReturn;
 8019d92:	68fb      	ldr	r3, [r7, #12]
}
 8019d94:	4618      	mov	r0, r3
 8019d96:	3710      	adds	r7, #16
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}

08019d9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b084      	sub	sp, #16
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019da4:	f001 f9da 	bl	801b15c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019db0:	429a      	cmp	r2, r3
 8019db2:	d102      	bne.n	8019dba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019db4:	2301      	movs	r3, #1
 8019db6:	60fb      	str	r3, [r7, #12]
 8019db8:	e001      	b.n	8019dbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019dba:	2300      	movs	r3, #0
 8019dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019dbe:	f001 fa03 	bl	801b1c8 <vPortExitCritical>

	return xReturn;
 8019dc2:	68fb      	ldr	r3, [r7, #12]
}
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	3710      	adds	r7, #16
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}

08019dcc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8019dcc:	b480      	push	{r7}
 8019dce:	b085      	sub	sp, #20
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	60fb      	str	r3, [r7, #12]
 8019dd8:	e016      	b.n	8019e08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8019dda:	4a10      	ldr	r2, [pc, #64]	@ (8019e1c <vQueueUnregisterQueue+0x50>)
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	00db      	lsls	r3, r3, #3
 8019de0:	4413      	add	r3, r2
 8019de2:	685b      	ldr	r3, [r3, #4]
 8019de4:	687a      	ldr	r2, [r7, #4]
 8019de6:	429a      	cmp	r2, r3
 8019de8:	d10b      	bne.n	8019e02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8019dea:	4a0c      	ldr	r2, [pc, #48]	@ (8019e1c <vQueueUnregisterQueue+0x50>)
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	2100      	movs	r1, #0
 8019df0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8019df4:	4a09      	ldr	r2, [pc, #36]	@ (8019e1c <vQueueUnregisterQueue+0x50>)
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	00db      	lsls	r3, r3, #3
 8019dfa:	4413      	add	r3, r2
 8019dfc:	2200      	movs	r2, #0
 8019dfe:	605a      	str	r2, [r3, #4]
				break;
 8019e00:	e006      	b.n	8019e10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	3301      	adds	r3, #1
 8019e06:	60fb      	str	r3, [r7, #12]
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	2b07      	cmp	r3, #7
 8019e0c:	d9e5      	bls.n	8019dda <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8019e0e:	bf00      	nop
 8019e10:	bf00      	nop
 8019e12:	3714      	adds	r7, #20
 8019e14:	46bd      	mov	sp, r7
 8019e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e1a:	4770      	bx	lr
 8019e1c:	200024cc 	.word	0x200024cc

08019e20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b08e      	sub	sp, #56	@ 0x38
 8019e24:	af04      	add	r7, sp, #16
 8019e26:	60f8      	str	r0, [r7, #12]
 8019e28:	60b9      	str	r1, [r7, #8]
 8019e2a:	607a      	str	r2, [r7, #4]
 8019e2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d10d      	bne.n	8019e50 <xTaskCreateStatic+0x30>
	__asm volatile
 8019e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e38:	b672      	cpsid	i
 8019e3a:	f383 8811 	msr	BASEPRI, r3
 8019e3e:	f3bf 8f6f 	isb	sy
 8019e42:	f3bf 8f4f 	dsb	sy
 8019e46:	b662      	cpsie	i
 8019e48:	623b      	str	r3, [r7, #32]
}
 8019e4a:	bf00      	nop
 8019e4c:	bf00      	nop
 8019e4e:	e7fd      	b.n	8019e4c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8019e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d10d      	bne.n	8019e72 <xTaskCreateStatic+0x52>
	__asm volatile
 8019e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e5a:	b672      	cpsid	i
 8019e5c:	f383 8811 	msr	BASEPRI, r3
 8019e60:	f3bf 8f6f 	isb	sy
 8019e64:	f3bf 8f4f 	dsb	sy
 8019e68:	b662      	cpsie	i
 8019e6a:	61fb      	str	r3, [r7, #28]
}
 8019e6c:	bf00      	nop
 8019e6e:	bf00      	nop
 8019e70:	e7fd      	b.n	8019e6e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019e72:	2358      	movs	r3, #88	@ 0x58
 8019e74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019e76:	693b      	ldr	r3, [r7, #16]
 8019e78:	2b58      	cmp	r3, #88	@ 0x58
 8019e7a:	d00d      	beq.n	8019e98 <xTaskCreateStatic+0x78>
	__asm volatile
 8019e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e80:	b672      	cpsid	i
 8019e82:	f383 8811 	msr	BASEPRI, r3
 8019e86:	f3bf 8f6f 	isb	sy
 8019e8a:	f3bf 8f4f 	dsb	sy
 8019e8e:	b662      	cpsie	i
 8019e90:	61bb      	str	r3, [r7, #24]
}
 8019e92:	bf00      	nop
 8019e94:	bf00      	nop
 8019e96:	e7fd      	b.n	8019e94 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019e98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d01e      	beq.n	8019ede <xTaskCreateStatic+0xbe>
 8019ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d01b      	beq.n	8019ede <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ea8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019eae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eb2:	2202      	movs	r2, #2
 8019eb4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019eb8:	2300      	movs	r3, #0
 8019eba:	9303      	str	r3, [sp, #12]
 8019ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ebe:	9302      	str	r3, [sp, #8]
 8019ec0:	f107 0314 	add.w	r3, r7, #20
 8019ec4:	9301      	str	r3, [sp, #4]
 8019ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ec8:	9300      	str	r3, [sp, #0]
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	687a      	ldr	r2, [r7, #4]
 8019ece:	68b9      	ldr	r1, [r7, #8]
 8019ed0:	68f8      	ldr	r0, [r7, #12]
 8019ed2:	f000 f850 	bl	8019f76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019ed6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019ed8:	f000 f8e2 	bl	801a0a0 <prvAddNewTaskToReadyList>
 8019edc:	e001      	b.n	8019ee2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8019ede:	2300      	movs	r3, #0
 8019ee0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019ee2:	697b      	ldr	r3, [r7, #20]
	}
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	3728      	adds	r7, #40	@ 0x28
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bd80      	pop	{r7, pc}

08019eec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b08c      	sub	sp, #48	@ 0x30
 8019ef0:	af04      	add	r7, sp, #16
 8019ef2:	60f8      	str	r0, [r7, #12]
 8019ef4:	60b9      	str	r1, [r7, #8]
 8019ef6:	603b      	str	r3, [r7, #0]
 8019ef8:	4613      	mov	r3, r2
 8019efa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019efc:	88fb      	ldrh	r3, [r7, #6]
 8019efe:	009b      	lsls	r3, r3, #2
 8019f00:	4618      	mov	r0, r3
 8019f02:	f001 fa59 	bl	801b3b8 <pvPortMalloc>
 8019f06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d00e      	beq.n	8019f2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019f0e:	2058      	movs	r0, #88	@ 0x58
 8019f10:	f001 fa52 	bl	801b3b8 <pvPortMalloc>
 8019f14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019f16:	69fb      	ldr	r3, [r7, #28]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d003      	beq.n	8019f24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019f1c:	69fb      	ldr	r3, [r7, #28]
 8019f1e:	697a      	ldr	r2, [r7, #20]
 8019f20:	631a      	str	r2, [r3, #48]	@ 0x30
 8019f22:	e005      	b.n	8019f30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019f24:	6978      	ldr	r0, [r7, #20]
 8019f26:	f001 fb19 	bl	801b55c <vPortFree>
 8019f2a:	e001      	b.n	8019f30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019f30:	69fb      	ldr	r3, [r7, #28]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d017      	beq.n	8019f66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019f36:	69fb      	ldr	r3, [r7, #28]
 8019f38:	2200      	movs	r2, #0
 8019f3a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019f3e:	88fa      	ldrh	r2, [r7, #6]
 8019f40:	2300      	movs	r3, #0
 8019f42:	9303      	str	r3, [sp, #12]
 8019f44:	69fb      	ldr	r3, [r7, #28]
 8019f46:	9302      	str	r3, [sp, #8]
 8019f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f4a:	9301      	str	r3, [sp, #4]
 8019f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f4e:	9300      	str	r3, [sp, #0]
 8019f50:	683b      	ldr	r3, [r7, #0]
 8019f52:	68b9      	ldr	r1, [r7, #8]
 8019f54:	68f8      	ldr	r0, [r7, #12]
 8019f56:	f000 f80e 	bl	8019f76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019f5a:	69f8      	ldr	r0, [r7, #28]
 8019f5c:	f000 f8a0 	bl	801a0a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019f60:	2301      	movs	r3, #1
 8019f62:	61bb      	str	r3, [r7, #24]
 8019f64:	e002      	b.n	8019f6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019f66:	f04f 33ff 	mov.w	r3, #4294967295
 8019f6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019f6c:	69bb      	ldr	r3, [r7, #24]
	}
 8019f6e:	4618      	mov	r0, r3
 8019f70:	3720      	adds	r7, #32
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}

08019f76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019f76:	b580      	push	{r7, lr}
 8019f78:	b088      	sub	sp, #32
 8019f7a:	af00      	add	r7, sp, #0
 8019f7c:	60f8      	str	r0, [r7, #12]
 8019f7e:	60b9      	str	r1, [r7, #8]
 8019f80:	607a      	str	r2, [r7, #4]
 8019f82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f86:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	009b      	lsls	r3, r3, #2
 8019f8c:	461a      	mov	r2, r3
 8019f8e:	21a5      	movs	r1, #165	@ 0xa5
 8019f90:	f002 f84a 	bl	801c028 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019f98:	6879      	ldr	r1, [r7, #4]
 8019f9a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8019f9e:	440b      	add	r3, r1
 8019fa0:	009b      	lsls	r3, r3, #2
 8019fa2:	4413      	add	r3, r2
 8019fa4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019fa6:	69bb      	ldr	r3, [r7, #24]
 8019fa8:	f023 0307 	bic.w	r3, r3, #7
 8019fac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019fae:	69bb      	ldr	r3, [r7, #24]
 8019fb0:	f003 0307 	and.w	r3, r3, #7
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d00d      	beq.n	8019fd4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8019fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fbc:	b672      	cpsid	i
 8019fbe:	f383 8811 	msr	BASEPRI, r3
 8019fc2:	f3bf 8f6f 	isb	sy
 8019fc6:	f3bf 8f4f 	dsb	sy
 8019fca:	b662      	cpsie	i
 8019fcc:	617b      	str	r3, [r7, #20]
}
 8019fce:	bf00      	nop
 8019fd0:	bf00      	nop
 8019fd2:	e7fd      	b.n	8019fd0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019fd4:	68bb      	ldr	r3, [r7, #8]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d01f      	beq.n	801a01a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019fda:	2300      	movs	r3, #0
 8019fdc:	61fb      	str	r3, [r7, #28]
 8019fde:	e012      	b.n	801a006 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019fe0:	68ba      	ldr	r2, [r7, #8]
 8019fe2:	69fb      	ldr	r3, [r7, #28]
 8019fe4:	4413      	add	r3, r2
 8019fe6:	7819      	ldrb	r1, [r3, #0]
 8019fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019fea:	69fb      	ldr	r3, [r7, #28]
 8019fec:	4413      	add	r3, r2
 8019fee:	3334      	adds	r3, #52	@ 0x34
 8019ff0:	460a      	mov	r2, r1
 8019ff2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019ff4:	68ba      	ldr	r2, [r7, #8]
 8019ff6:	69fb      	ldr	r3, [r7, #28]
 8019ff8:	4413      	add	r3, r2
 8019ffa:	781b      	ldrb	r3, [r3, #0]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d006      	beq.n	801a00e <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a000:	69fb      	ldr	r3, [r7, #28]
 801a002:	3301      	adds	r3, #1
 801a004:	61fb      	str	r3, [r7, #28]
 801a006:	69fb      	ldr	r3, [r7, #28]
 801a008:	2b0f      	cmp	r3, #15
 801a00a:	d9e9      	bls.n	8019fe0 <prvInitialiseNewTask+0x6a>
 801a00c:	e000      	b.n	801a010 <prvInitialiseNewTask+0x9a>
			{
				break;
 801a00e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a012:	2200      	movs	r2, #0
 801a014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801a018:	e003      	b.n	801a022 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a01c:	2200      	movs	r2, #0
 801a01e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a024:	2b06      	cmp	r3, #6
 801a026:	d901      	bls.n	801a02c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a028:	2306      	movs	r3, #6
 801a02a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a02e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a030:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a036:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a03a:	2200      	movs	r2, #0
 801a03c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a040:	3304      	adds	r3, #4
 801a042:	4618      	mov	r0, r3
 801a044:	f7fe fe04 	bl	8018c50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a04a:	3318      	adds	r3, #24
 801a04c:	4618      	mov	r0, r3
 801a04e:	f7fe fdff 	bl	8018c50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a056:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a05a:	f1c3 0207 	rsb	r2, r3, #7
 801a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a060:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a066:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801a068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a06a:	2200      	movs	r2, #0
 801a06c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a070:	2200      	movs	r2, #0
 801a072:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a076:	2200      	movs	r2, #0
 801a078:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a07c:	683a      	ldr	r2, [r7, #0]
 801a07e:	68f9      	ldr	r1, [r7, #12]
 801a080:	69b8      	ldr	r0, [r7, #24]
 801a082:	f000 ff5b 	bl	801af3c <pxPortInitialiseStack>
 801a086:	4602      	mov	r2, r0
 801a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a08a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d002      	beq.n	801a098 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a096:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a098:	bf00      	nop
 801a09a:	3720      	adds	r7, #32
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bd80      	pop	{r7, pc}

0801a0a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a0a8:	f001 f858 	bl	801b15c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a0ac:	4b2a      	ldr	r3, [pc, #168]	@ (801a158 <prvAddNewTaskToReadyList+0xb8>)
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	3301      	adds	r3, #1
 801a0b2:	4a29      	ldr	r2, [pc, #164]	@ (801a158 <prvAddNewTaskToReadyList+0xb8>)
 801a0b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a0b6:	4b29      	ldr	r3, [pc, #164]	@ (801a15c <prvAddNewTaskToReadyList+0xbc>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d109      	bne.n	801a0d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a0be:	4a27      	ldr	r2, [pc, #156]	@ (801a15c <prvAddNewTaskToReadyList+0xbc>)
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a0c4:	4b24      	ldr	r3, [pc, #144]	@ (801a158 <prvAddNewTaskToReadyList+0xb8>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	2b01      	cmp	r3, #1
 801a0ca:	d110      	bne.n	801a0ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a0cc:	f000 fc32 	bl	801a934 <prvInitialiseTaskLists>
 801a0d0:	e00d      	b.n	801a0ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a0d2:	4b23      	ldr	r3, [pc, #140]	@ (801a160 <prvAddNewTaskToReadyList+0xc0>)
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d109      	bne.n	801a0ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a0da:	4b20      	ldr	r3, [pc, #128]	@ (801a15c <prvAddNewTaskToReadyList+0xbc>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	d802      	bhi.n	801a0ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a0e8:	4a1c      	ldr	r2, [pc, #112]	@ (801a15c <prvAddNewTaskToReadyList+0xbc>)
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a0ee:	4b1d      	ldr	r3, [pc, #116]	@ (801a164 <prvAddNewTaskToReadyList+0xc4>)
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	3301      	adds	r3, #1
 801a0f4:	4a1b      	ldr	r2, [pc, #108]	@ (801a164 <prvAddNewTaskToReadyList+0xc4>)
 801a0f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0fc:	2201      	movs	r2, #1
 801a0fe:	409a      	lsls	r2, r3
 801a100:	4b19      	ldr	r3, [pc, #100]	@ (801a168 <prvAddNewTaskToReadyList+0xc8>)
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	4313      	orrs	r3, r2
 801a106:	4a18      	ldr	r2, [pc, #96]	@ (801a168 <prvAddNewTaskToReadyList+0xc8>)
 801a108:	6013      	str	r3, [r2, #0]
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a10e:	4613      	mov	r3, r2
 801a110:	009b      	lsls	r3, r3, #2
 801a112:	4413      	add	r3, r2
 801a114:	009b      	lsls	r3, r3, #2
 801a116:	4a15      	ldr	r2, [pc, #84]	@ (801a16c <prvAddNewTaskToReadyList+0xcc>)
 801a118:	441a      	add	r2, r3
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	3304      	adds	r3, #4
 801a11e:	4619      	mov	r1, r3
 801a120:	4610      	mov	r0, r2
 801a122:	f7fe fda2 	bl	8018c6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a126:	f001 f84f 	bl	801b1c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a12a:	4b0d      	ldr	r3, [pc, #52]	@ (801a160 <prvAddNewTaskToReadyList+0xc0>)
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d00e      	beq.n	801a150 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a132:	4b0a      	ldr	r3, [pc, #40]	@ (801a15c <prvAddNewTaskToReadyList+0xbc>)
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a13c:	429a      	cmp	r2, r3
 801a13e:	d207      	bcs.n	801a150 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a140:	4b0b      	ldr	r3, [pc, #44]	@ (801a170 <prvAddNewTaskToReadyList+0xd0>)
 801a142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a146:	601a      	str	r2, [r3, #0]
 801a148:	f3bf 8f4f 	dsb	sy
 801a14c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a150:	bf00      	nop
 801a152:	3708      	adds	r7, #8
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}
 801a158:	2000260c 	.word	0x2000260c
 801a15c:	2000250c 	.word	0x2000250c
 801a160:	20002618 	.word	0x20002618
 801a164:	20002628 	.word	0x20002628
 801a168:	20002614 	.word	0x20002614
 801a16c:	20002510 	.word	0x20002510
 801a170:	e000ed04 	.word	0xe000ed04

0801a174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a174:	b580      	push	{r7, lr}
 801a176:	b084      	sub	sp, #16
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a17c:	2300      	movs	r3, #0
 801a17e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	2b00      	cmp	r3, #0
 801a184:	d01a      	beq.n	801a1bc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a186:	4b15      	ldr	r3, [pc, #84]	@ (801a1dc <vTaskDelay+0x68>)
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d00d      	beq.n	801a1aa <vTaskDelay+0x36>
	__asm volatile
 801a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a192:	b672      	cpsid	i
 801a194:	f383 8811 	msr	BASEPRI, r3
 801a198:	f3bf 8f6f 	isb	sy
 801a19c:	f3bf 8f4f 	dsb	sy
 801a1a0:	b662      	cpsie	i
 801a1a2:	60bb      	str	r3, [r7, #8]
}
 801a1a4:	bf00      	nop
 801a1a6:	bf00      	nop
 801a1a8:	e7fd      	b.n	801a1a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 801a1aa:	f000 f881 	bl	801a2b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a1ae:	2100      	movs	r1, #0
 801a1b0:	6878      	ldr	r0, [r7, #4]
 801a1b2:	f000 fe5d 	bl	801ae70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a1b6:	f000 f889 	bl	801a2cc <xTaskResumeAll>
 801a1ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d107      	bne.n	801a1d2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801a1c2:	4b07      	ldr	r3, [pc, #28]	@ (801a1e0 <vTaskDelay+0x6c>)
 801a1c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a1c8:	601a      	str	r2, [r3, #0]
 801a1ca:	f3bf 8f4f 	dsb	sy
 801a1ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a1d2:	bf00      	nop
 801a1d4:	3710      	adds	r7, #16
 801a1d6:	46bd      	mov	sp, r7
 801a1d8:	bd80      	pop	{r7, pc}
 801a1da:	bf00      	nop
 801a1dc:	20002634 	.word	0x20002634
 801a1e0:	e000ed04 	.word	0xe000ed04

0801a1e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a1e4:	b580      	push	{r7, lr}
 801a1e6:	b08a      	sub	sp, #40	@ 0x28
 801a1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a1f2:	463a      	mov	r2, r7
 801a1f4:	1d39      	adds	r1, r7, #4
 801a1f6:	f107 0308 	add.w	r3, r7, #8
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	f7e7 fbda 	bl	80019b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a200:	6839      	ldr	r1, [r7, #0]
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	68ba      	ldr	r2, [r7, #8]
 801a206:	9202      	str	r2, [sp, #8]
 801a208:	9301      	str	r3, [sp, #4]
 801a20a:	2300      	movs	r3, #0
 801a20c:	9300      	str	r3, [sp, #0]
 801a20e:	2300      	movs	r3, #0
 801a210:	460a      	mov	r2, r1
 801a212:	4921      	ldr	r1, [pc, #132]	@ (801a298 <vTaskStartScheduler+0xb4>)
 801a214:	4821      	ldr	r0, [pc, #132]	@ (801a29c <vTaskStartScheduler+0xb8>)
 801a216:	f7ff fe03 	bl	8019e20 <xTaskCreateStatic>
 801a21a:	4603      	mov	r3, r0
 801a21c:	4a20      	ldr	r2, [pc, #128]	@ (801a2a0 <vTaskStartScheduler+0xbc>)
 801a21e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a220:	4b1f      	ldr	r3, [pc, #124]	@ (801a2a0 <vTaskStartScheduler+0xbc>)
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d002      	beq.n	801a22e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a228:	2301      	movs	r3, #1
 801a22a:	617b      	str	r3, [r7, #20]
 801a22c:	e001      	b.n	801a232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a22e:	2300      	movs	r3, #0
 801a230:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a232:	697b      	ldr	r3, [r7, #20]
 801a234:	2b01      	cmp	r3, #1
 801a236:	d118      	bne.n	801a26a <vTaskStartScheduler+0x86>
	__asm volatile
 801a238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a23c:	b672      	cpsid	i
 801a23e:	f383 8811 	msr	BASEPRI, r3
 801a242:	f3bf 8f6f 	isb	sy
 801a246:	f3bf 8f4f 	dsb	sy
 801a24a:	b662      	cpsie	i
 801a24c:	613b      	str	r3, [r7, #16]
}
 801a24e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a250:	4b14      	ldr	r3, [pc, #80]	@ (801a2a4 <vTaskStartScheduler+0xc0>)
 801a252:	f04f 32ff 	mov.w	r2, #4294967295
 801a256:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a258:	4b13      	ldr	r3, [pc, #76]	@ (801a2a8 <vTaskStartScheduler+0xc4>)
 801a25a:	2201      	movs	r2, #1
 801a25c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a25e:	4b13      	ldr	r3, [pc, #76]	@ (801a2ac <vTaskStartScheduler+0xc8>)
 801a260:	2200      	movs	r2, #0
 801a262:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a264:	f000 fefc 	bl	801b060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a268:	e011      	b.n	801a28e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a26a:	697b      	ldr	r3, [r7, #20]
 801a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a270:	d10d      	bne.n	801a28e <vTaskStartScheduler+0xaa>
	__asm volatile
 801a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a276:	b672      	cpsid	i
 801a278:	f383 8811 	msr	BASEPRI, r3
 801a27c:	f3bf 8f6f 	isb	sy
 801a280:	f3bf 8f4f 	dsb	sy
 801a284:	b662      	cpsie	i
 801a286:	60fb      	str	r3, [r7, #12]
}
 801a288:	bf00      	nop
 801a28a:	bf00      	nop
 801a28c:	e7fd      	b.n	801a28a <vTaskStartScheduler+0xa6>
}
 801a28e:	bf00      	nop
 801a290:	3718      	adds	r7, #24
 801a292:	46bd      	mov	sp, r7
 801a294:	bd80      	pop	{r7, pc}
 801a296:	bf00      	nop
 801a298:	0801f4a8 	.word	0x0801f4a8
 801a29c:	0801a901 	.word	0x0801a901
 801a2a0:	20002630 	.word	0x20002630
 801a2a4:	2000262c 	.word	0x2000262c
 801a2a8:	20002618 	.word	0x20002618
 801a2ac:	20002610 	.word	0x20002610

0801a2b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a2b0:	b480      	push	{r7}
 801a2b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801a2b4:	4b04      	ldr	r3, [pc, #16]	@ (801a2c8 <vTaskSuspendAll+0x18>)
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	3301      	adds	r3, #1
 801a2ba:	4a03      	ldr	r2, [pc, #12]	@ (801a2c8 <vTaskSuspendAll+0x18>)
 801a2bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801a2be:	bf00      	nop
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c6:	4770      	bx	lr
 801a2c8:	20002634 	.word	0x20002634

0801a2cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b084      	sub	sp, #16
 801a2d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a2da:	4b43      	ldr	r3, [pc, #268]	@ (801a3e8 <xTaskResumeAll+0x11c>)
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d10d      	bne.n	801a2fe <xTaskResumeAll+0x32>
	__asm volatile
 801a2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2e6:	b672      	cpsid	i
 801a2e8:	f383 8811 	msr	BASEPRI, r3
 801a2ec:	f3bf 8f6f 	isb	sy
 801a2f0:	f3bf 8f4f 	dsb	sy
 801a2f4:	b662      	cpsie	i
 801a2f6:	603b      	str	r3, [r7, #0]
}
 801a2f8:	bf00      	nop
 801a2fa:	bf00      	nop
 801a2fc:	e7fd      	b.n	801a2fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a2fe:	f000 ff2d 	bl	801b15c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a302:	4b39      	ldr	r3, [pc, #228]	@ (801a3e8 <xTaskResumeAll+0x11c>)
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	3b01      	subs	r3, #1
 801a308:	4a37      	ldr	r2, [pc, #220]	@ (801a3e8 <xTaskResumeAll+0x11c>)
 801a30a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a30c:	4b36      	ldr	r3, [pc, #216]	@ (801a3e8 <xTaskResumeAll+0x11c>)
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d161      	bne.n	801a3d8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a314:	4b35      	ldr	r3, [pc, #212]	@ (801a3ec <xTaskResumeAll+0x120>)
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d05d      	beq.n	801a3d8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a31c:	e02e      	b.n	801a37c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a31e:	4b34      	ldr	r3, [pc, #208]	@ (801a3f0 <xTaskResumeAll+0x124>)
 801a320:	68db      	ldr	r3, [r3, #12]
 801a322:	68db      	ldr	r3, [r3, #12]
 801a324:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	3318      	adds	r3, #24
 801a32a:	4618      	mov	r0, r3
 801a32c:	f7fe fcfa 	bl	8018d24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	3304      	adds	r3, #4
 801a334:	4618      	mov	r0, r3
 801a336:	f7fe fcf5 	bl	8018d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a33e:	2201      	movs	r2, #1
 801a340:	409a      	lsls	r2, r3
 801a342:	4b2c      	ldr	r3, [pc, #176]	@ (801a3f4 <xTaskResumeAll+0x128>)
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	4313      	orrs	r3, r2
 801a348:	4a2a      	ldr	r2, [pc, #168]	@ (801a3f4 <xTaskResumeAll+0x128>)
 801a34a:	6013      	str	r3, [r2, #0]
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a350:	4613      	mov	r3, r2
 801a352:	009b      	lsls	r3, r3, #2
 801a354:	4413      	add	r3, r2
 801a356:	009b      	lsls	r3, r3, #2
 801a358:	4a27      	ldr	r2, [pc, #156]	@ (801a3f8 <xTaskResumeAll+0x12c>)
 801a35a:	441a      	add	r2, r3
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	3304      	adds	r3, #4
 801a360:	4619      	mov	r1, r3
 801a362:	4610      	mov	r0, r2
 801a364:	f7fe fc81 	bl	8018c6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a36c:	4b23      	ldr	r3, [pc, #140]	@ (801a3fc <xTaskResumeAll+0x130>)
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a372:	429a      	cmp	r2, r3
 801a374:	d302      	bcc.n	801a37c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801a376:	4b22      	ldr	r3, [pc, #136]	@ (801a400 <xTaskResumeAll+0x134>)
 801a378:	2201      	movs	r2, #1
 801a37a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a37c:	4b1c      	ldr	r3, [pc, #112]	@ (801a3f0 <xTaskResumeAll+0x124>)
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d1cc      	bne.n	801a31e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d001      	beq.n	801a38e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a38a:	f000 fb73 	bl	801aa74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801a38e:	4b1d      	ldr	r3, [pc, #116]	@ (801a404 <xTaskResumeAll+0x138>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	2b00      	cmp	r3, #0
 801a398:	d010      	beq.n	801a3bc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a39a:	f000 f859 	bl	801a450 <xTaskIncrementTick>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d002      	beq.n	801a3aa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 801a3a4:	4b16      	ldr	r3, [pc, #88]	@ (801a400 <xTaskResumeAll+0x134>)
 801a3a6:	2201      	movs	r2, #1
 801a3a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	3b01      	subs	r3, #1
 801a3ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d1f1      	bne.n	801a39a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801a3b6:	4b13      	ldr	r3, [pc, #76]	@ (801a404 <xTaskResumeAll+0x138>)
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a3bc:	4b10      	ldr	r3, [pc, #64]	@ (801a400 <xTaskResumeAll+0x134>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d009      	beq.n	801a3d8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a3c8:	4b0f      	ldr	r3, [pc, #60]	@ (801a408 <xTaskResumeAll+0x13c>)
 801a3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a3ce:	601a      	str	r2, [r3, #0]
 801a3d0:	f3bf 8f4f 	dsb	sy
 801a3d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a3d8:	f000 fef6 	bl	801b1c8 <vPortExitCritical>

	return xAlreadyYielded;
 801a3dc:	68bb      	ldr	r3, [r7, #8]
}
 801a3de:	4618      	mov	r0, r3
 801a3e0:	3710      	adds	r7, #16
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd80      	pop	{r7, pc}
 801a3e6:	bf00      	nop
 801a3e8:	20002634 	.word	0x20002634
 801a3ec:	2000260c 	.word	0x2000260c
 801a3f0:	200025cc 	.word	0x200025cc
 801a3f4:	20002614 	.word	0x20002614
 801a3f8:	20002510 	.word	0x20002510
 801a3fc:	2000250c 	.word	0x2000250c
 801a400:	20002620 	.word	0x20002620
 801a404:	2000261c 	.word	0x2000261c
 801a408:	e000ed04 	.word	0xe000ed04

0801a40c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a40c:	b480      	push	{r7}
 801a40e:	b083      	sub	sp, #12
 801a410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a412:	4b05      	ldr	r3, [pc, #20]	@ (801a428 <xTaskGetTickCount+0x1c>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a418:	687b      	ldr	r3, [r7, #4]
}
 801a41a:	4618      	mov	r0, r3
 801a41c:	370c      	adds	r7, #12
 801a41e:	46bd      	mov	sp, r7
 801a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a424:	4770      	bx	lr
 801a426:	bf00      	nop
 801a428:	20002610 	.word	0x20002610

0801a42c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b082      	sub	sp, #8
 801a430:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a432:	f000 ff7b 	bl	801b32c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801a436:	2300      	movs	r3, #0
 801a438:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801a43a:	4b04      	ldr	r3, [pc, #16]	@ (801a44c <xTaskGetTickCountFromISR+0x20>)
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a440:	683b      	ldr	r3, [r7, #0]
}
 801a442:	4618      	mov	r0, r3
 801a444:	3708      	adds	r7, #8
 801a446:	46bd      	mov	sp, r7
 801a448:	bd80      	pop	{r7, pc}
 801a44a:	bf00      	nop
 801a44c:	20002610 	.word	0x20002610

0801a450 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b086      	sub	sp, #24
 801a454:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a456:	2300      	movs	r3, #0
 801a458:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a45a:	4b50      	ldr	r3, [pc, #320]	@ (801a59c <xTaskIncrementTick+0x14c>)
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	f040 808b 	bne.w	801a57a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a464:	4b4e      	ldr	r3, [pc, #312]	@ (801a5a0 <xTaskIncrementTick+0x150>)
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	3301      	adds	r3, #1
 801a46a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a46c:	4a4c      	ldr	r2, [pc, #304]	@ (801a5a0 <xTaskIncrementTick+0x150>)
 801a46e:	693b      	ldr	r3, [r7, #16]
 801a470:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a472:	693b      	ldr	r3, [r7, #16]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d123      	bne.n	801a4c0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 801a478:	4b4a      	ldr	r3, [pc, #296]	@ (801a5a4 <xTaskIncrementTick+0x154>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d00d      	beq.n	801a49e <xTaskIncrementTick+0x4e>
	__asm volatile
 801a482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a486:	b672      	cpsid	i
 801a488:	f383 8811 	msr	BASEPRI, r3
 801a48c:	f3bf 8f6f 	isb	sy
 801a490:	f3bf 8f4f 	dsb	sy
 801a494:	b662      	cpsie	i
 801a496:	603b      	str	r3, [r7, #0]
}
 801a498:	bf00      	nop
 801a49a:	bf00      	nop
 801a49c:	e7fd      	b.n	801a49a <xTaskIncrementTick+0x4a>
 801a49e:	4b41      	ldr	r3, [pc, #260]	@ (801a5a4 <xTaskIncrementTick+0x154>)
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	60fb      	str	r3, [r7, #12]
 801a4a4:	4b40      	ldr	r3, [pc, #256]	@ (801a5a8 <xTaskIncrementTick+0x158>)
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	4a3e      	ldr	r2, [pc, #248]	@ (801a5a4 <xTaskIncrementTick+0x154>)
 801a4aa:	6013      	str	r3, [r2, #0]
 801a4ac:	4a3e      	ldr	r2, [pc, #248]	@ (801a5a8 <xTaskIncrementTick+0x158>)
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	6013      	str	r3, [r2, #0]
 801a4b2:	4b3e      	ldr	r3, [pc, #248]	@ (801a5ac <xTaskIncrementTick+0x15c>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	3301      	adds	r3, #1
 801a4b8:	4a3c      	ldr	r2, [pc, #240]	@ (801a5ac <xTaskIncrementTick+0x15c>)
 801a4ba:	6013      	str	r3, [r2, #0]
 801a4bc:	f000 fada 	bl	801aa74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a4c0:	4b3b      	ldr	r3, [pc, #236]	@ (801a5b0 <xTaskIncrementTick+0x160>)
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	693a      	ldr	r2, [r7, #16]
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	d348      	bcc.n	801a55c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a4ca:	4b36      	ldr	r3, [pc, #216]	@ (801a5a4 <xTaskIncrementTick+0x154>)
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d104      	bne.n	801a4de <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a4d4:	4b36      	ldr	r3, [pc, #216]	@ (801a5b0 <xTaskIncrementTick+0x160>)
 801a4d6:	f04f 32ff 	mov.w	r2, #4294967295
 801a4da:	601a      	str	r2, [r3, #0]
					break;
 801a4dc:	e03e      	b.n	801a55c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4de:	4b31      	ldr	r3, [pc, #196]	@ (801a5a4 <xTaskIncrementTick+0x154>)
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	68db      	ldr	r3, [r3, #12]
 801a4e4:	68db      	ldr	r3, [r3, #12]
 801a4e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a4e8:	68bb      	ldr	r3, [r7, #8]
 801a4ea:	685b      	ldr	r3, [r3, #4]
 801a4ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a4ee:	693a      	ldr	r2, [r7, #16]
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	429a      	cmp	r2, r3
 801a4f4:	d203      	bcs.n	801a4fe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a4f6:	4a2e      	ldr	r2, [pc, #184]	@ (801a5b0 <xTaskIncrementTick+0x160>)
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a4fc:	e02e      	b.n	801a55c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a4fe:	68bb      	ldr	r3, [r7, #8]
 801a500:	3304      	adds	r3, #4
 801a502:	4618      	mov	r0, r3
 801a504:	f7fe fc0e 	bl	8018d24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a508:	68bb      	ldr	r3, [r7, #8]
 801a50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d004      	beq.n	801a51a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a510:	68bb      	ldr	r3, [r7, #8]
 801a512:	3318      	adds	r3, #24
 801a514:	4618      	mov	r0, r3
 801a516:	f7fe fc05 	bl	8018d24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a51a:	68bb      	ldr	r3, [r7, #8]
 801a51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a51e:	2201      	movs	r2, #1
 801a520:	409a      	lsls	r2, r3
 801a522:	4b24      	ldr	r3, [pc, #144]	@ (801a5b4 <xTaskIncrementTick+0x164>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	4313      	orrs	r3, r2
 801a528:	4a22      	ldr	r2, [pc, #136]	@ (801a5b4 <xTaskIncrementTick+0x164>)
 801a52a:	6013      	str	r3, [r2, #0]
 801a52c:	68bb      	ldr	r3, [r7, #8]
 801a52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a530:	4613      	mov	r3, r2
 801a532:	009b      	lsls	r3, r3, #2
 801a534:	4413      	add	r3, r2
 801a536:	009b      	lsls	r3, r3, #2
 801a538:	4a1f      	ldr	r2, [pc, #124]	@ (801a5b8 <xTaskIncrementTick+0x168>)
 801a53a:	441a      	add	r2, r3
 801a53c:	68bb      	ldr	r3, [r7, #8]
 801a53e:	3304      	adds	r3, #4
 801a540:	4619      	mov	r1, r3
 801a542:	4610      	mov	r0, r2
 801a544:	f7fe fb91 	bl	8018c6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a548:	68bb      	ldr	r3, [r7, #8]
 801a54a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a54c:	4b1b      	ldr	r3, [pc, #108]	@ (801a5bc <xTaskIncrementTick+0x16c>)
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a552:	429a      	cmp	r2, r3
 801a554:	d3b9      	bcc.n	801a4ca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801a556:	2301      	movs	r3, #1
 801a558:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a55a:	e7b6      	b.n	801a4ca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a55c:	4b17      	ldr	r3, [pc, #92]	@ (801a5bc <xTaskIncrementTick+0x16c>)
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a562:	4915      	ldr	r1, [pc, #84]	@ (801a5b8 <xTaskIncrementTick+0x168>)
 801a564:	4613      	mov	r3, r2
 801a566:	009b      	lsls	r3, r3, #2
 801a568:	4413      	add	r3, r2
 801a56a:	009b      	lsls	r3, r3, #2
 801a56c:	440b      	add	r3, r1
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	2b01      	cmp	r3, #1
 801a572:	d907      	bls.n	801a584 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 801a574:	2301      	movs	r3, #1
 801a576:	617b      	str	r3, [r7, #20]
 801a578:	e004      	b.n	801a584 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801a57a:	4b11      	ldr	r3, [pc, #68]	@ (801a5c0 <xTaskIncrementTick+0x170>)
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	3301      	adds	r3, #1
 801a580:	4a0f      	ldr	r2, [pc, #60]	@ (801a5c0 <xTaskIncrementTick+0x170>)
 801a582:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801a584:	4b0f      	ldr	r3, [pc, #60]	@ (801a5c4 <xTaskIncrementTick+0x174>)
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d001      	beq.n	801a590 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801a58c:	2301      	movs	r3, #1
 801a58e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801a590:	697b      	ldr	r3, [r7, #20]
}
 801a592:	4618      	mov	r0, r3
 801a594:	3718      	adds	r7, #24
 801a596:	46bd      	mov	sp, r7
 801a598:	bd80      	pop	{r7, pc}
 801a59a:	bf00      	nop
 801a59c:	20002634 	.word	0x20002634
 801a5a0:	20002610 	.word	0x20002610
 801a5a4:	200025c4 	.word	0x200025c4
 801a5a8:	200025c8 	.word	0x200025c8
 801a5ac:	20002624 	.word	0x20002624
 801a5b0:	2000262c 	.word	0x2000262c
 801a5b4:	20002614 	.word	0x20002614
 801a5b8:	20002510 	.word	0x20002510
 801a5bc:	2000250c 	.word	0x2000250c
 801a5c0:	2000261c 	.word	0x2000261c
 801a5c4:	20002620 	.word	0x20002620

0801a5c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b088      	sub	sp, #32
 801a5cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a5ce:	4b3b      	ldr	r3, [pc, #236]	@ (801a6bc <vTaskSwitchContext+0xf4>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d003      	beq.n	801a5de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a5d6:	4b3a      	ldr	r3, [pc, #232]	@ (801a6c0 <vTaskSwitchContext+0xf8>)
 801a5d8:	2201      	movs	r2, #1
 801a5da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a5dc:	e069      	b.n	801a6b2 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 801a5de:	4b38      	ldr	r3, [pc, #224]	@ (801a6c0 <vTaskSwitchContext+0xf8>)
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801a5e4:	4b37      	ldr	r3, [pc, #220]	@ (801a6c4 <vTaskSwitchContext+0xfc>)
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a5ea:	61fb      	str	r3, [r7, #28]
 801a5ec:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801a5f0:	61bb      	str	r3, [r7, #24]
 801a5f2:	69fb      	ldr	r3, [r7, #28]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	69ba      	ldr	r2, [r7, #24]
 801a5f8:	429a      	cmp	r2, r3
 801a5fa:	d111      	bne.n	801a620 <vTaskSwitchContext+0x58>
 801a5fc:	69fb      	ldr	r3, [r7, #28]
 801a5fe:	3304      	adds	r3, #4
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	69ba      	ldr	r2, [r7, #24]
 801a604:	429a      	cmp	r2, r3
 801a606:	d10b      	bne.n	801a620 <vTaskSwitchContext+0x58>
 801a608:	69fb      	ldr	r3, [r7, #28]
 801a60a:	3308      	adds	r3, #8
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	69ba      	ldr	r2, [r7, #24]
 801a610:	429a      	cmp	r2, r3
 801a612:	d105      	bne.n	801a620 <vTaskSwitchContext+0x58>
 801a614:	69fb      	ldr	r3, [r7, #28]
 801a616:	330c      	adds	r3, #12
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	69ba      	ldr	r2, [r7, #24]
 801a61c:	429a      	cmp	r2, r3
 801a61e:	d008      	beq.n	801a632 <vTaskSwitchContext+0x6a>
 801a620:	4b28      	ldr	r3, [pc, #160]	@ (801a6c4 <vTaskSwitchContext+0xfc>)
 801a622:	681a      	ldr	r2, [r3, #0]
 801a624:	4b27      	ldr	r3, [pc, #156]	@ (801a6c4 <vTaskSwitchContext+0xfc>)
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	3334      	adds	r3, #52	@ 0x34
 801a62a:	4619      	mov	r1, r3
 801a62c:	4610      	mov	r0, r2
 801a62e:	f7e7 f9af 	bl	8001990 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a632:	4b25      	ldr	r3, [pc, #148]	@ (801a6c8 <vTaskSwitchContext+0x100>)
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	fab3 f383 	clz	r3, r3
 801a63e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801a640:	7afb      	ldrb	r3, [r7, #11]
 801a642:	f1c3 031f 	rsb	r3, r3, #31
 801a646:	617b      	str	r3, [r7, #20]
 801a648:	4920      	ldr	r1, [pc, #128]	@ (801a6cc <vTaskSwitchContext+0x104>)
 801a64a:	697a      	ldr	r2, [r7, #20]
 801a64c:	4613      	mov	r3, r2
 801a64e:	009b      	lsls	r3, r3, #2
 801a650:	4413      	add	r3, r2
 801a652:	009b      	lsls	r3, r3, #2
 801a654:	440b      	add	r3, r1
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d10d      	bne.n	801a678 <vTaskSwitchContext+0xb0>
	__asm volatile
 801a65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a660:	b672      	cpsid	i
 801a662:	f383 8811 	msr	BASEPRI, r3
 801a666:	f3bf 8f6f 	isb	sy
 801a66a:	f3bf 8f4f 	dsb	sy
 801a66e:	b662      	cpsie	i
 801a670:	607b      	str	r3, [r7, #4]
}
 801a672:	bf00      	nop
 801a674:	bf00      	nop
 801a676:	e7fd      	b.n	801a674 <vTaskSwitchContext+0xac>
 801a678:	697a      	ldr	r2, [r7, #20]
 801a67a:	4613      	mov	r3, r2
 801a67c:	009b      	lsls	r3, r3, #2
 801a67e:	4413      	add	r3, r2
 801a680:	009b      	lsls	r3, r3, #2
 801a682:	4a12      	ldr	r2, [pc, #72]	@ (801a6cc <vTaskSwitchContext+0x104>)
 801a684:	4413      	add	r3, r2
 801a686:	613b      	str	r3, [r7, #16]
 801a688:	693b      	ldr	r3, [r7, #16]
 801a68a:	685b      	ldr	r3, [r3, #4]
 801a68c:	685a      	ldr	r2, [r3, #4]
 801a68e:	693b      	ldr	r3, [r7, #16]
 801a690:	605a      	str	r2, [r3, #4]
 801a692:	693b      	ldr	r3, [r7, #16]
 801a694:	685a      	ldr	r2, [r3, #4]
 801a696:	693b      	ldr	r3, [r7, #16]
 801a698:	3308      	adds	r3, #8
 801a69a:	429a      	cmp	r2, r3
 801a69c:	d104      	bne.n	801a6a8 <vTaskSwitchContext+0xe0>
 801a69e:	693b      	ldr	r3, [r7, #16]
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	685a      	ldr	r2, [r3, #4]
 801a6a4:	693b      	ldr	r3, [r7, #16]
 801a6a6:	605a      	str	r2, [r3, #4]
 801a6a8:	693b      	ldr	r3, [r7, #16]
 801a6aa:	685b      	ldr	r3, [r3, #4]
 801a6ac:	68db      	ldr	r3, [r3, #12]
 801a6ae:	4a05      	ldr	r2, [pc, #20]	@ (801a6c4 <vTaskSwitchContext+0xfc>)
 801a6b0:	6013      	str	r3, [r2, #0]
}
 801a6b2:	bf00      	nop
 801a6b4:	3720      	adds	r7, #32
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	bd80      	pop	{r7, pc}
 801a6ba:	bf00      	nop
 801a6bc:	20002634 	.word	0x20002634
 801a6c0:	20002620 	.word	0x20002620
 801a6c4:	2000250c 	.word	0x2000250c
 801a6c8:	20002614 	.word	0x20002614
 801a6cc:	20002510 	.word	0x20002510

0801a6d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b084      	sub	sp, #16
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	6078      	str	r0, [r7, #4]
 801a6d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d10d      	bne.n	801a6fc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 801a6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a6e4:	b672      	cpsid	i
 801a6e6:	f383 8811 	msr	BASEPRI, r3
 801a6ea:	f3bf 8f6f 	isb	sy
 801a6ee:	f3bf 8f4f 	dsb	sy
 801a6f2:	b662      	cpsie	i
 801a6f4:	60fb      	str	r3, [r7, #12]
}
 801a6f6:	bf00      	nop
 801a6f8:	bf00      	nop
 801a6fa:	e7fd      	b.n	801a6f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a6fc:	4b07      	ldr	r3, [pc, #28]	@ (801a71c <vTaskPlaceOnEventList+0x4c>)
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	3318      	adds	r3, #24
 801a702:	4619      	mov	r1, r3
 801a704:	6878      	ldr	r0, [r7, #4]
 801a706:	f7fe fad4 	bl	8018cb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a70a:	2101      	movs	r1, #1
 801a70c:	6838      	ldr	r0, [r7, #0]
 801a70e:	f000 fbaf 	bl	801ae70 <prvAddCurrentTaskToDelayedList>
}
 801a712:	bf00      	nop
 801a714:	3710      	adds	r7, #16
 801a716:	46bd      	mov	sp, r7
 801a718:	bd80      	pop	{r7, pc}
 801a71a:	bf00      	nop
 801a71c:	2000250c 	.word	0x2000250c

0801a720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b086      	sub	sp, #24
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	68db      	ldr	r3, [r3, #12]
 801a72c:	68db      	ldr	r3, [r3, #12]
 801a72e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a730:	693b      	ldr	r3, [r7, #16]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d10d      	bne.n	801a752 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801a736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a73a:	b672      	cpsid	i
 801a73c:	f383 8811 	msr	BASEPRI, r3
 801a740:	f3bf 8f6f 	isb	sy
 801a744:	f3bf 8f4f 	dsb	sy
 801a748:	b662      	cpsie	i
 801a74a:	60fb      	str	r3, [r7, #12]
}
 801a74c:	bf00      	nop
 801a74e:	bf00      	nop
 801a750:	e7fd      	b.n	801a74e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a752:	693b      	ldr	r3, [r7, #16]
 801a754:	3318      	adds	r3, #24
 801a756:	4618      	mov	r0, r3
 801a758:	f7fe fae4 	bl	8018d24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a75c:	4b1d      	ldr	r3, [pc, #116]	@ (801a7d4 <xTaskRemoveFromEventList+0xb4>)
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d11c      	bne.n	801a79e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	3304      	adds	r3, #4
 801a768:	4618      	mov	r0, r3
 801a76a:	f7fe fadb 	bl	8018d24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a76e:	693b      	ldr	r3, [r7, #16]
 801a770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a772:	2201      	movs	r2, #1
 801a774:	409a      	lsls	r2, r3
 801a776:	4b18      	ldr	r3, [pc, #96]	@ (801a7d8 <xTaskRemoveFromEventList+0xb8>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	4313      	orrs	r3, r2
 801a77c:	4a16      	ldr	r2, [pc, #88]	@ (801a7d8 <xTaskRemoveFromEventList+0xb8>)
 801a77e:	6013      	str	r3, [r2, #0]
 801a780:	693b      	ldr	r3, [r7, #16]
 801a782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a784:	4613      	mov	r3, r2
 801a786:	009b      	lsls	r3, r3, #2
 801a788:	4413      	add	r3, r2
 801a78a:	009b      	lsls	r3, r3, #2
 801a78c:	4a13      	ldr	r2, [pc, #76]	@ (801a7dc <xTaskRemoveFromEventList+0xbc>)
 801a78e:	441a      	add	r2, r3
 801a790:	693b      	ldr	r3, [r7, #16]
 801a792:	3304      	adds	r3, #4
 801a794:	4619      	mov	r1, r3
 801a796:	4610      	mov	r0, r2
 801a798:	f7fe fa67 	bl	8018c6a <vListInsertEnd>
 801a79c:	e005      	b.n	801a7aa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a79e:	693b      	ldr	r3, [r7, #16]
 801a7a0:	3318      	adds	r3, #24
 801a7a2:	4619      	mov	r1, r3
 801a7a4:	480e      	ldr	r0, [pc, #56]	@ (801a7e0 <xTaskRemoveFromEventList+0xc0>)
 801a7a6:	f7fe fa60 	bl	8018c6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a7aa:	693b      	ldr	r3, [r7, #16]
 801a7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a7ae:	4b0d      	ldr	r3, [pc, #52]	@ (801a7e4 <xTaskRemoveFromEventList+0xc4>)
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a7b4:	429a      	cmp	r2, r3
 801a7b6:	d905      	bls.n	801a7c4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a7b8:	2301      	movs	r3, #1
 801a7ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a7bc:	4b0a      	ldr	r3, [pc, #40]	@ (801a7e8 <xTaskRemoveFromEventList+0xc8>)
 801a7be:	2201      	movs	r2, #1
 801a7c0:	601a      	str	r2, [r3, #0]
 801a7c2:	e001      	b.n	801a7c8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a7c8:	697b      	ldr	r3, [r7, #20]
}
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	3718      	adds	r7, #24
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}
 801a7d2:	bf00      	nop
 801a7d4:	20002634 	.word	0x20002634
 801a7d8:	20002614 	.word	0x20002614
 801a7dc:	20002510 	.word	0x20002510
 801a7e0:	200025cc 	.word	0x200025cc
 801a7e4:	2000250c 	.word	0x2000250c
 801a7e8:	20002620 	.word	0x20002620

0801a7ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a7ec:	b480      	push	{r7}
 801a7ee:	b083      	sub	sp, #12
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a7f4:	4b06      	ldr	r3, [pc, #24]	@ (801a810 <vTaskInternalSetTimeOutState+0x24>)
 801a7f6:	681a      	ldr	r2, [r3, #0]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a7fc:	4b05      	ldr	r3, [pc, #20]	@ (801a814 <vTaskInternalSetTimeOutState+0x28>)
 801a7fe:	681a      	ldr	r2, [r3, #0]
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	605a      	str	r2, [r3, #4]
}
 801a804:	bf00      	nop
 801a806:	370c      	adds	r7, #12
 801a808:	46bd      	mov	sp, r7
 801a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a80e:	4770      	bx	lr
 801a810:	20002624 	.word	0x20002624
 801a814:	20002610 	.word	0x20002610

0801a818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b088      	sub	sp, #32
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
 801a820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d10d      	bne.n	801a844 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 801a828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a82c:	b672      	cpsid	i
 801a82e:	f383 8811 	msr	BASEPRI, r3
 801a832:	f3bf 8f6f 	isb	sy
 801a836:	f3bf 8f4f 	dsb	sy
 801a83a:	b662      	cpsie	i
 801a83c:	613b      	str	r3, [r7, #16]
}
 801a83e:	bf00      	nop
 801a840:	bf00      	nop
 801a842:	e7fd      	b.n	801a840 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801a844:	683b      	ldr	r3, [r7, #0]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d10d      	bne.n	801a866 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801a84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a84e:	b672      	cpsid	i
 801a850:	f383 8811 	msr	BASEPRI, r3
 801a854:	f3bf 8f6f 	isb	sy
 801a858:	f3bf 8f4f 	dsb	sy
 801a85c:	b662      	cpsie	i
 801a85e:	60fb      	str	r3, [r7, #12]
}
 801a860:	bf00      	nop
 801a862:	bf00      	nop
 801a864:	e7fd      	b.n	801a862 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801a866:	f000 fc79 	bl	801b15c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a86a:	4b1d      	ldr	r3, [pc, #116]	@ (801a8e0 <xTaskCheckForTimeOut+0xc8>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	685b      	ldr	r3, [r3, #4]
 801a874:	69ba      	ldr	r2, [r7, #24]
 801a876:	1ad3      	subs	r3, r2, r3
 801a878:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a87a:	683b      	ldr	r3, [r7, #0]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a882:	d102      	bne.n	801a88a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a884:	2300      	movs	r3, #0
 801a886:	61fb      	str	r3, [r7, #28]
 801a888:	e023      	b.n	801a8d2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	681a      	ldr	r2, [r3, #0]
 801a88e:	4b15      	ldr	r3, [pc, #84]	@ (801a8e4 <xTaskCheckForTimeOut+0xcc>)
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	429a      	cmp	r2, r3
 801a894:	d007      	beq.n	801a8a6 <xTaskCheckForTimeOut+0x8e>
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	685b      	ldr	r3, [r3, #4]
 801a89a:	69ba      	ldr	r2, [r7, #24]
 801a89c:	429a      	cmp	r2, r3
 801a89e:	d302      	bcc.n	801a8a6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a8a0:	2301      	movs	r3, #1
 801a8a2:	61fb      	str	r3, [r7, #28]
 801a8a4:	e015      	b.n	801a8d2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a8a6:	683b      	ldr	r3, [r7, #0]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	697a      	ldr	r2, [r7, #20]
 801a8ac:	429a      	cmp	r2, r3
 801a8ae:	d20b      	bcs.n	801a8c8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a8b0:	683b      	ldr	r3, [r7, #0]
 801a8b2:	681a      	ldr	r2, [r3, #0]
 801a8b4:	697b      	ldr	r3, [r7, #20]
 801a8b6:	1ad2      	subs	r2, r2, r3
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a8bc:	6878      	ldr	r0, [r7, #4]
 801a8be:	f7ff ff95 	bl	801a7ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a8c2:	2300      	movs	r3, #0
 801a8c4:	61fb      	str	r3, [r7, #28]
 801a8c6:	e004      	b.n	801a8d2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a8ce:	2301      	movs	r3, #1
 801a8d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a8d2:	f000 fc79 	bl	801b1c8 <vPortExitCritical>

	return xReturn;
 801a8d6:	69fb      	ldr	r3, [r7, #28]
}
 801a8d8:	4618      	mov	r0, r3
 801a8da:	3720      	adds	r7, #32
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bd80      	pop	{r7, pc}
 801a8e0:	20002610 	.word	0x20002610
 801a8e4:	20002624 	.word	0x20002624

0801a8e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a8e8:	b480      	push	{r7}
 801a8ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a8ec:	4b03      	ldr	r3, [pc, #12]	@ (801a8fc <vTaskMissedYield+0x14>)
 801a8ee:	2201      	movs	r2, #1
 801a8f0:	601a      	str	r2, [r3, #0]
}
 801a8f2:	bf00      	nop
 801a8f4:	46bd      	mov	sp, r7
 801a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8fa:	4770      	bx	lr
 801a8fc:	20002620 	.word	0x20002620

0801a900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a900:	b580      	push	{r7, lr}
 801a902:	b082      	sub	sp, #8
 801a904:	af00      	add	r7, sp, #0
 801a906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a908:	f000 f854 	bl	801a9b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a90c:	4b07      	ldr	r3, [pc, #28]	@ (801a92c <prvIdleTask+0x2c>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	2b01      	cmp	r3, #1
 801a912:	d907      	bls.n	801a924 <prvIdleTask+0x24>
			{
				taskYIELD();
 801a914:	4b06      	ldr	r3, [pc, #24]	@ (801a930 <prvIdleTask+0x30>)
 801a916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a91a:	601a      	str	r2, [r3, #0]
 801a91c:	f3bf 8f4f 	dsb	sy
 801a920:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801a924:	f7e7 f82d 	bl	8001982 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801a928:	e7ee      	b.n	801a908 <prvIdleTask+0x8>
 801a92a:	bf00      	nop
 801a92c:	20002510 	.word	0x20002510
 801a930:	e000ed04 	.word	0xe000ed04

0801a934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a934:	b580      	push	{r7, lr}
 801a936:	b082      	sub	sp, #8
 801a938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a93a:	2300      	movs	r3, #0
 801a93c:	607b      	str	r3, [r7, #4]
 801a93e:	e00c      	b.n	801a95a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a940:	687a      	ldr	r2, [r7, #4]
 801a942:	4613      	mov	r3, r2
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	4413      	add	r3, r2
 801a948:	009b      	lsls	r3, r3, #2
 801a94a:	4a12      	ldr	r2, [pc, #72]	@ (801a994 <prvInitialiseTaskLists+0x60>)
 801a94c:	4413      	add	r3, r2
 801a94e:	4618      	mov	r0, r3
 801a950:	f7fe f95e 	bl	8018c10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	3301      	adds	r3, #1
 801a958:	607b      	str	r3, [r7, #4]
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	2b06      	cmp	r3, #6
 801a95e:	d9ef      	bls.n	801a940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a960:	480d      	ldr	r0, [pc, #52]	@ (801a998 <prvInitialiseTaskLists+0x64>)
 801a962:	f7fe f955 	bl	8018c10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a966:	480d      	ldr	r0, [pc, #52]	@ (801a99c <prvInitialiseTaskLists+0x68>)
 801a968:	f7fe f952 	bl	8018c10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a96c:	480c      	ldr	r0, [pc, #48]	@ (801a9a0 <prvInitialiseTaskLists+0x6c>)
 801a96e:	f7fe f94f 	bl	8018c10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a972:	480c      	ldr	r0, [pc, #48]	@ (801a9a4 <prvInitialiseTaskLists+0x70>)
 801a974:	f7fe f94c 	bl	8018c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a978:	480b      	ldr	r0, [pc, #44]	@ (801a9a8 <prvInitialiseTaskLists+0x74>)
 801a97a:	f7fe f949 	bl	8018c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a97e:	4b0b      	ldr	r3, [pc, #44]	@ (801a9ac <prvInitialiseTaskLists+0x78>)
 801a980:	4a05      	ldr	r2, [pc, #20]	@ (801a998 <prvInitialiseTaskLists+0x64>)
 801a982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a984:	4b0a      	ldr	r3, [pc, #40]	@ (801a9b0 <prvInitialiseTaskLists+0x7c>)
 801a986:	4a05      	ldr	r2, [pc, #20]	@ (801a99c <prvInitialiseTaskLists+0x68>)
 801a988:	601a      	str	r2, [r3, #0]
}
 801a98a:	bf00      	nop
 801a98c:	3708      	adds	r7, #8
 801a98e:	46bd      	mov	sp, r7
 801a990:	bd80      	pop	{r7, pc}
 801a992:	bf00      	nop
 801a994:	20002510 	.word	0x20002510
 801a998:	2000259c 	.word	0x2000259c
 801a99c:	200025b0 	.word	0x200025b0
 801a9a0:	200025cc 	.word	0x200025cc
 801a9a4:	200025e0 	.word	0x200025e0
 801a9a8:	200025f8 	.word	0x200025f8
 801a9ac:	200025c4 	.word	0x200025c4
 801a9b0:	200025c8 	.word	0x200025c8

0801a9b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	b082      	sub	sp, #8
 801a9b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a9ba:	e019      	b.n	801a9f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a9bc:	f000 fbce 	bl	801b15c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a9c0:	4b10      	ldr	r3, [pc, #64]	@ (801aa04 <prvCheckTasksWaitingTermination+0x50>)
 801a9c2:	68db      	ldr	r3, [r3, #12]
 801a9c4:	68db      	ldr	r3, [r3, #12]
 801a9c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	3304      	adds	r3, #4
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f7fe f9a9 	bl	8018d24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a9d2:	4b0d      	ldr	r3, [pc, #52]	@ (801aa08 <prvCheckTasksWaitingTermination+0x54>)
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	3b01      	subs	r3, #1
 801a9d8:	4a0b      	ldr	r2, [pc, #44]	@ (801aa08 <prvCheckTasksWaitingTermination+0x54>)
 801a9da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a9dc:	4b0b      	ldr	r3, [pc, #44]	@ (801aa0c <prvCheckTasksWaitingTermination+0x58>)
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	3b01      	subs	r3, #1
 801a9e2:	4a0a      	ldr	r2, [pc, #40]	@ (801aa0c <prvCheckTasksWaitingTermination+0x58>)
 801a9e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a9e6:	f000 fbef 	bl	801b1c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a9ea:	6878      	ldr	r0, [r7, #4]
 801a9ec:	f000 f810 	bl	801aa10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a9f0:	4b06      	ldr	r3, [pc, #24]	@ (801aa0c <prvCheckTasksWaitingTermination+0x58>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d1e1      	bne.n	801a9bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a9f8:	bf00      	nop
 801a9fa:	bf00      	nop
 801a9fc:	3708      	adds	r7, #8
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}
 801aa02:	bf00      	nop
 801aa04:	200025e0 	.word	0x200025e0
 801aa08:	2000260c 	.word	0x2000260c
 801aa0c:	200025f4 	.word	0x200025f4

0801aa10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b084      	sub	sp, #16
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d108      	bne.n	801aa34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aa26:	4618      	mov	r0, r3
 801aa28:	f000 fd98 	bl	801b55c <vPortFree>
				vPortFree( pxTCB );
 801aa2c:	6878      	ldr	r0, [r7, #4]
 801aa2e:	f000 fd95 	bl	801b55c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801aa32:	e01b      	b.n	801aa6c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801aa3a:	2b01      	cmp	r3, #1
 801aa3c:	d103      	bne.n	801aa46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801aa3e:	6878      	ldr	r0, [r7, #4]
 801aa40:	f000 fd8c 	bl	801b55c <vPortFree>
	}
 801aa44:	e012      	b.n	801aa6c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801aa4c:	2b02      	cmp	r3, #2
 801aa4e:	d00d      	beq.n	801aa6c <prvDeleteTCB+0x5c>
	__asm volatile
 801aa50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa54:	b672      	cpsid	i
 801aa56:	f383 8811 	msr	BASEPRI, r3
 801aa5a:	f3bf 8f6f 	isb	sy
 801aa5e:	f3bf 8f4f 	dsb	sy
 801aa62:	b662      	cpsie	i
 801aa64:	60fb      	str	r3, [r7, #12]
}
 801aa66:	bf00      	nop
 801aa68:	bf00      	nop
 801aa6a:	e7fd      	b.n	801aa68 <prvDeleteTCB+0x58>
	}
 801aa6c:	bf00      	nop
 801aa6e:	3710      	adds	r7, #16
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}

0801aa74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801aa74:	b480      	push	{r7}
 801aa76:	b083      	sub	sp, #12
 801aa78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801aa7a:	4b0c      	ldr	r3, [pc, #48]	@ (801aaac <prvResetNextTaskUnblockTime+0x38>)
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d104      	bne.n	801aa8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801aa84:	4b0a      	ldr	r3, [pc, #40]	@ (801aab0 <prvResetNextTaskUnblockTime+0x3c>)
 801aa86:	f04f 32ff 	mov.w	r2, #4294967295
 801aa8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801aa8c:	e008      	b.n	801aaa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aa8e:	4b07      	ldr	r3, [pc, #28]	@ (801aaac <prvResetNextTaskUnblockTime+0x38>)
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	68db      	ldr	r3, [r3, #12]
 801aa94:	68db      	ldr	r3, [r3, #12]
 801aa96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	685b      	ldr	r3, [r3, #4]
 801aa9c:	4a04      	ldr	r2, [pc, #16]	@ (801aab0 <prvResetNextTaskUnblockTime+0x3c>)
 801aa9e:	6013      	str	r3, [r2, #0]
}
 801aaa0:	bf00      	nop
 801aaa2:	370c      	adds	r7, #12
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaaa:	4770      	bx	lr
 801aaac:	200025c4 	.word	0x200025c4
 801aab0:	2000262c 	.word	0x2000262c

0801aab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801aab4:	b480      	push	{r7}
 801aab6:	b083      	sub	sp, #12
 801aab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801aaba:	4b0b      	ldr	r3, [pc, #44]	@ (801aae8 <xTaskGetSchedulerState+0x34>)
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d102      	bne.n	801aac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801aac2:	2301      	movs	r3, #1
 801aac4:	607b      	str	r3, [r7, #4]
 801aac6:	e008      	b.n	801aada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801aac8:	4b08      	ldr	r3, [pc, #32]	@ (801aaec <xTaskGetSchedulerState+0x38>)
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d102      	bne.n	801aad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801aad0:	2302      	movs	r3, #2
 801aad2:	607b      	str	r3, [r7, #4]
 801aad4:	e001      	b.n	801aada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801aad6:	2300      	movs	r3, #0
 801aad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801aada:	687b      	ldr	r3, [r7, #4]
	}
 801aadc:	4618      	mov	r0, r3
 801aade:	370c      	adds	r7, #12
 801aae0:	46bd      	mov	sp, r7
 801aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae6:	4770      	bx	lr
 801aae8:	20002618 	.word	0x20002618
 801aaec:	20002634 	.word	0x20002634

0801aaf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b084      	sub	sp, #16
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801aafc:	2300      	movs	r3, #0
 801aafe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d069      	beq.n	801abda <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801ab06:	68bb      	ldr	r3, [r7, #8]
 801ab08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab0a:	4b36      	ldr	r3, [pc, #216]	@ (801abe4 <xTaskPriorityInherit+0xf4>)
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab10:	429a      	cmp	r2, r3
 801ab12:	d259      	bcs.n	801abc8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ab14:	68bb      	ldr	r3, [r7, #8]
 801ab16:	699b      	ldr	r3, [r3, #24]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	db06      	blt.n	801ab2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ab1c:	4b31      	ldr	r3, [pc, #196]	@ (801abe4 <xTaskPriorityInherit+0xf4>)
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab22:	f1c3 0207 	rsb	r2, r3, #7
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801ab2a:	68bb      	ldr	r3, [r7, #8]
 801ab2c:	6959      	ldr	r1, [r3, #20]
 801ab2e:	68bb      	ldr	r3, [r7, #8]
 801ab30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab32:	4613      	mov	r3, r2
 801ab34:	009b      	lsls	r3, r3, #2
 801ab36:	4413      	add	r3, r2
 801ab38:	009b      	lsls	r3, r3, #2
 801ab3a:	4a2b      	ldr	r2, [pc, #172]	@ (801abe8 <xTaskPriorityInherit+0xf8>)
 801ab3c:	4413      	add	r3, r2
 801ab3e:	4299      	cmp	r1, r3
 801ab40:	d13a      	bne.n	801abb8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	3304      	adds	r3, #4
 801ab46:	4618      	mov	r0, r3
 801ab48:	f7fe f8ec 	bl	8018d24 <uxListRemove>
 801ab4c:	4603      	mov	r3, r0
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d115      	bne.n	801ab7e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab56:	4924      	ldr	r1, [pc, #144]	@ (801abe8 <xTaskPriorityInherit+0xf8>)
 801ab58:	4613      	mov	r3, r2
 801ab5a:	009b      	lsls	r3, r3, #2
 801ab5c:	4413      	add	r3, r2
 801ab5e:	009b      	lsls	r3, r3, #2
 801ab60:	440b      	add	r3, r1
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d10a      	bne.n	801ab7e <xTaskPriorityInherit+0x8e>
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab6c:	2201      	movs	r2, #1
 801ab6e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab72:	43da      	mvns	r2, r3
 801ab74:	4b1d      	ldr	r3, [pc, #116]	@ (801abec <xTaskPriorityInherit+0xfc>)
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	4013      	ands	r3, r2
 801ab7a:	4a1c      	ldr	r2, [pc, #112]	@ (801abec <xTaskPriorityInherit+0xfc>)
 801ab7c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ab7e:	4b19      	ldr	r3, [pc, #100]	@ (801abe4 <xTaskPriorityInherit+0xf4>)
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab84:	68bb      	ldr	r3, [r7, #8]
 801ab86:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ab88:	68bb      	ldr	r3, [r7, #8]
 801ab8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab8c:	2201      	movs	r2, #1
 801ab8e:	409a      	lsls	r2, r3
 801ab90:	4b16      	ldr	r3, [pc, #88]	@ (801abec <xTaskPriorityInherit+0xfc>)
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	4313      	orrs	r3, r2
 801ab96:	4a15      	ldr	r2, [pc, #84]	@ (801abec <xTaskPriorityInherit+0xfc>)
 801ab98:	6013      	str	r3, [r2, #0]
 801ab9a:	68bb      	ldr	r3, [r7, #8]
 801ab9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab9e:	4613      	mov	r3, r2
 801aba0:	009b      	lsls	r3, r3, #2
 801aba2:	4413      	add	r3, r2
 801aba4:	009b      	lsls	r3, r3, #2
 801aba6:	4a10      	ldr	r2, [pc, #64]	@ (801abe8 <xTaskPriorityInherit+0xf8>)
 801aba8:	441a      	add	r2, r3
 801abaa:	68bb      	ldr	r3, [r7, #8]
 801abac:	3304      	adds	r3, #4
 801abae:	4619      	mov	r1, r3
 801abb0:	4610      	mov	r0, r2
 801abb2:	f7fe f85a 	bl	8018c6a <vListInsertEnd>
 801abb6:	e004      	b.n	801abc2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801abb8:	4b0a      	ldr	r3, [pc, #40]	@ (801abe4 <xTaskPriorityInherit+0xf4>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801abc2:	2301      	movs	r3, #1
 801abc4:	60fb      	str	r3, [r7, #12]
 801abc6:	e008      	b.n	801abda <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801abc8:	68bb      	ldr	r3, [r7, #8]
 801abca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801abcc:	4b05      	ldr	r3, [pc, #20]	@ (801abe4 <xTaskPriorityInherit+0xf4>)
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abd2:	429a      	cmp	r2, r3
 801abd4:	d201      	bcs.n	801abda <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801abd6:	2301      	movs	r3, #1
 801abd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801abda:	68fb      	ldr	r3, [r7, #12]
	}
 801abdc:	4618      	mov	r0, r3
 801abde:	3710      	adds	r7, #16
 801abe0:	46bd      	mov	sp, r7
 801abe2:	bd80      	pop	{r7, pc}
 801abe4:	2000250c 	.word	0x2000250c
 801abe8:	20002510 	.word	0x20002510
 801abec:	20002614 	.word	0x20002614

0801abf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b086      	sub	sp, #24
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801abfc:	2300      	movs	r3, #0
 801abfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d074      	beq.n	801acf0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801ac06:	4b3d      	ldr	r3, [pc, #244]	@ (801acfc <xTaskPriorityDisinherit+0x10c>)
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	693a      	ldr	r2, [r7, #16]
 801ac0c:	429a      	cmp	r2, r3
 801ac0e:	d00d      	beq.n	801ac2c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac14:	b672      	cpsid	i
 801ac16:	f383 8811 	msr	BASEPRI, r3
 801ac1a:	f3bf 8f6f 	isb	sy
 801ac1e:	f3bf 8f4f 	dsb	sy
 801ac22:	b662      	cpsie	i
 801ac24:	60fb      	str	r3, [r7, #12]
}
 801ac26:	bf00      	nop
 801ac28:	bf00      	nop
 801ac2a:	e7fd      	b.n	801ac28 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801ac2c:	693b      	ldr	r3, [r7, #16]
 801ac2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d10d      	bne.n	801ac50 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801ac34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac38:	b672      	cpsid	i
 801ac3a:	f383 8811 	msr	BASEPRI, r3
 801ac3e:	f3bf 8f6f 	isb	sy
 801ac42:	f3bf 8f4f 	dsb	sy
 801ac46:	b662      	cpsie	i
 801ac48:	60bb      	str	r3, [r7, #8]
}
 801ac4a:	bf00      	nop
 801ac4c:	bf00      	nop
 801ac4e:	e7fd      	b.n	801ac4c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801ac50:	693b      	ldr	r3, [r7, #16]
 801ac52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ac54:	1e5a      	subs	r2, r3, #1
 801ac56:	693b      	ldr	r3, [r7, #16]
 801ac58:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ac5e:	693b      	ldr	r3, [r7, #16]
 801ac60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ac62:	429a      	cmp	r2, r3
 801ac64:	d044      	beq.n	801acf0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801ac66:	693b      	ldr	r3, [r7, #16]
 801ac68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d140      	bne.n	801acf0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ac6e:	693b      	ldr	r3, [r7, #16]
 801ac70:	3304      	adds	r3, #4
 801ac72:	4618      	mov	r0, r3
 801ac74:	f7fe f856 	bl	8018d24 <uxListRemove>
 801ac78:	4603      	mov	r3, r0
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d115      	bne.n	801acaa <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801ac7e:	693b      	ldr	r3, [r7, #16]
 801ac80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ac82:	491f      	ldr	r1, [pc, #124]	@ (801ad00 <xTaskPriorityDisinherit+0x110>)
 801ac84:	4613      	mov	r3, r2
 801ac86:	009b      	lsls	r3, r3, #2
 801ac88:	4413      	add	r3, r2
 801ac8a:	009b      	lsls	r3, r3, #2
 801ac8c:	440b      	add	r3, r1
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d10a      	bne.n	801acaa <xTaskPriorityDisinherit+0xba>
 801ac94:	693b      	ldr	r3, [r7, #16]
 801ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac98:	2201      	movs	r2, #1
 801ac9a:	fa02 f303 	lsl.w	r3, r2, r3
 801ac9e:	43da      	mvns	r2, r3
 801aca0:	4b18      	ldr	r3, [pc, #96]	@ (801ad04 <xTaskPriorityDisinherit+0x114>)
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	4013      	ands	r3, r2
 801aca6:	4a17      	ldr	r2, [pc, #92]	@ (801ad04 <xTaskPriorityDisinherit+0x114>)
 801aca8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801acaa:	693b      	ldr	r3, [r7, #16]
 801acac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801acae:	693b      	ldr	r3, [r7, #16]
 801acb0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801acb2:	693b      	ldr	r3, [r7, #16]
 801acb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acb6:	f1c3 0207 	rsb	r2, r3, #7
 801acba:	693b      	ldr	r3, [r7, #16]
 801acbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801acbe:	693b      	ldr	r3, [r7, #16]
 801acc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801acc2:	2201      	movs	r2, #1
 801acc4:	409a      	lsls	r2, r3
 801acc6:	4b0f      	ldr	r3, [pc, #60]	@ (801ad04 <xTaskPriorityDisinherit+0x114>)
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	4313      	orrs	r3, r2
 801accc:	4a0d      	ldr	r2, [pc, #52]	@ (801ad04 <xTaskPriorityDisinherit+0x114>)
 801acce:	6013      	str	r3, [r2, #0]
 801acd0:	693b      	ldr	r3, [r7, #16]
 801acd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801acd4:	4613      	mov	r3, r2
 801acd6:	009b      	lsls	r3, r3, #2
 801acd8:	4413      	add	r3, r2
 801acda:	009b      	lsls	r3, r3, #2
 801acdc:	4a08      	ldr	r2, [pc, #32]	@ (801ad00 <xTaskPriorityDisinherit+0x110>)
 801acde:	441a      	add	r2, r3
 801ace0:	693b      	ldr	r3, [r7, #16]
 801ace2:	3304      	adds	r3, #4
 801ace4:	4619      	mov	r1, r3
 801ace6:	4610      	mov	r0, r2
 801ace8:	f7fd ffbf 	bl	8018c6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801acec:	2301      	movs	r3, #1
 801acee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801acf0:	697b      	ldr	r3, [r7, #20]
	}
 801acf2:	4618      	mov	r0, r3
 801acf4:	3718      	adds	r7, #24
 801acf6:	46bd      	mov	sp, r7
 801acf8:	bd80      	pop	{r7, pc}
 801acfa:	bf00      	nop
 801acfc:	2000250c 	.word	0x2000250c
 801ad00:	20002510 	.word	0x20002510
 801ad04:	20002614 	.word	0x20002614

0801ad08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	b088      	sub	sp, #32
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
 801ad10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801ad16:	2301      	movs	r3, #1
 801ad18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	f000 8089 	beq.w	801ae34 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801ad22:	69bb      	ldr	r3, [r7, #24]
 801ad24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d10d      	bne.n	801ad46 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801ad2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad2e:	b672      	cpsid	i
 801ad30:	f383 8811 	msr	BASEPRI, r3
 801ad34:	f3bf 8f6f 	isb	sy
 801ad38:	f3bf 8f4f 	dsb	sy
 801ad3c:	b662      	cpsie	i
 801ad3e:	60fb      	str	r3, [r7, #12]
}
 801ad40:	bf00      	nop
 801ad42:	bf00      	nop
 801ad44:	e7fd      	b.n	801ad42 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801ad46:	69bb      	ldr	r3, [r7, #24]
 801ad48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ad4a:	683a      	ldr	r2, [r7, #0]
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	d902      	bls.n	801ad56 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801ad50:	683b      	ldr	r3, [r7, #0]
 801ad52:	61fb      	str	r3, [r7, #28]
 801ad54:	e002      	b.n	801ad5c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801ad56:	69bb      	ldr	r3, [r7, #24]
 801ad58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ad5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801ad5c:	69bb      	ldr	r3, [r7, #24]
 801ad5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad60:	69fa      	ldr	r2, [r7, #28]
 801ad62:	429a      	cmp	r2, r3
 801ad64:	d066      	beq.n	801ae34 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801ad66:	69bb      	ldr	r3, [r7, #24]
 801ad68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ad6a:	697a      	ldr	r2, [r7, #20]
 801ad6c:	429a      	cmp	r2, r3
 801ad6e:	d161      	bne.n	801ae34 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801ad70:	4b32      	ldr	r3, [pc, #200]	@ (801ae3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	69ba      	ldr	r2, [r7, #24]
 801ad76:	429a      	cmp	r2, r3
 801ad78:	d10d      	bne.n	801ad96 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 801ad7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad7e:	b672      	cpsid	i
 801ad80:	f383 8811 	msr	BASEPRI, r3
 801ad84:	f3bf 8f6f 	isb	sy
 801ad88:	f3bf 8f4f 	dsb	sy
 801ad8c:	b662      	cpsie	i
 801ad8e:	60bb      	str	r3, [r7, #8]
}
 801ad90:	bf00      	nop
 801ad92:	bf00      	nop
 801ad94:	e7fd      	b.n	801ad92 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801ad96:	69bb      	ldr	r3, [r7, #24]
 801ad98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad9a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801ad9c:	69bb      	ldr	r3, [r7, #24]
 801ad9e:	69fa      	ldr	r2, [r7, #28]
 801ada0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ada2:	69bb      	ldr	r3, [r7, #24]
 801ada4:	699b      	ldr	r3, [r3, #24]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	db04      	blt.n	801adb4 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801adaa:	69fb      	ldr	r3, [r7, #28]
 801adac:	f1c3 0207 	rsb	r2, r3, #7
 801adb0:	69bb      	ldr	r3, [r7, #24]
 801adb2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801adb4:	69bb      	ldr	r3, [r7, #24]
 801adb6:	6959      	ldr	r1, [r3, #20]
 801adb8:	693a      	ldr	r2, [r7, #16]
 801adba:	4613      	mov	r3, r2
 801adbc:	009b      	lsls	r3, r3, #2
 801adbe:	4413      	add	r3, r2
 801adc0:	009b      	lsls	r3, r3, #2
 801adc2:	4a1f      	ldr	r2, [pc, #124]	@ (801ae40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801adc4:	4413      	add	r3, r2
 801adc6:	4299      	cmp	r1, r3
 801adc8:	d134      	bne.n	801ae34 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801adca:	69bb      	ldr	r3, [r7, #24]
 801adcc:	3304      	adds	r3, #4
 801adce:	4618      	mov	r0, r3
 801add0:	f7fd ffa8 	bl	8018d24 <uxListRemove>
 801add4:	4603      	mov	r3, r0
 801add6:	2b00      	cmp	r3, #0
 801add8:	d115      	bne.n	801ae06 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801adda:	69bb      	ldr	r3, [r7, #24]
 801addc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801adde:	4918      	ldr	r1, [pc, #96]	@ (801ae40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801ade0:	4613      	mov	r3, r2
 801ade2:	009b      	lsls	r3, r3, #2
 801ade4:	4413      	add	r3, r2
 801ade6:	009b      	lsls	r3, r3, #2
 801ade8:	440b      	add	r3, r1
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	2b00      	cmp	r3, #0
 801adee:	d10a      	bne.n	801ae06 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 801adf0:	69bb      	ldr	r3, [r7, #24]
 801adf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801adf4:	2201      	movs	r2, #1
 801adf6:	fa02 f303 	lsl.w	r3, r2, r3
 801adfa:	43da      	mvns	r2, r3
 801adfc:	4b11      	ldr	r3, [pc, #68]	@ (801ae44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	4013      	ands	r3, r2
 801ae02:	4a10      	ldr	r2, [pc, #64]	@ (801ae44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801ae04:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801ae06:	69bb      	ldr	r3, [r7, #24]
 801ae08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae0a:	2201      	movs	r2, #1
 801ae0c:	409a      	lsls	r2, r3
 801ae0e:	4b0d      	ldr	r3, [pc, #52]	@ (801ae44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	4313      	orrs	r3, r2
 801ae14:	4a0b      	ldr	r2, [pc, #44]	@ (801ae44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801ae16:	6013      	str	r3, [r2, #0]
 801ae18:	69bb      	ldr	r3, [r7, #24]
 801ae1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ae1c:	4613      	mov	r3, r2
 801ae1e:	009b      	lsls	r3, r3, #2
 801ae20:	4413      	add	r3, r2
 801ae22:	009b      	lsls	r3, r3, #2
 801ae24:	4a06      	ldr	r2, [pc, #24]	@ (801ae40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801ae26:	441a      	add	r2, r3
 801ae28:	69bb      	ldr	r3, [r7, #24]
 801ae2a:	3304      	adds	r3, #4
 801ae2c:	4619      	mov	r1, r3
 801ae2e:	4610      	mov	r0, r2
 801ae30:	f7fd ff1b 	bl	8018c6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ae34:	bf00      	nop
 801ae36:	3720      	adds	r7, #32
 801ae38:	46bd      	mov	sp, r7
 801ae3a:	bd80      	pop	{r7, pc}
 801ae3c:	2000250c 	.word	0x2000250c
 801ae40:	20002510 	.word	0x20002510
 801ae44:	20002614 	.word	0x20002614

0801ae48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801ae48:	b480      	push	{r7}
 801ae4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801ae4c:	4b07      	ldr	r3, [pc, #28]	@ (801ae6c <pvTaskIncrementMutexHeldCount+0x24>)
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d004      	beq.n	801ae5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801ae54:	4b05      	ldr	r3, [pc, #20]	@ (801ae6c <pvTaskIncrementMutexHeldCount+0x24>)
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801ae5a:	3201      	adds	r2, #1
 801ae5c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801ae5e:	4b03      	ldr	r3, [pc, #12]	@ (801ae6c <pvTaskIncrementMutexHeldCount+0x24>)
 801ae60:	681b      	ldr	r3, [r3, #0]
	}
 801ae62:	4618      	mov	r0, r3
 801ae64:	46bd      	mov	sp, r7
 801ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae6a:	4770      	bx	lr
 801ae6c:	2000250c 	.word	0x2000250c

0801ae70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b084      	sub	sp, #16
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]
 801ae78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801ae7a:	4b29      	ldr	r3, [pc, #164]	@ (801af20 <prvAddCurrentTaskToDelayedList+0xb0>)
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ae80:	4b28      	ldr	r3, [pc, #160]	@ (801af24 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	3304      	adds	r3, #4
 801ae86:	4618      	mov	r0, r3
 801ae88:	f7fd ff4c 	bl	8018d24 <uxListRemove>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d10b      	bne.n	801aeaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801ae92:	4b24      	ldr	r3, [pc, #144]	@ (801af24 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae98:	2201      	movs	r2, #1
 801ae9a:	fa02 f303 	lsl.w	r3, r2, r3
 801ae9e:	43da      	mvns	r2, r3
 801aea0:	4b21      	ldr	r3, [pc, #132]	@ (801af28 <prvAddCurrentTaskToDelayedList+0xb8>)
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	4013      	ands	r3, r2
 801aea6:	4a20      	ldr	r2, [pc, #128]	@ (801af28 <prvAddCurrentTaskToDelayedList+0xb8>)
 801aea8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aeb0:	d10a      	bne.n	801aec8 <prvAddCurrentTaskToDelayedList+0x58>
 801aeb2:	683b      	ldr	r3, [r7, #0]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d007      	beq.n	801aec8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aeb8:	4b1a      	ldr	r3, [pc, #104]	@ (801af24 <prvAddCurrentTaskToDelayedList+0xb4>)
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	3304      	adds	r3, #4
 801aebe:	4619      	mov	r1, r3
 801aec0:	481a      	ldr	r0, [pc, #104]	@ (801af2c <prvAddCurrentTaskToDelayedList+0xbc>)
 801aec2:	f7fd fed2 	bl	8018c6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801aec6:	e026      	b.n	801af16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801aec8:	68fa      	ldr	r2, [r7, #12]
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	4413      	add	r3, r2
 801aece:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801aed0:	4b14      	ldr	r3, [pc, #80]	@ (801af24 <prvAddCurrentTaskToDelayedList+0xb4>)
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	68ba      	ldr	r2, [r7, #8]
 801aed6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801aed8:	68ba      	ldr	r2, [r7, #8]
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	429a      	cmp	r2, r3
 801aede:	d209      	bcs.n	801aef4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aee0:	4b13      	ldr	r3, [pc, #76]	@ (801af30 <prvAddCurrentTaskToDelayedList+0xc0>)
 801aee2:	681a      	ldr	r2, [r3, #0]
 801aee4:	4b0f      	ldr	r3, [pc, #60]	@ (801af24 <prvAddCurrentTaskToDelayedList+0xb4>)
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	3304      	adds	r3, #4
 801aeea:	4619      	mov	r1, r3
 801aeec:	4610      	mov	r0, r2
 801aeee:	f7fd fee0 	bl	8018cb2 <vListInsert>
}
 801aef2:	e010      	b.n	801af16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aef4:	4b0f      	ldr	r3, [pc, #60]	@ (801af34 <prvAddCurrentTaskToDelayedList+0xc4>)
 801aef6:	681a      	ldr	r2, [r3, #0]
 801aef8:	4b0a      	ldr	r3, [pc, #40]	@ (801af24 <prvAddCurrentTaskToDelayedList+0xb4>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	3304      	adds	r3, #4
 801aefe:	4619      	mov	r1, r3
 801af00:	4610      	mov	r0, r2
 801af02:	f7fd fed6 	bl	8018cb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801af06:	4b0c      	ldr	r3, [pc, #48]	@ (801af38 <prvAddCurrentTaskToDelayedList+0xc8>)
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	68ba      	ldr	r2, [r7, #8]
 801af0c:	429a      	cmp	r2, r3
 801af0e:	d202      	bcs.n	801af16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801af10:	4a09      	ldr	r2, [pc, #36]	@ (801af38 <prvAddCurrentTaskToDelayedList+0xc8>)
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	6013      	str	r3, [r2, #0]
}
 801af16:	bf00      	nop
 801af18:	3710      	adds	r7, #16
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	bf00      	nop
 801af20:	20002610 	.word	0x20002610
 801af24:	2000250c 	.word	0x2000250c
 801af28:	20002614 	.word	0x20002614
 801af2c:	200025f8 	.word	0x200025f8
 801af30:	200025c8 	.word	0x200025c8
 801af34:	200025c4 	.word	0x200025c4
 801af38:	2000262c 	.word	0x2000262c

0801af3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801af3c:	b480      	push	{r7}
 801af3e:	b085      	sub	sp, #20
 801af40:	af00      	add	r7, sp, #0
 801af42:	60f8      	str	r0, [r7, #12]
 801af44:	60b9      	str	r1, [r7, #8]
 801af46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	3b04      	subs	r3, #4
 801af4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801af54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	3b04      	subs	r3, #4
 801af5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801af5c:	68bb      	ldr	r3, [r7, #8]
 801af5e:	f023 0201 	bic.w	r2, r3, #1
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	3b04      	subs	r3, #4
 801af6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801af6c:	4a0c      	ldr	r2, [pc, #48]	@ (801afa0 <pxPortInitialiseStack+0x64>)
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	3b14      	subs	r3, #20
 801af76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801af78:	687a      	ldr	r2, [r7, #4]
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	3b04      	subs	r3, #4
 801af82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	f06f 0202 	mvn.w	r2, #2
 801af8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	3b20      	subs	r3, #32
 801af90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801af92:	68fb      	ldr	r3, [r7, #12]
}
 801af94:	4618      	mov	r0, r3
 801af96:	3714      	adds	r7, #20
 801af98:	46bd      	mov	sp, r7
 801af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9e:	4770      	bx	lr
 801afa0:	0801afa5 	.word	0x0801afa5

0801afa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801afa4:	b480      	push	{r7}
 801afa6:	b085      	sub	sp, #20
 801afa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801afaa:	2300      	movs	r3, #0
 801afac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801afae:	4b15      	ldr	r3, [pc, #84]	@ (801b004 <prvTaskExitError+0x60>)
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afb6:	d00d      	beq.n	801afd4 <prvTaskExitError+0x30>
	__asm volatile
 801afb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801afbc:	b672      	cpsid	i
 801afbe:	f383 8811 	msr	BASEPRI, r3
 801afc2:	f3bf 8f6f 	isb	sy
 801afc6:	f3bf 8f4f 	dsb	sy
 801afca:	b662      	cpsie	i
 801afcc:	60fb      	str	r3, [r7, #12]
}
 801afce:	bf00      	nop
 801afd0:	bf00      	nop
 801afd2:	e7fd      	b.n	801afd0 <prvTaskExitError+0x2c>
	__asm volatile
 801afd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801afd8:	b672      	cpsid	i
 801afda:	f383 8811 	msr	BASEPRI, r3
 801afde:	f3bf 8f6f 	isb	sy
 801afe2:	f3bf 8f4f 	dsb	sy
 801afe6:	b662      	cpsie	i
 801afe8:	60bb      	str	r3, [r7, #8]
}
 801afea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801afec:	bf00      	nop
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d0fc      	beq.n	801afee <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801aff4:	bf00      	nop
 801aff6:	bf00      	nop
 801aff8:	3714      	adds	r7, #20
 801affa:	46bd      	mov	sp, r7
 801affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b000:	4770      	bx	lr
 801b002:	bf00      	nop
 801b004:	20000090 	.word	0x20000090
	...

0801b010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b010:	4b07      	ldr	r3, [pc, #28]	@ (801b030 <pxCurrentTCBConst2>)
 801b012:	6819      	ldr	r1, [r3, #0]
 801b014:	6808      	ldr	r0, [r1, #0]
 801b016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b01a:	f380 8809 	msr	PSP, r0
 801b01e:	f3bf 8f6f 	isb	sy
 801b022:	f04f 0000 	mov.w	r0, #0
 801b026:	f380 8811 	msr	BASEPRI, r0
 801b02a:	4770      	bx	lr
 801b02c:	f3af 8000 	nop.w

0801b030 <pxCurrentTCBConst2>:
 801b030:	2000250c 	.word	0x2000250c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b034:	bf00      	nop
 801b036:	bf00      	nop

0801b038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b038:	4808      	ldr	r0, [pc, #32]	@ (801b05c <prvPortStartFirstTask+0x24>)
 801b03a:	6800      	ldr	r0, [r0, #0]
 801b03c:	6800      	ldr	r0, [r0, #0]
 801b03e:	f380 8808 	msr	MSP, r0
 801b042:	f04f 0000 	mov.w	r0, #0
 801b046:	f380 8814 	msr	CONTROL, r0
 801b04a:	b662      	cpsie	i
 801b04c:	b661      	cpsie	f
 801b04e:	f3bf 8f4f 	dsb	sy
 801b052:	f3bf 8f6f 	isb	sy
 801b056:	df00      	svc	0
 801b058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b05a:	bf00      	nop
 801b05c:	e000ed08 	.word	0xe000ed08

0801b060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b060:	b580      	push	{r7, lr}
 801b062:	b084      	sub	sp, #16
 801b064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b066:	4b37      	ldr	r3, [pc, #220]	@ (801b144 <xPortStartScheduler+0xe4>)
 801b068:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	781b      	ldrb	r3, [r3, #0]
 801b06e:	b2db      	uxtb	r3, r3
 801b070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	22ff      	movs	r2, #255	@ 0xff
 801b076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	781b      	ldrb	r3, [r3, #0]
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b080:	78fb      	ldrb	r3, [r7, #3]
 801b082:	b2db      	uxtb	r3, r3
 801b084:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801b088:	b2da      	uxtb	r2, r3
 801b08a:	4b2f      	ldr	r3, [pc, #188]	@ (801b148 <xPortStartScheduler+0xe8>)
 801b08c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b08e:	4b2f      	ldr	r3, [pc, #188]	@ (801b14c <xPortStartScheduler+0xec>)
 801b090:	2207      	movs	r2, #7
 801b092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b094:	e009      	b.n	801b0aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801b096:	4b2d      	ldr	r3, [pc, #180]	@ (801b14c <xPortStartScheduler+0xec>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	3b01      	subs	r3, #1
 801b09c:	4a2b      	ldr	r2, [pc, #172]	@ (801b14c <xPortStartScheduler+0xec>)
 801b09e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b0a0:	78fb      	ldrb	r3, [r7, #3]
 801b0a2:	b2db      	uxtb	r3, r3
 801b0a4:	005b      	lsls	r3, r3, #1
 801b0a6:	b2db      	uxtb	r3, r3
 801b0a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b0aa:	78fb      	ldrb	r3, [r7, #3]
 801b0ac:	b2db      	uxtb	r3, r3
 801b0ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b0b2:	2b80      	cmp	r3, #128	@ 0x80
 801b0b4:	d0ef      	beq.n	801b096 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b0b6:	4b25      	ldr	r3, [pc, #148]	@ (801b14c <xPortStartScheduler+0xec>)
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	f1c3 0307 	rsb	r3, r3, #7
 801b0be:	2b04      	cmp	r3, #4
 801b0c0:	d00d      	beq.n	801b0de <xPortStartScheduler+0x7e>
	__asm volatile
 801b0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b0c6:	b672      	cpsid	i
 801b0c8:	f383 8811 	msr	BASEPRI, r3
 801b0cc:	f3bf 8f6f 	isb	sy
 801b0d0:	f3bf 8f4f 	dsb	sy
 801b0d4:	b662      	cpsie	i
 801b0d6:	60bb      	str	r3, [r7, #8]
}
 801b0d8:	bf00      	nop
 801b0da:	bf00      	nop
 801b0dc:	e7fd      	b.n	801b0da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b0de:	4b1b      	ldr	r3, [pc, #108]	@ (801b14c <xPortStartScheduler+0xec>)
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	021b      	lsls	r3, r3, #8
 801b0e4:	4a19      	ldr	r2, [pc, #100]	@ (801b14c <xPortStartScheduler+0xec>)
 801b0e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b0e8:	4b18      	ldr	r3, [pc, #96]	@ (801b14c <xPortStartScheduler+0xec>)
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801b0f0:	4a16      	ldr	r2, [pc, #88]	@ (801b14c <xPortStartScheduler+0xec>)
 801b0f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	b2da      	uxtb	r2, r3
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b0fc:	4b14      	ldr	r3, [pc, #80]	@ (801b150 <xPortStartScheduler+0xf0>)
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	4a13      	ldr	r2, [pc, #76]	@ (801b150 <xPortStartScheduler+0xf0>)
 801b102:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801b106:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b108:	4b11      	ldr	r3, [pc, #68]	@ (801b150 <xPortStartScheduler+0xf0>)
 801b10a:	681b      	ldr	r3, [r3, #0]
 801b10c:	4a10      	ldr	r2, [pc, #64]	@ (801b150 <xPortStartScheduler+0xf0>)
 801b10e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801b112:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b114:	f000 f8dc 	bl	801b2d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b118:	4b0e      	ldr	r3, [pc, #56]	@ (801b154 <xPortStartScheduler+0xf4>)
 801b11a:	2200      	movs	r2, #0
 801b11c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b11e:	f000 f8fb 	bl	801b318 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b122:	4b0d      	ldr	r3, [pc, #52]	@ (801b158 <xPortStartScheduler+0xf8>)
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	4a0c      	ldr	r2, [pc, #48]	@ (801b158 <xPortStartScheduler+0xf8>)
 801b128:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801b12c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b12e:	f7ff ff83 	bl	801b038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b132:	f7ff fa49 	bl	801a5c8 <vTaskSwitchContext>
	prvTaskExitError();
 801b136:	f7ff ff35 	bl	801afa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b13a:	2300      	movs	r3, #0
}
 801b13c:	4618      	mov	r0, r3
 801b13e:	3710      	adds	r7, #16
 801b140:	46bd      	mov	sp, r7
 801b142:	bd80      	pop	{r7, pc}
 801b144:	e000e400 	.word	0xe000e400
 801b148:	20002638 	.word	0x20002638
 801b14c:	2000263c 	.word	0x2000263c
 801b150:	e000ed20 	.word	0xe000ed20
 801b154:	20000090 	.word	0x20000090
 801b158:	e000ef34 	.word	0xe000ef34

0801b15c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b15c:	b480      	push	{r7}
 801b15e:	b083      	sub	sp, #12
 801b160:	af00      	add	r7, sp, #0
	__asm volatile
 801b162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b166:	b672      	cpsid	i
 801b168:	f383 8811 	msr	BASEPRI, r3
 801b16c:	f3bf 8f6f 	isb	sy
 801b170:	f3bf 8f4f 	dsb	sy
 801b174:	b662      	cpsie	i
 801b176:	607b      	str	r3, [r7, #4]
}
 801b178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b17a:	4b11      	ldr	r3, [pc, #68]	@ (801b1c0 <vPortEnterCritical+0x64>)
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	3301      	adds	r3, #1
 801b180:	4a0f      	ldr	r2, [pc, #60]	@ (801b1c0 <vPortEnterCritical+0x64>)
 801b182:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b184:	4b0e      	ldr	r3, [pc, #56]	@ (801b1c0 <vPortEnterCritical+0x64>)
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	2b01      	cmp	r3, #1
 801b18a:	d112      	bne.n	801b1b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b18c:	4b0d      	ldr	r3, [pc, #52]	@ (801b1c4 <vPortEnterCritical+0x68>)
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	b2db      	uxtb	r3, r3
 801b192:	2b00      	cmp	r3, #0
 801b194:	d00d      	beq.n	801b1b2 <vPortEnterCritical+0x56>
	__asm volatile
 801b196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b19a:	b672      	cpsid	i
 801b19c:	f383 8811 	msr	BASEPRI, r3
 801b1a0:	f3bf 8f6f 	isb	sy
 801b1a4:	f3bf 8f4f 	dsb	sy
 801b1a8:	b662      	cpsie	i
 801b1aa:	603b      	str	r3, [r7, #0]
}
 801b1ac:	bf00      	nop
 801b1ae:	bf00      	nop
 801b1b0:	e7fd      	b.n	801b1ae <vPortEnterCritical+0x52>
	}
}
 801b1b2:	bf00      	nop
 801b1b4:	370c      	adds	r7, #12
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1bc:	4770      	bx	lr
 801b1be:	bf00      	nop
 801b1c0:	20000090 	.word	0x20000090
 801b1c4:	e000ed04 	.word	0xe000ed04

0801b1c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b1c8:	b480      	push	{r7}
 801b1ca:	b083      	sub	sp, #12
 801b1cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b1ce:	4b13      	ldr	r3, [pc, #76]	@ (801b21c <vPortExitCritical+0x54>)
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d10d      	bne.n	801b1f2 <vPortExitCritical+0x2a>
	__asm volatile
 801b1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b1da:	b672      	cpsid	i
 801b1dc:	f383 8811 	msr	BASEPRI, r3
 801b1e0:	f3bf 8f6f 	isb	sy
 801b1e4:	f3bf 8f4f 	dsb	sy
 801b1e8:	b662      	cpsie	i
 801b1ea:	607b      	str	r3, [r7, #4]
}
 801b1ec:	bf00      	nop
 801b1ee:	bf00      	nop
 801b1f0:	e7fd      	b.n	801b1ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801b1f2:	4b0a      	ldr	r3, [pc, #40]	@ (801b21c <vPortExitCritical+0x54>)
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	3b01      	subs	r3, #1
 801b1f8:	4a08      	ldr	r2, [pc, #32]	@ (801b21c <vPortExitCritical+0x54>)
 801b1fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b1fc:	4b07      	ldr	r3, [pc, #28]	@ (801b21c <vPortExitCritical+0x54>)
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d105      	bne.n	801b210 <vPortExitCritical+0x48>
 801b204:	2300      	movs	r3, #0
 801b206:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b208:	683b      	ldr	r3, [r7, #0]
 801b20a:	f383 8811 	msr	BASEPRI, r3
}
 801b20e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b210:	bf00      	nop
 801b212:	370c      	adds	r7, #12
 801b214:	46bd      	mov	sp, r7
 801b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b21a:	4770      	bx	lr
 801b21c:	20000090 	.word	0x20000090

0801b220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b220:	f3ef 8009 	mrs	r0, PSP
 801b224:	f3bf 8f6f 	isb	sy
 801b228:	4b15      	ldr	r3, [pc, #84]	@ (801b280 <pxCurrentTCBConst>)
 801b22a:	681a      	ldr	r2, [r3, #0]
 801b22c:	f01e 0f10 	tst.w	lr, #16
 801b230:	bf08      	it	eq
 801b232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b23a:	6010      	str	r0, [r2, #0]
 801b23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801b244:	b672      	cpsid	i
 801b246:	f380 8811 	msr	BASEPRI, r0
 801b24a:	f3bf 8f4f 	dsb	sy
 801b24e:	f3bf 8f6f 	isb	sy
 801b252:	b662      	cpsie	i
 801b254:	f7ff f9b8 	bl	801a5c8 <vTaskSwitchContext>
 801b258:	f04f 0000 	mov.w	r0, #0
 801b25c:	f380 8811 	msr	BASEPRI, r0
 801b260:	bc09      	pop	{r0, r3}
 801b262:	6819      	ldr	r1, [r3, #0]
 801b264:	6808      	ldr	r0, [r1, #0]
 801b266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b26a:	f01e 0f10 	tst.w	lr, #16
 801b26e:	bf08      	it	eq
 801b270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b274:	f380 8809 	msr	PSP, r0
 801b278:	f3bf 8f6f 	isb	sy
 801b27c:	4770      	bx	lr
 801b27e:	bf00      	nop

0801b280 <pxCurrentTCBConst>:
 801b280:	2000250c 	.word	0x2000250c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b284:	bf00      	nop
 801b286:	bf00      	nop

0801b288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b288:	b580      	push	{r7, lr}
 801b28a:	b082      	sub	sp, #8
 801b28c:	af00      	add	r7, sp, #0
	__asm volatile
 801b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b292:	b672      	cpsid	i
 801b294:	f383 8811 	msr	BASEPRI, r3
 801b298:	f3bf 8f6f 	isb	sy
 801b29c:	f3bf 8f4f 	dsb	sy
 801b2a0:	b662      	cpsie	i
 801b2a2:	607b      	str	r3, [r7, #4]
}
 801b2a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b2a6:	f7ff f8d3 	bl	801a450 <xTaskIncrementTick>
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d003      	beq.n	801b2b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b2b0:	4b06      	ldr	r3, [pc, #24]	@ (801b2cc <SysTick_Handler+0x44>)
 801b2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b2b6:	601a      	str	r2, [r3, #0]
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b2bc:	683b      	ldr	r3, [r7, #0]
 801b2be:	f383 8811 	msr	BASEPRI, r3
}
 801b2c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b2c4:	bf00      	nop
 801b2c6:	3708      	adds	r7, #8
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	bd80      	pop	{r7, pc}
 801b2cc:	e000ed04 	.word	0xe000ed04

0801b2d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b2d0:	b480      	push	{r7}
 801b2d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b2d4:	4b0b      	ldr	r3, [pc, #44]	@ (801b304 <vPortSetupTimerInterrupt+0x34>)
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b2da:	4b0b      	ldr	r3, [pc, #44]	@ (801b308 <vPortSetupTimerInterrupt+0x38>)
 801b2dc:	2200      	movs	r2, #0
 801b2de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b2e0:	4b0a      	ldr	r3, [pc, #40]	@ (801b30c <vPortSetupTimerInterrupt+0x3c>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	4a0a      	ldr	r2, [pc, #40]	@ (801b310 <vPortSetupTimerInterrupt+0x40>)
 801b2e6:	fba2 2303 	umull	r2, r3, r2, r3
 801b2ea:	099b      	lsrs	r3, r3, #6
 801b2ec:	4a09      	ldr	r2, [pc, #36]	@ (801b314 <vPortSetupTimerInterrupt+0x44>)
 801b2ee:	3b01      	subs	r3, #1
 801b2f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b2f2:	4b04      	ldr	r3, [pc, #16]	@ (801b304 <vPortSetupTimerInterrupt+0x34>)
 801b2f4:	2207      	movs	r2, #7
 801b2f6:	601a      	str	r2, [r3, #0]
}
 801b2f8:	bf00      	nop
 801b2fa:	46bd      	mov	sp, r7
 801b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b300:	4770      	bx	lr
 801b302:	bf00      	nop
 801b304:	e000e010 	.word	0xe000e010
 801b308:	e000e018 	.word	0xe000e018
 801b30c:	2000001c 	.word	0x2000001c
 801b310:	10624dd3 	.word	0x10624dd3
 801b314:	e000e014 	.word	0xe000e014

0801b318 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b318:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801b328 <vPortEnableVFP+0x10>
 801b31c:	6801      	ldr	r1, [r0, #0]
 801b31e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801b322:	6001      	str	r1, [r0, #0]
 801b324:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b326:	bf00      	nop
 801b328:	e000ed88 	.word	0xe000ed88

0801b32c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b32c:	b480      	push	{r7}
 801b32e:	b085      	sub	sp, #20
 801b330:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b332:	f3ef 8305 	mrs	r3, IPSR
 801b336:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	2b0f      	cmp	r3, #15
 801b33c:	d917      	bls.n	801b36e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b33e:	4a1a      	ldr	r2, [pc, #104]	@ (801b3a8 <vPortValidateInterruptPriority+0x7c>)
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	4413      	add	r3, r2
 801b344:	781b      	ldrb	r3, [r3, #0]
 801b346:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b348:	4b18      	ldr	r3, [pc, #96]	@ (801b3ac <vPortValidateInterruptPriority+0x80>)
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	7afa      	ldrb	r2, [r7, #11]
 801b34e:	429a      	cmp	r2, r3
 801b350:	d20d      	bcs.n	801b36e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 801b352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b356:	b672      	cpsid	i
 801b358:	f383 8811 	msr	BASEPRI, r3
 801b35c:	f3bf 8f6f 	isb	sy
 801b360:	f3bf 8f4f 	dsb	sy
 801b364:	b662      	cpsie	i
 801b366:	607b      	str	r3, [r7, #4]
}
 801b368:	bf00      	nop
 801b36a:	bf00      	nop
 801b36c:	e7fd      	b.n	801b36a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b36e:	4b10      	ldr	r3, [pc, #64]	@ (801b3b0 <vPortValidateInterruptPriority+0x84>)
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801b376:	4b0f      	ldr	r3, [pc, #60]	@ (801b3b4 <vPortValidateInterruptPriority+0x88>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	429a      	cmp	r2, r3
 801b37c:	d90d      	bls.n	801b39a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801b37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b382:	b672      	cpsid	i
 801b384:	f383 8811 	msr	BASEPRI, r3
 801b388:	f3bf 8f6f 	isb	sy
 801b38c:	f3bf 8f4f 	dsb	sy
 801b390:	b662      	cpsie	i
 801b392:	603b      	str	r3, [r7, #0]
}
 801b394:	bf00      	nop
 801b396:	bf00      	nop
 801b398:	e7fd      	b.n	801b396 <vPortValidateInterruptPriority+0x6a>
	}
 801b39a:	bf00      	nop
 801b39c:	3714      	adds	r7, #20
 801b39e:	46bd      	mov	sp, r7
 801b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a4:	4770      	bx	lr
 801b3a6:	bf00      	nop
 801b3a8:	e000e3f0 	.word	0xe000e3f0
 801b3ac:	20002638 	.word	0x20002638
 801b3b0:	e000ed0c 	.word	0xe000ed0c
 801b3b4:	2000263c 	.word	0x2000263c

0801b3b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b08a      	sub	sp, #40	@ 0x28
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b3c4:	f7fe ff74 	bl	801a2b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b3c8:	4b5f      	ldr	r3, [pc, #380]	@ (801b548 <pvPortMalloc+0x190>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d101      	bne.n	801b3d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b3d0:	f000 f924 	bl	801b61c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b3d4:	4b5d      	ldr	r3, [pc, #372]	@ (801b54c <pvPortMalloc+0x194>)
 801b3d6:	681a      	ldr	r2, [r3, #0]
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	4013      	ands	r3, r2
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	f040 8094 	bne.w	801b50a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d020      	beq.n	801b42a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 801b3e8:	2208      	movs	r2, #8
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	4413      	add	r3, r2
 801b3ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	f003 0307 	and.w	r3, r3, #7
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d017      	beq.n	801b42a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	f023 0307 	bic.w	r3, r3, #7
 801b400:	3308      	adds	r3, #8
 801b402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	f003 0307 	and.w	r3, r3, #7
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d00d      	beq.n	801b42a <pvPortMalloc+0x72>
	__asm volatile
 801b40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b412:	b672      	cpsid	i
 801b414:	f383 8811 	msr	BASEPRI, r3
 801b418:	f3bf 8f6f 	isb	sy
 801b41c:	f3bf 8f4f 	dsb	sy
 801b420:	b662      	cpsie	i
 801b422:	617b      	str	r3, [r7, #20]
}
 801b424:	bf00      	nop
 801b426:	bf00      	nop
 801b428:	e7fd      	b.n	801b426 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d06c      	beq.n	801b50a <pvPortMalloc+0x152>
 801b430:	4b47      	ldr	r3, [pc, #284]	@ (801b550 <pvPortMalloc+0x198>)
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	687a      	ldr	r2, [r7, #4]
 801b436:	429a      	cmp	r2, r3
 801b438:	d867      	bhi.n	801b50a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b43a:	4b46      	ldr	r3, [pc, #280]	@ (801b554 <pvPortMalloc+0x19c>)
 801b43c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b43e:	4b45      	ldr	r3, [pc, #276]	@ (801b554 <pvPortMalloc+0x19c>)
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b444:	e004      	b.n	801b450 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 801b446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b452:	685b      	ldr	r3, [r3, #4]
 801b454:	687a      	ldr	r2, [r7, #4]
 801b456:	429a      	cmp	r2, r3
 801b458:	d903      	bls.n	801b462 <pvPortMalloc+0xaa>
 801b45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d1f1      	bne.n	801b446 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b462:	4b39      	ldr	r3, [pc, #228]	@ (801b548 <pvPortMalloc+0x190>)
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b468:	429a      	cmp	r2, r3
 801b46a:	d04e      	beq.n	801b50a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b46c:	6a3b      	ldr	r3, [r7, #32]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	2208      	movs	r2, #8
 801b472:	4413      	add	r3, r2
 801b474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b478:	681a      	ldr	r2, [r3, #0]
 801b47a:	6a3b      	ldr	r3, [r7, #32]
 801b47c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b480:	685a      	ldr	r2, [r3, #4]
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	1ad2      	subs	r2, r2, r3
 801b486:	2308      	movs	r3, #8
 801b488:	005b      	lsls	r3, r3, #1
 801b48a:	429a      	cmp	r2, r3
 801b48c:	d922      	bls.n	801b4d4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b48e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	4413      	add	r3, r2
 801b494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b496:	69bb      	ldr	r3, [r7, #24]
 801b498:	f003 0307 	and.w	r3, r3, #7
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d00d      	beq.n	801b4bc <pvPortMalloc+0x104>
	__asm volatile
 801b4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b4a4:	b672      	cpsid	i
 801b4a6:	f383 8811 	msr	BASEPRI, r3
 801b4aa:	f3bf 8f6f 	isb	sy
 801b4ae:	f3bf 8f4f 	dsb	sy
 801b4b2:	b662      	cpsie	i
 801b4b4:	613b      	str	r3, [r7, #16]
}
 801b4b6:	bf00      	nop
 801b4b8:	bf00      	nop
 801b4ba:	e7fd      	b.n	801b4b8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4be:	685a      	ldr	r2, [r3, #4]
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	1ad2      	subs	r2, r2, r3
 801b4c4:	69bb      	ldr	r3, [r7, #24]
 801b4c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4ca:	687a      	ldr	r2, [r7, #4]
 801b4cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b4ce:	69b8      	ldr	r0, [r7, #24]
 801b4d0:	f000 f906 	bl	801b6e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b4d4:	4b1e      	ldr	r3, [pc, #120]	@ (801b550 <pvPortMalloc+0x198>)
 801b4d6:	681a      	ldr	r2, [r3, #0]
 801b4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4da:	685b      	ldr	r3, [r3, #4]
 801b4dc:	1ad3      	subs	r3, r2, r3
 801b4de:	4a1c      	ldr	r2, [pc, #112]	@ (801b550 <pvPortMalloc+0x198>)
 801b4e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b4e2:	4b1b      	ldr	r3, [pc, #108]	@ (801b550 <pvPortMalloc+0x198>)
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	4b1c      	ldr	r3, [pc, #112]	@ (801b558 <pvPortMalloc+0x1a0>)
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	429a      	cmp	r2, r3
 801b4ec:	d203      	bcs.n	801b4f6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b4ee:	4b18      	ldr	r3, [pc, #96]	@ (801b550 <pvPortMalloc+0x198>)
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	4a19      	ldr	r2, [pc, #100]	@ (801b558 <pvPortMalloc+0x1a0>)
 801b4f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4f8:	685a      	ldr	r2, [r3, #4]
 801b4fa:	4b14      	ldr	r3, [pc, #80]	@ (801b54c <pvPortMalloc+0x194>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	431a      	orrs	r2, r3
 801b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b502:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b506:	2200      	movs	r2, #0
 801b508:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b50a:	f7fe fedf 	bl	801a2cc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801b50e:	69fb      	ldr	r3, [r7, #28]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d101      	bne.n	801b518 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801b514:	f7e6 fa47 	bl	80019a6 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b518:	69fb      	ldr	r3, [r7, #28]
 801b51a:	f003 0307 	and.w	r3, r3, #7
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d00d      	beq.n	801b53e <pvPortMalloc+0x186>
	__asm volatile
 801b522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b526:	b672      	cpsid	i
 801b528:	f383 8811 	msr	BASEPRI, r3
 801b52c:	f3bf 8f6f 	isb	sy
 801b530:	f3bf 8f4f 	dsb	sy
 801b534:	b662      	cpsie	i
 801b536:	60fb      	str	r3, [r7, #12]
}
 801b538:	bf00      	nop
 801b53a:	bf00      	nop
 801b53c:	e7fd      	b.n	801b53a <pvPortMalloc+0x182>
	return pvReturn;
 801b53e:	69fb      	ldr	r3, [r7, #28]
}
 801b540:	4618      	mov	r0, r3
 801b542:	3728      	adds	r7, #40	@ 0x28
 801b544:	46bd      	mov	sp, r7
 801b546:	bd80      	pop	{r7, pc}
 801b548:	2000a648 	.word	0x2000a648
 801b54c:	2000a654 	.word	0x2000a654
 801b550:	2000a64c 	.word	0x2000a64c
 801b554:	2000a640 	.word	0x2000a640
 801b558:	2000a650 	.word	0x2000a650

0801b55c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b086      	sub	sp, #24
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d04e      	beq.n	801b60c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b56e:	2308      	movs	r3, #8
 801b570:	425b      	negs	r3, r3
 801b572:	697a      	ldr	r2, [r7, #20]
 801b574:	4413      	add	r3, r2
 801b576:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b578:	697b      	ldr	r3, [r7, #20]
 801b57a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b57c:	693b      	ldr	r3, [r7, #16]
 801b57e:	685a      	ldr	r2, [r3, #4]
 801b580:	4b24      	ldr	r3, [pc, #144]	@ (801b614 <vPortFree+0xb8>)
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	4013      	ands	r3, r2
 801b586:	2b00      	cmp	r3, #0
 801b588:	d10d      	bne.n	801b5a6 <vPortFree+0x4a>
	__asm volatile
 801b58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b58e:	b672      	cpsid	i
 801b590:	f383 8811 	msr	BASEPRI, r3
 801b594:	f3bf 8f6f 	isb	sy
 801b598:	f3bf 8f4f 	dsb	sy
 801b59c:	b662      	cpsie	i
 801b59e:	60fb      	str	r3, [r7, #12]
}
 801b5a0:	bf00      	nop
 801b5a2:	bf00      	nop
 801b5a4:	e7fd      	b.n	801b5a2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b5a6:	693b      	ldr	r3, [r7, #16]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d00d      	beq.n	801b5ca <vPortFree+0x6e>
	__asm volatile
 801b5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b5b2:	b672      	cpsid	i
 801b5b4:	f383 8811 	msr	BASEPRI, r3
 801b5b8:	f3bf 8f6f 	isb	sy
 801b5bc:	f3bf 8f4f 	dsb	sy
 801b5c0:	b662      	cpsie	i
 801b5c2:	60bb      	str	r3, [r7, #8]
}
 801b5c4:	bf00      	nop
 801b5c6:	bf00      	nop
 801b5c8:	e7fd      	b.n	801b5c6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b5ca:	693b      	ldr	r3, [r7, #16]
 801b5cc:	685a      	ldr	r2, [r3, #4]
 801b5ce:	4b11      	ldr	r3, [pc, #68]	@ (801b614 <vPortFree+0xb8>)
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	4013      	ands	r3, r2
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d019      	beq.n	801b60c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b5d8:	693b      	ldr	r3, [r7, #16]
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d115      	bne.n	801b60c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b5e0:	693b      	ldr	r3, [r7, #16]
 801b5e2:	685a      	ldr	r2, [r3, #4]
 801b5e4:	4b0b      	ldr	r3, [pc, #44]	@ (801b614 <vPortFree+0xb8>)
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	43db      	mvns	r3, r3
 801b5ea:	401a      	ands	r2, r3
 801b5ec:	693b      	ldr	r3, [r7, #16]
 801b5ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b5f0:	f7fe fe5e 	bl	801a2b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b5f4:	693b      	ldr	r3, [r7, #16]
 801b5f6:	685a      	ldr	r2, [r3, #4]
 801b5f8:	4b07      	ldr	r3, [pc, #28]	@ (801b618 <vPortFree+0xbc>)
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	4413      	add	r3, r2
 801b5fe:	4a06      	ldr	r2, [pc, #24]	@ (801b618 <vPortFree+0xbc>)
 801b600:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b602:	6938      	ldr	r0, [r7, #16]
 801b604:	f000 f86c 	bl	801b6e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801b608:	f7fe fe60 	bl	801a2cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b60c:	bf00      	nop
 801b60e:	3718      	adds	r7, #24
 801b610:	46bd      	mov	sp, r7
 801b612:	bd80      	pop	{r7, pc}
 801b614:	2000a654 	.word	0x2000a654
 801b618:	2000a64c 	.word	0x2000a64c

0801b61c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b61c:	b480      	push	{r7}
 801b61e:	b085      	sub	sp, #20
 801b620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b626:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b628:	4b27      	ldr	r3, [pc, #156]	@ (801b6c8 <prvHeapInit+0xac>)
 801b62a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	f003 0307 	and.w	r3, r3, #7
 801b632:	2b00      	cmp	r3, #0
 801b634:	d00c      	beq.n	801b650 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b636:	68fb      	ldr	r3, [r7, #12]
 801b638:	3307      	adds	r3, #7
 801b63a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	f023 0307 	bic.w	r3, r3, #7
 801b642:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b644:	68ba      	ldr	r2, [r7, #8]
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	1ad3      	subs	r3, r2, r3
 801b64a:	4a1f      	ldr	r2, [pc, #124]	@ (801b6c8 <prvHeapInit+0xac>)
 801b64c:	4413      	add	r3, r2
 801b64e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b654:	4a1d      	ldr	r2, [pc, #116]	@ (801b6cc <prvHeapInit+0xb0>)
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b65a:	4b1c      	ldr	r3, [pc, #112]	@ (801b6cc <prvHeapInit+0xb0>)
 801b65c:	2200      	movs	r2, #0
 801b65e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	68ba      	ldr	r2, [r7, #8]
 801b664:	4413      	add	r3, r2
 801b666:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b668:	2208      	movs	r2, #8
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	1a9b      	subs	r3, r3, r2
 801b66e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	f023 0307 	bic.w	r3, r3, #7
 801b676:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	4a15      	ldr	r2, [pc, #84]	@ (801b6d0 <prvHeapInit+0xb4>)
 801b67c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b67e:	4b14      	ldr	r3, [pc, #80]	@ (801b6d0 <prvHeapInit+0xb4>)
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	2200      	movs	r2, #0
 801b684:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b686:	4b12      	ldr	r3, [pc, #72]	@ (801b6d0 <prvHeapInit+0xb4>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	2200      	movs	r2, #0
 801b68c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b692:	683b      	ldr	r3, [r7, #0]
 801b694:	68fa      	ldr	r2, [r7, #12]
 801b696:	1ad2      	subs	r2, r2, r3
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b69c:	4b0c      	ldr	r3, [pc, #48]	@ (801b6d0 <prvHeapInit+0xb4>)
 801b69e:	681a      	ldr	r2, [r3, #0]
 801b6a0:	683b      	ldr	r3, [r7, #0]
 801b6a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b6a4:	683b      	ldr	r3, [r7, #0]
 801b6a6:	685b      	ldr	r3, [r3, #4]
 801b6a8:	4a0a      	ldr	r2, [pc, #40]	@ (801b6d4 <prvHeapInit+0xb8>)
 801b6aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b6ac:	683b      	ldr	r3, [r7, #0]
 801b6ae:	685b      	ldr	r3, [r3, #4]
 801b6b0:	4a09      	ldr	r2, [pc, #36]	@ (801b6d8 <prvHeapInit+0xbc>)
 801b6b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b6b4:	4b09      	ldr	r3, [pc, #36]	@ (801b6dc <prvHeapInit+0xc0>)
 801b6b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801b6ba:	601a      	str	r2, [r3, #0]
}
 801b6bc:	bf00      	nop
 801b6be:	3714      	adds	r7, #20
 801b6c0:	46bd      	mov	sp, r7
 801b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c6:	4770      	bx	lr
 801b6c8:	20002640 	.word	0x20002640
 801b6cc:	2000a640 	.word	0x2000a640
 801b6d0:	2000a648 	.word	0x2000a648
 801b6d4:	2000a650 	.word	0x2000a650
 801b6d8:	2000a64c 	.word	0x2000a64c
 801b6dc:	2000a654 	.word	0x2000a654

0801b6e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b6e0:	b480      	push	{r7}
 801b6e2:	b085      	sub	sp, #20
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b6e8:	4b28      	ldr	r3, [pc, #160]	@ (801b78c <prvInsertBlockIntoFreeList+0xac>)
 801b6ea:	60fb      	str	r3, [r7, #12]
 801b6ec:	e002      	b.n	801b6f4 <prvInsertBlockIntoFreeList+0x14>
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	60fb      	str	r3, [r7, #12]
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	687a      	ldr	r2, [r7, #4]
 801b6fa:	429a      	cmp	r2, r3
 801b6fc:	d8f7      	bhi.n	801b6ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b6fe:	68fb      	ldr	r3, [r7, #12]
 801b700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	685b      	ldr	r3, [r3, #4]
 801b706:	68ba      	ldr	r2, [r7, #8]
 801b708:	4413      	add	r3, r2
 801b70a:	687a      	ldr	r2, [r7, #4]
 801b70c:	429a      	cmp	r2, r3
 801b70e:	d108      	bne.n	801b722 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	685a      	ldr	r2, [r3, #4]
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	685b      	ldr	r3, [r3, #4]
 801b718:	441a      	add	r2, r3
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	685b      	ldr	r3, [r3, #4]
 801b72a:	68ba      	ldr	r2, [r7, #8]
 801b72c:	441a      	add	r2, r3
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	429a      	cmp	r2, r3
 801b734:	d118      	bne.n	801b768 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	681a      	ldr	r2, [r3, #0]
 801b73a:	4b15      	ldr	r3, [pc, #84]	@ (801b790 <prvInsertBlockIntoFreeList+0xb0>)
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	429a      	cmp	r2, r3
 801b740:	d00d      	beq.n	801b75e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	685a      	ldr	r2, [r3, #4]
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	685b      	ldr	r3, [r3, #4]
 801b74c:	441a      	add	r2, r3
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	681a      	ldr	r2, [r3, #0]
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	601a      	str	r2, [r3, #0]
 801b75c:	e008      	b.n	801b770 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b75e:	4b0c      	ldr	r3, [pc, #48]	@ (801b790 <prvInsertBlockIntoFreeList+0xb0>)
 801b760:	681a      	ldr	r2, [r3, #0]
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	601a      	str	r2, [r3, #0]
 801b766:	e003      	b.n	801b770 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	681a      	ldr	r2, [r3, #0]
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b770:	68fa      	ldr	r2, [r7, #12]
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	429a      	cmp	r2, r3
 801b776:	d002      	beq.n	801b77e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b778:	68fb      	ldr	r3, [r7, #12]
 801b77a:	687a      	ldr	r2, [r7, #4]
 801b77c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b77e:	bf00      	nop
 801b780:	3714      	adds	r7, #20
 801b782:	46bd      	mov	sp, r7
 801b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b788:	4770      	bx	lr
 801b78a:	bf00      	nop
 801b78c:	2000a640 	.word	0x2000a640
 801b790:	2000a648 	.word	0x2000a648

0801b794 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801b798:	2201      	movs	r2, #1
 801b79a:	490e      	ldr	r1, [pc, #56]	@ (801b7d4 <MX_USB_HOST_Init+0x40>)
 801b79c:	480e      	ldr	r0, [pc, #56]	@ (801b7d8 <MX_USB_HOST_Init+0x44>)
 801b79e:	f7f8 f889 	bl	80138b4 <USBH_Init>
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d001      	beq.n	801b7ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801b7a8:	f7e7 ff7c 	bl	80036a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801b7ac:	490b      	ldr	r1, [pc, #44]	@ (801b7dc <MX_USB_HOST_Init+0x48>)
 801b7ae:	480a      	ldr	r0, [pc, #40]	@ (801b7d8 <MX_USB_HOST_Init+0x44>)
 801b7b0:	f7f8 f953 	bl	8013a5a <USBH_RegisterClass>
 801b7b4:	4603      	mov	r3, r0
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d001      	beq.n	801b7be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801b7ba:	f7e7 ff73 	bl	80036a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801b7be:	4806      	ldr	r0, [pc, #24]	@ (801b7d8 <MX_USB_HOST_Init+0x44>)
 801b7c0:	f7f8 f9d7 	bl	8013b72 <USBH_Start>
 801b7c4:	4603      	mov	r3, r0
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d001      	beq.n	801b7ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801b7ca:	f7e7 ff6b 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801b7ce:	bf00      	nop
 801b7d0:	bd80      	pop	{r7, pc}
 801b7d2:	bf00      	nop
 801b7d4:	0801b7e1 	.word	0x0801b7e1
 801b7d8:	2000a658 	.word	0x2000a658
 801b7dc:	20000070 	.word	0x20000070

0801b7e0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801b7e0:	b480      	push	{r7}
 801b7e2:	b083      	sub	sp, #12
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	6078      	str	r0, [r7, #4]
 801b7e8:	460b      	mov	r3, r1
 801b7ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801b7ec:	78fb      	ldrb	r3, [r7, #3]
 801b7ee:	3b01      	subs	r3, #1
 801b7f0:	2b04      	cmp	r3, #4
 801b7f2:	d819      	bhi.n	801b828 <USBH_UserProcess+0x48>
 801b7f4:	a201      	add	r2, pc, #4	@ (adr r2, 801b7fc <USBH_UserProcess+0x1c>)
 801b7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7fa:	bf00      	nop
 801b7fc:	0801b829 	.word	0x0801b829
 801b800:	0801b819 	.word	0x0801b819
 801b804:	0801b829 	.word	0x0801b829
 801b808:	0801b821 	.word	0x0801b821
 801b80c:	0801b811 	.word	0x0801b811
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801b810:	4b09      	ldr	r3, [pc, #36]	@ (801b838 <USBH_UserProcess+0x58>)
 801b812:	2203      	movs	r2, #3
 801b814:	701a      	strb	r2, [r3, #0]
  break;
 801b816:	e008      	b.n	801b82a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801b818:	4b07      	ldr	r3, [pc, #28]	@ (801b838 <USBH_UserProcess+0x58>)
 801b81a:	2202      	movs	r2, #2
 801b81c:	701a      	strb	r2, [r3, #0]
  break;
 801b81e:	e004      	b.n	801b82a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801b820:	4b05      	ldr	r3, [pc, #20]	@ (801b838 <USBH_UserProcess+0x58>)
 801b822:	2201      	movs	r2, #1
 801b824:	701a      	strb	r2, [r3, #0]
  break;
 801b826:	e000      	b.n	801b82a <USBH_UserProcess+0x4a>

  default:
  break;
 801b828:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801b82a:	bf00      	nop
 801b82c:	370c      	adds	r7, #12
 801b82e:	46bd      	mov	sp, r7
 801b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b834:	4770      	bx	lr
 801b836:	bf00      	nop
 801b838:	2000aa3c 	.word	0x2000aa3c

0801b83c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801b83c:	b580      	push	{r7, lr}
 801b83e:	b08a      	sub	sp, #40	@ 0x28
 801b840:	af00      	add	r7, sp, #0
 801b842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b844:	f107 0314 	add.w	r3, r7, #20
 801b848:	2200      	movs	r2, #0
 801b84a:	601a      	str	r2, [r3, #0]
 801b84c:	605a      	str	r2, [r3, #4]
 801b84e:	609a      	str	r2, [r3, #8]
 801b850:	60da      	str	r2, [r3, #12]
 801b852:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b85c:	d13c      	bne.n	801b8d8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b85e:	4b20      	ldr	r3, [pc, #128]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b862:	4a1f      	ldr	r2, [pc, #124]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b864:	f043 0301 	orr.w	r3, r3, #1
 801b868:	6313      	str	r3, [r2, #48]	@ 0x30
 801b86a:	4b1d      	ldr	r3, [pc, #116]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b86c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b86e:	f003 0301 	and.w	r3, r3, #1
 801b872:	613b      	str	r3, [r7, #16]
 801b874:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801b876:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801b87a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b87c:	2302      	movs	r3, #2
 801b87e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b880:	2300      	movs	r3, #0
 801b882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b884:	2303      	movs	r3, #3
 801b886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801b888:	230a      	movs	r3, #10
 801b88a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b88c:	f107 0314 	add.w	r3, r7, #20
 801b890:	4619      	mov	r1, r3
 801b892:	4814      	ldr	r0, [pc, #80]	@ (801b8e4 <HAL_HCD_MspInit+0xa8>)
 801b894:	f7eb fcc6 	bl	8007224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b898:	4b11      	ldr	r3, [pc, #68]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b89a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b89c:	4a10      	ldr	r2, [pc, #64]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b89e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b8a2:	6353      	str	r3, [r2, #52]	@ 0x34
 801b8a4:	4b0e      	ldr	r3, [pc, #56]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b8a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b8ac:	60fb      	str	r3, [r7, #12]
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	4b0b      	ldr	r3, [pc, #44]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b8b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b8b4:	4a0a      	ldr	r2, [pc, #40]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b8b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801b8ba:	6453      	str	r3, [r2, #68]	@ 0x44
 801b8bc:	4b08      	ldr	r3, [pc, #32]	@ (801b8e0 <HAL_HCD_MspInit+0xa4>)
 801b8be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b8c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801b8c4:	60bb      	str	r3, [r7, #8]
 801b8c6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801b8c8:	2200      	movs	r2, #0
 801b8ca:	2105      	movs	r1, #5
 801b8cc:	2043      	movs	r0, #67	@ 0x43
 801b8ce:	f7ea f965 	bl	8005b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b8d2:	2043      	movs	r0, #67	@ 0x43
 801b8d4:	f7ea f97e 	bl	8005bd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b8d8:	bf00      	nop
 801b8da:	3728      	adds	r7, #40	@ 0x28
 801b8dc:	46bd      	mov	sp, r7
 801b8de:	bd80      	pop	{r7, pc}
 801b8e0:	40023800 	.word	0x40023800
 801b8e4:	40020000 	.word	0x40020000

0801b8e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801b8e8:	b580      	push	{r7, lr}
 801b8ea:	b082      	sub	sp, #8
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f7f8 fd73 	bl	80143e2 <USBH_LL_IncTimer>
}
 801b8fc:	bf00      	nop
 801b8fe:	3708      	adds	r7, #8
 801b900:	46bd      	mov	sp, r7
 801b902:	bd80      	pop	{r7, pc}

0801b904 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b082      	sub	sp, #8
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801b912:	4618      	mov	r0, r3
 801b914:	f7f8 fdb3 	bl	801447e <USBH_LL_Connect>
}
 801b918:	bf00      	nop
 801b91a:	3708      	adds	r7, #8
 801b91c:	46bd      	mov	sp, r7
 801b91e:	bd80      	pop	{r7, pc}

0801b920 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b082      	sub	sp, #8
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801b92e:	4618      	mov	r0, r3
 801b930:	f7f8 fdc0 	bl	80144b4 <USBH_LL_Disconnect>
}
 801b934:	bf00      	nop
 801b936:	3708      	adds	r7, #8
 801b938:	46bd      	mov	sp, r7
 801b93a:	bd80      	pop	{r7, pc}

0801b93c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b082      	sub	sp, #8
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
 801b944:	460b      	mov	r3, r1
 801b946:	70fb      	strb	r3, [r7, #3]
 801b948:	4613      	mov	r3, r2
 801b94a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801b952:	4618      	mov	r0, r3
 801b954:	f7f8 fe14 	bl	8014580 <USBH_LL_NotifyURBChange>
#endif
}
 801b958:	bf00      	nop
 801b95a:	3708      	adds	r7, #8
 801b95c:	46bd      	mov	sp, r7
 801b95e:	bd80      	pop	{r7, pc}

0801b960 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b082      	sub	sp, #8
 801b964:	af00      	add	r7, sp, #0
 801b966:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801b96e:	4618      	mov	r0, r3
 801b970:	f7f8 fd61 	bl	8014436 <USBH_LL_PortEnabled>
}
 801b974:	bf00      	nop
 801b976:	3708      	adds	r7, #8
 801b978:	46bd      	mov	sp, r7
 801b97a:	bd80      	pop	{r7, pc}

0801b97c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801b97c:	b580      	push	{r7, lr}
 801b97e:	b082      	sub	sp, #8
 801b980:	af00      	add	r7, sp, #0
 801b982:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801b98a:	4618      	mov	r0, r3
 801b98c:	f7f8 fd65 	bl	801445a <USBH_LL_PortDisabled>
}
 801b990:	bf00      	nop
 801b992:	3708      	adds	r7, #8
 801b994:	46bd      	mov	sp, r7
 801b996:	bd80      	pop	{r7, pc}

0801b998 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801b998:	b580      	push	{r7, lr}
 801b99a:	b082      	sub	sp, #8
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801b9a6:	2b01      	cmp	r3, #1
 801b9a8:	d12a      	bne.n	801ba00 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801b9aa:	4a18      	ldr	r2, [pc, #96]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	4a15      	ldr	r2, [pc, #84]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9b6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b9ba:	4b14      	ldr	r3, [pc, #80]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801b9c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801b9c2:	4b12      	ldr	r3, [pc, #72]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9c4:	2208      	movs	r2, #8
 801b9c6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801b9c8:	4b10      	ldr	r3, [pc, #64]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9ca:	2201      	movs	r2, #1
 801b9cc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b9ce:	4b0f      	ldr	r3, [pc, #60]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801b9d4:	4b0d      	ldr	r3, [pc, #52]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9d6:	2202      	movs	r2, #2
 801b9d8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b9da:	4b0c      	ldr	r3, [pc, #48]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9dc:	2200      	movs	r2, #0
 801b9de:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801b9e0:	480a      	ldr	r0, [pc, #40]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9e2:	f7eb fdfc 	bl	80075de <HAL_HCD_Init>
 801b9e6:	4603      	mov	r3, r0
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d001      	beq.n	801b9f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801b9ec:	f7e7 fe5a 	bl	80036a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801b9f0:	4806      	ldr	r0, [pc, #24]	@ (801ba0c <USBH_LL_Init+0x74>)
 801b9f2:	f7ec fa5d 	bl	8007eb0 <HAL_HCD_GetCurrentFrame>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	4619      	mov	r1, r3
 801b9fa:	6878      	ldr	r0, [r7, #4]
 801b9fc:	f7f8 fce2 	bl	80143c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801ba00:	2300      	movs	r3, #0
}
 801ba02:	4618      	mov	r0, r3
 801ba04:	3708      	adds	r7, #8
 801ba06:	46bd      	mov	sp, r7
 801ba08:	bd80      	pop	{r7, pc}
 801ba0a:	bf00      	nop
 801ba0c:	2000aa40 	.word	0x2000aa40

0801ba10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b084      	sub	sp, #16
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ba18:	2300      	movs	r3, #0
 801ba1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801ba26:	4618      	mov	r0, r3
 801ba28:	f7ec f9ca 	bl	8007dc0 <HAL_HCD_Start>
 801ba2c:	4603      	mov	r3, r0
 801ba2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ba30:	7bfb      	ldrb	r3, [r7, #15]
 801ba32:	4618      	mov	r0, r3
 801ba34:	f000 f95e 	bl	801bcf4 <USBH_Get_USB_Status>
 801ba38:	4603      	mov	r3, r0
 801ba3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ba3c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ba3e:	4618      	mov	r0, r3
 801ba40:	3710      	adds	r7, #16
 801ba42:	46bd      	mov	sp, r7
 801ba44:	bd80      	pop	{r7, pc}

0801ba46 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801ba46:	b580      	push	{r7, lr}
 801ba48:	b084      	sub	sp, #16
 801ba4a:	af00      	add	r7, sp, #0
 801ba4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ba4e:	2300      	movs	r3, #0
 801ba50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ba52:	2300      	movs	r3, #0
 801ba54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801ba5c:	4618      	mov	r0, r3
 801ba5e:	f7ec f9d2 	bl	8007e06 <HAL_HCD_Stop>
 801ba62:	4603      	mov	r3, r0
 801ba64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ba66:	7bfb      	ldrb	r3, [r7, #15]
 801ba68:	4618      	mov	r0, r3
 801ba6a:	f000 f943 	bl	801bcf4 <USBH_Get_USB_Status>
 801ba6e:	4603      	mov	r3, r0
 801ba70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ba72:	7bbb      	ldrb	r3, [r7, #14]
}
 801ba74:	4618      	mov	r0, r3
 801ba76:	3710      	adds	r7, #16
 801ba78:	46bd      	mov	sp, r7
 801ba7a:	bd80      	pop	{r7, pc}

0801ba7c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b084      	sub	sp, #16
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801ba84:	2301      	movs	r3, #1
 801ba86:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801ba8e:	4618      	mov	r0, r3
 801ba90:	f7ec fa1c 	bl	8007ecc <HAL_HCD_GetCurrentSpeed>
 801ba94:	4603      	mov	r3, r0
 801ba96:	2b02      	cmp	r3, #2
 801ba98:	d00c      	beq.n	801bab4 <USBH_LL_GetSpeed+0x38>
 801ba9a:	2b02      	cmp	r3, #2
 801ba9c:	d80d      	bhi.n	801baba <USBH_LL_GetSpeed+0x3e>
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d002      	beq.n	801baa8 <USBH_LL_GetSpeed+0x2c>
 801baa2:	2b01      	cmp	r3, #1
 801baa4:	d003      	beq.n	801baae <USBH_LL_GetSpeed+0x32>
 801baa6:	e008      	b.n	801baba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801baa8:	2300      	movs	r3, #0
 801baaa:	73fb      	strb	r3, [r7, #15]
    break;
 801baac:	e008      	b.n	801bac0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801baae:	2301      	movs	r3, #1
 801bab0:	73fb      	strb	r3, [r7, #15]
    break;
 801bab2:	e005      	b.n	801bac0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801bab4:	2302      	movs	r3, #2
 801bab6:	73fb      	strb	r3, [r7, #15]
    break;
 801bab8:	e002      	b.n	801bac0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801baba:	2301      	movs	r3, #1
 801babc:	73fb      	strb	r3, [r7, #15]
    break;
 801babe:	bf00      	nop
  }
  return  speed;
 801bac0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bac2:	4618      	mov	r0, r3
 801bac4:	3710      	adds	r7, #16
 801bac6:	46bd      	mov	sp, r7
 801bac8:	bd80      	pop	{r7, pc}

0801baca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801baca:	b580      	push	{r7, lr}
 801bacc:	b084      	sub	sp, #16
 801bace:	af00      	add	r7, sp, #0
 801bad0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bad2:	2300      	movs	r3, #0
 801bad4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801bad6:	2300      	movs	r3, #0
 801bad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801bae0:	4618      	mov	r0, r3
 801bae2:	f7ec f9ad 	bl	8007e40 <HAL_HCD_ResetPort>
 801bae6:	4603      	mov	r3, r0
 801bae8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801baea:	7bfb      	ldrb	r3, [r7, #15]
 801baec:	4618      	mov	r0, r3
 801baee:	f000 f901 	bl	801bcf4 <USBH_Get_USB_Status>
 801baf2:	4603      	mov	r3, r0
 801baf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801baf6:	7bbb      	ldrb	r3, [r7, #14]
}
 801baf8:	4618      	mov	r0, r3
 801bafa:	3710      	adds	r7, #16
 801bafc:	46bd      	mov	sp, r7
 801bafe:	bd80      	pop	{r7, pc}

0801bb00 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b082      	sub	sp, #8
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	6078      	str	r0, [r7, #4]
 801bb08:	460b      	mov	r3, r1
 801bb0a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801bb12:	78fa      	ldrb	r2, [r7, #3]
 801bb14:	4611      	mov	r1, r2
 801bb16:	4618      	mov	r0, r3
 801bb18:	f7ec f9b5 	bl	8007e86 <HAL_HCD_HC_GetXferCount>
 801bb1c:	4603      	mov	r3, r0
}
 801bb1e:	4618      	mov	r0, r3
 801bb20:	3708      	adds	r7, #8
 801bb22:	46bd      	mov	sp, r7
 801bb24:	bd80      	pop	{r7, pc}

0801bb26 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801bb26:	b590      	push	{r4, r7, lr}
 801bb28:	b089      	sub	sp, #36	@ 0x24
 801bb2a:	af04      	add	r7, sp, #16
 801bb2c:	6078      	str	r0, [r7, #4]
 801bb2e:	4608      	mov	r0, r1
 801bb30:	4611      	mov	r1, r2
 801bb32:	461a      	mov	r2, r3
 801bb34:	4603      	mov	r3, r0
 801bb36:	70fb      	strb	r3, [r7, #3]
 801bb38:	460b      	mov	r3, r1
 801bb3a:	70bb      	strb	r3, [r7, #2]
 801bb3c:	4613      	mov	r3, r2
 801bb3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb40:	2300      	movs	r3, #0
 801bb42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801bb44:	2300      	movs	r3, #0
 801bb46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801bb4e:	787c      	ldrb	r4, [r7, #1]
 801bb50:	78ba      	ldrb	r2, [r7, #2]
 801bb52:	78f9      	ldrb	r1, [r7, #3]
 801bb54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801bb56:	9302      	str	r3, [sp, #8]
 801bb58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bb5c:	9301      	str	r3, [sp, #4]
 801bb5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801bb62:	9300      	str	r3, [sp, #0]
 801bb64:	4623      	mov	r3, r4
 801bb66:	f7eb fda1 	bl	80076ac <HAL_HCD_HC_Init>
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801bb6e:	7bfb      	ldrb	r3, [r7, #15]
 801bb70:	4618      	mov	r0, r3
 801bb72:	f000 f8bf 	bl	801bcf4 <USBH_Get_USB_Status>
 801bb76:	4603      	mov	r3, r0
 801bb78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bb7a:	7bbb      	ldrb	r3, [r7, #14]
}
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	3714      	adds	r7, #20
 801bb80:	46bd      	mov	sp, r7
 801bb82:	bd90      	pop	{r4, r7, pc}

0801bb84 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801bb84:	b580      	push	{r7, lr}
 801bb86:	b084      	sub	sp, #16
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	6078      	str	r0, [r7, #4]
 801bb8c:	460b      	mov	r3, r1
 801bb8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb90:	2300      	movs	r3, #0
 801bb92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801bb94:	2300      	movs	r3, #0
 801bb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801bb9e:	78fa      	ldrb	r2, [r7, #3]
 801bba0:	4611      	mov	r1, r2
 801bba2:	4618      	mov	r0, r3
 801bba4:	f7eb fe3a 	bl	800781c <HAL_HCD_HC_Halt>
 801bba8:	4603      	mov	r3, r0
 801bbaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801bbac:	7bfb      	ldrb	r3, [r7, #15]
 801bbae:	4618      	mov	r0, r3
 801bbb0:	f000 f8a0 	bl	801bcf4 <USBH_Get_USB_Status>
 801bbb4:	4603      	mov	r3, r0
 801bbb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bbb8:	7bbb      	ldrb	r3, [r7, #14]
}
 801bbba:	4618      	mov	r0, r3
 801bbbc:	3710      	adds	r7, #16
 801bbbe:	46bd      	mov	sp, r7
 801bbc0:	bd80      	pop	{r7, pc}

0801bbc2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801bbc2:	b590      	push	{r4, r7, lr}
 801bbc4:	b089      	sub	sp, #36	@ 0x24
 801bbc6:	af04      	add	r7, sp, #16
 801bbc8:	6078      	str	r0, [r7, #4]
 801bbca:	4608      	mov	r0, r1
 801bbcc:	4611      	mov	r1, r2
 801bbce:	461a      	mov	r2, r3
 801bbd0:	4603      	mov	r3, r0
 801bbd2:	70fb      	strb	r3, [r7, #3]
 801bbd4:	460b      	mov	r3, r1
 801bbd6:	70bb      	strb	r3, [r7, #2]
 801bbd8:	4613      	mov	r3, r2
 801bbda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bbdc:	2300      	movs	r3, #0
 801bbde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801bbea:	787c      	ldrb	r4, [r7, #1]
 801bbec:	78ba      	ldrb	r2, [r7, #2]
 801bbee:	78f9      	ldrb	r1, [r7, #3]
 801bbf0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801bbf4:	9303      	str	r3, [sp, #12]
 801bbf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801bbf8:	9302      	str	r3, [sp, #8]
 801bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbfc:	9301      	str	r3, [sp, #4]
 801bbfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 801bc02:	9300      	str	r3, [sp, #0]
 801bc04:	4623      	mov	r3, r4
 801bc06:	f7eb fe2d 	bl	8007864 <HAL_HCD_HC_SubmitRequest>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801bc0e:	7bfb      	ldrb	r3, [r7, #15]
 801bc10:	4618      	mov	r0, r3
 801bc12:	f000 f86f 	bl	801bcf4 <USBH_Get_USB_Status>
 801bc16:	4603      	mov	r3, r0
 801bc18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bc1a:	7bbb      	ldrb	r3, [r7, #14]
}
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	3714      	adds	r7, #20
 801bc20:	46bd      	mov	sp, r7
 801bc22:	bd90      	pop	{r4, r7, pc}

0801bc24 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801bc24:	b580      	push	{r7, lr}
 801bc26:	b082      	sub	sp, #8
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	6078      	str	r0, [r7, #4]
 801bc2c:	460b      	mov	r3, r1
 801bc2e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801bc36:	78fa      	ldrb	r2, [r7, #3]
 801bc38:	4611      	mov	r1, r2
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	f7ec f90e 	bl	8007e5c <HAL_HCD_HC_GetURBState>
 801bc40:	4603      	mov	r3, r0
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	3708      	adds	r7, #8
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd80      	pop	{r7, pc}

0801bc4a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801bc4a:	b580      	push	{r7, lr}
 801bc4c:	b082      	sub	sp, #8
 801bc4e:	af00      	add	r7, sp, #0
 801bc50:	6078      	str	r0, [r7, #4]
 801bc52:	460b      	mov	r3, r1
 801bc54:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801bc5c:	2b01      	cmp	r3, #1
 801bc5e:	d103      	bne.n	801bc68 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801bc60:	78fb      	ldrb	r3, [r7, #3]
 801bc62:	4618      	mov	r0, r3
 801bc64:	f000 f872 	bl	801bd4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801bc68:	20c8      	movs	r0, #200	@ 0xc8
 801bc6a:	f7e9 fc23 	bl	80054b4 <HAL_Delay>
  return USBH_OK;
 801bc6e:	2300      	movs	r3, #0
}
 801bc70:	4618      	mov	r0, r3
 801bc72:	3708      	adds	r7, #8
 801bc74:	46bd      	mov	sp, r7
 801bc76:	bd80      	pop	{r7, pc}

0801bc78 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801bc78:	b480      	push	{r7}
 801bc7a:	b085      	sub	sp, #20
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
 801bc80:	460b      	mov	r3, r1
 801bc82:	70fb      	strb	r3, [r7, #3]
 801bc84:	4613      	mov	r3, r2
 801bc86:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801bc8e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801bc90:	78fa      	ldrb	r2, [r7, #3]
 801bc92:	68f9      	ldr	r1, [r7, #12]
 801bc94:	4613      	mov	r3, r2
 801bc96:	011b      	lsls	r3, r3, #4
 801bc98:	1a9b      	subs	r3, r3, r2
 801bc9a:	009b      	lsls	r3, r3, #2
 801bc9c:	440b      	add	r3, r1
 801bc9e:	3317      	adds	r3, #23
 801bca0:	781b      	ldrb	r3, [r3, #0]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d00a      	beq.n	801bcbc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801bca6:	78fa      	ldrb	r2, [r7, #3]
 801bca8:	68f9      	ldr	r1, [r7, #12]
 801bcaa:	4613      	mov	r3, r2
 801bcac:	011b      	lsls	r3, r3, #4
 801bcae:	1a9b      	subs	r3, r3, r2
 801bcb0:	009b      	lsls	r3, r3, #2
 801bcb2:	440b      	add	r3, r1
 801bcb4:	333c      	adds	r3, #60	@ 0x3c
 801bcb6:	78ba      	ldrb	r2, [r7, #2]
 801bcb8:	701a      	strb	r2, [r3, #0]
 801bcba:	e009      	b.n	801bcd0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801bcbc:	78fa      	ldrb	r2, [r7, #3]
 801bcbe:	68f9      	ldr	r1, [r7, #12]
 801bcc0:	4613      	mov	r3, r2
 801bcc2:	011b      	lsls	r3, r3, #4
 801bcc4:	1a9b      	subs	r3, r3, r2
 801bcc6:	009b      	lsls	r3, r3, #2
 801bcc8:	440b      	add	r3, r1
 801bcca:	333d      	adds	r3, #61	@ 0x3d
 801bccc:	78ba      	ldrb	r2, [r7, #2]
 801bcce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801bcd0:	2300      	movs	r3, #0
}
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	3714      	adds	r7, #20
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcdc:	4770      	bx	lr

0801bcde <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801bcde:	b580      	push	{r7, lr}
 801bce0:	b082      	sub	sp, #8
 801bce2:	af00      	add	r7, sp, #0
 801bce4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801bce6:	6878      	ldr	r0, [r7, #4]
 801bce8:	f7e9 fbe4 	bl	80054b4 <HAL_Delay>
}
 801bcec:	bf00      	nop
 801bcee:	3708      	adds	r7, #8
 801bcf0:	46bd      	mov	sp, r7
 801bcf2:	bd80      	pop	{r7, pc}

0801bcf4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801bcf4:	b480      	push	{r7}
 801bcf6:	b085      	sub	sp, #20
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801bcfe:	2300      	movs	r3, #0
 801bd00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801bd02:	79fb      	ldrb	r3, [r7, #7]
 801bd04:	2b03      	cmp	r3, #3
 801bd06:	d817      	bhi.n	801bd38 <USBH_Get_USB_Status+0x44>
 801bd08:	a201      	add	r2, pc, #4	@ (adr r2, 801bd10 <USBH_Get_USB_Status+0x1c>)
 801bd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd0e:	bf00      	nop
 801bd10:	0801bd21 	.word	0x0801bd21
 801bd14:	0801bd27 	.word	0x0801bd27
 801bd18:	0801bd2d 	.word	0x0801bd2d
 801bd1c:	0801bd33 	.word	0x0801bd33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801bd20:	2300      	movs	r3, #0
 801bd22:	73fb      	strb	r3, [r7, #15]
    break;
 801bd24:	e00b      	b.n	801bd3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801bd26:	2302      	movs	r3, #2
 801bd28:	73fb      	strb	r3, [r7, #15]
    break;
 801bd2a:	e008      	b.n	801bd3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801bd2c:	2301      	movs	r3, #1
 801bd2e:	73fb      	strb	r3, [r7, #15]
    break;
 801bd30:	e005      	b.n	801bd3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801bd32:	2302      	movs	r3, #2
 801bd34:	73fb      	strb	r3, [r7, #15]
    break;
 801bd36:	e002      	b.n	801bd3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801bd38:	2302      	movs	r3, #2
 801bd3a:	73fb      	strb	r3, [r7, #15]
    break;
 801bd3c:	bf00      	nop
  }
  return usb_status;
 801bd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd40:	4618      	mov	r0, r3
 801bd42:	3714      	adds	r7, #20
 801bd44:	46bd      	mov	sp, r7
 801bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd4a:	4770      	bx	lr

0801bd4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b084      	sub	sp, #16
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	4603      	mov	r3, r0
 801bd54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801bd56:	79fb      	ldrb	r3, [r7, #7]
 801bd58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801bd5a:	79fb      	ldrb	r3, [r7, #7]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d102      	bne.n	801bd66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801bd60:	2300      	movs	r3, #0
 801bd62:	73fb      	strb	r3, [r7, #15]
 801bd64:	e001      	b.n	801bd6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801bd66:	2301      	movs	r3, #1
 801bd68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801bd6a:	7bfb      	ldrb	r3, [r7, #15]
 801bd6c:	461a      	mov	r2, r3
 801bd6e:	2120      	movs	r1, #32
 801bd70:	4803      	ldr	r0, [pc, #12]	@ (801bd80 <MX_DriverVbusFS+0x34>)
 801bd72:	f7eb fc1b 	bl	80075ac <HAL_GPIO_WritePin>
}
 801bd76:	bf00      	nop
 801bd78:	3710      	adds	r7, #16
 801bd7a:	46bd      	mov	sp, r7
 801bd7c:	bd80      	pop	{r7, pc}
 801bd7e:	bf00      	nop
 801bd80:	40020c00 	.word	0x40020c00

0801bd84 <malloc>:
 801bd84:	4b02      	ldr	r3, [pc, #8]	@ (801bd90 <malloc+0xc>)
 801bd86:	4601      	mov	r1, r0
 801bd88:	6818      	ldr	r0, [r3, #0]
 801bd8a:	f000 b82d 	b.w	801bde8 <_malloc_r>
 801bd8e:	bf00      	nop
 801bd90:	20000094 	.word	0x20000094

0801bd94 <free>:
 801bd94:	4b02      	ldr	r3, [pc, #8]	@ (801bda0 <free+0xc>)
 801bd96:	4601      	mov	r1, r0
 801bd98:	6818      	ldr	r0, [r3, #0]
 801bd9a:	f000 b9c1 	b.w	801c120 <_free_r>
 801bd9e:	bf00      	nop
 801bda0:	20000094 	.word	0x20000094

0801bda4 <sbrk_aligned>:
 801bda4:	b570      	push	{r4, r5, r6, lr}
 801bda6:	4e0f      	ldr	r6, [pc, #60]	@ (801bde4 <sbrk_aligned+0x40>)
 801bda8:	460c      	mov	r4, r1
 801bdaa:	6831      	ldr	r1, [r6, #0]
 801bdac:	4605      	mov	r5, r0
 801bdae:	b911      	cbnz	r1, 801bdb6 <sbrk_aligned+0x12>
 801bdb0:	f000 f96c 	bl	801c08c <_sbrk_r>
 801bdb4:	6030      	str	r0, [r6, #0]
 801bdb6:	4621      	mov	r1, r4
 801bdb8:	4628      	mov	r0, r5
 801bdba:	f000 f967 	bl	801c08c <_sbrk_r>
 801bdbe:	1c43      	adds	r3, r0, #1
 801bdc0:	d103      	bne.n	801bdca <sbrk_aligned+0x26>
 801bdc2:	f04f 34ff 	mov.w	r4, #4294967295
 801bdc6:	4620      	mov	r0, r4
 801bdc8:	bd70      	pop	{r4, r5, r6, pc}
 801bdca:	1cc4      	adds	r4, r0, #3
 801bdcc:	f024 0403 	bic.w	r4, r4, #3
 801bdd0:	42a0      	cmp	r0, r4
 801bdd2:	d0f8      	beq.n	801bdc6 <sbrk_aligned+0x22>
 801bdd4:	1a21      	subs	r1, r4, r0
 801bdd6:	4628      	mov	r0, r5
 801bdd8:	f000 f958 	bl	801c08c <_sbrk_r>
 801bddc:	3001      	adds	r0, #1
 801bdde:	d1f2      	bne.n	801bdc6 <sbrk_aligned+0x22>
 801bde0:	e7ef      	b.n	801bdc2 <sbrk_aligned+0x1e>
 801bde2:	bf00      	nop
 801bde4:	2000ae20 	.word	0x2000ae20

0801bde8 <_malloc_r>:
 801bde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdec:	1ccd      	adds	r5, r1, #3
 801bdee:	f025 0503 	bic.w	r5, r5, #3
 801bdf2:	3508      	adds	r5, #8
 801bdf4:	2d0c      	cmp	r5, #12
 801bdf6:	bf38      	it	cc
 801bdf8:	250c      	movcc	r5, #12
 801bdfa:	2d00      	cmp	r5, #0
 801bdfc:	4606      	mov	r6, r0
 801bdfe:	db01      	blt.n	801be04 <_malloc_r+0x1c>
 801be00:	42a9      	cmp	r1, r5
 801be02:	d904      	bls.n	801be0e <_malloc_r+0x26>
 801be04:	230c      	movs	r3, #12
 801be06:	6033      	str	r3, [r6, #0]
 801be08:	2000      	movs	r0, #0
 801be0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bee4 <_malloc_r+0xfc>
 801be12:	f000 f869 	bl	801bee8 <__malloc_lock>
 801be16:	f8d8 3000 	ldr.w	r3, [r8]
 801be1a:	461c      	mov	r4, r3
 801be1c:	bb44      	cbnz	r4, 801be70 <_malloc_r+0x88>
 801be1e:	4629      	mov	r1, r5
 801be20:	4630      	mov	r0, r6
 801be22:	f7ff ffbf 	bl	801bda4 <sbrk_aligned>
 801be26:	1c43      	adds	r3, r0, #1
 801be28:	4604      	mov	r4, r0
 801be2a:	d158      	bne.n	801bede <_malloc_r+0xf6>
 801be2c:	f8d8 4000 	ldr.w	r4, [r8]
 801be30:	4627      	mov	r7, r4
 801be32:	2f00      	cmp	r7, #0
 801be34:	d143      	bne.n	801bebe <_malloc_r+0xd6>
 801be36:	2c00      	cmp	r4, #0
 801be38:	d04b      	beq.n	801bed2 <_malloc_r+0xea>
 801be3a:	6823      	ldr	r3, [r4, #0]
 801be3c:	4639      	mov	r1, r7
 801be3e:	4630      	mov	r0, r6
 801be40:	eb04 0903 	add.w	r9, r4, r3
 801be44:	f000 f922 	bl	801c08c <_sbrk_r>
 801be48:	4581      	cmp	r9, r0
 801be4a:	d142      	bne.n	801bed2 <_malloc_r+0xea>
 801be4c:	6821      	ldr	r1, [r4, #0]
 801be4e:	1a6d      	subs	r5, r5, r1
 801be50:	4629      	mov	r1, r5
 801be52:	4630      	mov	r0, r6
 801be54:	f7ff ffa6 	bl	801bda4 <sbrk_aligned>
 801be58:	3001      	adds	r0, #1
 801be5a:	d03a      	beq.n	801bed2 <_malloc_r+0xea>
 801be5c:	6823      	ldr	r3, [r4, #0]
 801be5e:	442b      	add	r3, r5
 801be60:	6023      	str	r3, [r4, #0]
 801be62:	f8d8 3000 	ldr.w	r3, [r8]
 801be66:	685a      	ldr	r2, [r3, #4]
 801be68:	bb62      	cbnz	r2, 801bec4 <_malloc_r+0xdc>
 801be6a:	f8c8 7000 	str.w	r7, [r8]
 801be6e:	e00f      	b.n	801be90 <_malloc_r+0xa8>
 801be70:	6822      	ldr	r2, [r4, #0]
 801be72:	1b52      	subs	r2, r2, r5
 801be74:	d420      	bmi.n	801beb8 <_malloc_r+0xd0>
 801be76:	2a0b      	cmp	r2, #11
 801be78:	d917      	bls.n	801beaa <_malloc_r+0xc2>
 801be7a:	1961      	adds	r1, r4, r5
 801be7c:	42a3      	cmp	r3, r4
 801be7e:	6025      	str	r5, [r4, #0]
 801be80:	bf18      	it	ne
 801be82:	6059      	strne	r1, [r3, #4]
 801be84:	6863      	ldr	r3, [r4, #4]
 801be86:	bf08      	it	eq
 801be88:	f8c8 1000 	streq.w	r1, [r8]
 801be8c:	5162      	str	r2, [r4, r5]
 801be8e:	604b      	str	r3, [r1, #4]
 801be90:	4630      	mov	r0, r6
 801be92:	f000 f82f 	bl	801bef4 <__malloc_unlock>
 801be96:	f104 000b 	add.w	r0, r4, #11
 801be9a:	1d23      	adds	r3, r4, #4
 801be9c:	f020 0007 	bic.w	r0, r0, #7
 801bea0:	1ac2      	subs	r2, r0, r3
 801bea2:	bf1c      	itt	ne
 801bea4:	1a1b      	subne	r3, r3, r0
 801bea6:	50a3      	strne	r3, [r4, r2]
 801bea8:	e7af      	b.n	801be0a <_malloc_r+0x22>
 801beaa:	6862      	ldr	r2, [r4, #4]
 801beac:	42a3      	cmp	r3, r4
 801beae:	bf0c      	ite	eq
 801beb0:	f8c8 2000 	streq.w	r2, [r8]
 801beb4:	605a      	strne	r2, [r3, #4]
 801beb6:	e7eb      	b.n	801be90 <_malloc_r+0xa8>
 801beb8:	4623      	mov	r3, r4
 801beba:	6864      	ldr	r4, [r4, #4]
 801bebc:	e7ae      	b.n	801be1c <_malloc_r+0x34>
 801bebe:	463c      	mov	r4, r7
 801bec0:	687f      	ldr	r7, [r7, #4]
 801bec2:	e7b6      	b.n	801be32 <_malloc_r+0x4a>
 801bec4:	461a      	mov	r2, r3
 801bec6:	685b      	ldr	r3, [r3, #4]
 801bec8:	42a3      	cmp	r3, r4
 801beca:	d1fb      	bne.n	801bec4 <_malloc_r+0xdc>
 801becc:	2300      	movs	r3, #0
 801bece:	6053      	str	r3, [r2, #4]
 801bed0:	e7de      	b.n	801be90 <_malloc_r+0xa8>
 801bed2:	230c      	movs	r3, #12
 801bed4:	6033      	str	r3, [r6, #0]
 801bed6:	4630      	mov	r0, r6
 801bed8:	f000 f80c 	bl	801bef4 <__malloc_unlock>
 801bedc:	e794      	b.n	801be08 <_malloc_r+0x20>
 801bede:	6005      	str	r5, [r0, #0]
 801bee0:	e7d6      	b.n	801be90 <_malloc_r+0xa8>
 801bee2:	bf00      	nop
 801bee4:	2000ae24 	.word	0x2000ae24

0801bee8 <__malloc_lock>:
 801bee8:	4801      	ldr	r0, [pc, #4]	@ (801bef0 <__malloc_lock+0x8>)
 801beea:	f000 b909 	b.w	801c100 <__retarget_lock_acquire_recursive>
 801beee:	bf00      	nop
 801bef0:	2000af64 	.word	0x2000af64

0801bef4 <__malloc_unlock>:
 801bef4:	4801      	ldr	r0, [pc, #4]	@ (801befc <__malloc_unlock+0x8>)
 801bef6:	f000 b904 	b.w	801c102 <__retarget_lock_release_recursive>
 801befa:	bf00      	nop
 801befc:	2000af64 	.word	0x2000af64

0801bf00 <sniprintf>:
 801bf00:	b40c      	push	{r2, r3}
 801bf02:	b530      	push	{r4, r5, lr}
 801bf04:	4b18      	ldr	r3, [pc, #96]	@ (801bf68 <sniprintf+0x68>)
 801bf06:	1e0c      	subs	r4, r1, #0
 801bf08:	681d      	ldr	r5, [r3, #0]
 801bf0a:	b09d      	sub	sp, #116	@ 0x74
 801bf0c:	da08      	bge.n	801bf20 <sniprintf+0x20>
 801bf0e:	238b      	movs	r3, #139	@ 0x8b
 801bf10:	602b      	str	r3, [r5, #0]
 801bf12:	f04f 30ff 	mov.w	r0, #4294967295
 801bf16:	b01d      	add	sp, #116	@ 0x74
 801bf18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bf1c:	b002      	add	sp, #8
 801bf1e:	4770      	bx	lr
 801bf20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bf24:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bf28:	f04f 0300 	mov.w	r3, #0
 801bf2c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801bf2e:	bf14      	ite	ne
 801bf30:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bf34:	4623      	moveq	r3, r4
 801bf36:	9304      	str	r3, [sp, #16]
 801bf38:	9307      	str	r3, [sp, #28]
 801bf3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bf3e:	9002      	str	r0, [sp, #8]
 801bf40:	9006      	str	r0, [sp, #24]
 801bf42:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801bf48:	ab21      	add	r3, sp, #132	@ 0x84
 801bf4a:	a902      	add	r1, sp, #8
 801bf4c:	4628      	mov	r0, r5
 801bf4e:	9301      	str	r3, [sp, #4]
 801bf50:	f000 f98c 	bl	801c26c <_svfiprintf_r>
 801bf54:	1c43      	adds	r3, r0, #1
 801bf56:	bfbc      	itt	lt
 801bf58:	238b      	movlt	r3, #139	@ 0x8b
 801bf5a:	602b      	strlt	r3, [r5, #0]
 801bf5c:	2c00      	cmp	r4, #0
 801bf5e:	d0da      	beq.n	801bf16 <sniprintf+0x16>
 801bf60:	9b02      	ldr	r3, [sp, #8]
 801bf62:	2200      	movs	r2, #0
 801bf64:	701a      	strb	r2, [r3, #0]
 801bf66:	e7d6      	b.n	801bf16 <sniprintf+0x16>
 801bf68:	20000094 	.word	0x20000094

0801bf6c <siprintf>:
 801bf6c:	b40e      	push	{r1, r2, r3}
 801bf6e:	b510      	push	{r4, lr}
 801bf70:	b09d      	sub	sp, #116	@ 0x74
 801bf72:	ab1f      	add	r3, sp, #124	@ 0x7c
 801bf74:	9002      	str	r0, [sp, #8]
 801bf76:	9006      	str	r0, [sp, #24]
 801bf78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801bf7c:	480a      	ldr	r0, [pc, #40]	@ (801bfa8 <siprintf+0x3c>)
 801bf7e:	9107      	str	r1, [sp, #28]
 801bf80:	9104      	str	r1, [sp, #16]
 801bf82:	490a      	ldr	r1, [pc, #40]	@ (801bfac <siprintf+0x40>)
 801bf84:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf88:	9105      	str	r1, [sp, #20]
 801bf8a:	2400      	movs	r4, #0
 801bf8c:	a902      	add	r1, sp, #8
 801bf8e:	6800      	ldr	r0, [r0, #0]
 801bf90:	9301      	str	r3, [sp, #4]
 801bf92:	941b      	str	r4, [sp, #108]	@ 0x6c
 801bf94:	f000 f96a 	bl	801c26c <_svfiprintf_r>
 801bf98:	9b02      	ldr	r3, [sp, #8]
 801bf9a:	701c      	strb	r4, [r3, #0]
 801bf9c:	b01d      	add	sp, #116	@ 0x74
 801bf9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfa2:	b003      	add	sp, #12
 801bfa4:	4770      	bx	lr
 801bfa6:	bf00      	nop
 801bfa8:	20000094 	.word	0x20000094
 801bfac:	ffff0208 	.word	0xffff0208

0801bfb0 <_vsniprintf_r>:
 801bfb0:	b530      	push	{r4, r5, lr}
 801bfb2:	4614      	mov	r4, r2
 801bfb4:	2c00      	cmp	r4, #0
 801bfb6:	b09b      	sub	sp, #108	@ 0x6c
 801bfb8:	4605      	mov	r5, r0
 801bfba:	461a      	mov	r2, r3
 801bfbc:	da05      	bge.n	801bfca <_vsniprintf_r+0x1a>
 801bfbe:	238b      	movs	r3, #139	@ 0x8b
 801bfc0:	6003      	str	r3, [r0, #0]
 801bfc2:	f04f 30ff 	mov.w	r0, #4294967295
 801bfc6:	b01b      	add	sp, #108	@ 0x6c
 801bfc8:	bd30      	pop	{r4, r5, pc}
 801bfca:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bfce:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bfd2:	f04f 0300 	mov.w	r3, #0
 801bfd6:	9319      	str	r3, [sp, #100]	@ 0x64
 801bfd8:	bf14      	ite	ne
 801bfda:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bfde:	4623      	moveq	r3, r4
 801bfe0:	9302      	str	r3, [sp, #8]
 801bfe2:	9305      	str	r3, [sp, #20]
 801bfe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bfe8:	9100      	str	r1, [sp, #0]
 801bfea:	9104      	str	r1, [sp, #16]
 801bfec:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bff0:	4669      	mov	r1, sp
 801bff2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bff4:	f000 f93a 	bl	801c26c <_svfiprintf_r>
 801bff8:	1c43      	adds	r3, r0, #1
 801bffa:	bfbc      	itt	lt
 801bffc:	238b      	movlt	r3, #139	@ 0x8b
 801bffe:	602b      	strlt	r3, [r5, #0]
 801c000:	2c00      	cmp	r4, #0
 801c002:	d0e0      	beq.n	801bfc6 <_vsniprintf_r+0x16>
 801c004:	9b00      	ldr	r3, [sp, #0]
 801c006:	2200      	movs	r2, #0
 801c008:	701a      	strb	r2, [r3, #0]
 801c00a:	e7dc      	b.n	801bfc6 <_vsniprintf_r+0x16>

0801c00c <vsniprintf>:
 801c00c:	b507      	push	{r0, r1, r2, lr}
 801c00e:	9300      	str	r3, [sp, #0]
 801c010:	4613      	mov	r3, r2
 801c012:	460a      	mov	r2, r1
 801c014:	4601      	mov	r1, r0
 801c016:	4803      	ldr	r0, [pc, #12]	@ (801c024 <vsniprintf+0x18>)
 801c018:	6800      	ldr	r0, [r0, #0]
 801c01a:	f7ff ffc9 	bl	801bfb0 <_vsniprintf_r>
 801c01e:	b003      	add	sp, #12
 801c020:	f85d fb04 	ldr.w	pc, [sp], #4
 801c024:	20000094 	.word	0x20000094

0801c028 <memset>:
 801c028:	4402      	add	r2, r0
 801c02a:	4603      	mov	r3, r0
 801c02c:	4293      	cmp	r3, r2
 801c02e:	d100      	bne.n	801c032 <memset+0xa>
 801c030:	4770      	bx	lr
 801c032:	f803 1b01 	strb.w	r1, [r3], #1
 801c036:	e7f9      	b.n	801c02c <memset+0x4>

0801c038 <strncpy>:
 801c038:	b510      	push	{r4, lr}
 801c03a:	3901      	subs	r1, #1
 801c03c:	4603      	mov	r3, r0
 801c03e:	b132      	cbz	r2, 801c04e <strncpy+0x16>
 801c040:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c044:	f803 4b01 	strb.w	r4, [r3], #1
 801c048:	3a01      	subs	r2, #1
 801c04a:	2c00      	cmp	r4, #0
 801c04c:	d1f7      	bne.n	801c03e <strncpy+0x6>
 801c04e:	441a      	add	r2, r3
 801c050:	2100      	movs	r1, #0
 801c052:	4293      	cmp	r3, r2
 801c054:	d100      	bne.n	801c058 <strncpy+0x20>
 801c056:	bd10      	pop	{r4, pc}
 801c058:	f803 1b01 	strb.w	r1, [r3], #1
 801c05c:	e7f9      	b.n	801c052 <strncpy+0x1a>

0801c05e <strstr>:
 801c05e:	780a      	ldrb	r2, [r1, #0]
 801c060:	b570      	push	{r4, r5, r6, lr}
 801c062:	b96a      	cbnz	r2, 801c080 <strstr+0x22>
 801c064:	bd70      	pop	{r4, r5, r6, pc}
 801c066:	429a      	cmp	r2, r3
 801c068:	d109      	bne.n	801c07e <strstr+0x20>
 801c06a:	460c      	mov	r4, r1
 801c06c:	4605      	mov	r5, r0
 801c06e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c072:	2b00      	cmp	r3, #0
 801c074:	d0f6      	beq.n	801c064 <strstr+0x6>
 801c076:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c07a:	429e      	cmp	r6, r3
 801c07c:	d0f7      	beq.n	801c06e <strstr+0x10>
 801c07e:	3001      	adds	r0, #1
 801c080:	7803      	ldrb	r3, [r0, #0]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d1ef      	bne.n	801c066 <strstr+0x8>
 801c086:	4618      	mov	r0, r3
 801c088:	e7ec      	b.n	801c064 <strstr+0x6>
	...

0801c08c <_sbrk_r>:
 801c08c:	b538      	push	{r3, r4, r5, lr}
 801c08e:	4d06      	ldr	r5, [pc, #24]	@ (801c0a8 <_sbrk_r+0x1c>)
 801c090:	2300      	movs	r3, #0
 801c092:	4604      	mov	r4, r0
 801c094:	4608      	mov	r0, r1
 801c096:	602b      	str	r3, [r5, #0]
 801c098:	f7e8 fd2c 	bl	8004af4 <_sbrk>
 801c09c:	1c43      	adds	r3, r0, #1
 801c09e:	d102      	bne.n	801c0a6 <_sbrk_r+0x1a>
 801c0a0:	682b      	ldr	r3, [r5, #0]
 801c0a2:	b103      	cbz	r3, 801c0a6 <_sbrk_r+0x1a>
 801c0a4:	6023      	str	r3, [r4, #0]
 801c0a6:	bd38      	pop	{r3, r4, r5, pc}
 801c0a8:	2000af60 	.word	0x2000af60

0801c0ac <__errno>:
 801c0ac:	4b01      	ldr	r3, [pc, #4]	@ (801c0b4 <__errno+0x8>)
 801c0ae:	6818      	ldr	r0, [r3, #0]
 801c0b0:	4770      	bx	lr
 801c0b2:	bf00      	nop
 801c0b4:	20000094 	.word	0x20000094

0801c0b8 <__libc_init_array>:
 801c0b8:	b570      	push	{r4, r5, r6, lr}
 801c0ba:	4d0d      	ldr	r5, [pc, #52]	@ (801c0f0 <__libc_init_array+0x38>)
 801c0bc:	4c0d      	ldr	r4, [pc, #52]	@ (801c0f4 <__libc_init_array+0x3c>)
 801c0be:	1b64      	subs	r4, r4, r5
 801c0c0:	10a4      	asrs	r4, r4, #2
 801c0c2:	2600      	movs	r6, #0
 801c0c4:	42a6      	cmp	r6, r4
 801c0c6:	d109      	bne.n	801c0dc <__libc_init_array+0x24>
 801c0c8:	4d0b      	ldr	r5, [pc, #44]	@ (801c0f8 <__libc_init_array+0x40>)
 801c0ca:	4c0c      	ldr	r4, [pc, #48]	@ (801c0fc <__libc_init_array+0x44>)
 801c0cc:	f000 fba6 	bl	801c81c <_init>
 801c0d0:	1b64      	subs	r4, r4, r5
 801c0d2:	10a4      	asrs	r4, r4, #2
 801c0d4:	2600      	movs	r6, #0
 801c0d6:	42a6      	cmp	r6, r4
 801c0d8:	d105      	bne.n	801c0e6 <__libc_init_array+0x2e>
 801c0da:	bd70      	pop	{r4, r5, r6, pc}
 801c0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801c0e0:	4798      	blx	r3
 801c0e2:	3601      	adds	r6, #1
 801c0e4:	e7ee      	b.n	801c0c4 <__libc_init_array+0xc>
 801c0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801c0ea:	4798      	blx	r3
 801c0ec:	3601      	adds	r6, #1
 801c0ee:	e7f2      	b.n	801c0d6 <__libc_init_array+0x1e>
 801c0f0:	0801f5c0 	.word	0x0801f5c0
 801c0f4:	0801f5c0 	.word	0x0801f5c0
 801c0f8:	0801f5c0 	.word	0x0801f5c0
 801c0fc:	0801f5c4 	.word	0x0801f5c4

0801c100 <__retarget_lock_acquire_recursive>:
 801c100:	4770      	bx	lr

0801c102 <__retarget_lock_release_recursive>:
 801c102:	4770      	bx	lr

0801c104 <memcpy>:
 801c104:	440a      	add	r2, r1
 801c106:	4291      	cmp	r1, r2
 801c108:	f100 33ff 	add.w	r3, r0, #4294967295
 801c10c:	d100      	bne.n	801c110 <memcpy+0xc>
 801c10e:	4770      	bx	lr
 801c110:	b510      	push	{r4, lr}
 801c112:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c116:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c11a:	4291      	cmp	r1, r2
 801c11c:	d1f9      	bne.n	801c112 <memcpy+0xe>
 801c11e:	bd10      	pop	{r4, pc}

0801c120 <_free_r>:
 801c120:	b538      	push	{r3, r4, r5, lr}
 801c122:	4605      	mov	r5, r0
 801c124:	2900      	cmp	r1, #0
 801c126:	d041      	beq.n	801c1ac <_free_r+0x8c>
 801c128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c12c:	1f0c      	subs	r4, r1, #4
 801c12e:	2b00      	cmp	r3, #0
 801c130:	bfb8      	it	lt
 801c132:	18e4      	addlt	r4, r4, r3
 801c134:	f7ff fed8 	bl	801bee8 <__malloc_lock>
 801c138:	4a1d      	ldr	r2, [pc, #116]	@ (801c1b0 <_free_r+0x90>)
 801c13a:	6813      	ldr	r3, [r2, #0]
 801c13c:	b933      	cbnz	r3, 801c14c <_free_r+0x2c>
 801c13e:	6063      	str	r3, [r4, #4]
 801c140:	6014      	str	r4, [r2, #0]
 801c142:	4628      	mov	r0, r5
 801c144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c148:	f7ff bed4 	b.w	801bef4 <__malloc_unlock>
 801c14c:	42a3      	cmp	r3, r4
 801c14e:	d908      	bls.n	801c162 <_free_r+0x42>
 801c150:	6820      	ldr	r0, [r4, #0]
 801c152:	1821      	adds	r1, r4, r0
 801c154:	428b      	cmp	r3, r1
 801c156:	bf01      	itttt	eq
 801c158:	6819      	ldreq	r1, [r3, #0]
 801c15a:	685b      	ldreq	r3, [r3, #4]
 801c15c:	1809      	addeq	r1, r1, r0
 801c15e:	6021      	streq	r1, [r4, #0]
 801c160:	e7ed      	b.n	801c13e <_free_r+0x1e>
 801c162:	461a      	mov	r2, r3
 801c164:	685b      	ldr	r3, [r3, #4]
 801c166:	b10b      	cbz	r3, 801c16c <_free_r+0x4c>
 801c168:	42a3      	cmp	r3, r4
 801c16a:	d9fa      	bls.n	801c162 <_free_r+0x42>
 801c16c:	6811      	ldr	r1, [r2, #0]
 801c16e:	1850      	adds	r0, r2, r1
 801c170:	42a0      	cmp	r0, r4
 801c172:	d10b      	bne.n	801c18c <_free_r+0x6c>
 801c174:	6820      	ldr	r0, [r4, #0]
 801c176:	4401      	add	r1, r0
 801c178:	1850      	adds	r0, r2, r1
 801c17a:	4283      	cmp	r3, r0
 801c17c:	6011      	str	r1, [r2, #0]
 801c17e:	d1e0      	bne.n	801c142 <_free_r+0x22>
 801c180:	6818      	ldr	r0, [r3, #0]
 801c182:	685b      	ldr	r3, [r3, #4]
 801c184:	6053      	str	r3, [r2, #4]
 801c186:	4408      	add	r0, r1
 801c188:	6010      	str	r0, [r2, #0]
 801c18a:	e7da      	b.n	801c142 <_free_r+0x22>
 801c18c:	d902      	bls.n	801c194 <_free_r+0x74>
 801c18e:	230c      	movs	r3, #12
 801c190:	602b      	str	r3, [r5, #0]
 801c192:	e7d6      	b.n	801c142 <_free_r+0x22>
 801c194:	6820      	ldr	r0, [r4, #0]
 801c196:	1821      	adds	r1, r4, r0
 801c198:	428b      	cmp	r3, r1
 801c19a:	bf04      	itt	eq
 801c19c:	6819      	ldreq	r1, [r3, #0]
 801c19e:	685b      	ldreq	r3, [r3, #4]
 801c1a0:	6063      	str	r3, [r4, #4]
 801c1a2:	bf04      	itt	eq
 801c1a4:	1809      	addeq	r1, r1, r0
 801c1a6:	6021      	streq	r1, [r4, #0]
 801c1a8:	6054      	str	r4, [r2, #4]
 801c1aa:	e7ca      	b.n	801c142 <_free_r+0x22>
 801c1ac:	bd38      	pop	{r3, r4, r5, pc}
 801c1ae:	bf00      	nop
 801c1b0:	2000ae24 	.word	0x2000ae24

0801c1b4 <__ssputs_r>:
 801c1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1b8:	688e      	ldr	r6, [r1, #8]
 801c1ba:	461f      	mov	r7, r3
 801c1bc:	42be      	cmp	r6, r7
 801c1be:	680b      	ldr	r3, [r1, #0]
 801c1c0:	4682      	mov	sl, r0
 801c1c2:	460c      	mov	r4, r1
 801c1c4:	4690      	mov	r8, r2
 801c1c6:	d82d      	bhi.n	801c224 <__ssputs_r+0x70>
 801c1c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c1cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c1d0:	d026      	beq.n	801c220 <__ssputs_r+0x6c>
 801c1d2:	6965      	ldr	r5, [r4, #20]
 801c1d4:	6909      	ldr	r1, [r1, #16]
 801c1d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1da:	eba3 0901 	sub.w	r9, r3, r1
 801c1de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c1e2:	1c7b      	adds	r3, r7, #1
 801c1e4:	444b      	add	r3, r9
 801c1e6:	106d      	asrs	r5, r5, #1
 801c1e8:	429d      	cmp	r5, r3
 801c1ea:	bf38      	it	cc
 801c1ec:	461d      	movcc	r5, r3
 801c1ee:	0553      	lsls	r3, r2, #21
 801c1f0:	d527      	bpl.n	801c242 <__ssputs_r+0x8e>
 801c1f2:	4629      	mov	r1, r5
 801c1f4:	f7ff fdf8 	bl	801bde8 <_malloc_r>
 801c1f8:	4606      	mov	r6, r0
 801c1fa:	b360      	cbz	r0, 801c256 <__ssputs_r+0xa2>
 801c1fc:	6921      	ldr	r1, [r4, #16]
 801c1fe:	464a      	mov	r2, r9
 801c200:	f7ff ff80 	bl	801c104 <memcpy>
 801c204:	89a3      	ldrh	r3, [r4, #12]
 801c206:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c20e:	81a3      	strh	r3, [r4, #12]
 801c210:	6126      	str	r6, [r4, #16]
 801c212:	6165      	str	r5, [r4, #20]
 801c214:	444e      	add	r6, r9
 801c216:	eba5 0509 	sub.w	r5, r5, r9
 801c21a:	6026      	str	r6, [r4, #0]
 801c21c:	60a5      	str	r5, [r4, #8]
 801c21e:	463e      	mov	r6, r7
 801c220:	42be      	cmp	r6, r7
 801c222:	d900      	bls.n	801c226 <__ssputs_r+0x72>
 801c224:	463e      	mov	r6, r7
 801c226:	6820      	ldr	r0, [r4, #0]
 801c228:	4632      	mov	r2, r6
 801c22a:	4641      	mov	r1, r8
 801c22c:	f000 faa6 	bl	801c77c <memmove>
 801c230:	68a3      	ldr	r3, [r4, #8]
 801c232:	1b9b      	subs	r3, r3, r6
 801c234:	60a3      	str	r3, [r4, #8]
 801c236:	6823      	ldr	r3, [r4, #0]
 801c238:	4433      	add	r3, r6
 801c23a:	6023      	str	r3, [r4, #0]
 801c23c:	2000      	movs	r0, #0
 801c23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c242:	462a      	mov	r2, r5
 801c244:	f000 fab4 	bl	801c7b0 <_realloc_r>
 801c248:	4606      	mov	r6, r0
 801c24a:	2800      	cmp	r0, #0
 801c24c:	d1e0      	bne.n	801c210 <__ssputs_r+0x5c>
 801c24e:	6921      	ldr	r1, [r4, #16]
 801c250:	4650      	mov	r0, sl
 801c252:	f7ff ff65 	bl	801c120 <_free_r>
 801c256:	230c      	movs	r3, #12
 801c258:	f8ca 3000 	str.w	r3, [sl]
 801c25c:	89a3      	ldrh	r3, [r4, #12]
 801c25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c262:	81a3      	strh	r3, [r4, #12]
 801c264:	f04f 30ff 	mov.w	r0, #4294967295
 801c268:	e7e9      	b.n	801c23e <__ssputs_r+0x8a>
	...

0801c26c <_svfiprintf_r>:
 801c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c270:	4698      	mov	r8, r3
 801c272:	898b      	ldrh	r3, [r1, #12]
 801c274:	061b      	lsls	r3, r3, #24
 801c276:	b09d      	sub	sp, #116	@ 0x74
 801c278:	4607      	mov	r7, r0
 801c27a:	460d      	mov	r5, r1
 801c27c:	4614      	mov	r4, r2
 801c27e:	d510      	bpl.n	801c2a2 <_svfiprintf_r+0x36>
 801c280:	690b      	ldr	r3, [r1, #16]
 801c282:	b973      	cbnz	r3, 801c2a2 <_svfiprintf_r+0x36>
 801c284:	2140      	movs	r1, #64	@ 0x40
 801c286:	f7ff fdaf 	bl	801bde8 <_malloc_r>
 801c28a:	6028      	str	r0, [r5, #0]
 801c28c:	6128      	str	r0, [r5, #16]
 801c28e:	b930      	cbnz	r0, 801c29e <_svfiprintf_r+0x32>
 801c290:	230c      	movs	r3, #12
 801c292:	603b      	str	r3, [r7, #0]
 801c294:	f04f 30ff 	mov.w	r0, #4294967295
 801c298:	b01d      	add	sp, #116	@ 0x74
 801c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c29e:	2340      	movs	r3, #64	@ 0x40
 801c2a0:	616b      	str	r3, [r5, #20]
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c2a6:	2320      	movs	r3, #32
 801c2a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c2ac:	f8cd 800c 	str.w	r8, [sp, #12]
 801c2b0:	2330      	movs	r3, #48	@ 0x30
 801c2b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c450 <_svfiprintf_r+0x1e4>
 801c2b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c2ba:	f04f 0901 	mov.w	r9, #1
 801c2be:	4623      	mov	r3, r4
 801c2c0:	469a      	mov	sl, r3
 801c2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c2c6:	b10a      	cbz	r2, 801c2cc <_svfiprintf_r+0x60>
 801c2c8:	2a25      	cmp	r2, #37	@ 0x25
 801c2ca:	d1f9      	bne.n	801c2c0 <_svfiprintf_r+0x54>
 801c2cc:	ebba 0b04 	subs.w	fp, sl, r4
 801c2d0:	d00b      	beq.n	801c2ea <_svfiprintf_r+0x7e>
 801c2d2:	465b      	mov	r3, fp
 801c2d4:	4622      	mov	r2, r4
 801c2d6:	4629      	mov	r1, r5
 801c2d8:	4638      	mov	r0, r7
 801c2da:	f7ff ff6b 	bl	801c1b4 <__ssputs_r>
 801c2de:	3001      	adds	r0, #1
 801c2e0:	f000 80a7 	beq.w	801c432 <_svfiprintf_r+0x1c6>
 801c2e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c2e6:	445a      	add	r2, fp
 801c2e8:	9209      	str	r2, [sp, #36]	@ 0x24
 801c2ea:	f89a 3000 	ldrb.w	r3, [sl]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	f000 809f 	beq.w	801c432 <_svfiprintf_r+0x1c6>
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	f04f 32ff 	mov.w	r2, #4294967295
 801c2fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2fe:	f10a 0a01 	add.w	sl, sl, #1
 801c302:	9304      	str	r3, [sp, #16]
 801c304:	9307      	str	r3, [sp, #28]
 801c306:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c30a:	931a      	str	r3, [sp, #104]	@ 0x68
 801c30c:	4654      	mov	r4, sl
 801c30e:	2205      	movs	r2, #5
 801c310:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c314:	484e      	ldr	r0, [pc, #312]	@ (801c450 <_svfiprintf_r+0x1e4>)
 801c316:	f7e3 ff93 	bl	8000240 <memchr>
 801c31a:	9a04      	ldr	r2, [sp, #16]
 801c31c:	b9d8      	cbnz	r0, 801c356 <_svfiprintf_r+0xea>
 801c31e:	06d0      	lsls	r0, r2, #27
 801c320:	bf44      	itt	mi
 801c322:	2320      	movmi	r3, #32
 801c324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c328:	0711      	lsls	r1, r2, #28
 801c32a:	bf44      	itt	mi
 801c32c:	232b      	movmi	r3, #43	@ 0x2b
 801c32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c332:	f89a 3000 	ldrb.w	r3, [sl]
 801c336:	2b2a      	cmp	r3, #42	@ 0x2a
 801c338:	d015      	beq.n	801c366 <_svfiprintf_r+0xfa>
 801c33a:	9a07      	ldr	r2, [sp, #28]
 801c33c:	4654      	mov	r4, sl
 801c33e:	2000      	movs	r0, #0
 801c340:	f04f 0c0a 	mov.w	ip, #10
 801c344:	4621      	mov	r1, r4
 801c346:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c34a:	3b30      	subs	r3, #48	@ 0x30
 801c34c:	2b09      	cmp	r3, #9
 801c34e:	d94b      	bls.n	801c3e8 <_svfiprintf_r+0x17c>
 801c350:	b1b0      	cbz	r0, 801c380 <_svfiprintf_r+0x114>
 801c352:	9207      	str	r2, [sp, #28]
 801c354:	e014      	b.n	801c380 <_svfiprintf_r+0x114>
 801c356:	eba0 0308 	sub.w	r3, r0, r8
 801c35a:	fa09 f303 	lsl.w	r3, r9, r3
 801c35e:	4313      	orrs	r3, r2
 801c360:	9304      	str	r3, [sp, #16]
 801c362:	46a2      	mov	sl, r4
 801c364:	e7d2      	b.n	801c30c <_svfiprintf_r+0xa0>
 801c366:	9b03      	ldr	r3, [sp, #12]
 801c368:	1d19      	adds	r1, r3, #4
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	9103      	str	r1, [sp, #12]
 801c36e:	2b00      	cmp	r3, #0
 801c370:	bfbb      	ittet	lt
 801c372:	425b      	neglt	r3, r3
 801c374:	f042 0202 	orrlt.w	r2, r2, #2
 801c378:	9307      	strge	r3, [sp, #28]
 801c37a:	9307      	strlt	r3, [sp, #28]
 801c37c:	bfb8      	it	lt
 801c37e:	9204      	strlt	r2, [sp, #16]
 801c380:	7823      	ldrb	r3, [r4, #0]
 801c382:	2b2e      	cmp	r3, #46	@ 0x2e
 801c384:	d10a      	bne.n	801c39c <_svfiprintf_r+0x130>
 801c386:	7863      	ldrb	r3, [r4, #1]
 801c388:	2b2a      	cmp	r3, #42	@ 0x2a
 801c38a:	d132      	bne.n	801c3f2 <_svfiprintf_r+0x186>
 801c38c:	9b03      	ldr	r3, [sp, #12]
 801c38e:	1d1a      	adds	r2, r3, #4
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	9203      	str	r2, [sp, #12]
 801c394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c398:	3402      	adds	r4, #2
 801c39a:	9305      	str	r3, [sp, #20]
 801c39c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c460 <_svfiprintf_r+0x1f4>
 801c3a0:	7821      	ldrb	r1, [r4, #0]
 801c3a2:	2203      	movs	r2, #3
 801c3a4:	4650      	mov	r0, sl
 801c3a6:	f7e3 ff4b 	bl	8000240 <memchr>
 801c3aa:	b138      	cbz	r0, 801c3bc <_svfiprintf_r+0x150>
 801c3ac:	9b04      	ldr	r3, [sp, #16]
 801c3ae:	eba0 000a 	sub.w	r0, r0, sl
 801c3b2:	2240      	movs	r2, #64	@ 0x40
 801c3b4:	4082      	lsls	r2, r0
 801c3b6:	4313      	orrs	r3, r2
 801c3b8:	3401      	adds	r4, #1
 801c3ba:	9304      	str	r3, [sp, #16]
 801c3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3c0:	4824      	ldr	r0, [pc, #144]	@ (801c454 <_svfiprintf_r+0x1e8>)
 801c3c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c3c6:	2206      	movs	r2, #6
 801c3c8:	f7e3 ff3a 	bl	8000240 <memchr>
 801c3cc:	2800      	cmp	r0, #0
 801c3ce:	d036      	beq.n	801c43e <_svfiprintf_r+0x1d2>
 801c3d0:	4b21      	ldr	r3, [pc, #132]	@ (801c458 <_svfiprintf_r+0x1ec>)
 801c3d2:	bb1b      	cbnz	r3, 801c41c <_svfiprintf_r+0x1b0>
 801c3d4:	9b03      	ldr	r3, [sp, #12]
 801c3d6:	3307      	adds	r3, #7
 801c3d8:	f023 0307 	bic.w	r3, r3, #7
 801c3dc:	3308      	adds	r3, #8
 801c3de:	9303      	str	r3, [sp, #12]
 801c3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3e2:	4433      	add	r3, r6
 801c3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c3e6:	e76a      	b.n	801c2be <_svfiprintf_r+0x52>
 801c3e8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3ec:	460c      	mov	r4, r1
 801c3ee:	2001      	movs	r0, #1
 801c3f0:	e7a8      	b.n	801c344 <_svfiprintf_r+0xd8>
 801c3f2:	2300      	movs	r3, #0
 801c3f4:	3401      	adds	r4, #1
 801c3f6:	9305      	str	r3, [sp, #20]
 801c3f8:	4619      	mov	r1, r3
 801c3fa:	f04f 0c0a 	mov.w	ip, #10
 801c3fe:	4620      	mov	r0, r4
 801c400:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c404:	3a30      	subs	r2, #48	@ 0x30
 801c406:	2a09      	cmp	r2, #9
 801c408:	d903      	bls.n	801c412 <_svfiprintf_r+0x1a6>
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d0c6      	beq.n	801c39c <_svfiprintf_r+0x130>
 801c40e:	9105      	str	r1, [sp, #20]
 801c410:	e7c4      	b.n	801c39c <_svfiprintf_r+0x130>
 801c412:	fb0c 2101 	mla	r1, ip, r1, r2
 801c416:	4604      	mov	r4, r0
 801c418:	2301      	movs	r3, #1
 801c41a:	e7f0      	b.n	801c3fe <_svfiprintf_r+0x192>
 801c41c:	ab03      	add	r3, sp, #12
 801c41e:	9300      	str	r3, [sp, #0]
 801c420:	462a      	mov	r2, r5
 801c422:	4b0e      	ldr	r3, [pc, #56]	@ (801c45c <_svfiprintf_r+0x1f0>)
 801c424:	a904      	add	r1, sp, #16
 801c426:	4638      	mov	r0, r7
 801c428:	f3af 8000 	nop.w
 801c42c:	1c42      	adds	r2, r0, #1
 801c42e:	4606      	mov	r6, r0
 801c430:	d1d6      	bne.n	801c3e0 <_svfiprintf_r+0x174>
 801c432:	89ab      	ldrh	r3, [r5, #12]
 801c434:	065b      	lsls	r3, r3, #25
 801c436:	f53f af2d 	bmi.w	801c294 <_svfiprintf_r+0x28>
 801c43a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c43c:	e72c      	b.n	801c298 <_svfiprintf_r+0x2c>
 801c43e:	ab03      	add	r3, sp, #12
 801c440:	9300      	str	r3, [sp, #0]
 801c442:	462a      	mov	r2, r5
 801c444:	4b05      	ldr	r3, [pc, #20]	@ (801c45c <_svfiprintf_r+0x1f0>)
 801c446:	a904      	add	r1, sp, #16
 801c448:	4638      	mov	r0, r7
 801c44a:	f000 f879 	bl	801c540 <_printf_i>
 801c44e:	e7ed      	b.n	801c42c <_svfiprintf_r+0x1c0>
 801c450:	0801f582 	.word	0x0801f582
 801c454:	0801f58c 	.word	0x0801f58c
 801c458:	00000000 	.word	0x00000000
 801c45c:	0801c1b5 	.word	0x0801c1b5
 801c460:	0801f588 	.word	0x0801f588

0801c464 <_printf_common>:
 801c464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c468:	4616      	mov	r6, r2
 801c46a:	4698      	mov	r8, r3
 801c46c:	688a      	ldr	r2, [r1, #8]
 801c46e:	690b      	ldr	r3, [r1, #16]
 801c470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c474:	4293      	cmp	r3, r2
 801c476:	bfb8      	it	lt
 801c478:	4613      	movlt	r3, r2
 801c47a:	6033      	str	r3, [r6, #0]
 801c47c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c480:	4607      	mov	r7, r0
 801c482:	460c      	mov	r4, r1
 801c484:	b10a      	cbz	r2, 801c48a <_printf_common+0x26>
 801c486:	3301      	adds	r3, #1
 801c488:	6033      	str	r3, [r6, #0]
 801c48a:	6823      	ldr	r3, [r4, #0]
 801c48c:	0699      	lsls	r1, r3, #26
 801c48e:	bf42      	ittt	mi
 801c490:	6833      	ldrmi	r3, [r6, #0]
 801c492:	3302      	addmi	r3, #2
 801c494:	6033      	strmi	r3, [r6, #0]
 801c496:	6825      	ldr	r5, [r4, #0]
 801c498:	f015 0506 	ands.w	r5, r5, #6
 801c49c:	d106      	bne.n	801c4ac <_printf_common+0x48>
 801c49e:	f104 0a19 	add.w	sl, r4, #25
 801c4a2:	68e3      	ldr	r3, [r4, #12]
 801c4a4:	6832      	ldr	r2, [r6, #0]
 801c4a6:	1a9b      	subs	r3, r3, r2
 801c4a8:	42ab      	cmp	r3, r5
 801c4aa:	dc26      	bgt.n	801c4fa <_printf_common+0x96>
 801c4ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c4b0:	6822      	ldr	r2, [r4, #0]
 801c4b2:	3b00      	subs	r3, #0
 801c4b4:	bf18      	it	ne
 801c4b6:	2301      	movne	r3, #1
 801c4b8:	0692      	lsls	r2, r2, #26
 801c4ba:	d42b      	bmi.n	801c514 <_printf_common+0xb0>
 801c4bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c4c0:	4641      	mov	r1, r8
 801c4c2:	4638      	mov	r0, r7
 801c4c4:	47c8      	blx	r9
 801c4c6:	3001      	adds	r0, #1
 801c4c8:	d01e      	beq.n	801c508 <_printf_common+0xa4>
 801c4ca:	6823      	ldr	r3, [r4, #0]
 801c4cc:	6922      	ldr	r2, [r4, #16]
 801c4ce:	f003 0306 	and.w	r3, r3, #6
 801c4d2:	2b04      	cmp	r3, #4
 801c4d4:	bf02      	ittt	eq
 801c4d6:	68e5      	ldreq	r5, [r4, #12]
 801c4d8:	6833      	ldreq	r3, [r6, #0]
 801c4da:	1aed      	subeq	r5, r5, r3
 801c4dc:	68a3      	ldr	r3, [r4, #8]
 801c4de:	bf0c      	ite	eq
 801c4e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c4e4:	2500      	movne	r5, #0
 801c4e6:	4293      	cmp	r3, r2
 801c4e8:	bfc4      	itt	gt
 801c4ea:	1a9b      	subgt	r3, r3, r2
 801c4ec:	18ed      	addgt	r5, r5, r3
 801c4ee:	2600      	movs	r6, #0
 801c4f0:	341a      	adds	r4, #26
 801c4f2:	42b5      	cmp	r5, r6
 801c4f4:	d11a      	bne.n	801c52c <_printf_common+0xc8>
 801c4f6:	2000      	movs	r0, #0
 801c4f8:	e008      	b.n	801c50c <_printf_common+0xa8>
 801c4fa:	2301      	movs	r3, #1
 801c4fc:	4652      	mov	r2, sl
 801c4fe:	4641      	mov	r1, r8
 801c500:	4638      	mov	r0, r7
 801c502:	47c8      	blx	r9
 801c504:	3001      	adds	r0, #1
 801c506:	d103      	bne.n	801c510 <_printf_common+0xac>
 801c508:	f04f 30ff 	mov.w	r0, #4294967295
 801c50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c510:	3501      	adds	r5, #1
 801c512:	e7c6      	b.n	801c4a2 <_printf_common+0x3e>
 801c514:	18e1      	adds	r1, r4, r3
 801c516:	1c5a      	adds	r2, r3, #1
 801c518:	2030      	movs	r0, #48	@ 0x30
 801c51a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c51e:	4422      	add	r2, r4
 801c520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c528:	3302      	adds	r3, #2
 801c52a:	e7c7      	b.n	801c4bc <_printf_common+0x58>
 801c52c:	2301      	movs	r3, #1
 801c52e:	4622      	mov	r2, r4
 801c530:	4641      	mov	r1, r8
 801c532:	4638      	mov	r0, r7
 801c534:	47c8      	blx	r9
 801c536:	3001      	adds	r0, #1
 801c538:	d0e6      	beq.n	801c508 <_printf_common+0xa4>
 801c53a:	3601      	adds	r6, #1
 801c53c:	e7d9      	b.n	801c4f2 <_printf_common+0x8e>
	...

0801c540 <_printf_i>:
 801c540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c544:	7e0f      	ldrb	r7, [r1, #24]
 801c546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c548:	2f78      	cmp	r7, #120	@ 0x78
 801c54a:	4691      	mov	r9, r2
 801c54c:	4680      	mov	r8, r0
 801c54e:	460c      	mov	r4, r1
 801c550:	469a      	mov	sl, r3
 801c552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c556:	d807      	bhi.n	801c568 <_printf_i+0x28>
 801c558:	2f62      	cmp	r7, #98	@ 0x62
 801c55a:	d80a      	bhi.n	801c572 <_printf_i+0x32>
 801c55c:	2f00      	cmp	r7, #0
 801c55e:	f000 80d1 	beq.w	801c704 <_printf_i+0x1c4>
 801c562:	2f58      	cmp	r7, #88	@ 0x58
 801c564:	f000 80b8 	beq.w	801c6d8 <_printf_i+0x198>
 801c568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c56c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c570:	e03a      	b.n	801c5e8 <_printf_i+0xa8>
 801c572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c576:	2b15      	cmp	r3, #21
 801c578:	d8f6      	bhi.n	801c568 <_printf_i+0x28>
 801c57a:	a101      	add	r1, pc, #4	@ (adr r1, 801c580 <_printf_i+0x40>)
 801c57c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c580:	0801c5d9 	.word	0x0801c5d9
 801c584:	0801c5ed 	.word	0x0801c5ed
 801c588:	0801c569 	.word	0x0801c569
 801c58c:	0801c569 	.word	0x0801c569
 801c590:	0801c569 	.word	0x0801c569
 801c594:	0801c569 	.word	0x0801c569
 801c598:	0801c5ed 	.word	0x0801c5ed
 801c59c:	0801c569 	.word	0x0801c569
 801c5a0:	0801c569 	.word	0x0801c569
 801c5a4:	0801c569 	.word	0x0801c569
 801c5a8:	0801c569 	.word	0x0801c569
 801c5ac:	0801c6eb 	.word	0x0801c6eb
 801c5b0:	0801c617 	.word	0x0801c617
 801c5b4:	0801c6a5 	.word	0x0801c6a5
 801c5b8:	0801c569 	.word	0x0801c569
 801c5bc:	0801c569 	.word	0x0801c569
 801c5c0:	0801c70d 	.word	0x0801c70d
 801c5c4:	0801c569 	.word	0x0801c569
 801c5c8:	0801c617 	.word	0x0801c617
 801c5cc:	0801c569 	.word	0x0801c569
 801c5d0:	0801c569 	.word	0x0801c569
 801c5d4:	0801c6ad 	.word	0x0801c6ad
 801c5d8:	6833      	ldr	r3, [r6, #0]
 801c5da:	1d1a      	adds	r2, r3, #4
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	6032      	str	r2, [r6, #0]
 801c5e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c5e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c5e8:	2301      	movs	r3, #1
 801c5ea:	e09c      	b.n	801c726 <_printf_i+0x1e6>
 801c5ec:	6833      	ldr	r3, [r6, #0]
 801c5ee:	6820      	ldr	r0, [r4, #0]
 801c5f0:	1d19      	adds	r1, r3, #4
 801c5f2:	6031      	str	r1, [r6, #0]
 801c5f4:	0606      	lsls	r6, r0, #24
 801c5f6:	d501      	bpl.n	801c5fc <_printf_i+0xbc>
 801c5f8:	681d      	ldr	r5, [r3, #0]
 801c5fa:	e003      	b.n	801c604 <_printf_i+0xc4>
 801c5fc:	0645      	lsls	r5, r0, #25
 801c5fe:	d5fb      	bpl.n	801c5f8 <_printf_i+0xb8>
 801c600:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c604:	2d00      	cmp	r5, #0
 801c606:	da03      	bge.n	801c610 <_printf_i+0xd0>
 801c608:	232d      	movs	r3, #45	@ 0x2d
 801c60a:	426d      	negs	r5, r5
 801c60c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c610:	4858      	ldr	r0, [pc, #352]	@ (801c774 <_printf_i+0x234>)
 801c612:	230a      	movs	r3, #10
 801c614:	e011      	b.n	801c63a <_printf_i+0xfa>
 801c616:	6821      	ldr	r1, [r4, #0]
 801c618:	6833      	ldr	r3, [r6, #0]
 801c61a:	0608      	lsls	r0, r1, #24
 801c61c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c620:	d402      	bmi.n	801c628 <_printf_i+0xe8>
 801c622:	0649      	lsls	r1, r1, #25
 801c624:	bf48      	it	mi
 801c626:	b2ad      	uxthmi	r5, r5
 801c628:	2f6f      	cmp	r7, #111	@ 0x6f
 801c62a:	4852      	ldr	r0, [pc, #328]	@ (801c774 <_printf_i+0x234>)
 801c62c:	6033      	str	r3, [r6, #0]
 801c62e:	bf14      	ite	ne
 801c630:	230a      	movne	r3, #10
 801c632:	2308      	moveq	r3, #8
 801c634:	2100      	movs	r1, #0
 801c636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c63a:	6866      	ldr	r6, [r4, #4]
 801c63c:	60a6      	str	r6, [r4, #8]
 801c63e:	2e00      	cmp	r6, #0
 801c640:	db05      	blt.n	801c64e <_printf_i+0x10e>
 801c642:	6821      	ldr	r1, [r4, #0]
 801c644:	432e      	orrs	r6, r5
 801c646:	f021 0104 	bic.w	r1, r1, #4
 801c64a:	6021      	str	r1, [r4, #0]
 801c64c:	d04b      	beq.n	801c6e6 <_printf_i+0x1a6>
 801c64e:	4616      	mov	r6, r2
 801c650:	fbb5 f1f3 	udiv	r1, r5, r3
 801c654:	fb03 5711 	mls	r7, r3, r1, r5
 801c658:	5dc7      	ldrb	r7, [r0, r7]
 801c65a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c65e:	462f      	mov	r7, r5
 801c660:	42bb      	cmp	r3, r7
 801c662:	460d      	mov	r5, r1
 801c664:	d9f4      	bls.n	801c650 <_printf_i+0x110>
 801c666:	2b08      	cmp	r3, #8
 801c668:	d10b      	bne.n	801c682 <_printf_i+0x142>
 801c66a:	6823      	ldr	r3, [r4, #0]
 801c66c:	07df      	lsls	r7, r3, #31
 801c66e:	d508      	bpl.n	801c682 <_printf_i+0x142>
 801c670:	6923      	ldr	r3, [r4, #16]
 801c672:	6861      	ldr	r1, [r4, #4]
 801c674:	4299      	cmp	r1, r3
 801c676:	bfde      	ittt	le
 801c678:	2330      	movle	r3, #48	@ 0x30
 801c67a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c67e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c682:	1b92      	subs	r2, r2, r6
 801c684:	6122      	str	r2, [r4, #16]
 801c686:	f8cd a000 	str.w	sl, [sp]
 801c68a:	464b      	mov	r3, r9
 801c68c:	aa03      	add	r2, sp, #12
 801c68e:	4621      	mov	r1, r4
 801c690:	4640      	mov	r0, r8
 801c692:	f7ff fee7 	bl	801c464 <_printf_common>
 801c696:	3001      	adds	r0, #1
 801c698:	d14a      	bne.n	801c730 <_printf_i+0x1f0>
 801c69a:	f04f 30ff 	mov.w	r0, #4294967295
 801c69e:	b004      	add	sp, #16
 801c6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6a4:	6823      	ldr	r3, [r4, #0]
 801c6a6:	f043 0320 	orr.w	r3, r3, #32
 801c6aa:	6023      	str	r3, [r4, #0]
 801c6ac:	4832      	ldr	r0, [pc, #200]	@ (801c778 <_printf_i+0x238>)
 801c6ae:	2778      	movs	r7, #120	@ 0x78
 801c6b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c6b4:	6823      	ldr	r3, [r4, #0]
 801c6b6:	6831      	ldr	r1, [r6, #0]
 801c6b8:	061f      	lsls	r7, r3, #24
 801c6ba:	f851 5b04 	ldr.w	r5, [r1], #4
 801c6be:	d402      	bmi.n	801c6c6 <_printf_i+0x186>
 801c6c0:	065f      	lsls	r7, r3, #25
 801c6c2:	bf48      	it	mi
 801c6c4:	b2ad      	uxthmi	r5, r5
 801c6c6:	6031      	str	r1, [r6, #0]
 801c6c8:	07d9      	lsls	r1, r3, #31
 801c6ca:	bf44      	itt	mi
 801c6cc:	f043 0320 	orrmi.w	r3, r3, #32
 801c6d0:	6023      	strmi	r3, [r4, #0]
 801c6d2:	b11d      	cbz	r5, 801c6dc <_printf_i+0x19c>
 801c6d4:	2310      	movs	r3, #16
 801c6d6:	e7ad      	b.n	801c634 <_printf_i+0xf4>
 801c6d8:	4826      	ldr	r0, [pc, #152]	@ (801c774 <_printf_i+0x234>)
 801c6da:	e7e9      	b.n	801c6b0 <_printf_i+0x170>
 801c6dc:	6823      	ldr	r3, [r4, #0]
 801c6de:	f023 0320 	bic.w	r3, r3, #32
 801c6e2:	6023      	str	r3, [r4, #0]
 801c6e4:	e7f6      	b.n	801c6d4 <_printf_i+0x194>
 801c6e6:	4616      	mov	r6, r2
 801c6e8:	e7bd      	b.n	801c666 <_printf_i+0x126>
 801c6ea:	6833      	ldr	r3, [r6, #0]
 801c6ec:	6825      	ldr	r5, [r4, #0]
 801c6ee:	6961      	ldr	r1, [r4, #20]
 801c6f0:	1d18      	adds	r0, r3, #4
 801c6f2:	6030      	str	r0, [r6, #0]
 801c6f4:	062e      	lsls	r6, r5, #24
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	d501      	bpl.n	801c6fe <_printf_i+0x1be>
 801c6fa:	6019      	str	r1, [r3, #0]
 801c6fc:	e002      	b.n	801c704 <_printf_i+0x1c4>
 801c6fe:	0668      	lsls	r0, r5, #25
 801c700:	d5fb      	bpl.n	801c6fa <_printf_i+0x1ba>
 801c702:	8019      	strh	r1, [r3, #0]
 801c704:	2300      	movs	r3, #0
 801c706:	6123      	str	r3, [r4, #16]
 801c708:	4616      	mov	r6, r2
 801c70a:	e7bc      	b.n	801c686 <_printf_i+0x146>
 801c70c:	6833      	ldr	r3, [r6, #0]
 801c70e:	1d1a      	adds	r2, r3, #4
 801c710:	6032      	str	r2, [r6, #0]
 801c712:	681e      	ldr	r6, [r3, #0]
 801c714:	6862      	ldr	r2, [r4, #4]
 801c716:	2100      	movs	r1, #0
 801c718:	4630      	mov	r0, r6
 801c71a:	f7e3 fd91 	bl	8000240 <memchr>
 801c71e:	b108      	cbz	r0, 801c724 <_printf_i+0x1e4>
 801c720:	1b80      	subs	r0, r0, r6
 801c722:	6060      	str	r0, [r4, #4]
 801c724:	6863      	ldr	r3, [r4, #4]
 801c726:	6123      	str	r3, [r4, #16]
 801c728:	2300      	movs	r3, #0
 801c72a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c72e:	e7aa      	b.n	801c686 <_printf_i+0x146>
 801c730:	6923      	ldr	r3, [r4, #16]
 801c732:	4632      	mov	r2, r6
 801c734:	4649      	mov	r1, r9
 801c736:	4640      	mov	r0, r8
 801c738:	47d0      	blx	sl
 801c73a:	3001      	adds	r0, #1
 801c73c:	d0ad      	beq.n	801c69a <_printf_i+0x15a>
 801c73e:	6823      	ldr	r3, [r4, #0]
 801c740:	079b      	lsls	r3, r3, #30
 801c742:	d413      	bmi.n	801c76c <_printf_i+0x22c>
 801c744:	68e0      	ldr	r0, [r4, #12]
 801c746:	9b03      	ldr	r3, [sp, #12]
 801c748:	4298      	cmp	r0, r3
 801c74a:	bfb8      	it	lt
 801c74c:	4618      	movlt	r0, r3
 801c74e:	e7a6      	b.n	801c69e <_printf_i+0x15e>
 801c750:	2301      	movs	r3, #1
 801c752:	4632      	mov	r2, r6
 801c754:	4649      	mov	r1, r9
 801c756:	4640      	mov	r0, r8
 801c758:	47d0      	blx	sl
 801c75a:	3001      	adds	r0, #1
 801c75c:	d09d      	beq.n	801c69a <_printf_i+0x15a>
 801c75e:	3501      	adds	r5, #1
 801c760:	68e3      	ldr	r3, [r4, #12]
 801c762:	9903      	ldr	r1, [sp, #12]
 801c764:	1a5b      	subs	r3, r3, r1
 801c766:	42ab      	cmp	r3, r5
 801c768:	dcf2      	bgt.n	801c750 <_printf_i+0x210>
 801c76a:	e7eb      	b.n	801c744 <_printf_i+0x204>
 801c76c:	2500      	movs	r5, #0
 801c76e:	f104 0619 	add.w	r6, r4, #25
 801c772:	e7f5      	b.n	801c760 <_printf_i+0x220>
 801c774:	0801f593 	.word	0x0801f593
 801c778:	0801f5a4 	.word	0x0801f5a4

0801c77c <memmove>:
 801c77c:	4288      	cmp	r0, r1
 801c77e:	b510      	push	{r4, lr}
 801c780:	eb01 0402 	add.w	r4, r1, r2
 801c784:	d902      	bls.n	801c78c <memmove+0x10>
 801c786:	4284      	cmp	r4, r0
 801c788:	4623      	mov	r3, r4
 801c78a:	d807      	bhi.n	801c79c <memmove+0x20>
 801c78c:	1e43      	subs	r3, r0, #1
 801c78e:	42a1      	cmp	r1, r4
 801c790:	d008      	beq.n	801c7a4 <memmove+0x28>
 801c792:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c796:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c79a:	e7f8      	b.n	801c78e <memmove+0x12>
 801c79c:	4402      	add	r2, r0
 801c79e:	4601      	mov	r1, r0
 801c7a0:	428a      	cmp	r2, r1
 801c7a2:	d100      	bne.n	801c7a6 <memmove+0x2a>
 801c7a4:	bd10      	pop	{r4, pc}
 801c7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c7aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c7ae:	e7f7      	b.n	801c7a0 <memmove+0x24>

0801c7b0 <_realloc_r>:
 801c7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7b4:	4607      	mov	r7, r0
 801c7b6:	4614      	mov	r4, r2
 801c7b8:	460d      	mov	r5, r1
 801c7ba:	b921      	cbnz	r1, 801c7c6 <_realloc_r+0x16>
 801c7bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c7c0:	4611      	mov	r1, r2
 801c7c2:	f7ff bb11 	b.w	801bde8 <_malloc_r>
 801c7c6:	b92a      	cbnz	r2, 801c7d4 <_realloc_r+0x24>
 801c7c8:	f7ff fcaa 	bl	801c120 <_free_r>
 801c7cc:	4625      	mov	r5, r4
 801c7ce:	4628      	mov	r0, r5
 801c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7d4:	f000 f81a 	bl	801c80c <_malloc_usable_size_r>
 801c7d8:	4284      	cmp	r4, r0
 801c7da:	4606      	mov	r6, r0
 801c7dc:	d802      	bhi.n	801c7e4 <_realloc_r+0x34>
 801c7de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c7e2:	d8f4      	bhi.n	801c7ce <_realloc_r+0x1e>
 801c7e4:	4621      	mov	r1, r4
 801c7e6:	4638      	mov	r0, r7
 801c7e8:	f7ff fafe 	bl	801bde8 <_malloc_r>
 801c7ec:	4680      	mov	r8, r0
 801c7ee:	b908      	cbnz	r0, 801c7f4 <_realloc_r+0x44>
 801c7f0:	4645      	mov	r5, r8
 801c7f2:	e7ec      	b.n	801c7ce <_realloc_r+0x1e>
 801c7f4:	42b4      	cmp	r4, r6
 801c7f6:	4622      	mov	r2, r4
 801c7f8:	4629      	mov	r1, r5
 801c7fa:	bf28      	it	cs
 801c7fc:	4632      	movcs	r2, r6
 801c7fe:	f7ff fc81 	bl	801c104 <memcpy>
 801c802:	4629      	mov	r1, r5
 801c804:	4638      	mov	r0, r7
 801c806:	f7ff fc8b 	bl	801c120 <_free_r>
 801c80a:	e7f1      	b.n	801c7f0 <_realloc_r+0x40>

0801c80c <_malloc_usable_size_r>:
 801c80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c810:	1f18      	subs	r0, r3, #4
 801c812:	2b00      	cmp	r3, #0
 801c814:	bfbc      	itt	lt
 801c816:	580b      	ldrlt	r3, [r1, r0]
 801c818:	18c0      	addlt	r0, r0, r3
 801c81a:	4770      	bx	lr

0801c81c <_init>:
 801c81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c81e:	bf00      	nop
 801c820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c822:	bc08      	pop	{r3}
 801c824:	469e      	mov	lr, r3
 801c826:	4770      	bx	lr

0801c828 <_fini>:
 801c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c82a:	bf00      	nop
 801c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c82e:	bc08      	pop	{r3}
 801c830:	469e      	mov	lr, r3
 801c832:	4770      	bx	lr
